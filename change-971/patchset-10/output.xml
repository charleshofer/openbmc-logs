<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0 (Python 2.7.12 on linux2)" generated="20161110 16:18:21.879">
<suite id="s1" name="Tests" source="/tmp/root/5497/obmc-robot/tests">
<suite id="s1-s1" name="Security" source="/tmp/root/5497/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/root/5497/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>https://${OPENBMC_HOST}/</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:22.285">Creating Session using : alias=openbmc, url=https://9.3.23.30/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:22.285" status="PASS" endtime="20161110 16:18:22.286"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:22.287">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:22.286" status="PASS" endtime="20161110 16:18:22.287"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:22.287">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:22.287" status="PASS" endtime="20161110 16:18:22.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:22.288">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:22.287" status="PASS" endtime="20161110 16:18:22.288"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:22.620">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:22.620">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:22.288" status="PASS" endtime="20161110 16:18:22.620"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:24.999">Get Request using : alias=openbmc, uri=/list, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:18:24.999">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:22.621" status="PASS" endtime="20161110 16:18:24.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:25.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:25.000" status="PASS" endtime="20161110 16:18:25.000"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:25.002">To JSON using : content={
  "data": [
    "/org/openbmc/control", 
    "/org/openbmc/sensors/host/powercap", 
    "/org/openbmc/UserManager/Group", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28", 
    "/org/openbmc/control/power0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25", 
    "/org/openbmc/settings/host0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event", 
    "/org/openbmc/inventory/system/systemevent", 
    "/org/openbmc/sensors/host/cpu0/OccStatus", 
    "/org/openbmc/sensors/host/cpu1/OccStatus", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
    "/org/openbmc/control/checkstop0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7", 
    "/org/openbmc/sensors/tach/fan0L", 
    "/org/openbmc/inventory/system/chassis/sas_expander", 
    "/org/openbmc/sensors/tach/fan0H", 
    "/org/openbmc/watchdog", 
    "/org/openbmc/inventory/system/misc", 
    "/org/openbmc/UserManager/Users", 
    "/org/openbmc/records/events/268", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10", 
    "/org/openbmc/records/events", 
    "/org/openbmc/sensors/tach/fan1H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29", 
    "/org/openbmc/sensors/tach/fan1L", 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4", 
    "/org/openbmc/sensors/speed/fan1", 
    "/org/openbmc/sensors/speed/fan0", 
    "/org/openbmc/sensors/speed/fan3", 
    "/org/openbmc/sensors/speed/fan2", 
    "/org/openbmc/sensors/speed/fan5", 
    "/org/openbmc/sensors/speed/fan4", 
    "/org/openbmc/managers/Download", 
    "/org/openbmc/sensors/HSCA/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14", 
    "/org/openbmc/control/flash/bmc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11", 
    "/org/openbmc/managers/System", 
    "/org/openbmc/control/led/identify", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9", 
    "/org/openbmc/control/bmc0", 
    "/org/openbmc/control/flash/bios", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3", 
    "/org/openbmc/control/fans", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2", 
    "/org/openbmc/watchdog/host0", 
    "/org/openbmc/inventory/system/chassis", 
    "/org/openbmc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1", 
    "/org/openbmc/HostServices", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5", 
    "/org/openbmc/buttons", 
    "/org/openbmc/control/host0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM1", 
    "/org/openbmc/sensors/voltage/P0V97_CPU0", 
    "/org/openbmc/sensors/voltage/P0V97_CPU1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12", 
    "/org/openbmc/inventory", 
    "/org/openbmc/sensors/tach/fan4H", 
    "/org/openbmc/sensors/tach/fan4L", 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock", 
    "/org/openbmc/control/led/heartbeat", 
    "/org/openbmc/control/flash", 
    "/org/openbmc/sensors/HSCB/Iout", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1", 
    "/org/openbmc/buttons/reset0", 
    "/org/openbmc/HostIpmi/1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1", 
    "/org/openbmc/control/led", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0", 
    "/org/openbmc/sensors/host/BootCount", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4", 
    "/org/openbmc/sensors/tach/fan5L", 
    "/org/openbmc/sensors/host/BootProgress", 
    "/org/openbmc/sensors/tach/fan5H", 
    "/org/openbmc/records/events/268/fru", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3", 
    "/org/openbmc/control/chassis0", 
    "/org/openbmc/inventory/system/chassis/hdd_backplane", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7", 
    "/org/openbmc/buttons/power0", 
    "/org/openbmc/UserManager/Groups", 
    "/org/openbmc/sensors/HSCA/Iout", 
    "/org/openbmc/inventory/system", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8", 
    "/org/openbmc/inventory/system/bios", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser", 
    "/org/openbmc/sensors/host/OperatingSystemStatus", 
    "/org/openbmc/sensors/tach/fan2L", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2", 
    "/org/openbmc/control/led/beep", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0", 
    "/org/openbmc/sensors/tach/fan2H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4", 
    "/org/openbmc/inventory/system/chassis/fan4", 
    "/org/openbmc/inventory/system/chassis/fan5", 
    "/org/openbmc/inventory/system/chassis/fan2", 
    "/org/openbmc/inventory/system/chassis/fan3", 
    "/org/openbmc/inventory/system/chassis/fan0", 
    "/org/openbmc/inventory/system/chassis/fan1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15", 
    "/org/openbmc/sensors/temperature/rtc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11", 
    "/org/openbmc/NetworkManager/Interface", 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10", 
    "/org/openbmc/inventory/system/chassis/motherboard/apss", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18", 
    "/org/openbmc/inventory/system/chassis/io_board", 
    "/org/openbmc/UserManager/User", 
    "/org/openbmc/sensors", 
    "/org/openbmc/sensors/temperature/ambient", 
    "/org/openbmc/sensors/HSCB/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1", 
    "/org/openbmc/inventory/system/chassis/motherboard", 
    "/org/openbmc/sensors/tach/fan3L", 
    "/org/openbmc/sensors/tach/fan3H"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:25.002">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:25.003">${jsondata} = {u'data': [u'/org/openbmc/control', u'/org/openbmc/sensors/host/powercap', u'/org/openbmc/UserManager/Group', u'/org/openbmc/inventory/system/chassis/io_board/pcie_slot2', u'/org/openbmc/inventory/sys...</msg>
<status starttime="20161110 16:18:25.001" status="PASS" endtime="20161110 16:18:25.003"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${jsondata}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:25.004">Length is 3</msg>
<status starttime="20161110 16:18:25.003" status="PASS" endtime="20161110 16:18:25.004"></status>
</kw>
<kw name="Log FFDC" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 16:18:25.005" status="PASS" endtime="20161110 16:18:25.009"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:25.011" html="yes">Created directory '&lt;a href="file:///tmp/root/5497/obmc-robot/logs"&gt;/tmp/root/5497/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20161110 16:18:25.010" status="PASS" endtime="20161110 16:18:25.011"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:18:25.013">File '/tmp/root/5497/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20161110 16:18:25.012" status="FAIL" endtime="20161110 16:18:25.013"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:25.013">${exist} = False</msg>
<status starttime="20161110 16:18:25.011" status="PASS" endtime="20161110 16:18:25.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:25.017" html="yes">Created file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:18:25.017" status="PASS" endtime="20161110 16:18:25.017"></status>
</kw>
<status starttime="20161110 16:18:25.013" status="PASS" endtime="20161110 16:18:25.017"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:25.018">${cur_time} = 2016-11-10 16:18:25:017838</msg>
<status starttime="20161110 16:18:25.018" status="PASS" endtime="20161110 16:18:25.018"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:25.018">${cur_time} = 20161110161825017838</msg>
<status starttime="20161110 16:18:25.018" status="PASS" endtime="20161110 16:18:25.019"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:25.019">${cur_time} = 20161110161825017838</msg>
<status starttime="20161110 16:18:25.017" status="PASS" endtime="20161110 16:18:25.019"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:25.019" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:18:25.019" status="PASS" endtime="20161110 16:18:25.019"></status>
</kw>
<status starttime="20161110 16:18:25.010" status="PASS" endtime="20161110 16:18:25.020"></status>
</kw>
<status starttime="20161110 16:18:25.004" status="PASS" endtime="20161110 16:18:25.020"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20161110 16:18:22.285" status="PASS" endtime="20161110 16:18:25.020" critical="yes"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161110 16:18:25.021">Delete All Sessions</msg>
<status starttime="20161110 16:18:25.020" status="PASS" endtime="20161110 16:18:25.021"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20161110 16:18:21.902" status="PASS" endtime="20161110 16:18:25.021"></status>
</suite>
<status starttime="20161110 16:18:21.901" status="PASS" endtime="20161110 16:18:25.022"></status>
</suite>
<suite id="s1-s2" name="Test Association" source="/tmp/root/5497/obmc-robot/tests/test_association.robot">
<kw name="Suite Initialization Setup" type="setup">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:18:25.044">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 16:18:25.043" status="FAIL" endtime="20161110 16:18:25.044"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:25.044">${has_host} = False</msg>
<status starttime="20161110 16:18:25.043" status="PASS" endtime="20161110 16:18:25.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 16:18:25.047" status="PASS" endtime="20161110 16:18:25.048"></status>
</kw>
<status starttime="20161110 16:18:25.044" status="PASS" endtime="20161110 16:18:25.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:25.051">${port_num} = 22</msg>
<status starttime="20161110 16:18:25.051" status="PASS" endtime="20161110 16:18:25.051"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:25.052">${SSH_PORT} = 22</msg>
<status starttime="20161110 16:18:25.051" status="PASS" endtime="20161110 16:18:25.052"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:25.052">${https_num} = 443</msg>
<status starttime="20161110 16:18:25.052" status="PASS" endtime="20161110 16:18:25.052"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:25.053">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 16:18:25.052" status="PASS" endtime="20161110 16:18:25.053"></status>
</kw>
<status starttime="20161110 16:18:25.051" status="PASS" endtime="20161110 16:18:25.053"></status>
</kw>
<status starttime="20161110 16:18:25.048" status="PASS" endtime="20161110 16:18:25.053"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:18:25.054">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 16:18:25.053" status="FAIL" endtime="20161110 16:18:25.054"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:25.054">${has_port} = False</msg>
<status starttime="20161110 16:18:25.053" status="PASS" endtime="20161110 16:18:25.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 16:18:25.057" status="PASS" endtime="20161110 16:18:25.058"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 16:18:25.058" status="PASS" endtime="20161110 16:18:25.058"></status>
</kw>
<status starttime="20161110 16:18:25.057" status="PASS" endtime="20161110 16:18:25.059"></status>
</kw>
<status starttime="20161110 16:18:25.054" status="PASS" endtime="20161110 16:18:25.059"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:25.059">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 16:18:27.258">Read output:</msg>
<status starttime="20161110 16:18:25.059" status="PASS" endtime="20161110 16:18:27.258"></status>
</kw>
<status starttime="20161110 16:18:25.043" status="PASS" endtime="20161110 16:18:27.258"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.261">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161110 16:18:27.261" status="PASS" endtime="20161110 16:18:27.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.262">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:27.262" status="PASS" endtime="20161110 16:18:27.263"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:18:27.263" status="PASS" endtime="20161110 16:18:27.263"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.265">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:27.264" status="PASS" endtime="20161110 16:18:27.265"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:27.266">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:27.266" status="PASS" endtime="20161110 16:18:27.266"></status>
</kw>
<status starttime="20161110 16:18:27.265" status="PASS" endtime="20161110 16:18:27.266"></status>
</kw>
<status starttime="20161110 16:18:27.263" status="PASS" endtime="20161110 16:18:27.266"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:27.267">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:27.267" status="PASS" endtime="20161110 16:18:27.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.269">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:27.268" status="PASS" endtime="20161110 16:18:27.269"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.270">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:27.269" status="PASS" endtime="20161110 16:18:27.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.270">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:27.270" status="PASS" endtime="20161110 16:18:27.270"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.601">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:27.601">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:27.271" status="PASS" endtime="20161110 16:18:27.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:27.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:27.602" status="PASS" endtime="20161110 16:18:27.603"></status>
</kw>
<status starttime="20161110 16:18:27.267" status="PASS" endtime="20161110 16:18:27.603"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.850">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:27.851">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:27.603" status="PASS" endtime="20161110 16:18:27.851"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.852">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:27.852" status="PASS" endtime="20161110 16:18:27.852"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:27.853">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:27.853" status="PASS" endtime="20161110 16:18:27.854"></status>
</kw>
<status starttime="20161110 16:18:27.853" status="PASS" endtime="20161110 16:18:27.854"></status>
</kw>
<status starttime="20161110 16:18:27.851" status="PASS" endtime="20161110 16:18:27.854"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:27.854">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:27.260" status="PASS" endtime="20161110 16:18:27.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:27.855">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:27.855" status="PASS" endtime="20161110 16:18:27.855"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.856">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 16:18:27.856" status="PASS" endtime="20161110 16:18:27.856"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.858">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 16:18:27.857" status="PASS" endtime="20161110 16:18:27.858"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:27.860">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 16:18:27.859" status="PASS" endtime="20161110 16:18:27.860"></status>
</kw>
<status starttime="20161110 16:18:27.858" status="PASS" endtime="20161110 16:18:27.860"></status>
</kw>
<status starttime="20161110 16:18:27.857" status="PASS" endtime="20161110 16:18:27.860"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:27.861">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:27.861" status="PASS" endtime="20161110 16:18:27.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.862">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:27.862" status="PASS" endtime="20161110 16:18:27.863"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.863">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:27.863" status="PASS" endtime="20161110 16:18:27.863"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:27.864">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:27.863" status="PASS" endtime="20161110 16:18:27.864"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.174">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:30.174">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:27.864" status="PASS" endtime="20161110 16:18:30.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:30.175">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:30.174" status="PASS" endtime="20161110 16:18:30.175"></status>
</kw>
<status starttime="20161110 16:18:27.860" status="PASS" endtime="20161110 16:18:30.176"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.239">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:18:30.239">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:30.176" status="PASS" endtime="20161110 16:18:30.239"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.241">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:30.240" status="PASS" endtime="20161110 16:18:30.241"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:30.243">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:30.242" status="PASS" endtime="20161110 16:18:30.243"></status>
</kw>
<status starttime="20161110 16:18:30.241" status="PASS" endtime="20161110 16:18:30.243"></status>
</kw>
<status starttime="20161110 16:18:30.239" status="PASS" endtime="20161110 16:18:30.243"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:30.244">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:27.855" status="PASS" endtime="20161110 16:18:30.244"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.244">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:30.244">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:30.245">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:30.244" status="PASS" endtime="20161110 16:18:30.245"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:30.246">Length is 0</msg>
<status starttime="20161110 16:18:30.245" status="PASS" endtime="20161110 16:18:30.246"></status>
</kw>
<status starttime="20161110 16:18:27.259" status="PASS" endtime="20161110 16:18:30.246"></status>
</kw>
<status starttime="20161110 16:18:27.259" status="PASS" endtime="20161110 16:18:30.246"></status>
</kw>
<status starttime="20161110 16:18:25.042" status="PASS" endtime="20161110 16:18:30.246"></status>
</kw>
<test id="s1-s2-t1" name="Create error log on single FRU">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.250">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161110 16:18:30.249" status="PASS" endtime="20161110 16:18:30.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.250">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:30.250" status="PASS" endtime="20161110 16:18:30.251"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:18:30.251" status="PASS" endtime="20161110 16:18:30.251"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.253">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:30.252" status="PASS" endtime="20161110 16:18:30.253"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:30.254">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:30.254" status="PASS" endtime="20161110 16:18:30.254"></status>
</kw>
<status starttime="20161110 16:18:30.253" status="PASS" endtime="20161110 16:18:30.254"></status>
</kw>
<status starttime="20161110 16:18:30.252" status="PASS" endtime="20161110 16:18:30.254"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:30.255">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:30.255" status="PASS" endtime="20161110 16:18:30.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.256">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:30.256" status="PASS" endtime="20161110 16:18:30.256"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.257">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:30.256" status="PASS" endtime="20161110 16:18:30.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:30.257" status="PASS" endtime="20161110 16:18:30.257"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.589">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:30.589">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:30.257" status="PASS" endtime="20161110 16:18:30.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:30.590">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:30.590" status="PASS" endtime="20161110 16:18:30.590"></status>
</kw>
<status starttime="20161110 16:18:30.254" status="PASS" endtime="20161110 16:18:30.590"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.818">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:30.818">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:30.590" status="PASS" endtime="20161110 16:18:30.818"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.820">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:30.820" status="PASS" endtime="20161110 16:18:30.820"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:30.822">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:30.821" status="PASS" endtime="20161110 16:18:30.822"></status>
</kw>
<status starttime="20161110 16:18:30.821" status="PASS" endtime="20161110 16:18:30.822"></status>
</kw>
<status starttime="20161110 16:18:30.819" status="PASS" endtime="20161110 16:18:30.822"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:30.823">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:30.248" status="PASS" endtime="20161110 16:18:30.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:30.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:30.823" status="PASS" endtime="20161110 16:18:30.824"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.825">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 16:18:30.825" status="PASS" endtime="20161110 16:18:30.825"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.828">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 16:18:30.827" status="PASS" endtime="20161110 16:18:30.828"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:30.829">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 16:18:30.829" status="PASS" endtime="20161110 16:18:30.830"></status>
</kw>
<status starttime="20161110 16:18:30.828" status="PASS" endtime="20161110 16:18:30.830"></status>
</kw>
<status starttime="20161110 16:18:30.826" status="PASS" endtime="20161110 16:18:30.830"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:30.831">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:30.831" status="PASS" endtime="20161110 16:18:30.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.833">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:30.832" status="PASS" endtime="20161110 16:18:30.833"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.833">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:30.833" status="PASS" endtime="20161110 16:18:30.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:30.834">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:30.833" status="PASS" endtime="20161110 16:18:30.834"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:31.160">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:31.160">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:30.834" status="PASS" endtime="20161110 16:18:31.160"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:31.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:31.161" status="PASS" endtime="20161110 16:18:31.161"></status>
</kw>
<status starttime="20161110 16:18:30.830" status="PASS" endtime="20161110 16:18:31.161"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:31.219">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:18:31.219">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:31.161" status="PASS" endtime="20161110 16:18:31.219"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:31.220">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:31.220" status="PASS" endtime="20161110 16:18:31.220"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:31.221">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:31.221" status="PASS" endtime="20161110 16:18:31.221"></status>
</kw>
<status starttime="20161110 16:18:31.220" status="PASS" endtime="20161110 16:18:31.221"></status>
</kw>
<status starttime="20161110 16:18:31.219" status="PASS" endtime="20161110 16:18:31.221"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:31.222">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:30.824" status="PASS" endtime="20161110 16:18:31.222"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:31.222">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:31.222">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:31.222">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:31.222" status="PASS" endtime="20161110 16:18:31.222"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:31.223">Length is 0</msg>
<status starttime="20161110 16:18:31.223" status="PASS" endtime="20161110 16:18:31.223"></status>
</kw>
<status starttime="20161110 16:18:30.248" status="PASS" endtime="20161110 16:18:31.223"></status>
</kw>
<status starttime="20161110 16:18:30.247" status="PASS" endtime="20161110 16:18:31.223"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:31.224">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161110 16:18:31.524">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:18:31.525">${elog} = q 269</msg>
<msg level="INFO" timestamp="20161110 16:18:31.525">${stderr} = </msg>
<status starttime="20161110 16:18:31.223" status="PASS" endtime="20161110 16:18:31.525"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:31.525">Length is 0</msg>
<status starttime="20161110 16:18:31.525" status="PASS" endtime="20161110 16:18:31.525"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:31.527">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 16:18:31.527" status="PASS" endtime="20161110 16:18:31.527"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:31.528">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 16:18:31.528" status="PASS" endtime="20161110 16:18:31.529"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:31.529">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 16:18:31.529" status="PASS" endtime="20161110 16:18:31.529"></status>
</kw>
<status starttime="20161110 16:18:31.529" status="PASS" endtime="20161110 16:18:31.529"></status>
</kw>
<status starttime="20161110 16:18:31.527" status="PASS" endtime="20161110 16:18:31.530"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:31.530">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:31.530" status="PASS" endtime="20161110 16:18:31.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:31.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:31.531" status="PASS" endtime="20161110 16:18:31.532"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:31.532">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:31.532" status="PASS" endtime="20161110 16:18:31.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:31.533">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:31.533" status="PASS" endtime="20161110 16:18:31.533"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:32.157">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:32.158">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:31.533" status="PASS" endtime="20161110 16:18:32.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:32.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:32.158" status="PASS" endtime="20161110 16:18:32.159"></status>
</kw>
<status starttime="20161110 16:18:31.530" status="PASS" endtime="20161110 16:18:32.159"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.168">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:18:33.169">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:32.160" status="PASS" endtime="20161110 16:18:33.169"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.171">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/269"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:33.170" status="PASS" endtime="20161110 16:18:33.171"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:33.173">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/269"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:33.172" status="PASS" endtime="20161110 16:18:33.173"></status>
</kw>
<status starttime="20161110 16:18:33.171" status="PASS" endtime="20161110 16:18:33.173"></status>
</kw>
<status starttime="20161110 16:18:33.169" status="PASS" endtime="20161110 16:18:33.173"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:33.173">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:31.526" status="PASS" endtime="20161110 16:18:33.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:33.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:33.173" status="PASS" endtime="20161110 16:18:33.174"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.174">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/269"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:33.174">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:33.174">${jsondata} = {u'data': [u'/org/openbmc/records/events/269'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:33.174" status="PASS" endtime="20161110 16:18:33.174"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:33.175">${log_list} = [u'/org/openbmc/records/events/269']</msg>
<status starttime="20161110 16:18:31.525" status="PASS" endtime="20161110 16:18:33.175"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status starttime="20161110 16:18:33.175" status="PASS" endtime="20161110 16:18:33.175"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.176">${association_uri} = /org/openbmc/records/events/269/fru</msg>
<status starttime="20161110 16:18:33.175" status="PASS" endtime="20161110 16:18:33.176"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.177">${base_uri} = /org/openbmc/records/events/269/fru/attr/endpoints</msg>
<status starttime="20161110 16:18:33.177" status="PASS" endtime="20161110 16:18:33.177"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.178">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/269/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 16:18:33.178" status="PASS" endtime="20161110 16:18:33.178"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:33.179">URI:https://9.3.23.30:443/org/openbmc/records/events/269/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 16:18:33.179" status="PASS" endtime="20161110 16:18:33.179"></status>
</kw>
<status starttime="20161110 16:18:33.179" status="PASS" endtime="20161110 16:18:33.179"></status>
</kw>
<status starttime="20161110 16:18:33.177" status="PASS" endtime="20161110 16:18:33.179"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:33.180">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:33.180" status="PASS" endtime="20161110 16:18:33.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.181">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:33.181" status="PASS" endtime="20161110 16:18:33.181"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.182">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:33.181" status="PASS" endtime="20161110 16:18:33.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.182">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:33.182" status="PASS" endtime="20161110 16:18:33.182"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.516">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:33.516">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:33.182" status="PASS" endtime="20161110 16:18:33.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:33.517">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:33.516" status="PASS" endtime="20161110 16:18:33.517"></status>
</kw>
<status starttime="20161110 16:18:33.180" status="PASS" endtime="20161110 16:18:33.517"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.604">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/269/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:18:33.604">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:33.517" status="PASS" endtime="20161110 16:18:33.604"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.605">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:33.605" status="PASS" endtime="20161110 16:18:33.605"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:33.606">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:33.606" status="PASS" endtime="20161110 16:18:33.606"></status>
</kw>
<status starttime="20161110 16:18:33.605" status="PASS" endtime="20161110 16:18:33.606"></status>
</kw>
<status starttime="20161110 16:18:33.604" status="PASS" endtime="20161110 16:18:33.606"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:33.607">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:33.176" status="PASS" endtime="20161110 16:18:33.607"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.607">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:33.607">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:33.607">${content} = {u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:33.607" status="PASS" endtime="20161110 16:18:33.607"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:33.608">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status starttime="20161110 16:18:33.176" status="PASS" endtime="20161110 16:18:33.608"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status starttime="20161110 16:18:33.608" status="PASS" endtime="20161110 16:18:33.608"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.609">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status starttime="20161110 16:18:33.609" status="PASS" endtime="20161110 16:18:33.609"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.611">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 16:18:33.610" status="PASS" endtime="20161110 16:18:33.611"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:33.611">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 16:18:33.611" status="PASS" endtime="20161110 16:18:33.612"></status>
</kw>
<status starttime="20161110 16:18:33.611" status="PASS" endtime="20161110 16:18:33.612"></status>
</kw>
<status starttime="20161110 16:18:33.610" status="PASS" endtime="20161110 16:18:33.612"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:33.613">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:33.612" status="PASS" endtime="20161110 16:18:33.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:33.614" status="PASS" endtime="20161110 16:18:33.614"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.615">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:33.615" status="PASS" endtime="20161110 16:18:33.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:33.616" status="PASS" endtime="20161110 16:18:33.616"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:33.946">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:33.946">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:33.617" status="PASS" endtime="20161110 16:18:33.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:33.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:33.946" status="PASS" endtime="20161110 16:18:33.947"></status>
</kw>
<status starttime="20161110 16:18:33.612" status="PASS" endtime="20161110 16:18:33.947"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.033">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:18:34.033">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:33.948" status="PASS" endtime="20161110 16:18:34.033"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.035">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/269"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:34.034" status="PASS" endtime="20161110 16:18:34.035"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.036">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/269"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:34.036" status="PASS" endtime="20161110 16:18:34.037"></status>
</kw>
<status starttime="20161110 16:18:34.035" status="PASS" endtime="20161110 16:18:34.037"></status>
</kw>
<status starttime="20161110 16:18:34.033" status="PASS" endtime="20161110 16:18:34.037"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:34.037">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:33.609" status="PASS" endtime="20161110 16:18:34.037"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.038">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/269"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:34.038">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:34.038">${content} = {u'data': [u'/org/openbmc/records/events/269'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:34.038" status="PASS" endtime="20161110 16:18:34.039"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:34.039">${dimm1_event} = [u'/org/openbmc/records/events/269']</msg>
<status starttime="20161110 16:18:33.608" status="PASS" endtime="20161110 16:18:34.039"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status starttime="20161110 16:18:34.040" status="PASS" endtime="20161110 16:18:34.040"></status>
</kw>
<kw name="Log FFDC" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 16:18:34.041" status="PASS" endtime="20161110 16:18:34.044"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.045" html="yes">Directory '&lt;a href="file:///tmp/root/5497/obmc-robot/logs"&gt;/tmp/root/5497/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 16:18:34.045" status="PASS" endtime="20161110 16:18:34.045"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.046" html="yes">File '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 16:18:34.046" status="PASS" endtime="20161110 16:18:34.046"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:34.046">${exist} = True</msg>
<status starttime="20161110 16:18:34.045" status="PASS" endtime="20161110 16:18:34.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 16:18:34.046" status="PASS" endtime="20161110 16:18:34.049"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.050">${cur_time} = 2016-11-10 16:18:34:049650</msg>
<status starttime="20161110 16:18:34.049" status="PASS" endtime="20161110 16:18:34.050"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.051">${cur_time} = 20161110161834049650</msg>
<status starttime="20161110 16:18:34.050" status="PASS" endtime="20161110 16:18:34.051"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:34.051">${cur_time} = 20161110161834049650</msg>
<status starttime="20161110 16:18:34.049" status="PASS" endtime="20161110 16:18:34.051"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.052" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:18:34.051" status="PASS" endtime="20161110 16:18:34.052"></status>
</kw>
<status starttime="20161110 16:18:34.045" status="PASS" endtime="20161110 16:18:34.052"></status>
</kw>
<status starttime="20161110 16:18:34.040" status="PASS" endtime="20161110 16:18:34.052"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status starttime="20161110 16:18:30.246" status="PASS" endtime="20161110 16:18:34.052" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="Delete error log">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.054">${data} = {u'data': []}</msg>
<status starttime="20161110 16:18:34.053" status="PASS" endtime="20161110 16:18:34.054"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.055">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161110 16:18:34.054" status="PASS" endtime="20161110 16:18:34.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.055">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:34.055" status="PASS" endtime="20161110 16:18:34.055"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:18:34.055" status="PASS" endtime="20161110 16:18:34.056"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.057">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:34.056" status="PASS" endtime="20161110 16:18:34.057"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.058">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:34.058" status="PASS" endtime="20161110 16:18:34.058"></status>
</kw>
<status starttime="20161110 16:18:34.057" status="PASS" endtime="20161110 16:18:34.058"></status>
</kw>
<status starttime="20161110 16:18:34.056" status="PASS" endtime="20161110 16:18:34.058"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.059">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:34.059" status="PASS" endtime="20161110 16:18:34.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.060">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:34.060" status="PASS" endtime="20161110 16:18:34.060"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.060">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:34.060" status="PASS" endtime="20161110 16:18:34.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.061">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:34.061" status="PASS" endtime="20161110 16:18:34.061"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.395">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:34.395">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:34.061" status="PASS" endtime="20161110 16:18:34.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.396">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:34.395" status="PASS" endtime="20161110 16:18:34.396"></status>
</kw>
<status starttime="20161110 16:18:34.058" status="PASS" endtime="20161110 16:18:34.396"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.649">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:34.649">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:34.396" status="PASS" endtime="20161110 16:18:34.649"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.651">${msg} = Response code:200, Content:{
  "data": 270, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:34.650" status="PASS" endtime="20161110 16:18:34.651"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.653">Response code:200, Content:{
  "data": 270, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:34.652" status="PASS" endtime="20161110 16:18:34.653"></status>
</kw>
<status starttime="20161110 16:18:34.652" status="PASS" endtime="20161110 16:18:34.653"></status>
</kw>
<status starttime="20161110 16:18:34.650" status="PASS" endtime="20161110 16:18:34.653"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:34.654">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:34.054" status="PASS" endtime="20161110 16:18:34.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.654">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:34.654" status="PASS" endtime="20161110 16:18:34.655"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.655">To JSON using : content={
  "data": 270, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:34.655">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:34.656">${json} = {u'data': 270, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:34.655" status="PASS" endtime="20161110 16:18:34.656"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.657">${LOGID} = 270</msg>
<status starttime="20161110 16:18:34.656" status="PASS" endtime="20161110 16:18:34.657"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.657">${uri} = /org/openbmc/records/events/270</msg>
<status starttime="20161110 16:18:34.657" status="PASS" endtime="20161110 16:18:34.657"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:34.658">${log_uri1} = /org/openbmc/records/events/270</msg>
<status starttime="20161110 16:18:34.053" status="PASS" endtime="20161110 16:18:34.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.659">${association_uri1} = /org/openbmc/records/events/270/fru</msg>
<status starttime="20161110 16:18:34.658" status="PASS" endtime="20161110 16:18:34.659"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.660">${data} = {u'data': []}</msg>
<status starttime="20161110 16:18:34.659" status="PASS" endtime="20161110 16:18:34.660"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.662">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161110 16:18:34.661" status="PASS" endtime="20161110 16:18:34.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.662">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:34.662" status="PASS" endtime="20161110 16:18:34.662"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:18:34.663" status="PASS" endtime="20161110 16:18:34.663"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.664">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:34.664" status="PASS" endtime="20161110 16:18:34.664"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.665">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:34.665" status="PASS" endtime="20161110 16:18:34.665"></status>
</kw>
<status starttime="20161110 16:18:34.664" status="PASS" endtime="20161110 16:18:34.665"></status>
</kw>
<status starttime="20161110 16:18:34.663" status="PASS" endtime="20161110 16:18:34.665"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:34.666">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:34.666" status="PASS" endtime="20161110 16:18:34.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.669">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:34.669" status="PASS" endtime="20161110 16:18:34.669"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.669">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:34.669" status="PASS" endtime="20161110 16:18:34.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:34.670">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:34.670" status="PASS" endtime="20161110 16:18:34.670"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:36.717">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:36.717">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:34.670" status="PASS" endtime="20161110 16:18:36.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:36.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:36.718" status="PASS" endtime="20161110 16:18:36.719"></status>
</kw>
<status starttime="20161110 16:18:34.666" status="PASS" endtime="20161110 16:18:36.719"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.076">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:37.076">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:36.719" status="PASS" endtime="20161110 16:18:37.076"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.078">${msg} = Response code:200, Content:{
  "data": 271, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:37.078" status="PASS" endtime="20161110 16:18:37.079"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:37.080">Response code:200, Content:{
  "data": 271, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:37.080" status="PASS" endtime="20161110 16:18:37.080"></status>
</kw>
<status starttime="20161110 16:18:37.079" status="PASS" endtime="20161110 16:18:37.080"></status>
</kw>
<status starttime="20161110 16:18:37.077" status="PASS" endtime="20161110 16:18:37.080"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:37.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:34.660" status="PASS" endtime="20161110 16:18:37.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:37.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:37.081" status="PASS" endtime="20161110 16:18:37.082"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.082">To JSON using : content={
  "data": 271, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:37.083">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:37.083">${json} = {u'data': 271, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:37.082" status="PASS" endtime="20161110 16:18:37.083"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.084">${LOGID} = 271</msg>
<status starttime="20161110 16:18:37.083" status="PASS" endtime="20161110 16:18:37.084"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.085">${uri} = /org/openbmc/records/events/271</msg>
<status starttime="20161110 16:18:37.084" status="PASS" endtime="20161110 16:18:37.085"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:37.085">${log_uri2} = /org/openbmc/records/events/271</msg>
<status starttime="20161110 16:18:34.659" status="PASS" endtime="20161110 16:18:37.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.086">${del_uri} = /org/openbmc/records/events/270/action/delete</msg>
<status starttime="20161110 16:18:37.085" status="PASS" endtime="20161110 16:18:37.086"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.088">${base_uri} = /org/openbmc/records/events/270/action/delete</msg>
<status starttime="20161110 16:18:37.088" status="PASS" endtime="20161110 16:18:37.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:37.088" status="PASS" endtime="20161110 16:18:37.089"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:18:37.089" status="PASS" endtime="20161110 16:18:37.090"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.092">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/270/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:37.091" status="PASS" endtime="20161110 16:18:37.092"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:37.093">URI:https://9.3.23.30:443/org/openbmc/records/events/270/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:37.093" status="PASS" endtime="20161110 16:18:37.093"></status>
</kw>
<status starttime="20161110 16:18:37.092" status="PASS" endtime="20161110 16:18:37.094"></status>
</kw>
<status starttime="20161110 16:18:37.090" status="PASS" endtime="20161110 16:18:37.094"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:37.094">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:37.094" status="PASS" endtime="20161110 16:18:37.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.095">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:37.095" status="PASS" endtime="20161110 16:18:37.095"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.096">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:37.096" status="PASS" endtime="20161110 16:18:37.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.096">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:37.096" status="PASS" endtime="20161110 16:18:37.096"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.429">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:37.430">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:37.097" status="PASS" endtime="20161110 16:18:37.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:37.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:37.430" status="PASS" endtime="20161110 16:18:37.430"></status>
</kw>
<status starttime="20161110 16:18:37.094" status="PASS" endtime="20161110 16:18:37.431"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.730">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/270/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:37.730">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:37.431" status="PASS" endtime="20161110 16:18:37.730"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.733">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:37.732" status="PASS" endtime="20161110 16:18:37.733"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:37.734">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:37.734" status="PASS" endtime="20161110 16:18:37.735"></status>
</kw>
<status starttime="20161110 16:18:37.733" status="PASS" endtime="20161110 16:18:37.735"></status>
</kw>
<status starttime="20161110 16:18:37.731" status="PASS" endtime="20161110 16:18:37.735"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:37.735">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:37.086" status="PASS" endtime="20161110 16:18:37.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:37.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:37.736" status="PASS" endtime="20161110 16:18:37.736"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.738">${base_uri} = /org/openbmc/records/events/270/fru</msg>
<status starttime="20161110 16:18:37.737" status="PASS" endtime="20161110 16:18:37.738"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.743">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/270/fru, method:Get, args:{}</msg>
<status starttime="20161110 16:18:37.739" status="PASS" endtime="20161110 16:18:37.743"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:37.744">URI:https://9.3.23.30:443/org/openbmc/records/events/270/fru, method:Get, args:{}</msg>
<status starttime="20161110 16:18:37.744" status="PASS" endtime="20161110 16:18:37.744"></status>
</kw>
<status starttime="20161110 16:18:37.743" status="PASS" endtime="20161110 16:18:37.744"></status>
</kw>
<status starttime="20161110 16:18:37.738" status="PASS" endtime="20161110 16:18:37.744"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:37.745">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:37.745" status="PASS" endtime="20161110 16:18:37.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.746">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:37.746" status="PASS" endtime="20161110 16:18:37.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.746">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:37.746" status="PASS" endtime="20161110 16:18:37.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:37.747">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:37.747" status="PASS" endtime="20161110 16:18:37.747"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:38.076">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:38.076">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:37.747" status="PASS" endtime="20161110 16:18:38.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:38.077">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:38.077" status="PASS" endtime="20161110 16:18:38.077"></status>
</kw>
<status starttime="20161110 16:18:37.744" status="PASS" endtime="20161110 16:18:38.077"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:38.131">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/270/fru, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:18:38.131">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20161110 16:18:38.078" status="PASS" endtime="20161110 16:18:38.131"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:38.132">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/270/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status starttime="20161110 16:18:38.131" status="PASS" endtime="20161110 16:18:38.132"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:38.133">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/270/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status starttime="20161110 16:18:38.133" status="PASS" endtime="20161110 16:18:38.133"></status>
</kw>
<status starttime="20161110 16:18:38.132" status="PASS" endtime="20161110 16:18:38.133"></status>
</kw>
<status starttime="20161110 16:18:38.131" status="PASS" endtime="20161110 16:18:38.133"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:38.133">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20161110 16:18:37.736" status="PASS" endtime="20161110 16:18:38.133"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:38.134">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/270/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:38.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:38.134">${jsondata} = {u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/270/fru'}, u'status': u'error', u'message': u'404 Not Found'}</msg>
<status starttime="20161110 16:18:38.134" status="PASS" endtime="20161110 16:18:38.134"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status starttime="20161110 16:18:38.134" status="PASS" endtime="20161110 16:18:38.135"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:38.136">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status starttime="20161110 16:18:38.136" status="PASS" endtime="20161110 16:18:38.136"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:38.137">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 16:18:38.137" status="PASS" endtime="20161110 16:18:38.137"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:38.138">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 16:18:38.138" status="PASS" endtime="20161110 16:18:38.138"></status>
</kw>
<status starttime="20161110 16:18:38.138" status="PASS" endtime="20161110 16:18:38.138"></status>
</kw>
<status starttime="20161110 16:18:38.136" status="PASS" endtime="20161110 16:18:38.139"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:38.139">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:38.139" status="PASS" endtime="20161110 16:18:38.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:38.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:38.140" status="PASS" endtime="20161110 16:18:38.140"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:38.141">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:38.140" status="PASS" endtime="20161110 16:18:38.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:38.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:38.141" status="PASS" endtime="20161110 16:18:38.141"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.343">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:40.343">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:38.141" status="PASS" endtime="20161110 16:18:40.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:40.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:40.343" status="PASS" endtime="20161110 16:18:40.344"></status>
</kw>
<status starttime="20161110 16:18:38.139" status="PASS" endtime="20161110 16:18:40.344"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.422">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:18:40.422">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:40.345" status="PASS" endtime="20161110 16:18:40.422"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.424">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/271"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:40.423" status="PASS" endtime="20161110 16:18:40.424"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:40.425">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/271"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:40.425" status="PASS" endtime="20161110 16:18:40.426"></status>
</kw>
<status starttime="20161110 16:18:40.424" status="PASS" endtime="20161110 16:18:40.426"></status>
</kw>
<status starttime="20161110 16:18:40.423" status="PASS" endtime="20161110 16:18:40.426"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:40.426">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:38.135" status="PASS" endtime="20161110 16:18:40.426"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.427">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/271"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:40.427">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:40.427">${content} = {u'data': [u'/org/openbmc/records/events/271'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:40.427" status="PASS" endtime="20161110 16:18:40.427"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:40.428">${dimm3_event} = [u'/org/openbmc/records/events/271']</msg>
<status starttime="20161110 16:18:38.135" status="PASS" endtime="20161110 16:18:40.428"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161110 16:18:40.428" status="PASS" endtime="20161110 16:18:40.429"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.432">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status starttime="20161110 16:18:40.432" status="PASS" endtime="20161110 16:18:40.432"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.434">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 16:18:40.433" status="PASS" endtime="20161110 16:18:40.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:40.435">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 16:18:40.435" status="PASS" endtime="20161110 16:18:40.435"></status>
</kw>
<status starttime="20161110 16:18:40.434" status="PASS" endtime="20161110 16:18:40.435"></status>
</kw>
<status starttime="20161110 16:18:40.433" status="PASS" endtime="20161110 16:18:40.436"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:40.436">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:40.436" status="PASS" endtime="20161110 16:18:40.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.437">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:40.437" status="PASS" endtime="20161110 16:18:40.437"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.438">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:40.437" status="PASS" endtime="20161110 16:18:40.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.438">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:40.438" status="PASS" endtime="20161110 16:18:40.438"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.769">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:40.770">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:40.439" status="PASS" endtime="20161110 16:18:40.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:40.771">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:40.770" status="PASS" endtime="20161110 16:18:40.771"></status>
</kw>
<status starttime="20161110 16:18:40.436" status="PASS" endtime="20161110 16:18:40.771"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.851">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:18:40.852">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:40.772" status="PASS" endtime="20161110 16:18:40.852"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.854">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/271"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:40.853" status="PASS" endtime="20161110 16:18:40.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:40.855">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/271"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:40.855" status="PASS" endtime="20161110 16:18:40.856"></status>
</kw>
<status starttime="20161110 16:18:40.854" status="PASS" endtime="20161110 16:18:40.856"></status>
</kw>
<status starttime="20161110 16:18:40.852" status="PASS" endtime="20161110 16:18:40.856"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:40.856">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:40.430" status="PASS" endtime="20161110 16:18:40.856"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.857">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/271"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:40.857">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:40.857">${content} = {u'data': [u'/org/openbmc/records/events/271'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:40.857" status="PASS" endtime="20161110 16:18:40.857"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:40.858">${dimm2_event} = [u'/org/openbmc/records/events/271']</msg>
<status starttime="20161110 16:18:40.429" status="PASS" endtime="20161110 16:18:40.858"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161110 16:18:40.858" status="PASS" endtime="20161110 16:18:40.858"></status>
</kw>
<kw name="Log FFDC" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 16:18:40.860" status="PASS" endtime="20161110 16:18:40.864"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:40.864" html="yes">Directory '&lt;a href="file:///tmp/root/5497/obmc-robot/logs"&gt;/tmp/root/5497/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 16:18:40.864" status="PASS" endtime="20161110 16:18:40.864"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:40.865" html="yes">File '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 16:18:40.865" status="PASS" endtime="20161110 16:18:40.865"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:40.865">${exist} = True</msg>
<status starttime="20161110 16:18:40.865" status="PASS" endtime="20161110 16:18:40.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 16:18:40.866" status="PASS" endtime="20161110 16:18:40.869"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.870">${cur_time} = 2016-11-10 16:18:40:869838</msg>
<status starttime="20161110 16:18:40.870" status="PASS" endtime="20161110 16:18:40.870"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:40.871">${cur_time} = 20161110161840869838</msg>
<status starttime="20161110 16:18:40.870" status="PASS" endtime="20161110 16:18:40.871"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:40.871">${cur_time} = 20161110161840869838</msg>
<status starttime="20161110 16:18:40.869" status="PASS" endtime="20161110 16:18:40.871"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:40.872" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:18:40.871" status="PASS" endtime="20161110 16:18:40.872"></status>
</kw>
<status starttime="20161110 16:18:40.864" status="PASS" endtime="20161110 16:18:40.872"></status>
</kw>
<status starttime="20161110 16:18:40.859" status="PASS" endtime="20161110 16:18:40.872"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status starttime="20161110 16:18:34.052" status="PASS" endtime="20161110 16:18:40.872" critical="yes"></status>
</test>
<kw name="Close All Connections" type="teardown" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20161110 16:18:40.873" status="PASS" endtime="20161110 16:18:40.988"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status starttime="20161110 16:18:25.024" status="PASS" endtime="20161110 16:18:40.988"></status>
</suite>
<suite id="s1-s3" name="Test Basic Poweron" source="/tmp/root/5497/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s3-t1" name="power on test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:18:41.016">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 16:18:41.016" status="FAIL" endtime="20161110 16:18:41.016"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:41.016">${has_host} = False</msg>
<status starttime="20161110 16:18:41.015" status="PASS" endtime="20161110 16:18:41.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 16:18:41.019" status="PASS" endtime="20161110 16:18:41.019"></status>
</kw>
<status starttime="20161110 16:18:41.017" status="PASS" endtime="20161110 16:18:41.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:41.023">${port_num} = 22</msg>
<status starttime="20161110 16:18:41.023" status="PASS" endtime="20161110 16:18:41.023"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:41.024">${SSH_PORT} = 22</msg>
<status starttime="20161110 16:18:41.023" status="PASS" endtime="20161110 16:18:41.024"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:41.024">${https_num} = 443</msg>
<status starttime="20161110 16:18:41.024" status="PASS" endtime="20161110 16:18:41.024"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:41.025">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 16:18:41.024" status="PASS" endtime="20161110 16:18:41.025"></status>
</kw>
<status starttime="20161110 16:18:41.022" status="PASS" endtime="20161110 16:18:41.025"></status>
</kw>
<status starttime="20161110 16:18:41.020" status="PASS" endtime="20161110 16:18:41.025"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:18:41.026">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 16:18:41.026" status="FAIL" endtime="20161110 16:18:41.026"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:41.026">${has_port} = False</msg>
<status starttime="20161110 16:18:41.025" status="PASS" endtime="20161110 16:18:41.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 16:18:41.030" status="PASS" endtime="20161110 16:18:41.030"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 16:18:41.030" status="PASS" endtime="20161110 16:18:41.031"></status>
</kw>
<status starttime="20161110 16:18:41.029" status="PASS" endtime="20161110 16:18:41.031"></status>
</kw>
<status starttime="20161110 16:18:41.026" status="PASS" endtime="20161110 16:18:41.031"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:41.031">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 16:18:45.414">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 16:18:41.031" status="PASS" endtime="20161110 16:18:45.414"></status>
</kw>
<status starttime="20161110 16:18:41.015" status="PASS" endtime="20161110 16:18:45.415"></status>
</kw>
<kw name="Get Time Stamp" library="utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:45.416">${cur_time} = 20161110161845416122</msg>
<status starttime="20161110 16:18:45.416" status="PASS" endtime="20161110 16:18:45.416"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:45.417">${cur_time} = 20161110161845416122</msg>
<status starttime="20161110 16:18:45.415" status="PASS" endtime="20161110 16:18:45.417"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:45.422">${LOG_TIME} = 20161110161845416122</msg>
<status starttime="20161110 16:18:45.417" status="PASS" endtime="20161110 16:18:45.422"></status>
</kw>
<kw name="Start Command" library="SSHLibrary">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:45.423">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161110161845416122_$$'.</msg>
<status starttime="20161110 16:18:45.423" status="PASS" endtime="20161110 16:18:45.431"></status>
</kw>
<status starttime="20161110 16:18:41.015" status="PASS" endtime="20161110 16:18:45.431"></status>
</kw>
<kw name="BMC Power Off" library="poweroffs">
<doc>Powers off the system and makes sure that all states are</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:18:45.435">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 16:18:45.434" status="FAIL" endtime="20161110 16:18:45.435"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:45.435">${has_host} = False</msg>
<status starttime="20161110 16:18:45.434" status="PASS" endtime="20161110 16:18:45.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 16:18:45.441" status="PASS" endtime="20161110 16:18:45.442"></status>
</kw>
<status starttime="20161110 16:18:45.436" status="PASS" endtime="20161110 16:18:45.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:45.451">${port_num} = 22</msg>
<status starttime="20161110 16:18:45.451" status="PASS" endtime="20161110 16:18:45.452"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:45.453">${SSH_PORT} = 22</msg>
<status starttime="20161110 16:18:45.452" status="PASS" endtime="20161110 16:18:45.453"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:45.453">${https_num} = 443</msg>
<status starttime="20161110 16:18:45.453" status="PASS" endtime="20161110 16:18:45.453"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:45.454">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 16:18:45.454" status="PASS" endtime="20161110 16:18:45.454"></status>
</kw>
<status starttime="20161110 16:18:45.450" status="PASS" endtime="20161110 16:18:45.455"></status>
</kw>
<status starttime="20161110 16:18:45.442" status="PASS" endtime="20161110 16:18:45.455"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:18:45.456">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 16:18:45.455" status="FAIL" endtime="20161110 16:18:45.456"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:45.456">${has_port} = False</msg>
<status starttime="20161110 16:18:45.455" status="PASS" endtime="20161110 16:18:45.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 16:18:45.461" status="PASS" endtime="20161110 16:18:45.461"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 16:18:45.461" status="PASS" endtime="20161110 16:18:45.462"></status>
</kw>
<status starttime="20161110 16:18:45.460" status="PASS" endtime="20161110 16:18:45.462"></status>
</kw>
<status starttime="20161110 16:18:45.456" status="PASS" endtime="20161110 16:18:45.462"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:45.463">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 16:18:49.260">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 16:18:45.462" status="PASS" endtime="20161110 16:18:49.261"></status>
</kw>
<status starttime="20161110 16:18:45.433" status="PASS" endtime="20161110 16:18:49.261"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:49.262">@{arglist} = [ ]</msg>
<status starttime="20161110 16:18:49.261" status="PASS" endtime="20161110 16:18:49.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:49.262">${args} = {u'data': []}</msg>
<status starttime="20161110 16:18:49.262" status="PASS" endtime="20161110 16:18:49.262"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:49.263">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 16:18:49.263" status="PASS" endtime="20161110 16:18:49.263"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:49.265">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status starttime="20161110 16:18:49.264" status="PASS" endtime="20161110 16:18:49.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:49.265">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:49.265" status="PASS" endtime="20161110 16:18:49.265"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:18:49.266" status="PASS" endtime="20161110 16:18:49.266"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:49.267">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:49.266" status="PASS" endtime="20161110 16:18:49.267"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:49.268">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:49.268" status="PASS" endtime="20161110 16:18:49.268"></status>
</kw>
<status starttime="20161110 16:18:49.267" status="PASS" endtime="20161110 16:18:49.268"></status>
</kw>
<status starttime="20161110 16:18:49.266" status="PASS" endtime="20161110 16:18:49.268"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:49.269">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:49.269" status="PASS" endtime="20161110 16:18:49.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:49.270">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:49.270" status="PASS" endtime="20161110 16:18:49.270"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:49.270">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:49.270" status="PASS" endtime="20161110 16:18:49.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:49.271">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:49.271" status="PASS" endtime="20161110 16:18:49.271"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:49.600">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:49.601">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:49.271" status="PASS" endtime="20161110 16:18:49.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:49.601">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:49.601" status="PASS" endtime="20161110 16:18:49.601"></status>
</kw>
<status starttime="20161110 16:18:49.268" status="PASS" endtime="20161110 16:18:49.602"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.359">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:50.359">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:49.602" status="PASS" endtime="20161110 16:18:50.359"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.360">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:50.360" status="PASS" endtime="20161110 16:18:50.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:50.362">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:50.361" status="PASS" endtime="20161110 16:18:50.362"></status>
</kw>
<status starttime="20161110 16:18:50.361" status="PASS" endtime="20161110 16:18:50.362"></status>
</kw>
<status starttime="20161110 16:18:50.359" status="PASS" endtime="20161110 16:18:50.362"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:50.362">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:49.264" status="PASS" endtime="20161110 16:18:50.362"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:50.363">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:49.262" status="PASS" endtime="20161110 16:18:50.363"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:50.363">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:50.363" status="PASS" endtime="20161110 16:18:50.363"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.365">@{arglist} = [ ]</msg>
<status starttime="20161110 16:18:50.365" status="PASS" endtime="20161110 16:18:50.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.366">${args} = {u'data': []}</msg>
<status starttime="20161110 16:18:50.366" status="PASS" endtime="20161110 16:18:50.366"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.367">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 16:18:50.367" status="PASS" endtime="20161110 16:18:50.367"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.369">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 16:18:50.368" status="PASS" endtime="20161110 16:18:50.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:50.369" status="PASS" endtime="20161110 16:18:50.369"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:18:50.369" status="PASS" endtime="20161110 16:18:50.370"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.371">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:50.371" status="PASS" endtime="20161110 16:18:50.371"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:50.372">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:50.372" status="PASS" endtime="20161110 16:18:50.372"></status>
</kw>
<status starttime="20161110 16:18:50.372" status="PASS" endtime="20161110 16:18:50.373"></status>
</kw>
<status starttime="20161110 16:18:50.370" status="PASS" endtime="20161110 16:18:50.373"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:50.374">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:50.373" status="PASS" endtime="20161110 16:18:50.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.375">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:50.374" status="PASS" endtime="20161110 16:18:50.375"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.375">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:50.375" status="PASS" endtime="20161110 16:18:50.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:50.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:50.375" status="PASS" endtime="20161110 16:18:50.376"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:56.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:50.376" status="PASS" endtime="20161110 16:18:56.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:56.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:56.445" status="PASS" endtime="20161110 16:18:56.446"></status>
</kw>
<status starttime="20161110 16:18:50.373" status="PASS" endtime="20161110 16:18:56.446"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.708">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:56.709">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:56.447" status="PASS" endtime="20161110 16:18:56.709"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.711">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:56.710" status="PASS" endtime="20161110 16:18:56.711"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:56.712">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:56.712" status="PASS" endtime="20161110 16:18:56.712"></status>
</kw>
<status starttime="20161110 16:18:56.711" status="PASS" endtime="20161110 16:18:56.712"></status>
</kw>
<status starttime="20161110 16:18:56.709" status="PASS" endtime="20161110 16:18:56.713"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:56.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:50.367" status="PASS" endtime="20161110 16:18:56.713"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:56.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:50.366" status="PASS" endtime="20161110 16:18:56.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:56.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:56.713" status="PASS" endtime="20161110 16:18:56.714"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.715">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:56.715">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:56.715">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:56.714" status="PASS" endtime="20161110 16:18:56.715"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:56.715">${state} = 0</msg>
<status starttime="20161110 16:18:50.365" status="PASS" endtime="20161110 16:18:56.715"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161110 16:18:56.716" status="PASS" endtime="20161110 16:18:56.716"></status>
</kw>
<status starttime="20161110 16:18:50.364" status="PASS" endtime="20161110 16:18:56.716"></status>
</kw>
<status starttime="20161110 16:18:50.364" status="PASS" endtime="20161110 16:18:56.716"></status>
</kw>
<status starttime="20161110 16:18:49.261" status="PASS" endtime="20161110 16:18:56.717"></status>
</kw>
<kw name="Check Power Off States" library="poweroffs">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.718">@{arglist} = [ ]</msg>
<status starttime="20161110 16:18:56.718" status="PASS" endtime="20161110 16:18:56.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.719">${args} = {u'data': []}</msg>
<status starttime="20161110 16:18:56.718" status="PASS" endtime="20161110 16:18:56.719"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.721">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 16:18:56.720" status="PASS" endtime="20161110 16:18:56.721"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.722">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 16:18:56.722" status="PASS" endtime="20161110 16:18:56.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.723">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:56.723" status="PASS" endtime="20161110 16:18:56.723"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:18:56.723" status="PASS" endtime="20161110 16:18:56.723"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.726">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:56.725" status="PASS" endtime="20161110 16:18:56.726"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:56.727">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:18:56.727" status="PASS" endtime="20161110 16:18:56.727"></status>
</kw>
<status starttime="20161110 16:18:56.726" status="PASS" endtime="20161110 16:18:56.727"></status>
</kw>
<status starttime="20161110 16:18:56.724" status="PASS" endtime="20161110 16:18:56.727"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:56.728">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:56.728" status="PASS" endtime="20161110 16:18:56.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.729">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:56.729" status="PASS" endtime="20161110 16:18:56.729"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.729">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:56.729" status="PASS" endtime="20161110 16:18:56.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:56.730">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:56.730" status="PASS" endtime="20161110 16:18:56.730"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:57.058">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:57.059">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:56.730" status="PASS" endtime="20161110 16:18:57.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:57.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:57.059" status="PASS" endtime="20161110 16:18:57.060"></status>
</kw>
<status starttime="20161110 16:18:56.727" status="PASS" endtime="20161110 16:18:57.060"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:57.325">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:18:57.325">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:57.060" status="PASS" endtime="20161110 16:18:57.325"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:57.326">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:57.326" status="PASS" endtime="20161110 16:18:57.326"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:57.327">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:18:57.327" status="PASS" endtime="20161110 16:18:57.327"></status>
</kw>
<status starttime="20161110 16:18:57.327" status="PASS" endtime="20161110 16:18:57.327"></status>
</kw>
<status starttime="20161110 16:18:57.325" status="PASS" endtime="20161110 16:18:57.328"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:57.328">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:56.721" status="PASS" endtime="20161110 16:18:57.328"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:57.328">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:56.719" status="PASS" endtime="20161110 16:18:57.328"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:57.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:18:57.328" status="PASS" endtime="20161110 16:18:57.329"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:57.329">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:18:57.329">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:18:57.329">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:18:57.329" status="PASS" endtime="20161110 16:18:57.329"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:18:57.329">${power_state} = 0</msg>
<status starttime="20161110 16:18:56.717" status="PASS" endtime="20161110 16:18:57.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161110 16:18:57.330" status="PASS" endtime="20161110 16:18:57.330"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status starttime="20161110 16:18:57.330" status="PASS" endtime="20161110 16:18:57.330"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/org/openbmc/sensors/host/BootProgress</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:57.332">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20161110 16:18:57.332" status="PASS" endtime="20161110 16:18:57.332"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:57.334">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161110 16:18:57.333" status="PASS" endtime="20161110 16:18:57.334"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:57.334">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161110 16:18:57.334" status="PASS" endtime="20161110 16:18:57.335"></status>
</kw>
<status starttime="20161110 16:18:57.334" status="PASS" endtime="20161110 16:18:57.335"></status>
</kw>
<status starttime="20161110 16:18:57.333" status="PASS" endtime="20161110 16:18:57.335"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:18:57.336">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:18:57.335" status="PASS" endtime="20161110 16:18:57.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:57.337">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:18:57.336" status="PASS" endtime="20161110 16:18:57.337"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:57.337">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:18:57.337" status="PASS" endtime="20161110 16:18:57.337"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:18:57.338">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:18:57.337" status="PASS" endtime="20161110 16:18:57.338"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.171">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:00.171">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:57.338" status="PASS" endtime="20161110 16:19:00.171"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:00.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:00.172" status="PASS" endtime="20161110 16:19:00.173"></status>
</kw>
<status starttime="20161110 16:18:57.335" status="PASS" endtime="20161110 16:19:00.173"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.248">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:19:00.249">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:00.173" status="PASS" endtime="20161110 16:19:00.249"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.251">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:00.250" status="PASS" endtime="20161110 16:19:00.251"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:00.253">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:00.252" status="PASS" endtime="20161110 16:19:00.253"></status>
</kw>
<status starttime="20161110 16:19:00.251" status="PASS" endtime="20161110 16:19:00.253"></status>
</kw>
<status starttime="20161110 16:19:00.249" status="PASS" endtime="20161110 16:19:00.253"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:00.253">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:18:57.331" status="PASS" endtime="20161110 16:19:00.254"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.254">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:19:00.254">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:19:00.255">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:19:00.254" status="PASS" endtime="20161110 16:19:00.255"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:00.255">${state} = Off</msg>
<status starttime="20161110 16:18:57.331" status="PASS" endtime="20161110 16:19:00.255"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:00.255">${boot_progress} = Off</msg>
<status starttime="20161110 16:18:57.331" status="PASS" endtime="20161110 16:19:00.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20161110 16:19:00.256" status="PASS" endtime="20161110 16:19:00.256"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status starttime="20161110 16:19:00.256" status="PASS" endtime="20161110 16:19:00.257"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.258">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status starttime="20161110 16:19:00.257" status="PASS" endtime="20161110 16:19:00.258"></status>
</kw>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.259">@{arglist} = [ ]</msg>
<status starttime="20161110 16:19:00.258" status="PASS" endtime="20161110 16:19:00.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.260">${args} = {u'data': []}</msg>
<status starttime="20161110 16:19:00.259" status="PASS" endtime="20161110 16:19:00.260"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.261">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:19:00.261" status="PASS" endtime="20161110 16:19:00.261"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.263">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:19:00.263" status="PASS" endtime="20161110 16:19:00.263"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.264">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:00.263" status="PASS" endtime="20161110 16:19:00.264"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:19:00.264" status="PASS" endtime="20161110 16:19:00.264"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.266">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:00.265" status="PASS" endtime="20161110 16:19:00.266"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:00.266">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:00.266" status="PASS" endtime="20161110 16:19:00.267"></status>
</kw>
<status starttime="20161110 16:19:00.266" status="PASS" endtime="20161110 16:19:00.267"></status>
</kw>
<status starttime="20161110 16:19:00.264" status="PASS" endtime="20161110 16:19:00.267"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:00.268">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:19:00.267" status="PASS" endtime="20161110 16:19:00.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.268">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:00.268" status="PASS" endtime="20161110 16:19:00.268"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.269">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:19:00.269" status="PASS" endtime="20161110 16:19:00.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.270">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:19:00.269" status="PASS" endtime="20161110 16:19:00.270"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.597">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:00.597">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:00.270" status="PASS" endtime="20161110 16:19:00.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:00.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:00.597" status="PASS" endtime="20161110 16:19:00.598"></status>
</kw>
<status starttime="20161110 16:19:00.267" status="PASS" endtime="20161110 16:19:00.598"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.875">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:00.875">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:00.598" status="PASS" endtime="20161110 16:19:00.875"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.877">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:00.876" status="PASS" endtime="20161110 16:19:00.877"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:00.879">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:00.878" status="PASS" endtime="20161110 16:19:00.879"></status>
</kw>
<status starttime="20161110 16:19:00.877" status="PASS" endtime="20161110 16:19:00.879"></status>
</kw>
<status starttime="20161110 16:19:00.876" status="PASS" endtime="20161110 16:19:00.879"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:00.879">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:00.262" status="PASS" endtime="20161110 16:19:00.879"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:00.880">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:00.260" status="PASS" endtime="20161110 16:19:00.880"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:00.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:00.880" status="PASS" endtime="20161110 16:19:00.881"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.882">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:19:00.882">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:19:00.882">${content} = {u'data': u'BMC_READY', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:19:00.881" status="PASS" endtime="20161110 16:19:00.882"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:00.883">${bmc_state} = BMC_READY</msg>
<status starttime="20161110 16:19:00.258" status="PASS" endtime="20161110 16:19:00.883"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status starttime="20161110 16:19:00.883" status="PASS" endtime="20161110 16:19:00.883"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status starttime="20161110 16:19:00.883" status="PASS" endtime="20161110 16:19:00.884"></status>
</kw>
<status starttime="20161110 16:18:56.717" status="PASS" endtime="20161110 16:19:00.884"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status starttime="20161110 16:19:00.884" status="PASS" endtime="20161110 16:19:00.899"></status>
</kw>
<status starttime="20161110 16:18:45.432" status="PASS" endtime="20161110 16:19:00.900"></status>
</kw>
<kw name="BMC Power On" library="powerons">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.900">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status starttime="20161110 16:19:00.900" status="PASS" endtime="20161110 16:19:00.901"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:19:00.902">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 16:19:00.902" status="FAIL" endtime="20161110 16:19:00.902"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:00.902">${has_host} = False</msg>
<status starttime="20161110 16:19:00.901" status="PASS" endtime="20161110 16:19:00.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 16:19:00.907" status="PASS" endtime="20161110 16:19:00.907"></status>
</kw>
<status starttime="20161110 16:19:00.903" status="PASS" endtime="20161110 16:19:00.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.912">${port_num} = 22</msg>
<status starttime="20161110 16:19:00.912" status="PASS" endtime="20161110 16:19:00.913"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.913">${SSH_PORT} = 22</msg>
<status starttime="20161110 16:19:00.913" status="PASS" endtime="20161110 16:19:00.913"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:00.913">${https_num} = 443</msg>
<status starttime="20161110 16:19:00.913" status="PASS" endtime="20161110 16:19:00.914"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:00.914">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 16:19:00.914" status="PASS" endtime="20161110 16:19:00.914"></status>
</kw>
<status starttime="20161110 16:19:00.911" status="PASS" endtime="20161110 16:19:00.915"></status>
</kw>
<status starttime="20161110 16:19:00.908" status="PASS" endtime="20161110 16:19:00.915"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:19:00.915">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 16:19:00.915" status="FAIL" endtime="20161110 16:19:00.916"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:00.916">${has_port} = False</msg>
<status starttime="20161110 16:19:00.915" status="PASS" endtime="20161110 16:19:00.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 16:19:00.919" status="PASS" endtime="20161110 16:19:00.920"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 16:19:00.920" status="PASS" endtime="20161110 16:19:00.920"></status>
</kw>
<status starttime="20161110 16:19:00.919" status="PASS" endtime="20161110 16:19:00.920"></status>
</kw>
<status starttime="20161110 16:19:00.916" status="PASS" endtime="20161110 16:19:00.920"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:00.921">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 16:19:05.067">Read output:</msg>
<status starttime="20161110 16:19:00.921" status="PASS" endtime="20161110 16:19:05.067"></status>
</kw>
<status starttime="20161110 16:19:00.901" status="PASS" endtime="20161110 16:19:05.067"></status>
</kw>
<kw name="Initiate Power On" library="utils">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.069">@{arglist} = [ ]</msg>
<status starttime="20161110 16:19:05.069" status="PASS" endtime="20161110 16:19:05.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.070">${args} = {u'data': []}</msg>
<status starttime="20161110 16:19:05.069" status="PASS" endtime="20161110 16:19:05.070"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.072">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 16:19:05.071" status="PASS" endtime="20161110 16:19:05.072"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.073">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status starttime="20161110 16:19:05.073" status="PASS" endtime="20161110 16:19:05.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.074">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:05.074" status="PASS" endtime="20161110 16:19:05.074"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:19:05.074" status="PASS" endtime="20161110 16:19:05.075"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.077">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:05.076" status="PASS" endtime="20161110 16:19:05.077"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:05.078">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:05.077" status="PASS" endtime="20161110 16:19:05.078"></status>
</kw>
<status starttime="20161110 16:19:05.077" status="PASS" endtime="20161110 16:19:05.078"></status>
</kw>
<status starttime="20161110 16:19:05.075" status="PASS" endtime="20161110 16:19:05.078"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:05.079">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:19:05.079" status="PASS" endtime="20161110 16:19:05.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.080">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:05.080" status="PASS" endtime="20161110 16:19:05.080"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.081">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:19:05.080" status="PASS" endtime="20161110 16:19:05.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.081">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:19:05.081" status="PASS" endtime="20161110 16:19:05.081"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.412">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:05.412">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:05.082" status="PASS" endtime="20161110 16:19:05.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:05.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:05.412" status="PASS" endtime="20161110 16:19:05.413"></status>
</kw>
<status starttime="20161110 16:19:05.078" status="PASS" endtime="20161110 16:19:05.413"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.675">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:05.675">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:05.413" status="PASS" endtime="20161110 16:19:05.675"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.677">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:05.676" status="PASS" endtime="20161110 16:19:05.677"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:05.679">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:05.678" status="PASS" endtime="20161110 16:19:05.679"></status>
</kw>
<status starttime="20161110 16:19:05.677" status="PASS" endtime="20161110 16:19:05.679"></status>
</kw>
<status starttime="20161110 16:19:05.676" status="PASS" endtime="20161110 16:19:05.679"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:05.679">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:05.072" status="PASS" endtime="20161110 16:19:05.679"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:05.680">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:05.070" status="PASS" endtime="20161110 16:19:05.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:05.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:05.680" status="PASS" endtime="20161110 16:19:05.681"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.684">@{arglist} = [ ]</msg>
<status starttime="20161110 16:19:05.683" status="PASS" endtime="20161110 16:19:05.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.685">${args} = {u'data': []}</msg>
<status starttime="20161110 16:19:05.684" status="PASS" endtime="20161110 16:19:05.685"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.686">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 16:19:05.686" status="PASS" endtime="20161110 16:19:05.686"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.688">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 16:19:05.688" status="PASS" endtime="20161110 16:19:05.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.689">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:05.688" status="PASS" endtime="20161110 16:19:05.689"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:19:05.689" status="PASS" endtime="20161110 16:19:05.690"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.692">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:05.691" status="PASS" endtime="20161110 16:19:05.692"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:05.693">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:05.693" status="PASS" endtime="20161110 16:19:05.693"></status>
</kw>
<status starttime="20161110 16:19:05.692" status="PASS" endtime="20161110 16:19:05.693"></status>
</kw>
<status starttime="20161110 16:19:05.690" status="PASS" endtime="20161110 16:19:05.693"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:05.694">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:19:05.694" status="PASS" endtime="20161110 16:19:05.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.695">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:05.695" status="PASS" endtime="20161110 16:19:05.695"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.695">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:19:05.695" status="PASS" endtime="20161110 16:19:05.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:05.696">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:19:05.696" status="PASS" endtime="20161110 16:19:05.696"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:06.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:06.049">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:05.696" status="PASS" endtime="20161110 16:19:06.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:06.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:06.050" status="PASS" endtime="20161110 16:19:06.050"></status>
</kw>
<status starttime="20161110 16:19:05.693" status="PASS" endtime="20161110 16:19:06.050"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:11.563">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:11.563">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:06.051" status="PASS" endtime="20161110 16:19:11.563"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:11.565">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:11.564" status="PASS" endtime="20161110 16:19:11.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:11.567">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:11.566" status="PASS" endtime="20161110 16:19:11.567"></status>
</kw>
<status starttime="20161110 16:19:11.565" status="PASS" endtime="20161110 16:19:11.567"></status>
</kw>
<status starttime="20161110 16:19:11.564" status="PASS" endtime="20161110 16:19:11.567"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:11.567">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:05.687" status="PASS" endtime="20161110 16:19:11.567"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:11.568">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:05.685" status="PASS" endtime="20161110 16:19:11.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:11.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:11.568" status="PASS" endtime="20161110 16:19:11.569"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:11.570">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:19:11.570">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:19:11.570">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:19:11.569" status="PASS" endtime="20161110 16:19:11.570"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:11.570">${state} = 0</msg>
<status starttime="20161110 16:19:05.683" status="PASS" endtime="20161110 16:19:11.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:19:11.571">0 != 1</msg>
<status starttime="20161110 16:19:11.571" status="FAIL" endtime="20161110 16:19:11.571"></status>
</kw>
<status starttime="20161110 16:19:05.682" status="FAIL" endtime="20161110 16:19:11.572"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:21.575">@{arglist} = [ ]</msg>
<status starttime="20161110 16:19:21.574" status="PASS" endtime="20161110 16:19:21.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:21.576">${args} = {u'data': []}</msg>
<status starttime="20161110 16:19:21.575" status="PASS" endtime="20161110 16:19:21.576"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:21.578">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 16:19:21.577" status="PASS" endtime="20161110 16:19:21.578"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:21.580">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 16:19:21.579" status="PASS" endtime="20161110 16:19:21.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:21.581">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:21.580" status="PASS" endtime="20161110 16:19:21.581"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:19:21.581" status="PASS" endtime="20161110 16:19:21.581"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:21.584">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:21.583" status="PASS" endtime="20161110 16:19:21.584"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:21.585">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:21.585" status="PASS" endtime="20161110 16:19:21.585"></status>
</kw>
<status starttime="20161110 16:19:21.584" status="PASS" endtime="20161110 16:19:21.585"></status>
</kw>
<status starttime="20161110 16:19:21.582" status="PASS" endtime="20161110 16:19:21.585"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:21.586">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:19:21.586" status="PASS" endtime="20161110 16:19:21.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:21.587">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:21.587" status="PASS" endtime="20161110 16:19:21.587"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:21.587">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:19:21.587" status="PASS" endtime="20161110 16:19:21.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:21.588">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:19:21.588" status="PASS" endtime="20161110 16:19:21.588"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:21.922">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:21.922">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:21.588" status="PASS" endtime="20161110 16:19:21.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:21.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:21.923" status="PASS" endtime="20161110 16:19:21.923"></status>
</kw>
<status starttime="20161110 16:19:21.585" status="PASS" endtime="20161110 16:19:21.923"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.308">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:22.309">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:21.924" status="PASS" endtime="20161110 16:19:22.309"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.310">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:22.309" status="PASS" endtime="20161110 16:19:22.310"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:22.311">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:22.310" status="PASS" endtime="20161110 16:19:22.311"></status>
</kw>
<status starttime="20161110 16:19:22.310" status="PASS" endtime="20161110 16:19:22.311"></status>
</kw>
<status starttime="20161110 16:19:22.309" status="PASS" endtime="20161110 16:19:22.311"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:22.311">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:21.578" status="PASS" endtime="20161110 16:19:22.311"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:22.311">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:21.576" status="PASS" endtime="20161110 16:19:22.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:22.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:22.312" status="PASS" endtime="20161110 16:19:22.312"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.313">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:19:22.313">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:19:22.313">${content} = {u'data': 1, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:19:22.312" status="PASS" endtime="20161110 16:19:22.313"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:22.313">${state} = 1</msg>
<status starttime="20161110 16:19:21.573" status="PASS" endtime="20161110 16:19:22.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<status starttime="20161110 16:19:22.313" status="PASS" endtime="20161110 16:19:22.313"></status>
</kw>
<status starttime="20161110 16:19:21.573" status="PASS" endtime="20161110 16:19:22.314"></status>
</kw>
<status starttime="20161110 16:19:05.681" status="PASS" endtime="20161110 16:19:22.314"></status>
</kw>
<status starttime="20161110 16:19:05.068" status="PASS" endtime="20161110 16:19:22.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' != '${EMPTY}'</arg>
<arg>Wait For OS</arg>
</arguments>
<status starttime="20161110 16:19:22.314" status="PASS" endtime="20161110 16:19:22.316"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>bmc_connection</arg>
</arguments>
<status starttime="20161110 16:19:22.317" status="PASS" endtime="20161110 16:19:22.317"></status>
</kw>
<kw name="Check Power On States" library="powerons">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${OS_WAIT_TIMEOUT}</arg>
<arg>10sec</arg>
<arg>Is Host Booted</arg>
</arguments>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.319">@{arglist} = [ ]</msg>
<status starttime="20161110 16:19:22.319" status="PASS" endtime="20161110 16:19:22.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.319">${args} = {u'data': []}</msg>
<status starttime="20161110 16:19:22.319" status="PASS" endtime="20161110 16:19:22.319"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.320">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:19:22.320" status="PASS" endtime="20161110 16:19:22.320"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.322">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:19:22.321" status="PASS" endtime="20161110 16:19:22.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.322">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:22.322" status="PASS" endtime="20161110 16:19:22.323"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:19:22.323" status="PASS" endtime="20161110 16:19:22.323"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.325">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:22.324" status="PASS" endtime="20161110 16:19:22.325"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:22.326">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:22.326" status="PASS" endtime="20161110 16:19:22.326"></status>
</kw>
<status starttime="20161110 16:19:22.325" status="PASS" endtime="20161110 16:19:22.326"></status>
</kw>
<status starttime="20161110 16:19:22.323" status="PASS" endtime="20161110 16:19:22.326"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:22.327">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:19:22.327" status="PASS" endtime="20161110 16:19:22.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.328">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:22.327" status="PASS" endtime="20161110 16:19:22.328"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.328">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:19:22.328" status="PASS" endtime="20161110 16:19:22.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.329">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:19:22.329" status="PASS" endtime="20161110 16:19:22.329"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:22.659">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:22.659">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:22.329" status="PASS" endtime="20161110 16:19:22.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:22.660">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:22.659" status="PASS" endtime="20161110 16:19:22.660"></status>
</kw>
<status starttime="20161110 16:19:22.326" status="PASS" endtime="20161110 16:19:22.660"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:28.645">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:28.645">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:22.661" status="PASS" endtime="20161110 16:19:28.645"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:28.647">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:28.646" status="PASS" endtime="20161110 16:19:28.647"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:28.648">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:28.648" status="PASS" endtime="20161110 16:19:28.648"></status>
</kw>
<status starttime="20161110 16:19:28.647" status="PASS" endtime="20161110 16:19:28.649"></status>
</kw>
<status starttime="20161110 16:19:28.646" status="PASS" endtime="20161110 16:19:28.649"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:28.649">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:22.321" status="PASS" endtime="20161110 16:19:28.649"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:28.649">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:22.320" status="PASS" endtime="20161110 16:19:28.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:28.650">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:28.650" status="PASS" endtime="20161110 16:19:28.650"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:28.651">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:19:28.651">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:19:28.651">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:19:28.651" status="PASS" endtime="20161110 16:19:28.651"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:28.652">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:19:22.318" status="PASS" endtime="20161110 16:19:28.652"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:19:28.653">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:19:28.652" status="FAIL" endtime="20161110 16:19:28.653"></status>
</kw>
<status starttime="20161110 16:19:22.318" status="FAIL" endtime="20161110 16:19:28.653"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:38.656">@{arglist} = [ ]</msg>
<status starttime="20161110 16:19:38.655" status="PASS" endtime="20161110 16:19:38.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:38.657">${args} = {u'data': []}</msg>
<status starttime="20161110 16:19:38.656" status="PASS" endtime="20161110 16:19:38.657"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:38.659">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:19:38.658" status="PASS" endtime="20161110 16:19:38.659"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:38.661">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:19:38.660" status="PASS" endtime="20161110 16:19:38.661"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:38.662">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:38.662" status="PASS" endtime="20161110 16:19:38.662"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:19:38.663" status="PASS" endtime="20161110 16:19:38.663"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:38.666">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:38.664" status="PASS" endtime="20161110 16:19:38.666"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:38.668">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:38.667" status="PASS" endtime="20161110 16:19:38.668"></status>
</kw>
<status starttime="20161110 16:19:38.666" status="PASS" endtime="20161110 16:19:38.668"></status>
</kw>
<status starttime="20161110 16:19:38.663" status="PASS" endtime="20161110 16:19:38.668"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:38.670">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:19:38.669" status="PASS" endtime="20161110 16:19:38.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:38.671">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:38.671" status="PASS" endtime="20161110 16:19:38.671"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:38.672">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:19:38.672" status="PASS" endtime="20161110 16:19:38.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:38.673">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:19:38.673" status="PASS" endtime="20161110 16:19:38.673"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:39.007">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:39.007">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:38.673" status="PASS" endtime="20161110 16:19:39.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:39.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:39.008" status="PASS" endtime="20161110 16:19:39.008"></status>
</kw>
<status starttime="20161110 16:19:38.669" status="PASS" endtime="20161110 16:19:39.008"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:39.288">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:39.288">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:39.009" status="PASS" endtime="20161110 16:19:39.288"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:39.289">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:39.289" status="PASS" endtime="20161110 16:19:39.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:39.290">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:39.290" status="PASS" endtime="20161110 16:19:39.290"></status>
</kw>
<status starttime="20161110 16:19:39.289" status="PASS" endtime="20161110 16:19:39.290"></status>
</kw>
<status starttime="20161110 16:19:39.288" status="PASS" endtime="20161110 16:19:39.290"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:39.290">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:38.659" status="PASS" endtime="20161110 16:19:39.291"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:39.291">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:38.657" status="PASS" endtime="20161110 16:19:39.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:39.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:39.291" status="PASS" endtime="20161110 16:19:39.291"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:39.292">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:19:39.292">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:19:39.292">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:19:39.291" status="PASS" endtime="20161110 16:19:39.292"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:39.292">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:19:38.654" status="PASS" endtime="20161110 16:19:39.292"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:19:39.293">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:19:39.292" status="FAIL" endtime="20161110 16:19:39.293"></status>
</kw>
<status starttime="20161110 16:19:38.654" status="FAIL" endtime="20161110 16:19:39.293"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.297">@{arglist} = [ ]</msg>
<status starttime="20161110 16:19:49.296" status="PASS" endtime="20161110 16:19:49.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.298">${args} = {u'data': []}</msg>
<status starttime="20161110 16:19:49.297" status="PASS" endtime="20161110 16:19:49.298"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.303">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:19:49.302" status="PASS" endtime="20161110 16:19:49.303"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.305">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:19:49.304" status="PASS" endtime="20161110 16:19:49.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.306">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:49.305" status="PASS" endtime="20161110 16:19:49.306"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:19:49.306" status="PASS" endtime="20161110 16:19:49.307"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.309">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:49.308" status="PASS" endtime="20161110 16:19:49.309"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:49.311">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:49.310" status="PASS" endtime="20161110 16:19:49.311"></status>
</kw>
<status starttime="20161110 16:19:49.309" status="PASS" endtime="20161110 16:19:49.311"></status>
</kw>
<status starttime="20161110 16:19:49.307" status="PASS" endtime="20161110 16:19:49.311"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:49.313">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:19:49.312" status="PASS" endtime="20161110 16:19:49.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.314">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:49.313" status="PASS" endtime="20161110 16:19:49.314"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.314">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:19:49.314" status="PASS" endtime="20161110 16:19:49.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.315">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:19:49.314" status="PASS" endtime="20161110 16:19:49.315"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.645">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:49.645">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:49.315" status="PASS" endtime="20161110 16:19:49.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:49.646">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:49.645" status="PASS" endtime="20161110 16:19:49.646"></status>
</kw>
<status starttime="20161110 16:19:49.311" status="PASS" endtime="20161110 16:19:49.646"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.933">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:19:49.933">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:49.647" status="PASS" endtime="20161110 16:19:49.934"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.935">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:49.935" status="PASS" endtime="20161110 16:19:49.935"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:49.937">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:19:49.936" status="PASS" endtime="20161110 16:19:49.937"></status>
</kw>
<status starttime="20161110 16:19:49.936" status="PASS" endtime="20161110 16:19:49.937"></status>
</kw>
<status starttime="20161110 16:19:49.934" status="PASS" endtime="20161110 16:19:49.937"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:49.938">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:49.303" status="PASS" endtime="20161110 16:19:49.938"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:49.938">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:49.298" status="PASS" endtime="20161110 16:19:49.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:49.939">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:19:49.938" status="PASS" endtime="20161110 16:19:49.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:49.940">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:19:49.940">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:19:49.940">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:19:49.939" status="PASS" endtime="20161110 16:19:49.940"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:19:49.941">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:19:49.296" status="PASS" endtime="20161110 16:19:49.941"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:19:49.942">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:19:49.941" status="FAIL" endtime="20161110 16:19:49.942"></status>
</kw>
<status starttime="20161110 16:19:49.294" status="FAIL" endtime="20161110 16:19:49.942"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:59.945">@{arglist} = [ ]</msg>
<status starttime="20161110 16:19:59.945" status="PASS" endtime="20161110 16:19:59.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:59.946">${args} = {u'data': []}</msg>
<status starttime="20161110 16:19:59.946" status="PASS" endtime="20161110 16:19:59.946"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:59.947">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:19:59.947" status="PASS" endtime="20161110 16:19:59.947"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:59.948">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:19:59.948" status="PASS" endtime="20161110 16:19:59.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:59.949">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:59.949" status="PASS" endtime="20161110 16:19:59.949"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:19:59.949" status="PASS" endtime="20161110 16:19:59.949"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:59.951">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:59.950" status="PASS" endtime="20161110 16:19:59.951"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:59.952">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:19:59.951" status="PASS" endtime="20161110 16:19:59.952"></status>
</kw>
<status starttime="20161110 16:19:59.951" status="PASS" endtime="20161110 16:19:59.952"></status>
</kw>
<status starttime="20161110 16:19:59.949" status="PASS" endtime="20161110 16:19:59.952"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:19:59.953">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:19:59.952" status="PASS" endtime="20161110 16:19:59.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:59.954">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:19:59.954" status="PASS" endtime="20161110 16:19:59.954"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:59.954">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:19:59.954" status="PASS" endtime="20161110 16:19:59.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:19:59.955">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:19:59.955" status="PASS" endtime="20161110 16:19:59.955"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:00.289">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:20:00.289">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:59.955" status="PASS" endtime="20161110 16:20:00.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:00.290">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:20:00.289" status="PASS" endtime="20161110 16:20:00.290"></status>
</kw>
<status starttime="20161110 16:19:59.952" status="PASS" endtime="20161110 16:20:00.290"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:00.564">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:20:00.565">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:00.290" status="PASS" endtime="20161110 16:20:00.565"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:00.566">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:20:00.565" status="PASS" endtime="20161110 16:20:00.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:00.566">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:20:00.566" status="PASS" endtime="20161110 16:20:00.567"></status>
</kw>
<status starttime="20161110 16:20:00.566" status="PASS" endtime="20161110 16:20:00.567"></status>
</kw>
<status starttime="20161110 16:20:00.565" status="PASS" endtime="20161110 16:20:00.567"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:00.567">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:59.947" status="PASS" endtime="20161110 16:20:00.567"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:00.567">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:19:59.946" status="PASS" endtime="20161110 16:20:00.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:00.568">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:20:00.567" status="PASS" endtime="20161110 16:20:00.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:00.568">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:20:00.568">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:20:00.568">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:20:00.568" status="PASS" endtime="20161110 16:20:00.568"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:00.569">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:19:59.945" status="PASS" endtime="20161110 16:20:00.569"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:20:00.569">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:20:00.569" status="FAIL" endtime="20161110 16:20:00.569"></status>
</kw>
<status starttime="20161110 16:19:59.943" status="FAIL" endtime="20161110 16:20:00.569"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:10.571">@{arglist} = [ ]</msg>
<status starttime="20161110 16:20:10.571" status="PASS" endtime="20161110 16:20:10.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:10.572">${args} = {u'data': []}</msg>
<status starttime="20161110 16:20:10.571" status="PASS" endtime="20161110 16:20:10.572"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:10.573">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:20:10.573" status="PASS" endtime="20161110 16:20:10.573"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:10.574">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:20:10.574" status="PASS" endtime="20161110 16:20:10.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:10.575">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:20:10.575" status="PASS" endtime="20161110 16:20:10.575"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:20:10.575" status="PASS" endtime="20161110 16:20:10.576"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:10.579">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:20:10.577" status="PASS" endtime="20161110 16:20:10.579"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:10.580">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:20:10.580" status="PASS" endtime="20161110 16:20:10.580"></status>
</kw>
<status starttime="20161110 16:20:10.579" status="PASS" endtime="20161110 16:20:10.580"></status>
</kw>
<status starttime="20161110 16:20:10.576" status="PASS" endtime="20161110 16:20:10.580"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:10.582">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:20:10.581" status="PASS" endtime="20161110 16:20:10.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:10.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:20:10.582" status="PASS" endtime="20161110 16:20:10.583"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:10.583">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:20:10.583" status="PASS" endtime="20161110 16:20:10.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:10.584">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:20:10.584" status="PASS" endtime="20161110 16:20:10.584"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:10.920">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:20:10.920">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:10.584" status="PASS" endtime="20161110 16:20:10.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:10.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:20:10.921" status="PASS" endtime="20161110 16:20:10.922"></status>
</kw>
<status starttime="20161110 16:20:10.581" status="PASS" endtime="20161110 16:20:10.922"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:11.231">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:20:11.231">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:10.922" status="PASS" endtime="20161110 16:20:11.231"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:11.233">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:20:11.232" status="PASS" endtime="20161110 16:20:11.233"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:11.235">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:20:11.234" status="PASS" endtime="20161110 16:20:11.235"></status>
</kw>
<status starttime="20161110 16:20:11.233" status="PASS" endtime="20161110 16:20:11.235"></status>
</kw>
<status starttime="20161110 16:20:11.231" status="PASS" endtime="20161110 16:20:11.235"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:11.235">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:10.573" status="PASS" endtime="20161110 16:20:11.235"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:11.236">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:10.572" status="PASS" endtime="20161110 16:20:11.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:11.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:20:11.236" status="PASS" endtime="20161110 16:20:11.237"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:11.238">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:20:11.238">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:20:11.238">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:20:11.237" status="PASS" endtime="20161110 16:20:11.238"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:11.238">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:20:10.570" status="PASS" endtime="20161110 16:20:11.239"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:20:11.240">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:20:11.239" status="FAIL" endtime="20161110 16:20:11.240"></status>
</kw>
<status starttime="20161110 16:20:10.570" status="FAIL" endtime="20161110 16:20:11.240"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.243">@{arglist} = [ ]</msg>
<status starttime="20161110 16:20:21.243" status="PASS" endtime="20161110 16:20:21.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.244">${args} = {u'data': []}</msg>
<status starttime="20161110 16:20:21.244" status="PASS" endtime="20161110 16:20:21.244"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.246">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:20:21.245" status="PASS" endtime="20161110 16:20:21.246"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.248">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:20:21.247" status="PASS" endtime="20161110 16:20:21.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:20:21.248" status="PASS" endtime="20161110 16:20:21.249"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:20:21.249" status="PASS" endtime="20161110 16:20:21.250"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.252">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:20:21.251" status="PASS" endtime="20161110 16:20:21.252"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:21.253">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:20:21.253" status="PASS" endtime="20161110 16:20:21.253"></status>
</kw>
<status starttime="20161110 16:20:21.252" status="PASS" endtime="20161110 16:20:21.253"></status>
</kw>
<status starttime="20161110 16:20:21.250" status="PASS" endtime="20161110 16:20:21.254"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:21.254">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:20:21.254" status="PASS" endtime="20161110 16:20:21.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.255">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:20:21.255" status="PASS" endtime="20161110 16:20:21.255"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.256">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:20:21.256" status="PASS" endtime="20161110 16:20:21.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.256">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:20:21.256" status="PASS" endtime="20161110 16:20:21.257"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.591">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:20:21.591">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:21.257" status="PASS" endtime="20161110 16:20:21.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:21.592">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:20:21.591" status="PASS" endtime="20161110 16:20:21.592"></status>
</kw>
<status starttime="20161110 16:20:21.254" status="PASS" endtime="20161110 16:20:21.593"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.869">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:20:21.869">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:21.593" status="PASS" endtime="20161110 16:20:21.869"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.871">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:20:21.870" status="PASS" endtime="20161110 16:20:21.871"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:21.872">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:20:21.872" status="PASS" endtime="20161110 16:20:21.872"></status>
</kw>
<status starttime="20161110 16:20:21.871" status="PASS" endtime="20161110 16:20:21.872"></status>
</kw>
<status starttime="20161110 16:20:21.869" status="PASS" endtime="20161110 16:20:21.873"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:21.873">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:21.246" status="PASS" endtime="20161110 16:20:21.873"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:21.873">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:21.245" status="PASS" endtime="20161110 16:20:21.873"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:21.874">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:20:21.874" status="PASS" endtime="20161110 16:20:21.874"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:21.875">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:20:21.875">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:20:21.875">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:20:21.875" status="PASS" endtime="20161110 16:20:21.876"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:21.876">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:20:21.242" status="PASS" endtime="20161110 16:20:21.876"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:20:21.877">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:20:21.876" status="FAIL" endtime="20161110 16:20:21.877"></status>
</kw>
<status starttime="20161110 16:20:21.241" status="FAIL" endtime="20161110 16:20:21.877"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:31.879">@{arglist} = [ ]</msg>
<status starttime="20161110 16:20:31.879" status="PASS" endtime="20161110 16:20:31.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:31.880">${args} = {u'data': []}</msg>
<status starttime="20161110 16:20:31.880" status="PASS" endtime="20161110 16:20:31.881"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:31.882">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:20:31.882" status="PASS" endtime="20161110 16:20:31.883"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:31.885">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:20:31.884" status="PASS" endtime="20161110 16:20:31.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:31.885">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:20:31.885" status="PASS" endtime="20161110 16:20:31.886"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:20:31.886" status="PASS" endtime="20161110 16:20:31.886"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:31.889">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:20:31.888" status="PASS" endtime="20161110 16:20:31.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:31.891">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:20:31.890" status="PASS" endtime="20161110 16:20:31.891"></status>
</kw>
<status starttime="20161110 16:20:31.889" status="PASS" endtime="20161110 16:20:31.891"></status>
</kw>
<status starttime="20161110 16:20:31.887" status="PASS" endtime="20161110 16:20:31.891"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:31.893">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:20:31.892" status="PASS" endtime="20161110 16:20:31.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:31.894">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:20:31.894" status="PASS" endtime="20161110 16:20:31.894"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:31.894">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:20:31.894" status="PASS" endtime="20161110 16:20:31.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:31.895">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:20:31.895" status="PASS" endtime="20161110 16:20:31.895"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:32.223">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:20:32.223">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:31.895" status="PASS" endtime="20161110 16:20:32.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:32.224">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:20:32.223" status="PASS" endtime="20161110 16:20:32.224"></status>
</kw>
<status starttime="20161110 16:20:31.892" status="PASS" endtime="20161110 16:20:32.224"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:38.567">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:20:38.567">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:32.224" status="PASS" endtime="20161110 16:20:38.567"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:38.569">${msg} = Response code:200, Content:{
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:20:38.568" status="PASS" endtime="20161110 16:20:38.569"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:38.570">Response code:200, Content:{
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:20:38.570" status="PASS" endtime="20161110 16:20:38.571"></status>
</kw>
<status starttime="20161110 16:20:38.569" status="PASS" endtime="20161110 16:20:38.571"></status>
</kw>
<status starttime="20161110 16:20:38.567" status="PASS" endtime="20161110 16:20:38.571"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:38.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:31.883" status="PASS" endtime="20161110 16:20:38.571"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:38.572">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:31.881" status="PASS" endtime="20161110 16:20:38.572"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:38.573">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:20:38.572" status="PASS" endtime="20161110 16:20:38.573"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:38.574">To JSON using : content={
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:20:38.574">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:20:38.574">${content} = {u'data': u'HOST_POWERING_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:20:38.573" status="PASS" endtime="20161110 16:20:38.574"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:38.575">${bmc_state} = HOST_POWERING_ON</msg>
<status starttime="20161110 16:20:31.878" status="PASS" endtime="20161110 16:20:38.575"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:20:38.576">'HOST_POWERING_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:20:38.575" status="FAIL" endtime="20161110 16:20:38.576"></status>
</kw>
<status starttime="20161110 16:20:31.878" status="FAIL" endtime="20161110 16:20:38.576"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:48.579">@{arglist} = [ ]</msg>
<status starttime="20161110 16:20:48.578" status="PASS" endtime="20161110 16:20:48.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:48.580">${args} = {u'data': []}</msg>
<status starttime="20161110 16:20:48.579" status="PASS" endtime="20161110 16:20:48.580"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:48.583">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:20:48.582" status="PASS" endtime="20161110 16:20:48.583"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:48.586">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:20:48.585" status="PASS" endtime="20161110 16:20:48.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:48.587">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:20:48.587" status="PASS" endtime="20161110 16:20:48.588"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:20:48.588" status="PASS" endtime="20161110 16:20:48.589"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:48.592">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:20:48.590" status="PASS" endtime="20161110 16:20:48.592"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:48.594">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:20:48.593" status="PASS" endtime="20161110 16:20:48.594"></status>
</kw>
<status starttime="20161110 16:20:48.592" status="PASS" endtime="20161110 16:20:48.594"></status>
</kw>
<status starttime="20161110 16:20:48.589" status="PASS" endtime="20161110 16:20:48.594"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:48.595">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:20:48.595" status="PASS" endtime="20161110 16:20:48.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:48.596">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:20:48.596" status="PASS" endtime="20161110 16:20:48.596"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:48.596">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:20:48.596" status="PASS" endtime="20161110 16:20:48.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:48.597">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:20:48.597" status="PASS" endtime="20161110 16:20:48.597"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:51.005">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:20:51.005">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:48.597" status="PASS" endtime="20161110 16:20:51.005"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:51.007">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:20:51.006" status="PASS" endtime="20161110 16:20:51.007"></status>
</kw>
<status starttime="20161110 16:20:48.594" status="PASS" endtime="20161110 16:20:51.007"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:51.292">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:20:51.292">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:51.007" status="PASS" endtime="20161110 16:20:51.292"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:51.294">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:20:51.294" status="PASS" endtime="20161110 16:20:51.294"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:51.296">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:20:51.295" status="PASS" endtime="20161110 16:20:51.296"></status>
</kw>
<status starttime="20161110 16:20:51.295" status="PASS" endtime="20161110 16:20:51.296"></status>
</kw>
<status starttime="20161110 16:20:51.293" status="PASS" endtime="20161110 16:20:51.296"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:51.297">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:48.584" status="PASS" endtime="20161110 16:20:51.297"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:51.297">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:20:48.580" status="PASS" endtime="20161110 16:20:51.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:20:51.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:20:51.297" status="PASS" endtime="20161110 16:20:51.298"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:20:51.299">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:20:51.299">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:20:51.300">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:20:51.299" status="PASS" endtime="20161110 16:20:51.300"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:20:51.300">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:20:48.578" status="PASS" endtime="20161110 16:20:51.300"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:20:51.302">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:20:51.301" status="FAIL" endtime="20161110 16:20:51.302"></status>
</kw>
<status starttime="20161110 16:20:48.577" status="FAIL" endtime="20161110 16:20:51.302"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.305">@{arglist} = [ ]</msg>
<status starttime="20161110 16:21:01.304" status="PASS" endtime="20161110 16:21:01.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.306">${args} = {u'data': []}</msg>
<status starttime="20161110 16:21:01.305" status="PASS" endtime="20161110 16:21:01.306"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.308">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:21:01.307" status="PASS" endtime="20161110 16:21:01.308"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.310">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:21:01.309" status="PASS" endtime="20161110 16:21:01.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.311">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:01.310" status="PASS" endtime="20161110 16:21:01.311"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:21:01.311" status="PASS" endtime="20161110 16:21:01.311"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.314">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:01.313" status="PASS" endtime="20161110 16:21:01.314"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:01.315">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:01.314" status="PASS" endtime="20161110 16:21:01.315"></status>
</kw>
<status starttime="20161110 16:21:01.314" status="PASS" endtime="20161110 16:21:01.315"></status>
</kw>
<status starttime="20161110 16:21:01.312" status="PASS" endtime="20161110 16:21:01.315"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:01.316">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:21:01.315" status="PASS" endtime="20161110 16:21:01.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:01.317" status="PASS" endtime="20161110 16:21:01.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.318">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:21:01.317" status="PASS" endtime="20161110 16:21:01.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.319">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:21:01.318" status="PASS" endtime="20161110 16:21:01.319"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.654">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:01.654">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:01.319" status="PASS" endtime="20161110 16:21:01.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:01.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:01.655" status="PASS" endtime="20161110 16:21:01.656"></status>
</kw>
<status starttime="20161110 16:21:01.315" status="PASS" endtime="20161110 16:21:01.656"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.934">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:01.935">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:01.656" status="PASS" endtime="20161110 16:21:01.935"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.937">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:01.936" status="PASS" endtime="20161110 16:21:01.937"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:01.938">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:01.938" status="PASS" endtime="20161110 16:21:01.939"></status>
</kw>
<status starttime="20161110 16:21:01.937" status="PASS" endtime="20161110 16:21:01.939"></status>
</kw>
<status starttime="20161110 16:21:01.935" status="PASS" endtime="20161110 16:21:01.939"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:01.939">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:01.308" status="PASS" endtime="20161110 16:21:01.939"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:01.940">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:01.306" status="PASS" endtime="20161110 16:21:01.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:01.941">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:01.940" status="PASS" endtime="20161110 16:21:01.941"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:01.941">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:21:01.942">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:21:01.942">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:21:01.941" status="PASS" endtime="20161110 16:21:01.942"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:01.942">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:21:01.304" status="PASS" endtime="20161110 16:21:01.942"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:21:01.943">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:21:01.943" status="FAIL" endtime="20161110 16:21:01.944"></status>
</kw>
<status starttime="20161110 16:21:01.303" status="FAIL" endtime="20161110 16:21:01.944"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:11.946">@{arglist} = [ ]</msg>
<status starttime="20161110 16:21:11.946" status="PASS" endtime="20161110 16:21:11.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:11.948">${args} = {u'data': []}</msg>
<status starttime="20161110 16:21:11.947" status="PASS" endtime="20161110 16:21:11.948"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:11.949">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:21:11.949" status="PASS" endtime="20161110 16:21:11.949"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:11.952">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:21:11.951" status="PASS" endtime="20161110 16:21:11.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:11.953">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:11.952" status="PASS" endtime="20161110 16:21:11.953"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:21:11.953" status="PASS" endtime="20161110 16:21:11.954"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:11.956">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:11.955" status="PASS" endtime="20161110 16:21:11.956"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:11.958">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:11.957" status="PASS" endtime="20161110 16:21:11.958"></status>
</kw>
<status starttime="20161110 16:21:11.957" status="PASS" endtime="20161110 16:21:11.958"></status>
</kw>
<status starttime="20161110 16:21:11.954" status="PASS" endtime="20161110 16:21:11.958"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:11.960">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:21:11.959" status="PASS" endtime="20161110 16:21:11.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:11.961">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:11.961" status="PASS" endtime="20161110 16:21:11.961"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:11.962">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:21:11.961" status="PASS" endtime="20161110 16:21:11.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:11.963">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:21:11.963" status="PASS" endtime="20161110 16:21:11.963"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:12.295">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:12.295">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:11.964" status="PASS" endtime="20161110 16:21:12.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:12.296">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:12.295" status="PASS" endtime="20161110 16:21:12.296"></status>
</kw>
<status starttime="20161110 16:21:11.958" status="PASS" endtime="20161110 16:21:12.296"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:12.638">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:12.638">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:12.296" status="PASS" endtime="20161110 16:21:12.638"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:12.640">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:12.639" status="PASS" endtime="20161110 16:21:12.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:12.640">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:12.640" status="PASS" endtime="20161110 16:21:12.640"></status>
</kw>
<status starttime="20161110 16:21:12.640" status="PASS" endtime="20161110 16:21:12.641"></status>
</kw>
<status starttime="20161110 16:21:12.638" status="PASS" endtime="20161110 16:21:12.641"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:12.641">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:11.950" status="PASS" endtime="20161110 16:21:12.641"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:12.641">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:11.948" status="PASS" endtime="20161110 16:21:12.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:12.642">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:12.641" status="PASS" endtime="20161110 16:21:12.642"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:12.642">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:21:12.642">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:21:12.642">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:21:12.642" status="PASS" endtime="20161110 16:21:12.642"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:12.643">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:21:11.945" status="PASS" endtime="20161110 16:21:12.643"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:21:12.643">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:21:12.643" status="FAIL" endtime="20161110 16:21:12.644"></status>
</kw>
<status starttime="20161110 16:21:11.944" status="FAIL" endtime="20161110 16:21:12.644"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:22.646">@{arglist} = [ ]</msg>
<status starttime="20161110 16:21:22.646" status="PASS" endtime="20161110 16:21:22.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:22.648">${args} = {u'data': []}</msg>
<status starttime="20161110 16:21:22.647" status="PASS" endtime="20161110 16:21:22.648"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:22.650">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:21:22.649" status="PASS" endtime="20161110 16:21:22.650"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:22.653">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:21:22.653" status="PASS" endtime="20161110 16:21:22.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:22.655">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:22.654" status="PASS" endtime="20161110 16:21:22.655"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:21:22.655" status="PASS" endtime="20161110 16:21:22.656"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:22.659">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:22.657" status="PASS" endtime="20161110 16:21:22.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:22.660">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:22.660" status="PASS" endtime="20161110 16:21:22.660"></status>
</kw>
<status starttime="20161110 16:21:22.659" status="PASS" endtime="20161110 16:21:22.661"></status>
</kw>
<status starttime="20161110 16:21:22.656" status="PASS" endtime="20161110 16:21:22.661"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:22.662">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:21:22.662" status="PASS" endtime="20161110 16:21:22.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:22.664">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:22.663" status="PASS" endtime="20161110 16:21:22.664"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:22.664">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:21:22.664" status="PASS" endtime="20161110 16:21:22.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:22.665">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:21:22.664" status="PASS" endtime="20161110 16:21:22.665"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:23.001">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:23.001">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:22.665" status="PASS" endtime="20161110 16:21:23.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:23.002">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:23.001" status="PASS" endtime="20161110 16:21:23.002"></status>
</kw>
<status starttime="20161110 16:21:22.661" status="PASS" endtime="20161110 16:21:23.002"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:23.282">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:23.282">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:23.002" status="PASS" endtime="20161110 16:21:23.282"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:23.283">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:23.283" status="PASS" endtime="20161110 16:21:23.283"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:23.284">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:23.284" status="PASS" endtime="20161110 16:21:23.284"></status>
</kw>
<status starttime="20161110 16:21:23.284" status="PASS" endtime="20161110 16:21:23.284"></status>
</kw>
<status starttime="20161110 16:21:23.282" status="PASS" endtime="20161110 16:21:23.285"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:23.285">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:22.651" status="PASS" endtime="20161110 16:21:23.285"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:23.285">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:22.648" status="PASS" endtime="20161110 16:21:23.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:23.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:23.285" status="PASS" endtime="20161110 16:21:23.286"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:23.286">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:21:23.286">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:21:23.286">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:21:23.286" status="PASS" endtime="20161110 16:21:23.286"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:23.286">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:21:22.645" status="PASS" endtime="20161110 16:21:23.286"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:21:23.287">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:21:23.287" status="FAIL" endtime="20161110 16:21:23.287"></status>
</kw>
<status starttime="20161110 16:21:22.644" status="FAIL" endtime="20161110 16:21:23.287"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.290">@{arglist} = [ ]</msg>
<status starttime="20161110 16:21:33.289" status="PASS" endtime="20161110 16:21:33.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.291">${args} = {u'data': []}</msg>
<status starttime="20161110 16:21:33.290" status="PASS" endtime="20161110 16:21:33.291"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.292">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:21:33.292" status="PASS" endtime="20161110 16:21:33.292"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.294">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:21:33.294" status="PASS" endtime="20161110 16:21:33.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.295">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:33.295" status="PASS" endtime="20161110 16:21:33.295"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:21:33.296" status="PASS" endtime="20161110 16:21:33.296"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.299">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:33.297" status="PASS" endtime="20161110 16:21:33.299"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:33.300">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:33.300" status="PASS" endtime="20161110 16:21:33.301"></status>
</kw>
<status starttime="20161110 16:21:33.299" status="PASS" endtime="20161110 16:21:33.301"></status>
</kw>
<status starttime="20161110 16:21:33.296" status="PASS" endtime="20161110 16:21:33.301"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:33.303">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:21:33.302" status="PASS" endtime="20161110 16:21:33.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.304">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:33.304" status="PASS" endtime="20161110 16:21:33.304"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.305">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:21:33.304" status="PASS" endtime="20161110 16:21:33.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.305">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:21:33.305" status="PASS" endtime="20161110 16:21:33.305"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.632">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:33.632">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:33.305" status="PASS" endtime="20161110 16:21:33.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:33.632">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:33.632" status="PASS" endtime="20161110 16:21:33.632"></status>
</kw>
<status starttime="20161110 16:21:33.301" status="PASS" endtime="20161110 16:21:33.633"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.924">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:33.924">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:33.633" status="PASS" endtime="20161110 16:21:33.924"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.926">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:33.925" status="PASS" endtime="20161110 16:21:33.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:33.927">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:33.927" status="PASS" endtime="20161110 16:21:33.927"></status>
</kw>
<status starttime="20161110 16:21:33.926" status="PASS" endtime="20161110 16:21:33.927"></status>
</kw>
<status starttime="20161110 16:21:33.924" status="PASS" endtime="20161110 16:21:33.928"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:33.928">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:33.293" status="PASS" endtime="20161110 16:21:33.928"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:33.928">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:33.291" status="PASS" endtime="20161110 16:21:33.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:33.929">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:33.929" status="PASS" endtime="20161110 16:21:33.929"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:33.930">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:21:33.930">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:21:33.930">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:21:33.930" status="PASS" endtime="20161110 16:21:33.930"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:33.931">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:21:33.288" status="PASS" endtime="20161110 16:21:33.931"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:21:33.932">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:21:33.931" status="FAIL" endtime="20161110 16:21:33.932"></status>
</kw>
<status starttime="20161110 16:21:33.288" status="FAIL" endtime="20161110 16:21:33.932"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:43.935">@{arglist} = [ ]</msg>
<status starttime="20161110 16:21:43.934" status="PASS" endtime="20161110 16:21:43.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:43.936">${args} = {u'data': []}</msg>
<status starttime="20161110 16:21:43.935" status="PASS" endtime="20161110 16:21:43.936"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:43.938">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:21:43.937" status="PASS" endtime="20161110 16:21:43.938"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:43.940">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:21:43.939" status="PASS" endtime="20161110 16:21:43.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:43.941">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:43.940" status="PASS" endtime="20161110 16:21:43.941"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:21:43.941" status="PASS" endtime="20161110 16:21:43.942"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:43.944">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:43.943" status="PASS" endtime="20161110 16:21:43.944"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:43.945">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:43.945" status="PASS" endtime="20161110 16:21:43.945"></status>
</kw>
<status starttime="20161110 16:21:43.944" status="PASS" endtime="20161110 16:21:43.945"></status>
</kw>
<status starttime="20161110 16:21:43.942" status="PASS" endtime="20161110 16:21:43.945"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:43.946">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:21:43.946" status="PASS" endtime="20161110 16:21:43.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:43.947">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:43.947" status="PASS" endtime="20161110 16:21:43.947"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:43.947">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:21:43.947" status="PASS" endtime="20161110 16:21:43.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:43.948">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:21:43.948" status="PASS" endtime="20161110 16:21:43.948"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:46.473">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:46.473">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:43.948" status="PASS" endtime="20161110 16:21:46.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:46.474">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:46.473" status="PASS" endtime="20161110 16:21:46.474"></status>
</kw>
<status starttime="20161110 16:21:43.945" status="PASS" endtime="20161110 16:21:46.474"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:46.748">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:46.749">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:46.474" status="PASS" endtime="20161110 16:21:46.749"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:46.750">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:46.750" status="PASS" endtime="20161110 16:21:46.750"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:46.751">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:46.751" status="PASS" endtime="20161110 16:21:46.751"></status>
</kw>
<status starttime="20161110 16:21:46.750" status="PASS" endtime="20161110 16:21:46.752"></status>
</kw>
<status starttime="20161110 16:21:46.749" status="PASS" endtime="20161110 16:21:46.752"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:46.752">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:43.938" status="PASS" endtime="20161110 16:21:46.752"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:46.752">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:43.936" status="PASS" endtime="20161110 16:21:46.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:46.753">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:46.753" status="PASS" endtime="20161110 16:21:46.753"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:46.754">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:21:46.754">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:21:46.754">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:21:46.753" status="PASS" endtime="20161110 16:21:46.754"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:46.755">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:21:43.933" status="PASS" endtime="20161110 16:21:46.755"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:21:46.756">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:21:46.755" status="FAIL" endtime="20161110 16:21:46.756"></status>
</kw>
<status starttime="20161110 16:21:43.933" status="FAIL" endtime="20161110 16:21:46.756"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:56.758">@{arglist} = [ ]</msg>
<status starttime="20161110 16:21:56.758" status="PASS" endtime="20161110 16:21:56.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:56.759">${args} = {u'data': []}</msg>
<status starttime="20161110 16:21:56.758" status="PASS" endtime="20161110 16:21:56.759"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:56.760">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:21:56.760" status="PASS" endtime="20161110 16:21:56.760"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:56.762">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:21:56.761" status="PASS" endtime="20161110 16:21:56.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:56.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:56.762" status="PASS" endtime="20161110 16:21:56.763"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:21:56.763" status="PASS" endtime="20161110 16:21:56.763"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:56.765">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:56.764" status="PASS" endtime="20161110 16:21:56.765"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:56.766">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:21:56.766" status="PASS" endtime="20161110 16:21:56.766"></status>
</kw>
<status starttime="20161110 16:21:56.765" status="PASS" endtime="20161110 16:21:56.767"></status>
</kw>
<status starttime="20161110 16:21:56.763" status="PASS" endtime="20161110 16:21:56.767"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:56.768">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:21:56.767" status="PASS" endtime="20161110 16:21:56.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:56.769">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:21:56.769" status="PASS" endtime="20161110 16:21:56.769"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:56.770">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:21:56.770" status="PASS" endtime="20161110 16:21:56.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:56.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:21:56.771" status="PASS" endtime="20161110 16:21:56.771"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:57.099">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:57.099">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:56.771" status="PASS" endtime="20161110 16:21:57.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:57.100">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:57.100" status="PASS" endtime="20161110 16:21:57.100"></status>
</kw>
<status starttime="20161110 16:21:56.767" status="PASS" endtime="20161110 16:21:57.100"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:57.386">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:21:57.386">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:57.101" status="PASS" endtime="20161110 16:21:57.386"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:57.387">${msg} = Response code:200, Content:{
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:57.386" status="PASS" endtime="20161110 16:21:57.387"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:57.388">Response code:200, Content:{
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:21:57.387" status="PASS" endtime="20161110 16:21:57.388"></status>
</kw>
<status starttime="20161110 16:21:57.387" status="PASS" endtime="20161110 16:21:57.388"></status>
</kw>
<status starttime="20161110 16:21:57.386" status="PASS" endtime="20161110 16:21:57.388"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:57.388">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:56.760" status="PASS" endtime="20161110 16:21:57.388"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:57.388">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:21:56.759" status="PASS" endtime="20161110 16:21:57.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:21:57.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:21:57.389" status="PASS" endtime="20161110 16:21:57.389"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:21:57.389">To JSON using : content={
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:21:57.389">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:21:57.390">${content} = {u'data': u'HOST_POWERING_OFF', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:21:57.389" status="PASS" endtime="20161110 16:21:57.390"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:21:57.390">${bmc_state} = HOST_POWERING_OFF</msg>
<status starttime="20161110 16:21:56.757" status="PASS" endtime="20161110 16:21:57.390"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:21:57.390">'HOST_POWERING_OFF' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:21:57.390" status="FAIL" endtime="20161110 16:21:57.390"></status>
</kw>
<status starttime="20161110 16:21:56.756" status="FAIL" endtime="20161110 16:21:57.391"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:07.393">@{arglist} = [ ]</msg>
<status starttime="20161110 16:22:07.392" status="PASS" endtime="20161110 16:22:07.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:07.394">${args} = {u'data': []}</msg>
<status starttime="20161110 16:22:07.393" status="PASS" endtime="20161110 16:22:07.394"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:07.396">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:22:07.395" status="PASS" endtime="20161110 16:22:07.396"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:07.398">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:22:07.397" status="PASS" endtime="20161110 16:22:07.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:07.399">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:22:07.398" status="PASS" endtime="20161110 16:22:07.399"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:22:07.400" status="PASS" endtime="20161110 16:22:07.400"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:07.403">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:22:07.401" status="PASS" endtime="20161110 16:22:07.403"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:07.404">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:22:07.404" status="PASS" endtime="20161110 16:22:07.404"></status>
</kw>
<status starttime="20161110 16:22:07.403" status="PASS" endtime="20161110 16:22:07.405"></status>
</kw>
<status starttime="20161110 16:22:07.400" status="PASS" endtime="20161110 16:22:07.405"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:07.405">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:22:07.405" status="PASS" endtime="20161110 16:22:07.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:07.406">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:22:07.406" status="PASS" endtime="20161110 16:22:07.406"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:07.407">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:22:07.407" status="PASS" endtime="20161110 16:22:07.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:07.407">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:22:07.407" status="PASS" endtime="20161110 16:22:07.407"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:07.733">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:22:07.733">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:07.408" status="PASS" endtime="20161110 16:22:07.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:07.734">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:22:07.734" status="PASS" endtime="20161110 16:22:07.734"></status>
</kw>
<status starttime="20161110 16:22:07.405" status="PASS" endtime="20161110 16:22:07.734"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:08.012">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:22:08.013">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:07.735" status="PASS" endtime="20161110 16:22:08.013"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:08.015">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:22:08.014" status="PASS" endtime="20161110 16:22:08.015"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:08.017">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:22:08.016" status="PASS" endtime="20161110 16:22:08.017"></status>
</kw>
<status starttime="20161110 16:22:08.015" status="PASS" endtime="20161110 16:22:08.017"></status>
</kw>
<status starttime="20161110 16:22:08.013" status="PASS" endtime="20161110 16:22:08.017"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:08.017">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:07.396" status="PASS" endtime="20161110 16:22:08.017"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:08.018">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:07.394" status="PASS" endtime="20161110 16:22:08.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:08.019">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:22:08.018" status="PASS" endtime="20161110 16:22:08.019"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:08.020">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:22:08.020">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:22:08.020">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:22:08.019" status="PASS" endtime="20161110 16:22:08.020"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:08.020">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:22:07.392" status="PASS" endtime="20161110 16:22:08.020"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:22:08.021">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:22:08.021" status="FAIL" endtime="20161110 16:22:08.021"></status>
</kw>
<status starttime="20161110 16:22:07.391" status="FAIL" endtime="20161110 16:22:08.022"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.024">@{arglist} = [ ]</msg>
<status starttime="20161110 16:22:18.024" status="PASS" endtime="20161110 16:22:18.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.025">${args} = {u'data': []}</msg>
<status starttime="20161110 16:22:18.025" status="PASS" endtime="20161110 16:22:18.025"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.027">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:22:18.026" status="PASS" endtime="20161110 16:22:18.027"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.029">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:22:18.029" status="PASS" endtime="20161110 16:22:18.029"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:22:18.029" status="PASS" endtime="20161110 16:22:18.030"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:22:18.030" status="PASS" endtime="20161110 16:22:18.031"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.033">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:22:18.032" status="PASS" endtime="20161110 16:22:18.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:18.034">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:22:18.034" status="PASS" endtime="20161110 16:22:18.035"></status>
</kw>
<status starttime="20161110 16:22:18.033" status="PASS" endtime="20161110 16:22:18.035"></status>
</kw>
<status starttime="20161110 16:22:18.031" status="PASS" endtime="20161110 16:22:18.035"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:18.036">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:22:18.035" status="PASS" endtime="20161110 16:22:18.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.036">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:22:18.036" status="PASS" endtime="20161110 16:22:18.037"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.037">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:22:18.037" status="PASS" endtime="20161110 16:22:18.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.038">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:22:18.037" status="PASS" endtime="20161110 16:22:18.038"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.368">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:22:18.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:18.038" status="PASS" endtime="20161110 16:22:18.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:18.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:22:18.369" status="PASS" endtime="20161110 16:22:18.369"></status>
</kw>
<status starttime="20161110 16:22:18.035" status="PASS" endtime="20161110 16:22:18.370"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.647">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:22:18.647">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:18.370" status="PASS" endtime="20161110 16:22:18.648"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.649">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:22:18.649" status="PASS" endtime="20161110 16:22:18.649"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:18.651">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:22:18.650" status="PASS" endtime="20161110 16:22:18.651"></status>
</kw>
<status starttime="20161110 16:22:18.650" status="PASS" endtime="20161110 16:22:18.651"></status>
</kw>
<status starttime="20161110 16:22:18.648" status="PASS" endtime="20161110 16:22:18.651"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:18.652">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:18.027" status="PASS" endtime="20161110 16:22:18.652"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:18.652">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:18.026" status="PASS" endtime="20161110 16:22:18.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:18.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:22:18.652" status="PASS" endtime="20161110 16:22:18.653"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:18.654">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:22:18.654">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:22:18.654">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:22:18.654" status="PASS" endtime="20161110 16:22:18.654"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:18.655">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:22:18.023" status="PASS" endtime="20161110 16:22:18.655"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:22:18.656">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:22:18.656" status="FAIL" endtime="20161110 16:22:18.656"></status>
</kw>
<status starttime="20161110 16:22:18.022" status="FAIL" endtime="20161110 16:22:18.657"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:28.659">@{arglist} = [ ]</msg>
<status starttime="20161110 16:22:28.659" status="PASS" endtime="20161110 16:22:28.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:28.660">${args} = {u'data': []}</msg>
<status starttime="20161110 16:22:28.659" status="PASS" endtime="20161110 16:22:28.660"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:28.662">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:22:28.661" status="PASS" endtime="20161110 16:22:28.662"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:28.664">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:22:28.664" status="PASS" endtime="20161110 16:22:28.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:28.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:22:28.665" status="PASS" endtime="20161110 16:22:28.665"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:22:28.665" status="PASS" endtime="20161110 16:22:28.666"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:28.668">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:22:28.667" status="PASS" endtime="20161110 16:22:28.668"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:28.669">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:22:28.669" status="PASS" endtime="20161110 16:22:28.670"></status>
</kw>
<status starttime="20161110 16:22:28.668" status="PASS" endtime="20161110 16:22:28.670"></status>
</kw>
<status starttime="20161110 16:22:28.666" status="PASS" endtime="20161110 16:22:28.670"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:28.671">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:22:28.671" status="PASS" endtime="20161110 16:22:28.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:28.672">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:22:28.672" status="PASS" endtime="20161110 16:22:28.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:28.673">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:22:28.673" status="PASS" endtime="20161110 16:22:28.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:28.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:22:28.674" status="PASS" endtime="20161110 16:22:28.674"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:29.010">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:22:29.010">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:28.675" status="PASS" endtime="20161110 16:22:29.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:29.011">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:22:29.010" status="PASS" endtime="20161110 16:22:29.011"></status>
</kw>
<status starttime="20161110 16:22:28.670" status="PASS" endtime="20161110 16:22:29.011"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:31.733">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:22:31.733">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:29.011" status="PASS" endtime="20161110 16:22:31.733"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:31.736">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:22:31.735" status="PASS" endtime="20161110 16:22:31.736"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:31.737">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:22:31.737" status="PASS" endtime="20161110 16:22:31.737"></status>
</kw>
<status starttime="20161110 16:22:31.736" status="PASS" endtime="20161110 16:22:31.738"></status>
</kw>
<status starttime="20161110 16:22:31.734" status="PASS" endtime="20161110 16:22:31.738"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:31.738">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:28.662" status="PASS" endtime="20161110 16:22:31.738"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:31.738">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:28.660" status="PASS" endtime="20161110 16:22:31.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:31.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:22:31.739" status="PASS" endtime="20161110 16:22:31.740"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:31.740">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:22:31.740">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:22:31.741">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:22:31.740" status="PASS" endtime="20161110 16:22:31.741"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:31.741">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:22:28.658" status="PASS" endtime="20161110 16:22:31.742"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:22:31.743">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:22:31.742" status="FAIL" endtime="20161110 16:22:31.743"></status>
</kw>
<status starttime="20161110 16:22:28.657" status="FAIL" endtime="20161110 16:22:31.743"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:41.755">@{arglist} = [ ]</msg>
<status starttime="20161110 16:22:41.755" status="PASS" endtime="20161110 16:22:41.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:41.756">${args} = {u'data': []}</msg>
<status starttime="20161110 16:22:41.756" status="PASS" endtime="20161110 16:22:41.756"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:41.757">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:22:41.757" status="PASS" endtime="20161110 16:22:41.757"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:41.758">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:22:41.758" status="PASS" endtime="20161110 16:22:41.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:41.759">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:22:41.758" status="PASS" endtime="20161110 16:22:41.759"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:22:41.759" status="PASS" endtime="20161110 16:22:41.759"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:41.760">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:22:41.760" status="PASS" endtime="20161110 16:22:41.760"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:41.761">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:22:41.761" status="PASS" endtime="20161110 16:22:41.761"></status>
</kw>
<status starttime="20161110 16:22:41.761" status="PASS" endtime="20161110 16:22:41.761"></status>
</kw>
<status starttime="20161110 16:22:41.759" status="PASS" endtime="20161110 16:22:41.762"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:41.762">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:22:41.762" status="PASS" endtime="20161110 16:22:41.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:41.763">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:22:41.763" status="PASS" endtime="20161110 16:22:41.763"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:41.764">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:22:41.763" status="PASS" endtime="20161110 16:22:41.764"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:41.764">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:22:41.764" status="PASS" endtime="20161110 16:22:41.764"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:42.107">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:22:42.107">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:41.765" status="PASS" endtime="20161110 16:22:42.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:42.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:22:42.108" status="PASS" endtime="20161110 16:22:42.108"></status>
</kw>
<status starttime="20161110 16:22:41.762" status="PASS" endtime="20161110 16:22:42.109"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:42.391">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:22:42.392">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:42.109" status="PASS" endtime="20161110 16:22:42.392"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:42.393">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:22:42.392" status="PASS" endtime="20161110 16:22:42.393"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:42.393">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:22:42.393" status="PASS" endtime="20161110 16:22:42.394"></status>
</kw>
<status starttime="20161110 16:22:42.393" status="PASS" endtime="20161110 16:22:42.394"></status>
</kw>
<status starttime="20161110 16:22:42.392" status="PASS" endtime="20161110 16:22:42.394"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:42.394">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:41.757" status="PASS" endtime="20161110 16:22:42.394"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:42.395">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:41.756" status="PASS" endtime="20161110 16:22:42.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:42.395">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:22:42.395" status="PASS" endtime="20161110 16:22:42.395"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:42.396">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:22:42.396">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:22:42.396">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:22:42.395" status="PASS" endtime="20161110 16:22:42.396"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:42.396">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:22:41.754" status="PASS" endtime="20161110 16:22:42.396"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:22:42.397">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:22:42.396" status="FAIL" endtime="20161110 16:22:42.397"></status>
</kw>
<status starttime="20161110 16:22:41.743" status="FAIL" endtime="20161110 16:22:42.397"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:52.399">@{arglist} = [ ]</msg>
<status starttime="20161110 16:22:52.399" status="PASS" endtime="20161110 16:22:52.399"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:52.400">${args} = {u'data': []}</msg>
<status starttime="20161110 16:22:52.399" status="PASS" endtime="20161110 16:22:52.400"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:52.402">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:22:52.401" status="PASS" endtime="20161110 16:22:52.402"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:52.404">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:22:52.403" status="PASS" endtime="20161110 16:22:52.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:52.405">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:22:52.404" status="PASS" endtime="20161110 16:22:52.405"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:22:52.405" status="PASS" endtime="20161110 16:22:52.406"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:52.408">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:22:52.407" status="PASS" endtime="20161110 16:22:52.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:52.410">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:22:52.409" status="PASS" endtime="20161110 16:22:52.410"></status>
</kw>
<status starttime="20161110 16:22:52.409" status="PASS" endtime="20161110 16:22:52.410"></status>
</kw>
<status starttime="20161110 16:22:52.406" status="PASS" endtime="20161110 16:22:52.411"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:52.412">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:22:52.412" status="PASS" endtime="20161110 16:22:52.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:52.413">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:22:52.413" status="PASS" endtime="20161110 16:22:52.413"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:52.414">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:22:52.414" status="PASS" endtime="20161110 16:22:52.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:52.415">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:22:52.415" status="PASS" endtime="20161110 16:22:52.415"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:52.749">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:22:52.749">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:52.415" status="PASS" endtime="20161110 16:22:52.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:52.750">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:22:52.750" status="PASS" endtime="20161110 16:22:52.751"></status>
</kw>
<status starttime="20161110 16:22:52.411" status="PASS" endtime="20161110 16:22:52.751"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:53.033">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:22:53.034">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:52.751" status="PASS" endtime="20161110 16:22:53.034"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:53.036">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:22:53.035" status="PASS" endtime="20161110 16:22:53.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:53.037">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:22:53.037" status="PASS" endtime="20161110 16:22:53.037"></status>
</kw>
<status starttime="20161110 16:22:53.036" status="PASS" endtime="20161110 16:22:53.037"></status>
</kw>
<status starttime="20161110 16:22:53.034" status="PASS" endtime="20161110 16:22:53.037"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:53.038">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:52.402" status="PASS" endtime="20161110 16:22:53.038"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:53.038">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:22:52.400" status="PASS" endtime="20161110 16:22:53.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:22:53.039">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:22:53.038" status="PASS" endtime="20161110 16:22:53.039"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:22:53.040">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:22:53.040">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:22:53.040">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:22:53.040" status="PASS" endtime="20161110 16:22:53.040"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:22:53.041">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:22:52.398" status="PASS" endtime="20161110 16:22:53.041"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:22:53.042">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:22:53.041" status="FAIL" endtime="20161110 16:22:53.042"></status>
</kw>
<status starttime="20161110 16:22:52.397" status="FAIL" endtime="20161110 16:22:53.044"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.046">@{arglist} = [ ]</msg>
<status starttime="20161110 16:23:03.045" status="PASS" endtime="20161110 16:23:03.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.047">${args} = {u'data': []}</msg>
<status starttime="20161110 16:23:03.046" status="PASS" endtime="20161110 16:23:03.047"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.050">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:23:03.050" status="PASS" endtime="20161110 16:23:03.050"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.052">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:23:03.051" status="PASS" endtime="20161110 16:23:03.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.053">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:03.052" status="PASS" endtime="20161110 16:23:03.053"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:23:03.053" status="PASS" endtime="20161110 16:23:03.053"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.055">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:03.055" status="PASS" endtime="20161110 16:23:03.055"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:03.056">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:03.056" status="PASS" endtime="20161110 16:23:03.056"></status>
</kw>
<status starttime="20161110 16:23:03.056" status="PASS" endtime="20161110 16:23:03.056"></status>
</kw>
<status starttime="20161110 16:23:03.054" status="PASS" endtime="20161110 16:23:03.056"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:03.057">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:23:03.057" status="PASS" endtime="20161110 16:23:03.058"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.058">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:03.058" status="PASS" endtime="20161110 16:23:03.058"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.059">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:23:03.058" status="PASS" endtime="20161110 16:23:03.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.059">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:23:03.059" status="PASS" endtime="20161110 16:23:03.059"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.388">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:03.388">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:03.060" status="PASS" endtime="20161110 16:23:03.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:03.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:03.389" status="PASS" endtime="20161110 16:23:03.389"></status>
</kw>
<status starttime="20161110 16:23:03.057" status="PASS" endtime="20161110 16:23:03.389"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.671">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:03.672">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:03.389" status="PASS" endtime="20161110 16:23:03.672"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.674">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:03.673" status="PASS" endtime="20161110 16:23:03.674"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:03.675">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:03.675" status="PASS" endtime="20161110 16:23:03.675"></status>
</kw>
<status starttime="20161110 16:23:03.674" status="PASS" endtime="20161110 16:23:03.675"></status>
</kw>
<status starttime="20161110 16:23:03.672" status="PASS" endtime="20161110 16:23:03.676"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:03.676">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:03.050" status="PASS" endtime="20161110 16:23:03.676"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:03.676">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:03.047" status="PASS" endtime="20161110 16:23:03.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:03.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:03.677" status="PASS" endtime="20161110 16:23:03.677"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:03.678">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:23:03.678">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:23:03.678">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:23:03.677" status="PASS" endtime="20161110 16:23:03.678"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:03.678">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:23:03.045" status="PASS" endtime="20161110 16:23:03.678"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:23:03.679">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:23:03.679" status="FAIL" endtime="20161110 16:23:03.679"></status>
</kw>
<status starttime="20161110 16:23:03.044" status="FAIL" endtime="20161110 16:23:03.680"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:13.682">@{arglist} = [ ]</msg>
<status starttime="20161110 16:23:13.682" status="PASS" endtime="20161110 16:23:13.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:13.684">${args} = {u'data': []}</msg>
<status starttime="20161110 16:23:13.683" status="PASS" endtime="20161110 16:23:13.684"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:13.685">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:23:13.685" status="PASS" endtime="20161110 16:23:13.686"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:13.687">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:23:13.687" status="PASS" endtime="20161110 16:23:13.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:13.688">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:13.688" status="PASS" endtime="20161110 16:23:13.688"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:23:13.689" status="PASS" endtime="20161110 16:23:13.689"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:13.692">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:13.691" status="PASS" endtime="20161110 16:23:13.692"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:13.693">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:13.693" status="PASS" endtime="20161110 16:23:13.693"></status>
</kw>
<status starttime="20161110 16:23:13.692" status="PASS" endtime="20161110 16:23:13.694"></status>
</kw>
<status starttime="20161110 16:23:13.689" status="PASS" endtime="20161110 16:23:13.694"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:13.696">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:23:13.695" status="PASS" endtime="20161110 16:23:13.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:13.698">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:13.697" status="PASS" endtime="20161110 16:23:13.698"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:13.699">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:23:13.698" status="PASS" endtime="20161110 16:23:13.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:13.700">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:23:13.699" status="PASS" endtime="20161110 16:23:13.700"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:14.031">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:14.032">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:13.700" status="PASS" endtime="20161110 16:23:14.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:14.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:14.032" status="PASS" endtime="20161110 16:23:14.033"></status>
</kw>
<status starttime="20161110 16:23:13.694" status="PASS" endtime="20161110 16:23:14.033"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:14.318">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:14.318">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:14.034" status="PASS" endtime="20161110 16:23:14.318"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:14.320">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:14.319" status="PASS" endtime="20161110 16:23:14.320"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:14.321">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:14.321" status="PASS" endtime="20161110 16:23:14.321"></status>
</kw>
<status starttime="20161110 16:23:14.320" status="PASS" endtime="20161110 16:23:14.321"></status>
</kw>
<status starttime="20161110 16:23:14.318" status="PASS" endtime="20161110 16:23:14.322"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:14.322">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:13.686" status="PASS" endtime="20161110 16:23:14.322"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:14.322">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:13.684" status="PASS" endtime="20161110 16:23:14.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:14.323">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:14.323" status="PASS" endtime="20161110 16:23:14.323"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:14.324">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:23:14.324">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:23:14.324">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:23:14.324" status="PASS" endtime="20161110 16:23:14.324"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:14.325">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:23:13.681" status="PASS" endtime="20161110 16:23:14.325"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:23:14.326">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:23:14.325" status="FAIL" endtime="20161110 16:23:14.326"></status>
</kw>
<status starttime="20161110 16:23:13.680" status="FAIL" endtime="20161110 16:23:14.326"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.329">@{arglist} = [ ]</msg>
<status starttime="20161110 16:23:24.328" status="PASS" endtime="20161110 16:23:24.329"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.330">${args} = {u'data': []}</msg>
<status starttime="20161110 16:23:24.329" status="PASS" endtime="20161110 16:23:24.330"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.332">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:23:24.331" status="PASS" endtime="20161110 16:23:24.332"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.334">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:23:24.333" status="PASS" endtime="20161110 16:23:24.334"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.335">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:24.334" status="PASS" endtime="20161110 16:23:24.335"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:23:24.335" status="PASS" endtime="20161110 16:23:24.336"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.339">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:24.337" status="PASS" endtime="20161110 16:23:24.339"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:24.340">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:24.340" status="PASS" endtime="20161110 16:23:24.340"></status>
</kw>
<status starttime="20161110 16:23:24.339" status="PASS" endtime="20161110 16:23:24.340"></status>
</kw>
<status starttime="20161110 16:23:24.336" status="PASS" endtime="20161110 16:23:24.341"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:24.342">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:23:24.342" status="PASS" endtime="20161110 16:23:24.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.343">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:24.343" status="PASS" endtime="20161110 16:23:24.343"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.344">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:23:24.344" status="PASS" endtime="20161110 16:23:24.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.345">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:23:24.345" status="PASS" endtime="20161110 16:23:24.345"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.680">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:24.680">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:24.345" status="PASS" endtime="20161110 16:23:24.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:24.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:24.680" status="PASS" endtime="20161110 16:23:24.681"></status>
</kw>
<status starttime="20161110 16:23:24.341" status="PASS" endtime="20161110 16:23:24.681"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.971">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:24.971">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:24.681" status="PASS" endtime="20161110 16:23:24.971"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.972">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:24.972" status="PASS" endtime="20161110 16:23:24.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:24.973">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:24.973" status="PASS" endtime="20161110 16:23:24.973"></status>
</kw>
<status starttime="20161110 16:23:24.972" status="PASS" endtime="20161110 16:23:24.973"></status>
</kw>
<status starttime="20161110 16:23:24.971" status="PASS" endtime="20161110 16:23:24.973"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:24.974">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:24.332" status="PASS" endtime="20161110 16:23:24.974"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:24.974">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:24.330" status="PASS" endtime="20161110 16:23:24.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:24.974">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:24.974" status="PASS" endtime="20161110 16:23:24.974"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:24.975">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:23:24.975">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:23:24.975">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:23:24.975" status="PASS" endtime="20161110 16:23:24.975"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:24.976">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:23:24.328" status="PASS" endtime="20161110 16:23:24.976"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:23:24.977">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:23:24.976" status="FAIL" endtime="20161110 16:23:24.977"></status>
</kw>
<status starttime="20161110 16:23:24.327" status="FAIL" endtime="20161110 16:23:24.977"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:34.980">@{arglist} = [ ]</msg>
<status starttime="20161110 16:23:34.979" status="PASS" endtime="20161110 16:23:34.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:34.982">${args} = {u'data': []}</msg>
<status starttime="20161110 16:23:34.981" status="PASS" endtime="20161110 16:23:34.982"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:34.984">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:23:34.983" status="PASS" endtime="20161110 16:23:34.984"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:34.987">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:23:34.986" status="PASS" endtime="20161110 16:23:34.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:34.988">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:34.988" status="PASS" endtime="20161110 16:23:34.988"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:23:34.989" status="PASS" endtime="20161110 16:23:34.990"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:34.993">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:34.991" status="PASS" endtime="20161110 16:23:34.993"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:34.995">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:34.995" status="PASS" endtime="20161110 16:23:34.995"></status>
</kw>
<status starttime="20161110 16:23:34.993" status="PASS" endtime="20161110 16:23:34.995"></status>
</kw>
<status starttime="20161110 16:23:34.990" status="PASS" endtime="20161110 16:23:34.995"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:34.996">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:23:34.996" status="PASS" endtime="20161110 16:23:34.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:34.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:34.997" status="PASS" endtime="20161110 16:23:34.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:34.998">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:23:34.997" status="PASS" endtime="20161110 16:23:34.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:34.998">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:23:34.998" status="PASS" endtime="20161110 16:23:34.998"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:38.336">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:38.336">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:34.999" status="PASS" endtime="20161110 16:23:38.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:38.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:38.337" status="PASS" endtime="20161110 16:23:38.337"></status>
</kw>
<status starttime="20161110 16:23:34.996" status="PASS" endtime="20161110 16:23:38.338"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:38.619">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:38.619">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:38.338" status="PASS" endtime="20161110 16:23:38.619"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:38.621">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:38.620" status="PASS" endtime="20161110 16:23:38.621"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:38.622">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:38.622" status="PASS" endtime="20161110 16:23:38.622"></status>
</kw>
<status starttime="20161110 16:23:38.621" status="PASS" endtime="20161110 16:23:38.623"></status>
</kw>
<status starttime="20161110 16:23:38.619" status="PASS" endtime="20161110 16:23:38.623"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:38.623">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:34.984" status="PASS" endtime="20161110 16:23:38.623"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:38.623">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:34.982" status="PASS" endtime="20161110 16:23:38.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:38.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:38.624" status="PASS" endtime="20161110 16:23:38.624"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:38.625">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:23:38.625">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:23:38.626">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:23:38.625" status="PASS" endtime="20161110 16:23:38.626"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:38.626">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:23:34.979" status="PASS" endtime="20161110 16:23:38.626"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:23:38.627">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:23:38.626" status="FAIL" endtime="20161110 16:23:38.627"></status>
</kw>
<status starttime="20161110 16:23:34.978" status="FAIL" endtime="20161110 16:23:38.627"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:48.630">@{arglist} = [ ]</msg>
<status starttime="20161110 16:23:48.630" status="PASS" endtime="20161110 16:23:48.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:48.631">${args} = {u'data': []}</msg>
<status starttime="20161110 16:23:48.630" status="PASS" endtime="20161110 16:23:48.631"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:48.633">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:23:48.632" status="PASS" endtime="20161110 16:23:48.633"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:48.635">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:23:48.634" status="PASS" endtime="20161110 16:23:48.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:48.636">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:48.635" status="PASS" endtime="20161110 16:23:48.636"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:23:48.636" status="PASS" endtime="20161110 16:23:48.637"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:48.640">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:48.638" status="PASS" endtime="20161110 16:23:48.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:48.642">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:48.641" status="PASS" endtime="20161110 16:23:48.642"></status>
</kw>
<status starttime="20161110 16:23:48.641" status="PASS" endtime="20161110 16:23:48.642"></status>
</kw>
<status starttime="20161110 16:23:48.637" status="PASS" endtime="20161110 16:23:48.642"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:48.644">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:23:48.643" status="PASS" endtime="20161110 16:23:48.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:48.645">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:48.645" status="PASS" endtime="20161110 16:23:48.645"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:48.646">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:23:48.646" status="PASS" endtime="20161110 16:23:48.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:48.646">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:23:48.646" status="PASS" endtime="20161110 16:23:48.647"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:48.980">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:48.980">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:48.647" status="PASS" endtime="20161110 16:23:48.980"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:48.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:48.980" status="PASS" endtime="20161110 16:23:48.981"></status>
</kw>
<status starttime="20161110 16:23:48.643" status="PASS" endtime="20161110 16:23:48.981"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:49.264">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:49.265">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:48.981" status="PASS" endtime="20161110 16:23:49.265"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:49.267">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:49.266" status="PASS" endtime="20161110 16:23:49.267"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:49.268">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:49.268" status="PASS" endtime="20161110 16:23:49.268"></status>
</kw>
<status starttime="20161110 16:23:49.267" status="PASS" endtime="20161110 16:23:49.269"></status>
</kw>
<status starttime="20161110 16:23:49.265" status="PASS" endtime="20161110 16:23:49.269"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:49.269">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:48.633" status="PASS" endtime="20161110 16:23:49.269"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:49.270">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:48.631" status="PASS" endtime="20161110 16:23:49.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:49.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:49.270" status="PASS" endtime="20161110 16:23:49.271"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:49.272">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:23:49.272">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:23:49.272">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:23:49.271" status="PASS" endtime="20161110 16:23:49.272"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:49.273">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:23:48.629" status="PASS" endtime="20161110 16:23:49.273"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:23:49.274">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:23:49.273" status="FAIL" endtime="20161110 16:23:49.274"></status>
</kw>
<status starttime="20161110 16:23:48.628" status="FAIL" endtime="20161110 16:23:49.274"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.277">@{arglist} = [ ]</msg>
<status starttime="20161110 16:23:59.276" status="PASS" endtime="20161110 16:23:59.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.278">${args} = {u'data': []}</msg>
<status starttime="20161110 16:23:59.277" status="PASS" endtime="20161110 16:23:59.278"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.280">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:23:59.279" status="PASS" endtime="20161110 16:23:59.280"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.282">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:23:59.281" status="PASS" endtime="20161110 16:23:59.282"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.283">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:59.282" status="PASS" endtime="20161110 16:23:59.283"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:23:59.283" status="PASS" endtime="20161110 16:23:59.283"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.286">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:59.285" status="PASS" endtime="20161110 16:23:59.286"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:59.287">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:23:59.286" status="PASS" endtime="20161110 16:23:59.287"></status>
</kw>
<status starttime="20161110 16:23:59.286" status="PASS" endtime="20161110 16:23:59.287"></status>
</kw>
<status starttime="20161110 16:23:59.284" status="PASS" endtime="20161110 16:23:59.287"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:59.288">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:23:59.288" status="PASS" endtime="20161110 16:23:59.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.289">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:23:59.288" status="PASS" endtime="20161110 16:23:59.289"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.289">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:23:59.289" status="PASS" endtime="20161110 16:23:59.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.290">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:23:59.290" status="PASS" endtime="20161110 16:23:59.290"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.615">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:59.615">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:59.290" status="PASS" endtime="20161110 16:23:59.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:59.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:59.616" status="PASS" endtime="20161110 16:23:59.617"></status>
</kw>
<status starttime="20161110 16:23:59.287" status="PASS" endtime="20161110 16:23:59.617"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.895">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:23:59.896">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:59.618" status="PASS" endtime="20161110 16:23:59.896"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.898">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:59.897" status="PASS" endtime="20161110 16:23:59.898"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:59.899">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:23:59.899" status="PASS" endtime="20161110 16:23:59.899"></status>
</kw>
<status starttime="20161110 16:23:59.898" status="PASS" endtime="20161110 16:23:59.900"></status>
</kw>
<status starttime="20161110 16:23:59.896" status="PASS" endtime="20161110 16:23:59.900"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:59.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:59.280" status="PASS" endtime="20161110 16:23:59.900"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:59.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:23:59.278" status="PASS" endtime="20161110 16:23:59.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:23:59.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:23:59.901" status="PASS" endtime="20161110 16:23:59.901"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:23:59.902">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:23:59.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:23:59.903">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:23:59.902" status="PASS" endtime="20161110 16:23:59.903"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:23:59.903">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:23:59.275" status="PASS" endtime="20161110 16:23:59.903"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:23:59.904">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:23:59.903" status="FAIL" endtime="20161110 16:23:59.904"></status>
</kw>
<status starttime="20161110 16:23:59.274" status="FAIL" endtime="20161110 16:23:59.904"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:09.907">@{arglist} = [ ]</msg>
<status starttime="20161110 16:24:09.907" status="PASS" endtime="20161110 16:24:09.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:09.908">${args} = {u'data': []}</msg>
<status starttime="20161110 16:24:09.908" status="PASS" endtime="20161110 16:24:09.908"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:09.910">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:24:09.910" status="PASS" endtime="20161110 16:24:09.910"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:09.912">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:24:09.912" status="PASS" endtime="20161110 16:24:09.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:09.913">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:24:09.913" status="PASS" endtime="20161110 16:24:09.913"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:24:09.913" status="PASS" endtime="20161110 16:24:09.914"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:09.916">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:24:09.915" status="PASS" endtime="20161110 16:24:09.916"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:09.917">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:24:09.917" status="PASS" endtime="20161110 16:24:09.918"></status>
</kw>
<status starttime="20161110 16:24:09.916" status="PASS" endtime="20161110 16:24:09.918"></status>
</kw>
<status starttime="20161110 16:24:09.914" status="PASS" endtime="20161110 16:24:09.918"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:09.919">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:24:09.918" status="PASS" endtime="20161110 16:24:09.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:09.920">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:24:09.919" status="PASS" endtime="20161110 16:24:09.920"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:09.920">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:24:09.920" status="PASS" endtime="20161110 16:24:09.920"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:09.921">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:24:09.920" status="PASS" endtime="20161110 16:24:09.921"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:10.254">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:24:10.254">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:09.921" status="PASS" endtime="20161110 16:24:10.254"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:10.255">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:24:10.255" status="PASS" endtime="20161110 16:24:10.255"></status>
</kw>
<status starttime="20161110 16:24:09.918" status="PASS" endtime="20161110 16:24:10.255"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:10.532">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:24:10.532">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:10.256" status="PASS" endtime="20161110 16:24:10.532"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:10.533">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:24:10.533" status="PASS" endtime="20161110 16:24:10.533"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:10.534">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:24:10.534" status="PASS" endtime="20161110 16:24:10.535"></status>
</kw>
<status starttime="20161110 16:24:10.533" status="PASS" endtime="20161110 16:24:10.535"></status>
</kw>
<status starttime="20161110 16:24:10.532" status="PASS" endtime="20161110 16:24:10.536"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:10.536">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:09.910" status="PASS" endtime="20161110 16:24:10.537"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:10.537">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:09.909" status="PASS" endtime="20161110 16:24:10.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:10.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:24:10.537" status="PASS" endtime="20161110 16:24:10.538"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:10.538">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:24:10.538">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:24:10.538">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:24:10.538" status="PASS" endtime="20161110 16:24:10.538"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:10.539">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:24:09.906" status="PASS" endtime="20161110 16:24:10.539"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:24:10.539">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:24:10.539" status="FAIL" endtime="20161110 16:24:10.539"></status>
</kw>
<status starttime="20161110 16:24:09.905" status="FAIL" endtime="20161110 16:24:10.539"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:20.542">@{arglist} = [ ]</msg>
<status starttime="20161110 16:24:20.542" status="PASS" endtime="20161110 16:24:20.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:20.543">${args} = {u'data': []}</msg>
<status starttime="20161110 16:24:20.543" status="PASS" endtime="20161110 16:24:20.543"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:20.546">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:24:20.545" status="PASS" endtime="20161110 16:24:20.546"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:20.548">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:24:20.547" status="PASS" endtime="20161110 16:24:20.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:20.549">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:24:20.548" status="PASS" endtime="20161110 16:24:20.549"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:24:20.549" status="PASS" endtime="20161110 16:24:20.549"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:20.552">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:24:20.551" status="PASS" endtime="20161110 16:24:20.552"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:20.553">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:24:20.553" status="PASS" endtime="20161110 16:24:20.553"></status>
</kw>
<status starttime="20161110 16:24:20.552" status="PASS" endtime="20161110 16:24:20.554"></status>
</kw>
<status starttime="20161110 16:24:20.550" status="PASS" endtime="20161110 16:24:20.554"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:20.555">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:24:20.555" status="PASS" endtime="20161110 16:24:20.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:20.556">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:24:20.556" status="PASS" endtime="20161110 16:24:20.556"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:20.557">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:24:20.556" status="PASS" endtime="20161110 16:24:20.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:20.557">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:24:20.557" status="PASS" endtime="20161110 16:24:20.557"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:20.891">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:24:20.891">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:20.558" status="PASS" endtime="20161110 16:24:20.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:20.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:24:20.891" status="PASS" endtime="20161110 16:24:20.892"></status>
</kw>
<status starttime="20161110 16:24:20.554" status="PASS" endtime="20161110 16:24:20.892"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:21.170">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:24:21.170">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:20.892" status="PASS" endtime="20161110 16:24:21.170"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:21.172">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:24:21.171" status="PASS" endtime="20161110 16:24:21.172"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:21.173">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:24:21.172" status="PASS" endtime="20161110 16:24:21.173"></status>
</kw>
<status starttime="20161110 16:24:21.172" status="PASS" endtime="20161110 16:24:21.173"></status>
</kw>
<status starttime="20161110 16:24:21.171" status="PASS" endtime="20161110 16:24:21.173"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:21.173">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:20.546" status="PASS" endtime="20161110 16:24:21.173"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:21.173">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:20.544" status="PASS" endtime="20161110 16:24:21.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:21.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:24:21.174" status="PASS" endtime="20161110 16:24:21.174"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:21.174">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:24:21.174">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:24:21.174">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:24:21.174" status="PASS" endtime="20161110 16:24:21.175"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:21.175">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:24:20.541" status="PASS" endtime="20161110 16:24:21.175"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:24:21.175">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:24:21.175" status="FAIL" endtime="20161110 16:24:21.176"></status>
</kw>
<status starttime="20161110 16:24:20.540" status="FAIL" endtime="20161110 16:24:21.176"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.179">@{arglist} = [ ]</msg>
<status starttime="20161110 16:24:31.178" status="PASS" endtime="20161110 16:24:31.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.180">${args} = {u'data': []}</msg>
<status starttime="20161110 16:24:31.179" status="PASS" endtime="20161110 16:24:31.180"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.183">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:24:31.182" status="PASS" endtime="20161110 16:24:31.183"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.186">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:24:31.185" status="PASS" endtime="20161110 16:24:31.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.187">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:24:31.186" status="PASS" endtime="20161110 16:24:31.187"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:24:31.187" status="PASS" endtime="20161110 16:24:31.188"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.191">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:24:31.190" status="PASS" endtime="20161110 16:24:31.191"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:31.193">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:24:31.193" status="PASS" endtime="20161110 16:24:31.193"></status>
</kw>
<status starttime="20161110 16:24:31.192" status="PASS" endtime="20161110 16:24:31.193"></status>
</kw>
<status starttime="20161110 16:24:31.188" status="PASS" endtime="20161110 16:24:31.194"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:31.195">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:24:31.195" status="PASS" endtime="20161110 16:24:31.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.198">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:24:31.198" status="PASS" endtime="20161110 16:24:31.198"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.198">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:24:31.198" status="PASS" endtime="20161110 16:24:31.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.199">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:24:31.199" status="PASS" endtime="20161110 16:24:31.199"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.524">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:24:31.524">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:31.199" status="PASS" endtime="20161110 16:24:31.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:31.525">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:24:31.524" status="PASS" endtime="20161110 16:24:31.525"></status>
</kw>
<status starttime="20161110 16:24:31.194" status="PASS" endtime="20161110 16:24:31.525"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.812">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:24:31.812">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:31.525" status="PASS" endtime="20161110 16:24:31.812"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.814">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:24:31.813" status="PASS" endtime="20161110 16:24:31.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:31.816">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:24:31.815" status="PASS" endtime="20161110 16:24:31.816"></status>
</kw>
<status starttime="20161110 16:24:31.814" status="PASS" endtime="20161110 16:24:31.816"></status>
</kw>
<status starttime="20161110 16:24:31.813" status="PASS" endtime="20161110 16:24:31.816"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:31.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:31.183" status="PASS" endtime="20161110 16:24:31.817"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:31.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:31.181" status="PASS" endtime="20161110 16:24:31.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:31.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:24:31.818" status="PASS" endtime="20161110 16:24:31.818"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:31.819">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:24:31.819">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:24:31.819">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:24:31.819" status="PASS" endtime="20161110 16:24:31.819"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:31.820">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:24:31.177" status="PASS" endtime="20161110 16:24:31.820"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:24:31.821">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:24:31.820" status="FAIL" endtime="20161110 16:24:31.821"></status>
</kw>
<status starttime="20161110 16:24:31.176" status="FAIL" endtime="20161110 16:24:31.821"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:41.823">@{arglist} = [ ]</msg>
<status starttime="20161110 16:24:41.823" status="PASS" endtime="20161110 16:24:41.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:41.824">${args} = {u'data': []}</msg>
<status starttime="20161110 16:24:41.824" status="PASS" endtime="20161110 16:24:41.825"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:41.826">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:24:41.826" status="PASS" endtime="20161110 16:24:41.826"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:41.828">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:24:41.828" status="PASS" endtime="20161110 16:24:41.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:41.829">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:24:41.829" status="PASS" endtime="20161110 16:24:41.829"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:24:41.830" status="PASS" endtime="20161110 16:24:41.859"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:41.861">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:24:41.860" status="PASS" endtime="20161110 16:24:41.861"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:41.862">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:24:41.862" status="PASS" endtime="20161110 16:24:41.862"></status>
</kw>
<status starttime="20161110 16:24:41.861" status="PASS" endtime="20161110 16:24:41.862"></status>
</kw>
<status starttime="20161110 16:24:41.860" status="PASS" endtime="20161110 16:24:41.862"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:41.863">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:24:41.863" status="PASS" endtime="20161110 16:24:41.863"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:41.864">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:24:41.864" status="PASS" endtime="20161110 16:24:41.864"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:41.864">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:24:41.864" status="PASS" endtime="20161110 16:24:41.864"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:41.865">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:24:41.865" status="PASS" endtime="20161110 16:24:41.865"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:42.195">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:24:42.195">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:41.865" status="PASS" endtime="20161110 16:24:42.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:42.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:24:42.195" status="PASS" endtime="20161110 16:24:42.196"></status>
</kw>
<status starttime="20161110 16:24:41.862" status="PASS" endtime="20161110 16:24:42.196"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:42.475">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:24:42.475">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:42.196" status="PASS" endtime="20161110 16:24:42.475"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:42.476">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:24:42.476" status="PASS" endtime="20161110 16:24:42.476"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:42.477">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:24:42.477" status="PASS" endtime="20161110 16:24:42.477"></status>
</kw>
<status starttime="20161110 16:24:42.476" status="PASS" endtime="20161110 16:24:42.477"></status>
</kw>
<status starttime="20161110 16:24:42.475" status="PASS" endtime="20161110 16:24:42.477"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:42.478">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:41.827" status="PASS" endtime="20161110 16:24:42.478"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:42.478">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:41.825" status="PASS" endtime="20161110 16:24:42.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:42.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:24:42.478" status="PASS" endtime="20161110 16:24:42.478"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:42.479">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:24:42.479">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:24:42.479">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:24:42.479" status="PASS" endtime="20161110 16:24:42.479"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:42.479">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:24:41.822" status="PASS" endtime="20161110 16:24:42.479"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:24:42.480">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:24:42.479" status="FAIL" endtime="20161110 16:24:42.480"></status>
</kw>
<status starttime="20161110 16:24:41.822" status="FAIL" endtime="20161110 16:24:42.480"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:52.483">@{arglist} = [ ]</msg>
<status starttime="20161110 16:24:52.482" status="PASS" endtime="20161110 16:24:52.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:52.484">${args} = {u'data': []}</msg>
<status starttime="20161110 16:24:52.483" status="PASS" endtime="20161110 16:24:52.484"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:52.486">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:24:52.485" status="PASS" endtime="20161110 16:24:52.486"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:52.487">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:24:52.487" status="PASS" endtime="20161110 16:24:52.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:52.488">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:24:52.488" status="PASS" endtime="20161110 16:24:52.488"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:24:52.489" status="PASS" endtime="20161110 16:24:52.489"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:52.491">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:24:52.490" status="PASS" endtime="20161110 16:24:52.491"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:52.492">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:24:52.492" status="PASS" endtime="20161110 16:24:52.493"></status>
</kw>
<status starttime="20161110 16:24:52.491" status="PASS" endtime="20161110 16:24:52.493"></status>
</kw>
<status starttime="20161110 16:24:52.489" status="PASS" endtime="20161110 16:24:52.493"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:52.494">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:24:52.494" status="PASS" endtime="20161110 16:24:52.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:52.496">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:24:52.496" status="PASS" endtime="20161110 16:24:52.496"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:52.497">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:24:52.496" status="PASS" endtime="20161110 16:24:52.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:52.497">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:24:52.497" status="PASS" endtime="20161110 16:24:52.497"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:52.828">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:24:52.828">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:52.497" status="PASS" endtime="20161110 16:24:52.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:52.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:24:52.829" status="PASS" endtime="20161110 16:24:52.830"></status>
</kw>
<status starttime="20161110 16:24:52.493" status="PASS" endtime="20161110 16:24:52.831"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:53.117">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:24:53.117">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:52.831" status="PASS" endtime="20161110 16:24:53.117"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:53.119">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:24:53.118" status="PASS" endtime="20161110 16:24:53.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:53.121">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:24:53.120" status="PASS" endtime="20161110 16:24:53.121"></status>
</kw>
<status starttime="20161110 16:24:53.119" status="PASS" endtime="20161110 16:24:53.121"></status>
</kw>
<status starttime="20161110 16:24:53.117" status="PASS" endtime="20161110 16:24:53.121"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:53.121">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:52.486" status="PASS" endtime="20161110 16:24:53.121"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:53.122">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:24:52.484" status="PASS" endtime="20161110 16:24:53.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:24:53.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:24:53.122" status="PASS" endtime="20161110 16:24:53.123"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:24:53.123">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:24:53.123">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:24:53.124">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:24:53.123" status="PASS" endtime="20161110 16:24:53.124"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:24:53.124">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:24:52.482" status="PASS" endtime="20161110 16:24:53.124"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:24:53.125">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:24:53.124" status="FAIL" endtime="20161110 16:24:53.125"></status>
</kw>
<status starttime="20161110 16:24:52.481" status="FAIL" endtime="20161110 16:24:53.125"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:03.128">@{arglist} = [ ]</msg>
<status starttime="20161110 16:25:03.127" status="PASS" endtime="20161110 16:25:03.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:03.129">${args} = {u'data': []}</msg>
<status starttime="20161110 16:25:03.128" status="PASS" endtime="20161110 16:25:03.129"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:03.130">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:25:03.130" status="PASS" endtime="20161110 16:25:03.130"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:03.133">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:25:03.132" status="PASS" endtime="20161110 16:25:03.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:03.134">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:25:03.134" status="PASS" endtime="20161110 16:25:03.134"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:25:03.135" status="PASS" endtime="20161110 16:25:03.135"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:03.137">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:25:03.136" status="PASS" endtime="20161110 16:25:03.137"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:03.138">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:25:03.138" status="PASS" endtime="20161110 16:25:03.138"></status>
</kw>
<status starttime="20161110 16:25:03.137" status="PASS" endtime="20161110 16:25:03.138"></status>
</kw>
<status starttime="20161110 16:25:03.136" status="PASS" endtime="20161110 16:25:03.138"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:03.139">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:25:03.139" status="PASS" endtime="20161110 16:25:03.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:03.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:25:03.140" status="PASS" endtime="20161110 16:25:03.140"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:03.141">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:25:03.140" status="PASS" endtime="20161110 16:25:03.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:03.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:25:03.141" status="PASS" endtime="20161110 16:25:03.141"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:03.469">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:25:03.469">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:03.141" status="PASS" endtime="20161110 16:25:03.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:03.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:25:03.470" status="PASS" endtime="20161110 16:25:03.470"></status>
</kw>
<status starttime="20161110 16:25:03.138" status="PASS" endtime="20161110 16:25:03.471"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:11.472">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:25:11.472">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:03.471" status="PASS" endtime="20161110 16:25:11.472"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:11.474">${msg} = Response code:200, Content:{
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:25:11.473" status="PASS" endtime="20161110 16:25:11.474"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:11.476">Response code:200, Content:{
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:25:11.476" status="PASS" endtime="20161110 16:25:11.477"></status>
</kw>
<status starttime="20161110 16:25:11.475" status="PASS" endtime="20161110 16:25:11.477"></status>
</kw>
<status starttime="20161110 16:25:11.472" status="PASS" endtime="20161110 16:25:11.477"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:11.477">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:03.131" status="PASS" endtime="20161110 16:25:11.477"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:11.478">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:03.129" status="PASS" endtime="20161110 16:25:11.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:11.479">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:25:11.478" status="PASS" endtime="20161110 16:25:11.479"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:11.480">To JSON using : content={
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:25:11.480">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:25:11.480">${content} = {u'data': u'HOST_POWERING_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:25:11.479" status="PASS" endtime="20161110 16:25:11.480"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:11.480">${bmc_state} = HOST_POWERING_ON</msg>
<status starttime="20161110 16:25:03.127" status="PASS" endtime="20161110 16:25:11.480"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:25:11.482">'HOST_POWERING_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:25:11.481" status="FAIL" endtime="20161110 16:25:11.482"></status>
</kw>
<status starttime="20161110 16:25:03.126" status="FAIL" endtime="20161110 16:25:11.482"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:21.485">@{arglist} = [ ]</msg>
<status starttime="20161110 16:25:21.484" status="PASS" endtime="20161110 16:25:21.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:21.486">${args} = {u'data': []}</msg>
<status starttime="20161110 16:25:21.485" status="PASS" endtime="20161110 16:25:21.486"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:21.487">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:25:21.487" status="PASS" endtime="20161110 16:25:21.488"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:21.489">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:25:21.489" status="PASS" endtime="20161110 16:25:21.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:21.490">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:25:21.490" status="PASS" endtime="20161110 16:25:21.490"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:25:21.490" status="PASS" endtime="20161110 16:25:21.491"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:21.493">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:25:21.492" status="PASS" endtime="20161110 16:25:21.493"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:21.494">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:25:21.494" status="PASS" endtime="20161110 16:25:21.495"></status>
</kw>
<status starttime="20161110 16:25:21.493" status="PASS" endtime="20161110 16:25:21.495"></status>
</kw>
<status starttime="20161110 16:25:21.491" status="PASS" endtime="20161110 16:25:21.495"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:21.496">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:25:21.496" status="PASS" endtime="20161110 16:25:21.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:21.497">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:25:21.497" status="PASS" endtime="20161110 16:25:21.497"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:21.498">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:25:21.497" status="PASS" endtime="20161110 16:25:21.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:21.499">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:25:21.498" status="PASS" endtime="20161110 16:25:21.499"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:21.834">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:25:21.834">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:21.499" status="PASS" endtime="20161110 16:25:21.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:21.835">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:25:21.835" status="PASS" endtime="20161110 16:25:21.835"></status>
</kw>
<status starttime="20161110 16:25:21.495" status="PASS" endtime="20161110 16:25:21.836"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:25.879">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:25:25.880">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:21.836" status="PASS" endtime="20161110 16:25:25.880"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:25.882">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:25:25.881" status="PASS" endtime="20161110 16:25:25.882"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:25.883">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:25:25.883" status="PASS" endtime="20161110 16:25:25.883"></status>
</kw>
<status starttime="20161110 16:25:25.882" status="PASS" endtime="20161110 16:25:25.884"></status>
</kw>
<status starttime="20161110 16:25:25.880" status="PASS" endtime="20161110 16:25:25.884"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:25.884">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:21.488" status="PASS" endtime="20161110 16:25:25.884"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:25.884">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:21.486" status="PASS" endtime="20161110 16:25:25.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:25.885">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:25:25.885" status="PASS" endtime="20161110 16:25:25.886"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:25.886">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:25:25.887">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:25:25.887">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:25:25.886" status="PASS" endtime="20161110 16:25:25.887"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:25.887">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:25:21.483" status="PASS" endtime="20161110 16:25:25.887"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:25:25.888">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:25:25.887" status="FAIL" endtime="20161110 16:25:25.888"></status>
</kw>
<status starttime="20161110 16:25:21.483" status="FAIL" endtime="20161110 16:25:25.888"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:35.890">@{arglist} = [ ]</msg>
<status starttime="20161110 16:25:35.890" status="PASS" endtime="20161110 16:25:35.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:35.891">${args} = {u'data': []}</msg>
<status starttime="20161110 16:25:35.891" status="PASS" endtime="20161110 16:25:35.891"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:35.893">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:25:35.892" status="PASS" endtime="20161110 16:25:35.893"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:35.895">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:25:35.894" status="PASS" endtime="20161110 16:25:35.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:35.896">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:25:35.895" status="PASS" endtime="20161110 16:25:35.896"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:25:35.896" status="PASS" endtime="20161110 16:25:35.897"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:35.900">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:25:35.898" status="PASS" endtime="20161110 16:25:35.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:35.901">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:25:35.901" status="PASS" endtime="20161110 16:25:35.901"></status>
</kw>
<status starttime="20161110 16:25:35.900" status="PASS" endtime="20161110 16:25:35.901"></status>
</kw>
<status starttime="20161110 16:25:35.897" status="PASS" endtime="20161110 16:25:35.902"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:35.903">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:25:35.902" status="PASS" endtime="20161110 16:25:35.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:35.904">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:25:35.904" status="PASS" endtime="20161110 16:25:35.905"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:35.905">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:25:35.905" status="PASS" endtime="20161110 16:25:35.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:35.906">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:25:35.906" status="PASS" endtime="20161110 16:25:35.907"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:36.244">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:25:36.244">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:35.907" status="PASS" endtime="20161110 16:25:36.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:36.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:25:36.244" status="PASS" endtime="20161110 16:25:36.245"></status>
</kw>
<status starttime="20161110 16:25:35.902" status="PASS" endtime="20161110 16:25:36.245"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:36.552">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:25:36.553">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:36.245" status="PASS" endtime="20161110 16:25:36.553"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:36.554">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:25:36.553" status="PASS" endtime="20161110 16:25:36.554"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:36.555">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:25:36.554" status="PASS" endtime="20161110 16:25:36.555"></status>
</kw>
<status starttime="20161110 16:25:36.554" status="PASS" endtime="20161110 16:25:36.555"></status>
</kw>
<status starttime="20161110 16:25:36.553" status="PASS" endtime="20161110 16:25:36.555"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:36.555">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:35.893" status="PASS" endtime="20161110 16:25:36.555"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:36.555">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:35.891" status="PASS" endtime="20161110 16:25:36.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:36.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:25:36.555" status="PASS" endtime="20161110 16:25:36.556"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:36.556">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:25:36.556">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:25:36.557">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:25:36.556" status="PASS" endtime="20161110 16:25:36.557"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:36.557">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:25:35.889" status="PASS" endtime="20161110 16:25:36.557"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:25:36.558">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:25:36.557" status="FAIL" endtime="20161110 16:25:36.558"></status>
</kw>
<status starttime="20161110 16:25:35.888" status="FAIL" endtime="20161110 16:25:36.558"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:46.560">@{arglist} = [ ]</msg>
<status starttime="20161110 16:25:46.560" status="PASS" endtime="20161110 16:25:46.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:46.561">${args} = {u'data': []}</msg>
<status starttime="20161110 16:25:46.560" status="PASS" endtime="20161110 16:25:46.561"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:46.562">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:25:46.561" status="PASS" endtime="20161110 16:25:46.562"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:46.563">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:25:46.563" status="PASS" endtime="20161110 16:25:46.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:46.563">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:25:46.563" status="PASS" endtime="20161110 16:25:46.563"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:25:46.564" status="PASS" endtime="20161110 16:25:46.564"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:46.565">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:25:46.565" status="PASS" endtime="20161110 16:25:46.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:46.566">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:25:46.566" status="PASS" endtime="20161110 16:25:46.566"></status>
</kw>
<status starttime="20161110 16:25:46.565" status="PASS" endtime="20161110 16:25:46.566"></status>
</kw>
<status starttime="20161110 16:25:46.564" status="PASS" endtime="20161110 16:25:46.566"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:46.567">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:25:46.567" status="PASS" endtime="20161110 16:25:46.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:46.569">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:25:46.568" status="PASS" endtime="20161110 16:25:46.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:46.569">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:25:46.569" status="PASS" endtime="20161110 16:25:46.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:46.570">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:25:46.570" status="PASS" endtime="20161110 16:25:46.570"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:46.901">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:25:46.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:46.571" status="PASS" endtime="20161110 16:25:46.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:46.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:25:46.902" status="PASS" endtime="20161110 16:25:46.902"></status>
</kw>
<status starttime="20161110 16:25:46.567" status="PASS" endtime="20161110 16:25:46.903"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:47.218">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:25:47.218">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:46.903" status="PASS" endtime="20161110 16:25:47.218"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:47.220">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:25:47.219" status="PASS" endtime="20161110 16:25:47.220"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:47.221">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:25:47.221" status="PASS" endtime="20161110 16:25:47.222"></status>
</kw>
<status starttime="20161110 16:25:47.220" status="PASS" endtime="20161110 16:25:47.222"></status>
</kw>
<status starttime="20161110 16:25:47.218" status="PASS" endtime="20161110 16:25:47.222"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:47.222">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:46.562" status="PASS" endtime="20161110 16:25:47.222"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:47.223">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:46.561" status="PASS" endtime="20161110 16:25:47.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:47.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:25:47.223" status="PASS" endtime="20161110 16:25:47.224"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:47.224">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:25:47.224">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:25:47.225">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:25:47.224" status="PASS" endtime="20161110 16:25:47.225"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:47.225">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:25:46.559" status="PASS" endtime="20161110 16:25:47.225"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:25:47.226">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:25:47.226" status="FAIL" endtime="20161110 16:25:47.226"></status>
</kw>
<status starttime="20161110 16:25:46.559" status="FAIL" endtime="20161110 16:25:47.226"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.229">@{arglist} = [ ]</msg>
<status starttime="20161110 16:25:57.229" status="PASS" endtime="20161110 16:25:57.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.231">${args} = {u'data': []}</msg>
<status starttime="20161110 16:25:57.230" status="PASS" endtime="20161110 16:25:57.231"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.232">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:25:57.232" status="PASS" endtime="20161110 16:25:57.232"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.234">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:25:57.234" status="PASS" endtime="20161110 16:25:57.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.235">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:25:57.235" status="PASS" endtime="20161110 16:25:57.235"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:25:57.235" status="PASS" endtime="20161110 16:25:57.236"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.238">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:25:57.237" status="PASS" endtime="20161110 16:25:57.239"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:57.240">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:25:57.240" status="PASS" endtime="20161110 16:25:57.241"></status>
</kw>
<status starttime="20161110 16:25:57.239" status="PASS" endtime="20161110 16:25:57.241"></status>
</kw>
<status starttime="20161110 16:25:57.236" status="PASS" endtime="20161110 16:25:57.241"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:57.242">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:25:57.242" status="PASS" endtime="20161110 16:25:57.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.244">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:25:57.243" status="PASS" endtime="20161110 16:25:57.244"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.245">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:25:57.244" status="PASS" endtime="20161110 16:25:57.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.246">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:25:57.245" status="PASS" endtime="20161110 16:25:57.246"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.610">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:25:57.610">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:57.246" status="PASS" endtime="20161110 16:25:57.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:57.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:25:57.610" status="PASS" endtime="20161110 16:25:57.611"></status>
</kw>
<status starttime="20161110 16:25:57.241" status="PASS" endtime="20161110 16:25:57.611"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.921">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:25:57.921">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:57.612" status="PASS" endtime="20161110 16:25:57.921"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.923">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:25:57.922" status="PASS" endtime="20161110 16:25:57.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:57.924">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:25:57.924" status="PASS" endtime="20161110 16:25:57.925"></status>
</kw>
<status starttime="20161110 16:25:57.923" status="PASS" endtime="20161110 16:25:57.925"></status>
</kw>
<status starttime="20161110 16:25:57.921" status="PASS" endtime="20161110 16:25:57.925"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:57.925">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:57.233" status="PASS" endtime="20161110 16:25:57.926"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:57.926">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:25:57.231" status="PASS" endtime="20161110 16:25:57.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:25:57.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:25:57.926" status="PASS" endtime="20161110 16:25:57.927"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:25:57.928">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:25:57.928">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:25:57.928">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:25:57.928" status="PASS" endtime="20161110 16:25:57.928"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:25:57.928">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:25:57.228" status="PASS" endtime="20161110 16:25:57.928"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:25:57.929">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:25:57.929" status="FAIL" endtime="20161110 16:25:57.929"></status>
</kw>
<status starttime="20161110 16:25:57.228" status="FAIL" endtime="20161110 16:25:57.930"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:07.932">@{arglist} = [ ]</msg>
<status starttime="20161110 16:26:07.932" status="PASS" endtime="20161110 16:26:07.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:07.934">${args} = {u'data': []}</msg>
<status starttime="20161110 16:26:07.933" status="PASS" endtime="20161110 16:26:07.934"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:07.936">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:26:07.936" status="PASS" endtime="20161110 16:26:07.936"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:07.938">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:26:07.938" status="PASS" endtime="20161110 16:26:07.938"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:07.939">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:26:07.938" status="PASS" endtime="20161110 16:26:07.939"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:26:07.939" status="PASS" endtime="20161110 16:26:07.940"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:07.942">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:26:07.941" status="PASS" endtime="20161110 16:26:07.942"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:07.944">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:26:07.943" status="PASS" endtime="20161110 16:26:07.944"></status>
</kw>
<status starttime="20161110 16:26:07.943" status="PASS" endtime="20161110 16:26:07.944"></status>
</kw>
<status starttime="20161110 16:26:07.940" status="PASS" endtime="20161110 16:26:07.944"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:07.946">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:26:07.945" status="PASS" endtime="20161110 16:26:07.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:07.947">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:26:07.947" status="PASS" endtime="20161110 16:26:07.947"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:07.948">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:26:07.947" status="PASS" endtime="20161110 16:26:07.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:07.948">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:26:07.948" status="PASS" endtime="20161110 16:26:07.948"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:08.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:26:08.285">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:07.949" status="PASS" endtime="20161110 16:26:08.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:08.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:26:08.286" status="PASS" endtime="20161110 16:26:08.286"></status>
</kw>
<status starttime="20161110 16:26:07.944" status="PASS" endtime="20161110 16:26:08.286"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:08.592">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:26:08.593">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:08.287" status="PASS" endtime="20161110 16:26:08.593"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:08.594">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:26:08.593" status="PASS" endtime="20161110 16:26:08.594"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:08.595">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:26:08.594" status="PASS" endtime="20161110 16:26:08.595"></status>
</kw>
<status starttime="20161110 16:26:08.594" status="PASS" endtime="20161110 16:26:08.595"></status>
</kw>
<status starttime="20161110 16:26:08.593" status="PASS" endtime="20161110 16:26:08.595"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:08.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:07.936" status="PASS" endtime="20161110 16:26:08.595"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:08.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:07.934" status="PASS" endtime="20161110 16:26:08.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:08.596">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:26:08.596" status="PASS" endtime="20161110 16:26:08.596"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:08.596">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:26:08.597">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:26:08.597">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:26:08.596" status="PASS" endtime="20161110 16:26:08.597"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:08.597">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:26:07.931" status="PASS" endtime="20161110 16:26:08.597"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:26:08.598">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:26:08.597" status="FAIL" endtime="20161110 16:26:08.598"></status>
</kw>
<status starttime="20161110 16:26:07.930" status="FAIL" endtime="20161110 16:26:08.598"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:18.601">@{arglist} = [ ]</msg>
<status starttime="20161110 16:26:18.600" status="PASS" endtime="20161110 16:26:18.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:18.602">${args} = {u'data': []}</msg>
<status starttime="20161110 16:26:18.601" status="PASS" endtime="20161110 16:26:18.602"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:18.603">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:26:18.603" status="PASS" endtime="20161110 16:26:18.604"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:18.605">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:26:18.605" status="PASS" endtime="20161110 16:26:18.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:18.606">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:26:18.606" status="PASS" endtime="20161110 16:26:18.607"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:26:18.607" status="PASS" endtime="20161110 16:26:18.608"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:18.611">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:26:18.609" status="PASS" endtime="20161110 16:26:18.611"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:18.612">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:26:18.612" status="PASS" endtime="20161110 16:26:18.613"></status>
</kw>
<status starttime="20161110 16:26:18.611" status="PASS" endtime="20161110 16:26:18.613"></status>
</kw>
<status starttime="20161110 16:26:18.608" status="PASS" endtime="20161110 16:26:18.613"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:18.614">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:26:18.614" status="PASS" endtime="20161110 16:26:18.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:18.618">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:26:18.618" status="PASS" endtime="20161110 16:26:18.618"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:18.618">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:26:18.618" status="PASS" endtime="20161110 16:26:18.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:18.619">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:26:18.619" status="PASS" endtime="20161110 16:26:18.619"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:21.890">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:26:21.890">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:18.619" status="PASS" endtime="20161110 16:26:21.890"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:21.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:26:21.890" status="PASS" endtime="20161110 16:26:21.891"></status>
</kw>
<status starttime="20161110 16:26:18.613" status="PASS" endtime="20161110 16:26:21.891"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:22.166">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:26:22.166">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:21.892" status="PASS" endtime="20161110 16:26:22.166"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:22.168">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:26:22.167" status="PASS" endtime="20161110 16:26:22.168"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:22.170">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:26:22.170" status="PASS" endtime="20161110 16:26:22.170"></status>
</kw>
<status starttime="20161110 16:26:22.168" status="PASS" endtime="20161110 16:26:22.170"></status>
</kw>
<status starttime="20161110 16:26:22.166" status="PASS" endtime="20161110 16:26:22.170"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:22.171">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:18.604" status="PASS" endtime="20161110 16:26:22.171"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:22.171">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:18.602" status="PASS" endtime="20161110 16:26:22.171"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:22.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:26:22.171" status="PASS" endtime="20161110 16:26:22.172"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:22.172">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:26:22.172">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:26:22.173">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:26:22.172" status="PASS" endtime="20161110 16:26:22.173"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:22.173">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:26:18.600" status="PASS" endtime="20161110 16:26:22.173"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:26:22.174">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:26:22.173" status="FAIL" endtime="20161110 16:26:22.174"></status>
</kw>
<status starttime="20161110 16:26:18.599" status="FAIL" endtime="20161110 16:26:22.174"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:32.176">@{arglist} = [ ]</msg>
<status starttime="20161110 16:26:32.176" status="PASS" endtime="20161110 16:26:32.177"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:32.178">${args} = {u'data': []}</msg>
<status starttime="20161110 16:26:32.177" status="PASS" endtime="20161110 16:26:32.178"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:32.180">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:26:32.179" status="PASS" endtime="20161110 16:26:32.180"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:32.182">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:26:32.182" status="PASS" endtime="20161110 16:26:32.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:32.183">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:26:32.182" status="PASS" endtime="20161110 16:26:32.183"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:26:32.183" status="PASS" endtime="20161110 16:26:32.184"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:32.186">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:26:32.185" status="PASS" endtime="20161110 16:26:32.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:32.188">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:26:32.188" status="PASS" endtime="20161110 16:26:32.188"></status>
</kw>
<status starttime="20161110 16:26:32.187" status="PASS" endtime="20161110 16:26:32.188"></status>
</kw>
<status starttime="20161110 16:26:32.185" status="PASS" endtime="20161110 16:26:32.188"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:32.189">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:26:32.189" status="PASS" endtime="20161110 16:26:32.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:32.190">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:26:32.190" status="PASS" endtime="20161110 16:26:32.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:32.190">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:26:32.190" status="PASS" endtime="20161110 16:26:32.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:32.191">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:26:32.191" status="PASS" endtime="20161110 16:26:32.191"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:33.527">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:26:33.527">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:32.191" status="PASS" endtime="20161110 16:26:33.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:33.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:26:33.528" status="PASS" endtime="20161110 16:26:33.529"></status>
</kw>
<status starttime="20161110 16:26:32.188" status="PASS" endtime="20161110 16:26:33.529"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:33.806">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:26:33.806">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:33.529" status="PASS" endtime="20161110 16:26:33.806"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:33.808">${msg} = Response code:200, Content:{
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:26:33.808" status="PASS" endtime="20161110 16:26:33.808"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:33.811">Response code:200, Content:{
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:26:33.811" status="PASS" endtime="20161110 16:26:33.811"></status>
</kw>
<status starttime="20161110 16:26:33.810" status="PASS" endtime="20161110 16:26:33.812"></status>
</kw>
<status starttime="20161110 16:26:33.807" status="PASS" endtime="20161110 16:26:33.812"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:33.812">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:32.180" status="PASS" endtime="20161110 16:26:33.812"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:33.812">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:32.178" status="PASS" endtime="20161110 16:26:33.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:33.814">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:26:33.813" status="PASS" endtime="20161110 16:26:33.814"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:33.815">To JSON using : content={
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:26:33.815">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:26:33.815">${content} = {u'data': u'HOST_POWERING_OFF', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:26:33.814" status="PASS" endtime="20161110 16:26:33.815"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:33.816">${bmc_state} = HOST_POWERING_OFF</msg>
<status starttime="20161110 16:26:32.175" status="PASS" endtime="20161110 16:26:33.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:26:33.817">'HOST_POWERING_OFF' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:26:33.816" status="FAIL" endtime="20161110 16:26:33.817"></status>
</kw>
<status starttime="20161110 16:26:32.175" status="FAIL" endtime="20161110 16:26:33.818"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:43.819">@{arglist} = [ ]</msg>
<status starttime="20161110 16:26:43.819" status="PASS" endtime="20161110 16:26:43.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:43.820">${args} = {u'data': []}</msg>
<status starttime="20161110 16:26:43.820" status="PASS" endtime="20161110 16:26:43.820"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:43.821">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:26:43.821" status="PASS" endtime="20161110 16:26:43.821"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:43.822">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:26:43.822" status="PASS" endtime="20161110 16:26:43.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:43.823">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:26:43.822" status="PASS" endtime="20161110 16:26:43.823"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:26:43.823" status="PASS" endtime="20161110 16:26:43.823"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:43.825">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:26:43.824" status="PASS" endtime="20161110 16:26:43.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:43.825">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:26:43.825" status="PASS" endtime="20161110 16:26:43.826"></status>
</kw>
<status starttime="20161110 16:26:43.825" status="PASS" endtime="20161110 16:26:43.826"></status>
</kw>
<status starttime="20161110 16:26:43.823" status="PASS" endtime="20161110 16:26:43.826"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:43.827">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:26:43.826" status="PASS" endtime="20161110 16:26:43.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:43.828">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:26:43.827" status="PASS" endtime="20161110 16:26:43.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:43.828">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:26:43.828" status="PASS" endtime="20161110 16:26:43.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:43.829">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:26:43.828" status="PASS" endtime="20161110 16:26:43.829"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:44.163">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:26:44.163">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:43.829" status="PASS" endtime="20161110 16:26:44.163"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:44.164">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:26:44.163" status="PASS" endtime="20161110 16:26:44.164"></status>
</kw>
<status starttime="20161110 16:26:43.826" status="PASS" endtime="20161110 16:26:44.164"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:44.483">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:26:44.483">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:44.164" status="PASS" endtime="20161110 16:26:44.483"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:44.485">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:26:44.484" status="PASS" endtime="20161110 16:26:44.485"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:44.485">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:26:44.485" status="PASS" endtime="20161110 16:26:44.485"></status>
</kw>
<status starttime="20161110 16:26:44.485" status="PASS" endtime="20161110 16:26:44.486"></status>
</kw>
<status starttime="20161110 16:26:44.484" status="PASS" endtime="20161110 16:26:44.486"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:44.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:43.821" status="PASS" endtime="20161110 16:26:44.486"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:44.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:43.820" status="PASS" endtime="20161110 16:26:44.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:44.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:26:44.486" status="PASS" endtime="20161110 16:26:44.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:44.487">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:26:44.487">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:26:44.488">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:26:44.487" status="PASS" endtime="20161110 16:26:44.488"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:44.488">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:26:43.819" status="PASS" endtime="20161110 16:26:44.488"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:26:44.489">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:26:44.488" status="FAIL" endtime="20161110 16:26:44.489"></status>
</kw>
<status starttime="20161110 16:26:43.818" status="FAIL" endtime="20161110 16:26:44.489"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:54.491">@{arglist} = [ ]</msg>
<status starttime="20161110 16:26:54.490" status="PASS" endtime="20161110 16:26:54.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:54.491">${args} = {u'data': []}</msg>
<status starttime="20161110 16:26:54.491" status="PASS" endtime="20161110 16:26:54.492"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:54.493">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:26:54.492" status="PASS" endtime="20161110 16:26:54.493"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:54.494">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:26:54.493" status="PASS" endtime="20161110 16:26:54.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:54.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:26:54.494" status="PASS" endtime="20161110 16:26:54.494"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:26:54.494" status="PASS" endtime="20161110 16:26:54.495"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:54.497">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:26:54.495" status="PASS" endtime="20161110 16:26:54.497"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:54.497">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:26:54.497" status="PASS" endtime="20161110 16:26:54.498"></status>
</kw>
<status starttime="20161110 16:26:54.497" status="PASS" endtime="20161110 16:26:54.498"></status>
</kw>
<status starttime="20161110 16:26:54.495" status="PASS" endtime="20161110 16:26:54.498"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:54.499">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:26:54.498" status="PASS" endtime="20161110 16:26:54.499"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:54.500">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:26:54.499" status="PASS" endtime="20161110 16:26:54.500"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:54.501">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:26:54.500" status="PASS" endtime="20161110 16:26:54.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:54.501">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:26:54.501" status="PASS" endtime="20161110 16:26:54.501"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:57.658">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:26:57.658">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:54.502" status="PASS" endtime="20161110 16:26:57.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:57.659">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:26:57.659" status="PASS" endtime="20161110 16:26:57.659"></status>
</kw>
<status starttime="20161110 16:26:54.498" status="PASS" endtime="20161110 16:26:57.660"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:57.937">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:26:57.937">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:57.660" status="PASS" endtime="20161110 16:26:57.938"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:57.940">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:26:57.939" status="PASS" endtime="20161110 16:26:57.940"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:57.942">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:26:57.942" status="PASS" endtime="20161110 16:26:57.942"></status>
</kw>
<status starttime="20161110 16:26:57.940" status="PASS" endtime="20161110 16:26:57.942"></status>
</kw>
<status starttime="20161110 16:26:57.938" status="PASS" endtime="20161110 16:26:57.942"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:57.943">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:54.493" status="PASS" endtime="20161110 16:26:57.943"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:57.943">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:26:54.492" status="PASS" endtime="20161110 16:26:57.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:26:57.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:26:57.944" status="PASS" endtime="20161110 16:26:57.945"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:26:57.946">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:26:57.946">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:26:57.946">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:26:57.945" status="PASS" endtime="20161110 16:26:57.946"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:26:57.947">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:26:54.490" status="PASS" endtime="20161110 16:26:57.947"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:26:57.948">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:26:57.947" status="FAIL" endtime="20161110 16:26:57.948"></status>
</kw>
<status starttime="20161110 16:26:54.489" status="FAIL" endtime="20161110 16:26:57.948"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:07.951">@{arglist} = [ ]</msg>
<status starttime="20161110 16:27:07.951" status="PASS" endtime="20161110 16:27:07.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:07.953">${args} = {u'data': []}</msg>
<status starttime="20161110 16:27:07.952" status="PASS" endtime="20161110 16:27:07.953"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:07.955">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:27:07.954" status="PASS" endtime="20161110 16:27:07.955"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:07.957">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:27:07.956" status="PASS" endtime="20161110 16:27:07.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:07.958">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:27:07.957" status="PASS" endtime="20161110 16:27:07.958"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:27:07.958" status="PASS" endtime="20161110 16:27:07.959"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:07.961">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:27:07.960" status="PASS" endtime="20161110 16:27:07.961"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:07.962">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:27:07.962" status="PASS" endtime="20161110 16:27:07.962"></status>
</kw>
<status starttime="20161110 16:27:07.961" status="PASS" endtime="20161110 16:27:07.962"></status>
</kw>
<status starttime="20161110 16:27:07.959" status="PASS" endtime="20161110 16:27:07.963"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:07.964">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:27:07.964" status="PASS" endtime="20161110 16:27:07.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:07.965">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:27:07.965" status="PASS" endtime="20161110 16:27:07.965"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:07.966">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:27:07.966" status="PASS" endtime="20161110 16:27:07.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:07.967">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:27:07.967" status="PASS" endtime="20161110 16:27:07.967"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:08.298">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:27:08.299">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:07.968" status="PASS" endtime="20161110 16:27:08.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:08.299">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:27:08.299" status="PASS" endtime="20161110 16:27:08.299"></status>
</kw>
<status starttime="20161110 16:27:07.963" status="PASS" endtime="20161110 16:27:08.300"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:08.582">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:27:08.582">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:08.300" status="PASS" endtime="20161110 16:27:08.583"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:08.584">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:27:08.583" status="PASS" endtime="20161110 16:27:08.584"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:08.585">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:27:08.584" status="PASS" endtime="20161110 16:27:08.585"></status>
</kw>
<status starttime="20161110 16:27:08.584" status="PASS" endtime="20161110 16:27:08.585"></status>
</kw>
<status starttime="20161110 16:27:08.583" status="PASS" endtime="20161110 16:27:08.585"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:08.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:07.955" status="PASS" endtime="20161110 16:27:08.585"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:08.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:07.953" status="PASS" endtime="20161110 16:27:08.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:08.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:27:08.585" status="PASS" endtime="20161110 16:27:08.586"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:08.586">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:27:08.586">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:27:08.586">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:27:08.586" status="PASS" endtime="20161110 16:27:08.587"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:08.587">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:27:07.950" status="PASS" endtime="20161110 16:27:08.587"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:27:08.587">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:27:08.587" status="FAIL" endtime="20161110 16:27:08.588"></status>
</kw>
<status starttime="20161110 16:27:07.949" status="FAIL" endtime="20161110 16:27:08.588"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:18.590">@{arglist} = [ ]</msg>
<status starttime="20161110 16:27:18.590" status="PASS" endtime="20161110 16:27:18.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:18.591">${args} = {u'data': []}</msg>
<status starttime="20161110 16:27:18.590" status="PASS" endtime="20161110 16:27:18.591"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:18.593">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:27:18.592" status="PASS" endtime="20161110 16:27:18.593"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:18.595">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:27:18.594" status="PASS" endtime="20161110 16:27:18.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:18.596">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:27:18.595" status="PASS" endtime="20161110 16:27:18.596"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:27:18.596" status="PASS" endtime="20161110 16:27:18.596"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:18.599">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:27:18.598" status="PASS" endtime="20161110 16:27:18.599"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:18.600">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:27:18.599" status="PASS" endtime="20161110 16:27:18.600"></status>
</kw>
<status starttime="20161110 16:27:18.599" status="PASS" endtime="20161110 16:27:18.600"></status>
</kw>
<status starttime="20161110 16:27:18.597" status="PASS" endtime="20161110 16:27:18.600"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:18.601">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:27:18.601" status="PASS" endtime="20161110 16:27:18.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:18.603">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:27:18.602" status="PASS" endtime="20161110 16:27:18.603"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:18.603">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:27:18.603" status="PASS" endtime="20161110 16:27:18.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:18.604">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:27:18.604" status="PASS" endtime="20161110 16:27:18.604"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:18.937">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:27:18.937">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:18.604" status="PASS" endtime="20161110 16:27:18.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:18.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:27:18.938" status="PASS" endtime="20161110 16:27:18.939"></status>
</kw>
<status starttime="20161110 16:27:18.600" status="PASS" endtime="20161110 16:27:18.939"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:19.220">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:27:19.220">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:18.939" status="PASS" endtime="20161110 16:27:19.220"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:19.222">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:27:19.221" status="PASS" endtime="20161110 16:27:19.222"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:19.224">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:27:19.223" status="PASS" endtime="20161110 16:27:19.224"></status>
</kw>
<status starttime="20161110 16:27:19.223" status="PASS" endtime="20161110 16:27:19.224"></status>
</kw>
<status starttime="20161110 16:27:19.221" status="PASS" endtime="20161110 16:27:19.224"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:19.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:18.593" status="PASS" endtime="20161110 16:27:19.225"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:19.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:18.591" status="PASS" endtime="20161110 16:27:19.225"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:19.226">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:27:19.225" status="PASS" endtime="20161110 16:27:19.226"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:19.227">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:27:19.227">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:27:19.227">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:27:19.226" status="PASS" endtime="20161110 16:27:19.227"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:19.227">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:27:18.589" status="PASS" endtime="20161110 16:27:19.228"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:27:19.228">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:27:19.228" status="FAIL" endtime="20161110 16:27:19.229"></status>
</kw>
<status starttime="20161110 16:27:18.588" status="FAIL" endtime="20161110 16:27:19.229"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.231">@{arglist} = [ ]</msg>
<status starttime="20161110 16:27:29.231" status="PASS" endtime="20161110 16:27:29.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.232">${args} = {u'data': []}</msg>
<status starttime="20161110 16:27:29.232" status="PASS" endtime="20161110 16:27:29.232"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.234">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:27:29.234" status="PASS" endtime="20161110 16:27:29.234"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.236">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:27:29.235" status="PASS" endtime="20161110 16:27:29.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:27:29.236" status="PASS" endtime="20161110 16:27:29.238"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:27:29.238" status="PASS" endtime="20161110 16:27:29.239"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.241">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:27:29.240" status="PASS" endtime="20161110 16:27:29.242"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:29.243">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:27:29.243" status="PASS" endtime="20161110 16:27:29.243"></status>
</kw>
<status starttime="20161110 16:27:29.242" status="PASS" endtime="20161110 16:27:29.243"></status>
</kw>
<status starttime="20161110 16:27:29.239" status="PASS" endtime="20161110 16:27:29.244"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:29.245">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:27:29.245" status="PASS" endtime="20161110 16:27:29.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:27:29.246" status="PASS" endtime="20161110 16:27:29.247"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.247">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:27:29.247" status="PASS" endtime="20161110 16:27:29.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.248">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:27:29.248" status="PASS" endtime="20161110 16:27:29.248"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.576">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:27:29.576">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:29.249" status="PASS" endtime="20161110 16:27:29.576"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:29.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:27:29.577" status="PASS" endtime="20161110 16:27:29.578"></status>
</kw>
<status starttime="20161110 16:27:29.244" status="PASS" endtime="20161110 16:27:29.578"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.866">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:27:29.866">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:29.578" status="PASS" endtime="20161110 16:27:29.867"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.869">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:27:29.868" status="PASS" endtime="20161110 16:27:29.869"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:29.871">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:27:29.870" status="PASS" endtime="20161110 16:27:29.871"></status>
</kw>
<status starttime="20161110 16:27:29.869" status="PASS" endtime="20161110 16:27:29.871"></status>
</kw>
<status starttime="20161110 16:27:29.867" status="PASS" endtime="20161110 16:27:29.871"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:29.871">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:29.234" status="PASS" endtime="20161110 16:27:29.872"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:29.872">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:29.233" status="PASS" endtime="20161110 16:27:29.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:29.873">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:27:29.873" status="PASS" endtime="20161110 16:27:29.873"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:29.875">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:27:29.875">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:27:29.875">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:27:29.874" status="PASS" endtime="20161110 16:27:29.875"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:29.876">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:27:29.230" status="PASS" endtime="20161110 16:27:29.876"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:27:29.877">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:27:29.876" status="FAIL" endtime="20161110 16:27:29.877"></status>
</kw>
<status starttime="20161110 16:27:29.229" status="FAIL" endtime="20161110 16:27:29.877"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:39.880">@{arglist} = [ ]</msg>
<status starttime="20161110 16:27:39.879" status="PASS" endtime="20161110 16:27:39.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:39.881">${args} = {u'data': []}</msg>
<status starttime="20161110 16:27:39.880" status="PASS" endtime="20161110 16:27:39.881"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:39.883">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:27:39.882" status="PASS" endtime="20161110 16:27:39.883"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:39.885">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:27:39.884" status="PASS" endtime="20161110 16:27:39.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:39.886">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:27:39.885" status="PASS" endtime="20161110 16:27:39.886"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:27:39.886" status="PASS" endtime="20161110 16:27:39.887"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:39.889">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:27:39.888" status="PASS" endtime="20161110 16:27:39.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:39.890">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:27:39.890" status="PASS" endtime="20161110 16:27:39.890"></status>
</kw>
<status starttime="20161110 16:27:39.889" status="PASS" endtime="20161110 16:27:39.890"></status>
</kw>
<status starttime="20161110 16:27:39.887" status="PASS" endtime="20161110 16:27:39.890"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:39.892">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:27:39.891" status="PASS" endtime="20161110 16:27:39.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:39.893">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:27:39.892" status="PASS" endtime="20161110 16:27:39.893"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:39.893">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:27:39.893" status="PASS" endtime="20161110 16:27:39.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:39.894">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:27:39.894" status="PASS" endtime="20161110 16:27:39.894"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:40.224">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:27:40.224">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:39.895" status="PASS" endtime="20161110 16:27:40.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:40.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:27:40.224" status="PASS" endtime="20161110 16:27:40.225"></status>
</kw>
<status starttime="20161110 16:27:39.890" status="PASS" endtime="20161110 16:27:40.225"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:40.507">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:27:40.507">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:40.225" status="PASS" endtime="20161110 16:27:40.507"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:40.508">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:27:40.508" status="PASS" endtime="20161110 16:27:40.508"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:40.509">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:27:40.509" status="PASS" endtime="20161110 16:27:40.510"></status>
</kw>
<status starttime="20161110 16:27:40.508" status="PASS" endtime="20161110 16:27:40.510"></status>
</kw>
<status starttime="20161110 16:27:40.507" status="PASS" endtime="20161110 16:27:40.510"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:40.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:39.883" status="PASS" endtime="20161110 16:27:40.510"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:40.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:39.881" status="PASS" endtime="20161110 16:27:40.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:40.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:27:40.511" status="PASS" endtime="20161110 16:27:40.511"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:40.511">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:27:40.511">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:27:40.512">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:27:40.511" status="PASS" endtime="20161110 16:27:40.512"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:40.512">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:27:39.879" status="PASS" endtime="20161110 16:27:40.512"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:27:40.512">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:27:40.512" status="FAIL" endtime="20161110 16:27:40.512"></status>
</kw>
<status starttime="20161110 16:27:39.878" status="FAIL" endtime="20161110 16:27:40.513"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:50.515">@{arglist} = [ ]</msg>
<status starttime="20161110 16:27:50.515" status="PASS" endtime="20161110 16:27:50.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:50.516">${args} = {u'data': []}</msg>
<status starttime="20161110 16:27:50.515" status="PASS" endtime="20161110 16:27:50.516"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:50.518">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:27:50.517" status="PASS" endtime="20161110 16:27:50.518"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:50.520">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:27:50.519" status="PASS" endtime="20161110 16:27:50.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:50.521">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:27:50.520" status="PASS" endtime="20161110 16:27:50.521"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:27:50.521" status="PASS" endtime="20161110 16:27:50.522"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:50.524">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:27:50.523" status="PASS" endtime="20161110 16:27:50.525"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:50.526">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:27:50.526" status="PASS" endtime="20161110 16:27:50.526"></status>
</kw>
<status starttime="20161110 16:27:50.525" status="PASS" endtime="20161110 16:27:50.526"></status>
</kw>
<status starttime="20161110 16:27:50.522" status="PASS" endtime="20161110 16:27:50.526"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:50.528">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:27:50.527" status="PASS" endtime="20161110 16:27:50.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:50.530">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:27:50.529" status="PASS" endtime="20161110 16:27:50.530"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:50.531">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:27:50.530" status="PASS" endtime="20161110 16:27:50.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:50.532">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:27:50.532" status="PASS" endtime="20161110 16:27:50.532"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:50.863">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:27:50.863">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:50.533" status="PASS" endtime="20161110 16:27:50.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:50.864">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:27:50.863" status="PASS" endtime="20161110 16:27:50.864"></status>
</kw>
<status starttime="20161110 16:27:50.527" status="PASS" endtime="20161110 16:27:50.864"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:51.153">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:27:51.153">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:50.864" status="PASS" endtime="20161110 16:27:51.153"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:51.154">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:27:51.154" status="PASS" endtime="20161110 16:27:51.154"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:51.155">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:27:51.155" status="PASS" endtime="20161110 16:27:51.155"></status>
</kw>
<status starttime="20161110 16:27:51.154" status="PASS" endtime="20161110 16:27:51.155"></status>
</kw>
<status starttime="20161110 16:27:51.153" status="PASS" endtime="20161110 16:27:51.155"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:51.155">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:50.518" status="PASS" endtime="20161110 16:27:51.155"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:51.156">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:27:50.516" status="PASS" endtime="20161110 16:27:51.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:27:51.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:27:51.156" status="PASS" endtime="20161110 16:27:51.156"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:27:51.157">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:27:51.157">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:27:51.157">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:27:51.156" status="PASS" endtime="20161110 16:27:51.157"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:27:51.157">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:27:50.514" status="PASS" endtime="20161110 16:27:51.157"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:27:51.158">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:27:51.157" status="FAIL" endtime="20161110 16:27:51.158"></status>
</kw>
<status starttime="20161110 16:27:50.513" status="FAIL" endtime="20161110 16:27:51.158"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.163">@{arglist} = [ ]</msg>
<status starttime="20161110 16:28:01.160" status="PASS" endtime="20161110 16:28:01.163"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.165">${args} = {u'data': []}</msg>
<status starttime="20161110 16:28:01.164" status="PASS" endtime="20161110 16:28:01.165"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.166">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:28:01.166" status="PASS" endtime="20161110 16:28:01.166"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.168">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:28:01.168" status="PASS" endtime="20161110 16:28:01.169"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.169">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:01.169" status="PASS" endtime="20161110 16:28:01.169"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:28:01.169" status="PASS" endtime="20161110 16:28:01.170"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.171">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:01.170" status="PASS" endtime="20161110 16:28:01.171"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:01.172">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:01.172" status="PASS" endtime="20161110 16:28:01.172"></status>
</kw>
<status starttime="20161110 16:28:01.171" status="PASS" endtime="20161110 16:28:01.172"></status>
</kw>
<status starttime="20161110 16:28:01.170" status="PASS" endtime="20161110 16:28:01.172"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:01.173">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:28:01.173" status="PASS" endtime="20161110 16:28:01.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.174">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:01.173" status="PASS" endtime="20161110 16:28:01.174"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.175">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:28:01.174" status="PASS" endtime="20161110 16:28:01.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.175">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:28:01.175" status="PASS" endtime="20161110 16:28:01.175"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.520">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:01.520">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:01.175" status="PASS" endtime="20161110 16:28:01.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:01.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:01.521" status="PASS" endtime="20161110 16:28:01.522"></status>
</kw>
<status starttime="20161110 16:28:01.172" status="PASS" endtime="20161110 16:28:01.522"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.830">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:01.830">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:01.522" status="PASS" endtime="20161110 16:28:01.830"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.832">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:01.831" status="PASS" endtime="20161110 16:28:01.832"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:01.833">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:01.833" status="PASS" endtime="20161110 16:28:01.834"></status>
</kw>
<status starttime="20161110 16:28:01.832" status="PASS" endtime="20161110 16:28:01.834"></status>
</kw>
<status starttime="20161110 16:28:01.830" status="PASS" endtime="20161110 16:28:01.834"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:01.834">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:01.167" status="PASS" endtime="20161110 16:28:01.834"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:01.835">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:01.165" status="PASS" endtime="20161110 16:28:01.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:01.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:01.835" status="PASS" endtime="20161110 16:28:01.836"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:01.837">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:28:01.837">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:28:01.837">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:28:01.836" status="PASS" endtime="20161110 16:28:01.837"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:01.837">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:28:01.159" status="PASS" endtime="20161110 16:28:01.837"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:28:01.838">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:28:01.838" status="FAIL" endtime="20161110 16:28:01.838"></status>
</kw>
<status starttime="20161110 16:28:01.159" status="FAIL" endtime="20161110 16:28:01.839"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:11.841">@{arglist} = [ ]</msg>
<status starttime="20161110 16:28:11.841" status="PASS" endtime="20161110 16:28:11.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:11.843">${args} = {u'data': []}</msg>
<status starttime="20161110 16:28:11.842" status="PASS" endtime="20161110 16:28:11.843"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:11.845">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:28:11.844" status="PASS" endtime="20161110 16:28:11.845"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:11.848">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:28:11.847" status="PASS" endtime="20161110 16:28:11.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:11.849">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:11.848" status="PASS" endtime="20161110 16:28:11.849"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:28:11.849" status="PASS" endtime="20161110 16:28:11.850"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:11.852">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:11.851" status="PASS" endtime="20161110 16:28:11.852"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:11.853">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:11.853" status="PASS" endtime="20161110 16:28:11.853"></status>
</kw>
<status starttime="20161110 16:28:11.852" status="PASS" endtime="20161110 16:28:11.853"></status>
</kw>
<status starttime="20161110 16:28:11.850" status="PASS" endtime="20161110 16:28:11.853"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:11.854">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:28:11.854" status="PASS" endtime="20161110 16:28:11.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:11.855">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:11.855" status="PASS" endtime="20161110 16:28:11.855"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:11.856">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:28:11.856" status="PASS" endtime="20161110 16:28:11.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:11.856">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:28:11.856" status="PASS" endtime="20161110 16:28:11.856"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:12.185">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:12.185">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:11.857" status="PASS" endtime="20161110 16:28:12.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:12.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:12.186" status="PASS" endtime="20161110 16:28:12.186"></status>
</kw>
<status starttime="20161110 16:28:11.853" status="PASS" endtime="20161110 16:28:12.187"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:12.468">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:12.468">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:12.187" status="PASS" endtime="20161110 16:28:12.469"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:12.470">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:12.470" status="PASS" endtime="20161110 16:28:12.471"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:12.472">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:12.472" status="PASS" endtime="20161110 16:28:12.472"></status>
</kw>
<status starttime="20161110 16:28:12.471" status="PASS" endtime="20161110 16:28:12.472"></status>
</kw>
<status starttime="20161110 16:28:12.469" status="PASS" endtime="20161110 16:28:12.473"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:12.473">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:11.845" status="PASS" endtime="20161110 16:28:12.473"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:12.473">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:11.843" status="PASS" endtime="20161110 16:28:12.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:12.474">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:12.474" status="PASS" endtime="20161110 16:28:12.474"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:12.475">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:28:12.475">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:28:12.475">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:28:12.475" status="PASS" endtime="20161110 16:28:12.475"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:12.476">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:28:11.840" status="PASS" endtime="20161110 16:28:12.476"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:28:12.477">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:28:12.476" status="FAIL" endtime="20161110 16:28:12.477"></status>
</kw>
<status starttime="20161110 16:28:11.839" status="FAIL" endtime="20161110 16:28:12.477"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:22.480">@{arglist} = [ ]</msg>
<status starttime="20161110 16:28:22.480" status="PASS" endtime="20161110 16:28:22.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:22.481">${args} = {u'data': []}</msg>
<status starttime="20161110 16:28:22.481" status="PASS" endtime="20161110 16:28:22.481"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:22.483">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:28:22.483" status="PASS" endtime="20161110 16:28:22.483"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:22.486">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:28:22.485" status="PASS" endtime="20161110 16:28:22.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:22.487">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:22.486" status="PASS" endtime="20161110 16:28:22.487"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:28:22.487" status="PASS" endtime="20161110 16:28:22.487"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:22.490">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:22.489" status="PASS" endtime="20161110 16:28:22.490"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:22.490">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:22.490" status="PASS" endtime="20161110 16:28:22.490"></status>
</kw>
<status starttime="20161110 16:28:22.490" status="PASS" endtime="20161110 16:28:22.491"></status>
</kw>
<status starttime="20161110 16:28:22.488" status="PASS" endtime="20161110 16:28:22.491"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:22.492">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:28:22.491" status="PASS" endtime="20161110 16:28:22.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:22.492">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:22.492" status="PASS" endtime="20161110 16:28:22.492"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:22.493">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:28:22.493" status="PASS" endtime="20161110 16:28:22.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:22.493">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:28:22.493" status="PASS" endtime="20161110 16:28:22.494"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:22.832">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:22.832">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:22.494" status="PASS" endtime="20161110 16:28:22.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:22.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:22.833" status="PASS" endtime="20161110 16:28:22.834"></status>
</kw>
<status starttime="20161110 16:28:22.491" status="PASS" endtime="20161110 16:28:22.834"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:23.115">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:23.115">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:22.834" status="PASS" endtime="20161110 16:28:23.115"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:23.119">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:23.116" status="PASS" endtime="20161110 16:28:23.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:23.120">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:23.120" status="PASS" endtime="20161110 16:28:23.120"></status>
</kw>
<status starttime="20161110 16:28:23.119" status="PASS" endtime="20161110 16:28:23.120"></status>
</kw>
<status starttime="20161110 16:28:23.116" status="PASS" endtime="20161110 16:28:23.121"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:23.121">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:22.483" status="PASS" endtime="20161110 16:28:23.121"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:23.121">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:22.482" status="PASS" endtime="20161110 16:28:23.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:23.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:23.121" status="PASS" endtime="20161110 16:28:23.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:23.123">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:28:23.123">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:28:23.123">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:28:23.122" status="PASS" endtime="20161110 16:28:23.123"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:23.123">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:28:22.479" status="PASS" endtime="20161110 16:28:23.124"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:28:23.124">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:28:23.124" status="FAIL" endtime="20161110 16:28:23.124"></status>
</kw>
<status starttime="20161110 16:28:22.478" status="FAIL" endtime="20161110 16:28:23.125"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:33.127">@{arglist} = [ ]</msg>
<status starttime="20161110 16:28:33.127" status="PASS" endtime="20161110 16:28:33.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:33.128">${args} = {u'data': []}</msg>
<status starttime="20161110 16:28:33.128" status="PASS" endtime="20161110 16:28:33.128"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:33.130">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:28:33.130" status="PASS" endtime="20161110 16:28:33.130"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:33.132">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:28:33.131" status="PASS" endtime="20161110 16:28:33.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:33.133">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:33.132" status="PASS" endtime="20161110 16:28:33.133"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:28:33.133" status="PASS" endtime="20161110 16:28:33.133"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:33.136">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:33.135" status="PASS" endtime="20161110 16:28:33.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:33.137">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:33.137" status="PASS" endtime="20161110 16:28:33.137"></status>
</kw>
<status starttime="20161110 16:28:33.136" status="PASS" endtime="20161110 16:28:33.137"></status>
</kw>
<status starttime="20161110 16:28:33.134" status="PASS" endtime="20161110 16:28:33.138"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:33.139">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:28:33.138" status="PASS" endtime="20161110 16:28:33.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:33.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:33.140" status="PASS" endtime="20161110 16:28:33.140"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:33.140">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:28:33.140" status="PASS" endtime="20161110 16:28:33.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:33.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:28:33.141" status="PASS" endtime="20161110 16:28:33.141"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:37.489">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:37.489">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:33.141" status="PASS" endtime="20161110 16:28:37.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:37.491">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:37.490" status="PASS" endtime="20161110 16:28:37.491"></status>
</kw>
<status starttime="20161110 16:28:33.138" status="PASS" endtime="20161110 16:28:37.491"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:37.767">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:37.767">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:37.491" status="PASS" endtime="20161110 16:28:37.767"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:37.769">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:37.768" status="PASS" endtime="20161110 16:28:37.769"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:37.771">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:37.770" status="PASS" endtime="20161110 16:28:37.771"></status>
</kw>
<status starttime="20161110 16:28:37.769" status="PASS" endtime="20161110 16:28:37.771"></status>
</kw>
<status starttime="20161110 16:28:37.767" status="PASS" endtime="20161110 16:28:37.771"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:37.771">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:33.130" status="PASS" endtime="20161110 16:28:37.771"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:37.772">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:33.129" status="PASS" endtime="20161110 16:28:37.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:37.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:37.772" status="PASS" endtime="20161110 16:28:37.773"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:37.774">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:28:37.774">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:28:37.774">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:28:37.773" status="PASS" endtime="20161110 16:28:37.774"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:37.774">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:28:33.126" status="PASS" endtime="20161110 16:28:37.774"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:28:37.776">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:28:37.775" status="FAIL" endtime="20161110 16:28:37.776"></status>
</kw>
<status starttime="20161110 16:28:33.125" status="FAIL" endtime="20161110 16:28:37.776"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:47.778">@{arglist} = [ ]</msg>
<status starttime="20161110 16:28:47.778" status="PASS" endtime="20161110 16:28:47.778"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:47.779">${args} = {u'data': []}</msg>
<status starttime="20161110 16:28:47.779" status="PASS" endtime="20161110 16:28:47.780"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:47.781">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:28:47.781" status="PASS" endtime="20161110 16:28:47.781"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:47.783">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:28:47.783" status="PASS" endtime="20161110 16:28:47.783"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:47.784">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:47.784" status="PASS" endtime="20161110 16:28:47.784"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:28:47.784" status="PASS" endtime="20161110 16:28:47.785"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:47.788">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:47.786" status="PASS" endtime="20161110 16:28:47.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:47.789">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:47.789" status="PASS" endtime="20161110 16:28:47.789"></status>
</kw>
<status starttime="20161110 16:28:47.788" status="PASS" endtime="20161110 16:28:47.789"></status>
</kw>
<status starttime="20161110 16:28:47.785" status="PASS" endtime="20161110 16:28:47.789"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:47.790">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:28:47.790" status="PASS" endtime="20161110 16:28:47.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:47.791">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:47.791" status="PASS" endtime="20161110 16:28:47.791"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:47.792">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:28:47.791" status="PASS" endtime="20161110 16:28:47.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:47.792">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:28:47.792" status="PASS" endtime="20161110 16:28:47.792"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:48.120">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:48.120">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:47.792" status="PASS" endtime="20161110 16:28:48.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:48.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:48.121" status="PASS" endtime="20161110 16:28:48.121"></status>
</kw>
<status starttime="20161110 16:28:47.790" status="PASS" endtime="20161110 16:28:48.121"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:48.413">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:48.413">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:48.122" status="PASS" endtime="20161110 16:28:48.413"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:48.414">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:48.413" status="PASS" endtime="20161110 16:28:48.414"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:48.415">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:48.415" status="PASS" endtime="20161110 16:28:48.415"></status>
</kw>
<status starttime="20161110 16:28:48.414" status="PASS" endtime="20161110 16:28:48.415"></status>
</kw>
<status starttime="20161110 16:28:48.413" status="PASS" endtime="20161110 16:28:48.416"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:48.416">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:47.781" status="PASS" endtime="20161110 16:28:48.416"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:48.416">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:47.780" status="PASS" endtime="20161110 16:28:48.416"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:48.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:48.416" status="PASS" endtime="20161110 16:28:48.417"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:48.417">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:28:48.417">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:28:48.417">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:28:48.417" status="PASS" endtime="20161110 16:28:48.417"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:48.417">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:28:47.777" status="PASS" endtime="20161110 16:28:48.417"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:28:48.418">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:28:48.418" status="FAIL" endtime="20161110 16:28:48.418"></status>
</kw>
<status starttime="20161110 16:28:47.777" status="FAIL" endtime="20161110 16:28:48.418"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:58.421">@{arglist} = [ ]</msg>
<status starttime="20161110 16:28:58.420" status="PASS" endtime="20161110 16:28:58.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:58.422">${args} = {u'data': []}</msg>
<status starttime="20161110 16:28:58.422" status="PASS" endtime="20161110 16:28:58.422"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:58.424">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:28:58.424" status="PASS" endtime="20161110 16:28:58.424"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:58.426">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:28:58.426" status="PASS" endtime="20161110 16:28:58.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:58.427">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:58.427" status="PASS" endtime="20161110 16:28:58.427"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:28:58.428" status="PASS" endtime="20161110 16:28:58.428"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:58.431">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:58.430" status="PASS" endtime="20161110 16:28:58.431"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:58.432">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:28:58.432" status="PASS" endtime="20161110 16:28:58.432"></status>
</kw>
<status starttime="20161110 16:28:58.431" status="PASS" endtime="20161110 16:28:58.432"></status>
</kw>
<status starttime="20161110 16:28:58.429" status="PASS" endtime="20161110 16:28:58.432"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:58.433">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:28:58.433" status="PASS" endtime="20161110 16:28:58.433"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:58.434">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:28:58.434" status="PASS" endtime="20161110 16:28:58.434"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:58.434">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:28:58.434" status="PASS" endtime="20161110 16:28:58.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:58.435">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:28:58.435" status="PASS" endtime="20161110 16:28:58.435"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:58.773">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:58.773">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:58.435" status="PASS" endtime="20161110 16:28:58.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:58.774">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:58.773" status="PASS" endtime="20161110 16:28:58.774"></status>
</kw>
<status starttime="20161110 16:28:58.432" status="PASS" endtime="20161110 16:28:58.775"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:59.056">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:28:59.056">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:58.775" status="PASS" endtime="20161110 16:28:59.056"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:59.058">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:59.057" status="PASS" endtime="20161110 16:28:59.058"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:59.059">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:28:59.059" status="PASS" endtime="20161110 16:28:59.060"></status>
</kw>
<status starttime="20161110 16:28:59.058" status="PASS" endtime="20161110 16:28:59.060"></status>
</kw>
<status starttime="20161110 16:28:59.057" status="PASS" endtime="20161110 16:28:59.060"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:59.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:58.425" status="PASS" endtime="20161110 16:28:59.060"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:59.061">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:28:58.423" status="PASS" endtime="20161110 16:28:59.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:28:59.062">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:28:59.061" status="PASS" endtime="20161110 16:28:59.062"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:28:59.062">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:28:59.063">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:28:59.063">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:28:59.062" status="PASS" endtime="20161110 16:28:59.063"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:28:59.063">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:28:58.420" status="PASS" endtime="20161110 16:28:59.063"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:28:59.064">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:28:59.064" status="FAIL" endtime="20161110 16:28:59.064"></status>
</kw>
<status starttime="20161110 16:28:58.419" status="FAIL" endtime="20161110 16:28:59.065"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:09.067">@{arglist} = [ ]</msg>
<status starttime="20161110 16:29:09.067" status="PASS" endtime="20161110 16:29:09.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:09.068">${args} = {u'data': []}</msg>
<status starttime="20161110 16:29:09.068" status="PASS" endtime="20161110 16:29:09.068"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:09.070">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:29:09.070" status="PASS" endtime="20161110 16:29:09.070"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:09.072">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:29:09.072" status="PASS" endtime="20161110 16:29:09.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:09.073">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:29:09.073" status="PASS" endtime="20161110 16:29:09.073"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:29:09.074" status="PASS" endtime="20161110 16:29:09.074"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:09.078">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:29:09.076" status="PASS" endtime="20161110 16:29:09.078"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:09.079">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:29:09.079" status="PASS" endtime="20161110 16:29:09.080"></status>
</kw>
<status starttime="20161110 16:29:09.078" status="PASS" endtime="20161110 16:29:09.080"></status>
</kw>
<status starttime="20161110 16:29:09.074" status="PASS" endtime="20161110 16:29:09.080"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:09.081">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:29:09.081" status="PASS" endtime="20161110 16:29:09.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:09.082">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:29:09.081" status="PASS" endtime="20161110 16:29:09.082"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:09.082">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:29:09.082" status="PASS" endtime="20161110 16:29:09.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:09.083">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:29:09.083" status="PASS" endtime="20161110 16:29:09.083"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:09.409">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:29:09.410">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:09.083" status="PASS" endtime="20161110 16:29:09.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:09.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:29:09.410" status="PASS" endtime="20161110 16:29:09.411"></status>
</kw>
<status starttime="20161110 16:29:09.080" status="PASS" endtime="20161110 16:29:09.411"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:13.776">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:29:13.777">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:09.411" status="PASS" endtime="20161110 16:29:13.777"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:13.779">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:29:13.778" status="PASS" endtime="20161110 16:29:13.779"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:13.781">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:29:13.780" status="PASS" endtime="20161110 16:29:13.781"></status>
</kw>
<status starttime="20161110 16:29:13.780" status="PASS" endtime="20161110 16:29:13.781"></status>
</kw>
<status starttime="20161110 16:29:13.777" status="PASS" endtime="20161110 16:29:13.781"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:13.781">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:09.071" status="PASS" endtime="20161110 16:29:13.781"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:13.782">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:09.069" status="PASS" endtime="20161110 16:29:13.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:13.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:29:13.782" status="PASS" endtime="20161110 16:29:13.783"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:13.784">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:29:13.784">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:29:13.784">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:29:13.783" status="PASS" endtime="20161110 16:29:13.784"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:13.784">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:29:09.066" status="PASS" endtime="20161110 16:29:13.784"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:29:13.785">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:29:13.785" status="FAIL" endtime="20161110 16:29:13.785"></status>
</kw>
<status starttime="20161110 16:29:09.065" status="FAIL" endtime="20161110 16:29:13.786"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:23.788">@{arglist} = [ ]</msg>
<status starttime="20161110 16:29:23.788" status="PASS" endtime="20161110 16:29:23.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:23.789">${args} = {u'data': []}</msg>
<status starttime="20161110 16:29:23.789" status="PASS" endtime="20161110 16:29:23.789"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:23.792">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:29:23.792" status="PASS" endtime="20161110 16:29:23.792"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:23.794">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:29:23.794" status="PASS" endtime="20161110 16:29:23.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:23.795">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:29:23.794" status="PASS" endtime="20161110 16:29:23.795"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:29:23.795" status="PASS" endtime="20161110 16:29:23.796"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:23.798">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:29:23.797" status="PASS" endtime="20161110 16:29:23.799"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:23.800">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:29:23.800" status="PASS" endtime="20161110 16:29:23.800"></status>
</kw>
<status starttime="20161110 16:29:23.799" status="PASS" endtime="20161110 16:29:23.800"></status>
</kw>
<status starttime="20161110 16:29:23.796" status="PASS" endtime="20161110 16:29:23.800"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:23.801">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:29:23.801" status="PASS" endtime="20161110 16:29:23.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:23.802">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:29:23.802" status="PASS" endtime="20161110 16:29:23.802"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:23.803">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:29:23.802" status="PASS" endtime="20161110 16:29:23.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:23.803">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:29:23.803" status="PASS" endtime="20161110 16:29:23.803"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:24.137">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:29:24.137">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:23.803" status="PASS" endtime="20161110 16:29:24.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:24.138">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:29:24.138" status="PASS" endtime="20161110 16:29:24.138"></status>
</kw>
<status starttime="20161110 16:29:23.801" status="PASS" endtime="20161110 16:29:24.138"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:24.420">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:29:24.420">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:24.138" status="PASS" endtime="20161110 16:29:24.420"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:24.422">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:29:24.421" status="PASS" endtime="20161110 16:29:24.422"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:24.422">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:29:24.422" status="PASS" endtime="20161110 16:29:24.422"></status>
</kw>
<status starttime="20161110 16:29:24.422" status="PASS" endtime="20161110 16:29:24.423"></status>
</kw>
<status starttime="20161110 16:29:24.421" status="PASS" endtime="20161110 16:29:24.423"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:24.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:23.792" status="PASS" endtime="20161110 16:29:24.423"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:24.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:23.790" status="PASS" endtime="20161110 16:29:24.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:24.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:29:24.423" status="PASS" endtime="20161110 16:29:24.424"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:24.424">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:29:24.424">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:29:24.424">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:29:24.424" status="PASS" endtime="20161110 16:29:24.424"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:24.425">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:29:23.787" status="PASS" endtime="20161110 16:29:24.425"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:29:24.425">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:29:24.425" status="FAIL" endtime="20161110 16:29:24.425"></status>
</kw>
<status starttime="20161110 16:29:23.786" status="FAIL" endtime="20161110 16:29:24.425"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:34.428">@{arglist} = [ ]</msg>
<status starttime="20161110 16:29:34.427" status="PASS" endtime="20161110 16:29:34.428"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:34.429">${args} = {u'data': []}</msg>
<status starttime="20161110 16:29:34.428" status="PASS" endtime="20161110 16:29:34.429"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:34.431">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:29:34.430" status="PASS" endtime="20161110 16:29:34.431"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:34.433">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:29:34.432" status="PASS" endtime="20161110 16:29:34.433"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:34.434">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:29:34.433" status="PASS" endtime="20161110 16:29:34.434"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:29:34.434" status="PASS" endtime="20161110 16:29:34.434"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:34.437">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:29:34.436" status="PASS" endtime="20161110 16:29:34.437"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:34.439">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:29:34.438" status="PASS" endtime="20161110 16:29:34.439"></status>
</kw>
<status starttime="20161110 16:29:34.438" status="PASS" endtime="20161110 16:29:34.439"></status>
</kw>
<status starttime="20161110 16:29:34.435" status="PASS" endtime="20161110 16:29:34.439"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:34.441">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:29:34.440" status="PASS" endtime="20161110 16:29:34.443"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:34.443">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:29:34.443" status="PASS" endtime="20161110 16:29:34.443"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:34.444">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:29:34.443" status="PASS" endtime="20161110 16:29:34.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:34.444">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:29:34.444" status="PASS" endtime="20161110 16:29:34.444"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:34.770">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:29:34.771">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:34.444" status="PASS" endtime="20161110 16:29:34.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:34.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:29:34.771" status="PASS" endtime="20161110 16:29:34.772"></status>
</kw>
<status starttime="20161110 16:29:34.440" status="PASS" endtime="20161110 16:29:34.772"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:35.062">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:29:35.063">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:34.773" status="PASS" endtime="20161110 16:29:35.063"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:35.065">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:29:35.064" status="PASS" endtime="20161110 16:29:35.065"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:35.066">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:29:35.066" status="PASS" endtime="20161110 16:29:35.066"></status>
</kw>
<status starttime="20161110 16:29:35.065" status="PASS" endtime="20161110 16:29:35.066"></status>
</kw>
<status starttime="20161110 16:29:35.063" status="PASS" endtime="20161110 16:29:35.067"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:35.067">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:34.431" status="PASS" endtime="20161110 16:29:35.067"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:35.067">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:34.429" status="PASS" endtime="20161110 16:29:35.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:35.068">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:29:35.068" status="PASS" endtime="20161110 16:29:35.068"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:35.069">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:29:35.069">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:29:35.069">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:29:35.069" status="PASS" endtime="20161110 16:29:35.069"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:35.070">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:29:34.427" status="PASS" endtime="20161110 16:29:35.070"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:29:35.071">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:29:35.070" status="FAIL" endtime="20161110 16:29:35.071"></status>
</kw>
<status starttime="20161110 16:29:34.426" status="FAIL" endtime="20161110 16:29:35.071"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.080">@{arglist} = [ ]</msg>
<status starttime="20161110 16:29:45.080" status="PASS" endtime="20161110 16:29:45.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.081">${args} = {u'data': []}</msg>
<status starttime="20161110 16:29:45.080" status="PASS" endtime="20161110 16:29:45.081"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.082">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:29:45.081" status="PASS" endtime="20161110 16:29:45.082"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.083">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:29:45.083" status="PASS" endtime="20161110 16:29:45.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.083">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:29:45.083" status="PASS" endtime="20161110 16:29:45.083"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:29:45.084" status="PASS" endtime="20161110 16:29:45.084"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.090">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:29:45.085" status="PASS" endtime="20161110 16:29:45.090"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:45.091">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:29:45.091" status="PASS" endtime="20161110 16:29:45.091"></status>
</kw>
<status starttime="20161110 16:29:45.090" status="PASS" endtime="20161110 16:29:45.091"></status>
</kw>
<status starttime="20161110 16:29:45.084" status="PASS" endtime="20161110 16:29:45.091"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:45.092">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:29:45.092" status="PASS" endtime="20161110 16:29:45.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:29:45.093" status="PASS" endtime="20161110 16:29:45.093"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.094">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:29:45.093" status="PASS" endtime="20161110 16:29:45.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.094">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:29:45.094" status="PASS" endtime="20161110 16:29:45.094"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:29:45.435">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:45.094" status="PASS" endtime="20161110 16:29:45.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:45.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:29:45.435" status="PASS" endtime="20161110 16:29:45.435"></status>
</kw>
<status starttime="20161110 16:29:45.092" status="PASS" endtime="20161110 16:29:45.436"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.715">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:29:45.715">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:45.436" status="PASS" endtime="20161110 16:29:45.715"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.716">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:29:45.716" status="PASS" endtime="20161110 16:29:45.717"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:45.717">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:29:45.717" status="PASS" endtime="20161110 16:29:45.717"></status>
</kw>
<status starttime="20161110 16:29:45.717" status="PASS" endtime="20161110 16:29:45.717"></status>
</kw>
<status starttime="20161110 16:29:45.716" status="PASS" endtime="20161110 16:29:45.718"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:45.718">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:45.082" status="PASS" endtime="20161110 16:29:45.718"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:45.718">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:45.081" status="PASS" endtime="20161110 16:29:45.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:45.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:29:45.718" status="PASS" endtime="20161110 16:29:45.719"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:45.719">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:29:45.719">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:29:45.719">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:29:45.719" status="PASS" endtime="20161110 16:29:45.719"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:45.720">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:29:45.072" status="PASS" endtime="20161110 16:29:45.720"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:29:45.721">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:29:45.720" status="FAIL" endtime="20161110 16:29:45.721"></status>
</kw>
<status starttime="20161110 16:29:45.072" status="FAIL" endtime="20161110 16:29:45.721"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:55.723">@{arglist} = [ ]</msg>
<status starttime="20161110 16:29:55.723" status="PASS" endtime="20161110 16:29:55.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:55.724">${args} = {u'data': []}</msg>
<status starttime="20161110 16:29:55.724" status="PASS" endtime="20161110 16:29:55.725"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:55.726">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:29:55.726" status="PASS" endtime="20161110 16:29:55.726"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:55.728">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:29:55.727" status="PASS" endtime="20161110 16:29:55.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:55.729">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:29:55.728" status="PASS" endtime="20161110 16:29:55.729"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:29:55.729" status="PASS" endtime="20161110 16:29:55.730"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:55.732">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:29:55.731" status="PASS" endtime="20161110 16:29:55.732"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:55.733">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:29:55.733" status="PASS" endtime="20161110 16:29:55.733"></status>
</kw>
<status starttime="20161110 16:29:55.732" status="PASS" endtime="20161110 16:29:55.734"></status>
</kw>
<status starttime="20161110 16:29:55.730" status="PASS" endtime="20161110 16:29:55.734"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:55.735">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:29:55.735" status="PASS" endtime="20161110 16:29:55.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:55.737">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:29:55.736" status="PASS" endtime="20161110 16:29:55.737"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:55.738">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:29:55.737" status="PASS" endtime="20161110 16:29:55.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:55.738">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:29:55.738" status="PASS" endtime="20161110 16:29:55.739"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:59.436">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:29:59.436">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:55.739" status="PASS" endtime="20161110 16:29:59.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:59.437">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:29:59.437" status="PASS" endtime="20161110 16:29:59.437"></status>
</kw>
<status starttime="20161110 16:29:55.734" status="PASS" endtime="20161110 16:29:59.438"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:59.714">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:29:59.714">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:59.438" status="PASS" endtime="20161110 16:29:59.714"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:59.716">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:29:59.715" status="PASS" endtime="20161110 16:29:59.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:59.717">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:29:59.717" status="PASS" endtime="20161110 16:29:59.718"></status>
</kw>
<status starttime="20161110 16:29:59.716" status="PASS" endtime="20161110 16:29:59.718"></status>
</kw>
<status starttime="20161110 16:29:59.715" status="PASS" endtime="20161110 16:29:59.718"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:59.718">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:55.726" status="PASS" endtime="20161110 16:29:59.718"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:59.719">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:29:55.725" status="PASS" endtime="20161110 16:29:59.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:29:59.720">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:29:59.719" status="PASS" endtime="20161110 16:29:59.720"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:29:59.721">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:29:59.721">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:29:59.721">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:29:59.720" status="PASS" endtime="20161110 16:29:59.721"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:29:59.721">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:29:55.722" status="PASS" endtime="20161110 16:29:59.722"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:29:59.722">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:29:59.722" status="FAIL" endtime="20161110 16:29:59.722"></status>
</kw>
<status starttime="20161110 16:29:55.722" status="FAIL" endtime="20161110 16:29:59.723"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:09.725">@{arglist} = [ ]</msg>
<status starttime="20161110 16:30:09.725" status="PASS" endtime="20161110 16:30:09.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:09.726">${args} = {u'data': []}</msg>
<status starttime="20161110 16:30:09.726" status="PASS" endtime="20161110 16:30:09.726"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:09.728">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:30:09.727" status="PASS" endtime="20161110 16:30:09.728"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:09.730">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:30:09.729" status="PASS" endtime="20161110 16:30:09.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:09.731">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:30:09.730" status="PASS" endtime="20161110 16:30:09.731"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:30:09.731" status="PASS" endtime="20161110 16:30:09.732"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:09.734">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:30:09.733" status="PASS" endtime="20161110 16:30:09.734"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:09.736">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:30:09.736" status="PASS" endtime="20161110 16:30:09.736"></status>
</kw>
<status starttime="20161110 16:30:09.735" status="PASS" endtime="20161110 16:30:09.737"></status>
</kw>
<status starttime="20161110 16:30:09.732" status="PASS" endtime="20161110 16:30:09.737"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:09.738">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:30:09.738" status="PASS" endtime="20161110 16:30:09.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:09.740">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:30:09.739" status="PASS" endtime="20161110 16:30:09.740"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:09.741">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:30:09.740" status="PASS" endtime="20161110 16:30:09.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:09.741">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:30:09.741" status="PASS" endtime="20161110 16:30:09.741"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:10.094">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:30:10.094">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:09.741" status="PASS" endtime="20161110 16:30:10.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:10.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:30:10.094" status="PASS" endtime="20161110 16:30:10.095"></status>
</kw>
<status starttime="20161110 16:30:09.737" status="PASS" endtime="20161110 16:30:10.096"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:10.377">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:30:10.377">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:10.096" status="PASS" endtime="20161110 16:30:10.377"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:10.379">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:30:10.378" status="PASS" endtime="20161110 16:30:10.379"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:10.381">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:30:10.380" status="PASS" endtime="20161110 16:30:10.381"></status>
</kw>
<status starttime="20161110 16:30:10.379" status="PASS" endtime="20161110 16:30:10.381"></status>
</kw>
<status starttime="20161110 16:30:10.378" status="PASS" endtime="20161110 16:30:10.381"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:10.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:09.728" status="PASS" endtime="20161110 16:30:10.382"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:10.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:09.726" status="PASS" endtime="20161110 16:30:10.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:10.383">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:30:10.382" status="PASS" endtime="20161110 16:30:10.383"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:10.384">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:30:10.384">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:30:10.384">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:30:10.383" status="PASS" endtime="20161110 16:30:10.384"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:10.385">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:30:09.724" status="PASS" endtime="20161110 16:30:10.385"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:30:10.386">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:30:10.385" status="FAIL" endtime="20161110 16:30:10.386"></status>
</kw>
<status starttime="20161110 16:30:09.723" status="FAIL" endtime="20161110 16:30:10.386"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:20.389">@{arglist} = [ ]</msg>
<status starttime="20161110 16:30:20.388" status="PASS" endtime="20161110 16:30:20.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:20.390">${args} = {u'data': []}</msg>
<status starttime="20161110 16:30:20.389" status="PASS" endtime="20161110 16:30:20.390"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:20.392">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:30:20.392" status="PASS" endtime="20161110 16:30:20.392"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:20.394">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:30:20.393" status="PASS" endtime="20161110 16:30:20.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:20.395">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:30:20.394" status="PASS" endtime="20161110 16:30:20.395"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:30:20.395" status="PASS" endtime="20161110 16:30:20.395"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:20.397">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:30:20.396" status="PASS" endtime="20161110 16:30:20.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:20.398">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:30:20.398" status="PASS" endtime="20161110 16:30:20.398"></status>
</kw>
<status starttime="20161110 16:30:20.397" status="PASS" endtime="20161110 16:30:20.398"></status>
</kw>
<status starttime="20161110 16:30:20.395" status="PASS" endtime="20161110 16:30:20.399"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:20.400">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:30:20.399" status="PASS" endtime="20161110 16:30:20.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:20.401">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:30:20.400" status="PASS" endtime="20161110 16:30:20.401"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:20.401">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:30:20.401" status="PASS" endtime="20161110 16:30:20.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:20.402">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:30:20.402" status="PASS" endtime="20161110 16:30:20.402"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:20.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:30:20.736">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:20.402" status="PASS" endtime="20161110 16:30:20.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:20.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:30:20.737" status="PASS" endtime="20161110 16:30:20.737"></status>
</kw>
<status starttime="20161110 16:30:20.399" status="PASS" endtime="20161110 16:30:20.738"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:24.330">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:30:24.330">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:20.738" status="PASS" endtime="20161110 16:30:24.330"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:24.332">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:30:24.331" status="PASS" endtime="20161110 16:30:24.332"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:24.333">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:30:24.333" status="PASS" endtime="20161110 16:30:24.333"></status>
</kw>
<status starttime="20161110 16:30:24.332" status="PASS" endtime="20161110 16:30:24.334"></status>
</kw>
<status starttime="20161110 16:30:24.330" status="PASS" endtime="20161110 16:30:24.334"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:24.334">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:20.393" status="PASS" endtime="20161110 16:30:24.334"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:24.334">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:20.391" status="PASS" endtime="20161110 16:30:24.334"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:24.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:30:24.335" status="PASS" endtime="20161110 16:30:24.335"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:24.336">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:30:24.336">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:30:24.336">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:30:24.336" status="PASS" endtime="20161110 16:30:24.336"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:24.337">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:30:20.388" status="PASS" endtime="20161110 16:30:24.337"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:30:24.337">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:30:24.337" status="FAIL" endtime="20161110 16:30:24.338"></status>
</kw>
<status starttime="20161110 16:30:20.387" status="FAIL" endtime="20161110 16:30:24.338"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.340">@{arglist} = [ ]</msg>
<status starttime="20161110 16:30:34.340" status="PASS" endtime="20161110 16:30:34.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.341">${args} = {u'data': []}</msg>
<status starttime="20161110 16:30:34.341" status="PASS" endtime="20161110 16:30:34.341"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.343">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:30:34.343" status="PASS" endtime="20161110 16:30:34.343"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.345">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:30:34.345" status="PASS" endtime="20161110 16:30:34.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:30:34.346" status="PASS" endtime="20161110 16:30:34.346"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:30:34.346" status="PASS" endtime="20161110 16:30:34.347"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.350">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:30:34.348" status="PASS" endtime="20161110 16:30:34.350"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:34.351">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:30:34.351" status="PASS" endtime="20161110 16:30:34.351"></status>
</kw>
<status starttime="20161110 16:30:34.350" status="PASS" endtime="20161110 16:30:34.352"></status>
</kw>
<status starttime="20161110 16:30:34.347" status="PASS" endtime="20161110 16:30:34.352"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:34.353">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:30:34.352" status="PASS" endtime="20161110 16:30:34.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.354">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:30:34.353" status="PASS" endtime="20161110 16:30:34.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.354">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:30:34.354" status="PASS" endtime="20161110 16:30:34.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.355">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:30:34.354" status="PASS" endtime="20161110 16:30:34.355"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.688">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:30:34.688">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:34.355" status="PASS" endtime="20161110 16:30:34.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:34.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:30:34.688" status="PASS" endtime="20161110 16:30:34.689"></status>
</kw>
<status starttime="20161110 16:30:34.352" status="PASS" endtime="20161110 16:30:34.690"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.974">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:30:34.974">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:34.690" status="PASS" endtime="20161110 16:30:34.974"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.976">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:30:34.975" status="PASS" endtime="20161110 16:30:34.976"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:34.978">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:30:34.977" status="PASS" endtime="20161110 16:30:34.978"></status>
</kw>
<status starttime="20161110 16:30:34.977" status="PASS" endtime="20161110 16:30:34.978"></status>
</kw>
<status starttime="20161110 16:30:34.975" status="PASS" endtime="20161110 16:30:34.978"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:34.979">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:34.343" status="PASS" endtime="20161110 16:30:34.979"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:34.979">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:34.342" status="PASS" endtime="20161110 16:30:34.979"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:34.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:30:34.979" status="PASS" endtime="20161110 16:30:34.980"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:34.981">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:30:34.981">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:30:34.981">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:30:34.981" status="PASS" endtime="20161110 16:30:34.981"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:34.982">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:30:34.339" status="PASS" endtime="20161110 16:30:34.982"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:30:34.982">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:30:34.982" status="FAIL" endtime="20161110 16:30:34.982"></status>
</kw>
<status starttime="20161110 16:30:34.338" status="FAIL" endtime="20161110 16:30:34.982"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:44.985">@{arglist} = [ ]</msg>
<status starttime="20161110 16:30:44.985" status="PASS" endtime="20161110 16:30:44.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:44.986">${args} = {u'data': []}</msg>
<status starttime="20161110 16:30:44.986" status="PASS" endtime="20161110 16:30:44.986"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:44.988">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:30:44.988" status="PASS" endtime="20161110 16:30:44.988"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:44.991">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:30:44.990" status="PASS" endtime="20161110 16:30:44.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:44.992">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:30:44.991" status="PASS" endtime="20161110 16:30:44.992"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:30:44.992" status="PASS" endtime="20161110 16:30:44.993"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:44.994">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:30:44.994" status="PASS" endtime="20161110 16:30:44.994"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:44.995">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:30:44.995" status="PASS" endtime="20161110 16:30:44.996"></status>
</kw>
<status starttime="20161110 16:30:44.995" status="PASS" endtime="20161110 16:30:44.996"></status>
</kw>
<status starttime="20161110 16:30:44.993" status="PASS" endtime="20161110 16:30:44.996"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:44.997">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:30:44.996" status="PASS" endtime="20161110 16:30:44.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:44.998">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:30:44.997" status="PASS" endtime="20161110 16:30:44.998"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:44.998">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:30:44.998" status="PASS" endtime="20161110 16:30:44.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:44.999">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:30:44.999" status="PASS" endtime="20161110 16:30:44.999"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:45.333">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:30:45.333">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:44.999" status="PASS" endtime="20161110 16:30:45.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:45.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:30:45.333" status="PASS" endtime="20161110 16:30:45.334"></status>
</kw>
<status starttime="20161110 16:30:44.996" status="PASS" endtime="20161110 16:30:45.334"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:45.616">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:30:45.616">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:45.334" status="PASS" endtime="20161110 16:30:45.617"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:45.619">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:30:45.618" status="PASS" endtime="20161110 16:30:45.619"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:45.621">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:30:45.621" status="PASS" endtime="20161110 16:30:45.621"></status>
</kw>
<status starttime="20161110 16:30:45.619" status="PASS" endtime="20161110 16:30:45.621"></status>
</kw>
<status starttime="20161110 16:30:45.617" status="PASS" endtime="20161110 16:30:45.622"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:45.622">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:44.989" status="PASS" endtime="20161110 16:30:45.622"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:45.622">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:44.987" status="PASS" endtime="20161110 16:30:45.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:45.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:30:45.623" status="PASS" endtime="20161110 16:30:45.623"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:45.624">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:30:45.624">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:30:45.624">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:30:45.624" status="PASS" endtime="20161110 16:30:45.624"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:45.626">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:30:44.984" status="PASS" endtime="20161110 16:30:45.626"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:30:45.628">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:30:45.627" status="FAIL" endtime="20161110 16:30:45.628"></status>
</kw>
<status starttime="20161110 16:30:44.983" status="FAIL" endtime="20161110 16:30:45.628"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:55.631">@{arglist} = [ ]</msg>
<status starttime="20161110 16:30:55.630" status="PASS" endtime="20161110 16:30:55.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:55.632">${args} = {u'data': []}</msg>
<status starttime="20161110 16:30:55.631" status="PASS" endtime="20161110 16:30:55.632"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:55.634">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:30:55.633" status="PASS" endtime="20161110 16:30:55.634"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:55.635">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:30:55.635" status="PASS" endtime="20161110 16:30:55.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:55.636">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:30:55.636" status="PASS" endtime="20161110 16:30:55.636"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:30:55.637" status="PASS" endtime="20161110 16:30:55.637"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:55.639">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:30:55.638" status="PASS" endtime="20161110 16:30:55.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:55.641">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:30:55.641" status="PASS" endtime="20161110 16:30:55.641"></status>
</kw>
<status starttime="20161110 16:30:55.640" status="PASS" endtime="20161110 16:30:55.641"></status>
</kw>
<status starttime="20161110 16:30:55.637" status="PASS" endtime="20161110 16:30:55.641"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:55.642">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:30:55.642" status="PASS" endtime="20161110 16:30:55.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:55.643">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:30:55.643" status="PASS" endtime="20161110 16:30:55.643"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:55.644">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:30:55.643" status="PASS" endtime="20161110 16:30:55.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:55.644">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:30:55.644" status="PASS" endtime="20161110 16:30:55.644"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:55.974">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:30:55.974">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:55.645" status="PASS" endtime="20161110 16:30:55.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:55.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:30:55.974" status="PASS" endtime="20161110 16:30:55.975"></status>
</kw>
<status starttime="20161110 16:30:55.642" status="PASS" endtime="20161110 16:30:55.975"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:59.482">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:30:59.482">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:55.975" status="PASS" endtime="20161110 16:30:59.482"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:59.484">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:30:59.483" status="PASS" endtime="20161110 16:30:59.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:59.485">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:30:59.485" status="PASS" endtime="20161110 16:30:59.485"></status>
</kw>
<status starttime="20161110 16:30:59.484" status="PASS" endtime="20161110 16:30:59.485"></status>
</kw>
<status starttime="20161110 16:30:59.482" status="PASS" endtime="20161110 16:30:59.486"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:59.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:55.634" status="PASS" endtime="20161110 16:30:59.486"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:59.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:30:55.632" status="PASS" endtime="20161110 16:30:59.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:30:59.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:30:59.487" status="PASS" endtime="20161110 16:30:59.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:30:59.488">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:30:59.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:30:59.488">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:30:59.488" status="PASS" endtime="20161110 16:30:59.488"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:30:59.489">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:30:55.630" status="PASS" endtime="20161110 16:30:59.489"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:30:59.490">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:30:59.489" status="FAIL" endtime="20161110 16:30:59.490"></status>
</kw>
<status starttime="20161110 16:30:55.629" status="FAIL" endtime="20161110 16:30:59.490"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:09.493">@{arglist} = [ ]</msg>
<status starttime="20161110 16:31:09.493" status="PASS" endtime="20161110 16:31:09.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:09.494">${args} = {u'data': []}</msg>
<status starttime="20161110 16:31:09.493" status="PASS" endtime="20161110 16:31:09.494"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:09.496">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:31:09.495" status="PASS" endtime="20161110 16:31:09.496"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:09.498">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:31:09.498" status="PASS" endtime="20161110 16:31:09.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:09.499">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:31:09.499" status="PASS" endtime="20161110 16:31:09.499"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:31:09.499" status="PASS" endtime="20161110 16:31:09.500"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:09.502">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:31:09.501" status="PASS" endtime="20161110 16:31:09.503"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:09.503">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:31:09.503" status="PASS" endtime="20161110 16:31:09.503"></status>
</kw>
<status starttime="20161110 16:31:09.503" status="PASS" endtime="20161110 16:31:09.504"></status>
</kw>
<status starttime="20161110 16:31:09.500" status="PASS" endtime="20161110 16:31:09.504"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:09.505">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:31:09.504" status="PASS" endtime="20161110 16:31:09.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:09.505">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:31:09.505" status="PASS" endtime="20161110 16:31:09.505"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:09.506">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:31:09.506" status="PASS" endtime="20161110 16:31:09.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:09.506">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:31:09.506" status="PASS" endtime="20161110 16:31:09.507"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:09.837">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:31:09.838">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:09.507" status="PASS" endtime="20161110 16:31:09.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:09.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:31:09.838" status="PASS" endtime="20161110 16:31:09.839"></status>
</kw>
<status starttime="20161110 16:31:09.504" status="PASS" endtime="20161110 16:31:09.839"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:10.121">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:31:10.121">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:09.840" status="PASS" endtime="20161110 16:31:10.121"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:10.124">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:31:10.123" status="PASS" endtime="20161110 16:31:10.124"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:10.125">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:31:10.125" status="PASS" endtime="20161110 16:31:10.125"></status>
</kw>
<status starttime="20161110 16:31:10.124" status="PASS" endtime="20161110 16:31:10.125"></status>
</kw>
<status starttime="20161110 16:31:10.122" status="PASS" endtime="20161110 16:31:10.126"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:10.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:09.496" status="PASS" endtime="20161110 16:31:10.126"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:10.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:09.494" status="PASS" endtime="20161110 16:31:10.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:10.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:31:10.127" status="PASS" endtime="20161110 16:31:10.127"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:10.128">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:31:10.128">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:31:10.128">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:31:10.128" status="PASS" endtime="20161110 16:31:10.129"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:10.129">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:31:09.492" status="PASS" endtime="20161110 16:31:10.129"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:31:10.130">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:31:10.129" status="FAIL" endtime="20161110 16:31:10.130"></status>
</kw>
<status starttime="20161110 16:31:09.491" status="FAIL" endtime="20161110 16:31:10.130"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.136">@{arglist} = [ ]</msg>
<status starttime="20161110 16:31:20.133" status="PASS" endtime="20161110 16:31:20.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.137">${args} = {u'data': []}</msg>
<status starttime="20161110 16:31:20.136" status="PASS" endtime="20161110 16:31:20.137"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.139">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:31:20.138" status="PASS" endtime="20161110 16:31:20.139"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.141">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:31:20.140" status="PASS" endtime="20161110 16:31:20.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.142">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:31:20.142" status="PASS" endtime="20161110 16:31:20.143"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:31:20.143" status="PASS" endtime="20161110 16:31:20.143"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.146">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:31:20.145" status="PASS" endtime="20161110 16:31:20.147"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:20.148">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:31:20.148" status="PASS" endtime="20161110 16:31:20.148"></status>
</kw>
<status starttime="20161110 16:31:20.147" status="PASS" endtime="20161110 16:31:20.148"></status>
</kw>
<status starttime="20161110 16:31:20.144" status="PASS" endtime="20161110 16:31:20.149"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:20.150">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:31:20.149" status="PASS" endtime="20161110 16:31:20.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.152">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:31:20.151" status="PASS" endtime="20161110 16:31:20.152"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.152">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:31:20.152" status="PASS" endtime="20161110 16:31:20.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.153">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:31:20.152" status="PASS" endtime="20161110 16:31:20.153"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.479">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:31:20.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:20.153" status="PASS" endtime="20161110 16:31:20.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:20.480">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:31:20.480" status="PASS" endtime="20161110 16:31:20.481"></status>
</kw>
<status starttime="20161110 16:31:20.149" status="PASS" endtime="20161110 16:31:20.481"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.798">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:31:20.798">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:20.481" status="PASS" endtime="20161110 16:31:20.798"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.800">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:31:20.799" status="PASS" endtime="20161110 16:31:20.800"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:20.801">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:31:20.801" status="PASS" endtime="20161110 16:31:20.802"></status>
</kw>
<status starttime="20161110 16:31:20.800" status="PASS" endtime="20161110 16:31:20.802"></status>
</kw>
<status starttime="20161110 16:31:20.798" status="PASS" endtime="20161110 16:31:20.802"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:20.802">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:20.139" status="PASS" endtime="20161110 16:31:20.802"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:20.803">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:20.137" status="PASS" endtime="20161110 16:31:20.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:20.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:31:20.803" status="PASS" endtime="20161110 16:31:20.804"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:20.804">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:31:20.804">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:31:20.805">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:31:20.804" status="PASS" endtime="20161110 16:31:20.805"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:20.805">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:31:20.132" status="PASS" endtime="20161110 16:31:20.805"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:31:20.806">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:31:20.806" status="FAIL" endtime="20161110 16:31:20.806"></status>
</kw>
<status starttime="20161110 16:31:20.131" status="FAIL" endtime="20161110 16:31:20.807"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:30.810">@{arglist} = [ ]</msg>
<status starttime="20161110 16:31:30.809" status="PASS" endtime="20161110 16:31:30.810"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:30.811">${args} = {u'data': []}</msg>
<status starttime="20161110 16:31:30.810" status="PASS" endtime="20161110 16:31:30.811"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:30.813">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:31:30.812" status="PASS" endtime="20161110 16:31:30.813"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:30.814">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:31:30.814" status="PASS" endtime="20161110 16:31:30.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:30.815">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:31:30.814" status="PASS" endtime="20161110 16:31:30.815"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:31:30.815" status="PASS" endtime="20161110 16:31:30.815"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:30.817">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:31:30.816" status="PASS" endtime="20161110 16:31:30.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:30.818">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:31:30.818" status="PASS" endtime="20161110 16:31:30.818"></status>
</kw>
<status starttime="20161110 16:31:30.817" status="PASS" endtime="20161110 16:31:30.819"></status>
</kw>
<status starttime="20161110 16:31:30.816" status="PASS" endtime="20161110 16:31:30.819"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:30.820">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:31:30.820" status="PASS" endtime="20161110 16:31:30.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:30.822">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:31:30.821" status="PASS" endtime="20161110 16:31:30.822"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:30.822">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:31:30.822" status="PASS" endtime="20161110 16:31:30.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:30.823">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:31:30.822" status="PASS" endtime="20161110 16:31:30.823"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:31.155">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:31:31.155">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:30.823" status="PASS" endtime="20161110 16:31:31.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:31.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:31:31.156" status="PASS" endtime="20161110 16:31:31.156"></status>
</kw>
<status starttime="20161110 16:31:30.819" status="PASS" endtime="20161110 16:31:31.157"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:31.436">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:31:31.436">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:31.157" status="PASS" endtime="20161110 16:31:31.436"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:31.437">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:31:31.437" status="PASS" endtime="20161110 16:31:31.437"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:31.438">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:31:31.438" status="PASS" endtime="20161110 16:31:31.439"></status>
</kw>
<status starttime="20161110 16:31:31.438" status="PASS" endtime="20161110 16:31:31.439"></status>
</kw>
<status starttime="20161110 16:31:31.436" status="PASS" endtime="20161110 16:31:31.439"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:31.439">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:30.813" status="PASS" endtime="20161110 16:31:31.439"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:31.439">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:30.811" status="PASS" endtime="20161110 16:31:31.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:31.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:31:31.439" status="PASS" endtime="20161110 16:31:31.440"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:31.440">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:31:31.440">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:31:31.440">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:31:31.440" status="PASS" endtime="20161110 16:31:31.441"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:31.441">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:31:30.809" status="PASS" endtime="20161110 16:31:31.441"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:31:31.441">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:31:31.441" status="FAIL" endtime="20161110 16:31:31.441"></status>
</kw>
<status starttime="20161110 16:31:30.808" status="FAIL" endtime="20161110 16:31:31.442"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:41.444">@{arglist} = [ ]</msg>
<status starttime="20161110 16:31:41.444" status="PASS" endtime="20161110 16:31:41.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:41.446">${args} = {u'data': []}</msg>
<status starttime="20161110 16:31:41.445" status="PASS" endtime="20161110 16:31:41.446"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:41.448">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:31:41.447" status="PASS" endtime="20161110 16:31:41.448"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:41.450">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:31:41.450" status="PASS" endtime="20161110 16:31:41.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:41.452">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:31:41.451" status="PASS" endtime="20161110 16:31:41.452"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:31:41.454" status="PASS" endtime="20161110 16:31:41.454"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:41.457">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:31:41.455" status="PASS" endtime="20161110 16:31:41.458"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:41.459">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:31:41.459" status="PASS" endtime="20161110 16:31:41.459"></status>
</kw>
<status starttime="20161110 16:31:41.458" status="PASS" endtime="20161110 16:31:41.459"></status>
</kw>
<status starttime="20161110 16:31:41.454" status="PASS" endtime="20161110 16:31:41.460"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:41.461">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:31:41.461" status="PASS" endtime="20161110 16:31:41.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:41.463">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:31:41.462" status="PASS" endtime="20161110 16:31:41.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:41.463">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:31:41.463" status="PASS" endtime="20161110 16:31:41.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:41.464">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:31:41.464" status="PASS" endtime="20161110 16:31:41.464"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:46.123">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:31:46.124">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:41.464" status="PASS" endtime="20161110 16:31:46.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:46.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:31:46.124" status="PASS" endtime="20161110 16:31:46.125"></status>
</kw>
<status starttime="20161110 16:31:41.460" status="PASS" endtime="20161110 16:31:46.125"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:46.409">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:31:46.409">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:46.126" status="PASS" endtime="20161110 16:31:46.409"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:46.412">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:31:46.410" status="PASS" endtime="20161110 16:31:46.412"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:46.413">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:31:46.413" status="PASS" endtime="20161110 16:31:46.413"></status>
</kw>
<status starttime="20161110 16:31:46.412" status="PASS" endtime="20161110 16:31:46.414"></status>
</kw>
<status starttime="20161110 16:31:46.410" status="PASS" endtime="20161110 16:31:46.414"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:46.414">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:41.448" status="PASS" endtime="20161110 16:31:46.414"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:46.414">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:41.446" status="PASS" endtime="20161110 16:31:46.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:46.415">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:31:46.415" status="PASS" endtime="20161110 16:31:46.415"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:46.416">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:31:46.416">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:31:46.416">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:31:46.415" status="PASS" endtime="20161110 16:31:46.416"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:46.416">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:31:41.443" status="PASS" endtime="20161110 16:31:46.416"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:31:46.417">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:31:46.417" status="FAIL" endtime="20161110 16:31:46.417"></status>
</kw>
<status starttime="20161110 16:31:41.442" status="FAIL" endtime="20161110 16:31:46.418"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:56.421">@{arglist} = [ ]</msg>
<status starttime="20161110 16:31:56.420" status="PASS" endtime="20161110 16:31:56.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:56.422">${args} = {u'data': []}</msg>
<status starttime="20161110 16:31:56.421" status="PASS" endtime="20161110 16:31:56.422"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:56.424">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:31:56.423" status="PASS" endtime="20161110 16:31:56.424"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:56.426">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:31:56.425" status="PASS" endtime="20161110 16:31:56.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:56.426">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:31:56.426" status="PASS" endtime="20161110 16:31:56.427"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:31:56.427" status="PASS" endtime="20161110 16:31:56.427"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:56.430">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:31:56.429" status="PASS" endtime="20161110 16:31:56.430"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:56.431">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:31:56.431" status="PASS" endtime="20161110 16:31:56.432"></status>
</kw>
<status starttime="20161110 16:31:56.430" status="PASS" endtime="20161110 16:31:56.432"></status>
</kw>
<status starttime="20161110 16:31:56.428" status="PASS" endtime="20161110 16:31:56.432"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:56.433">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:31:56.433" status="PASS" endtime="20161110 16:31:56.433"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:56.434">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:31:56.434" status="PASS" endtime="20161110 16:31:56.434"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:56.434">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:31:56.434" status="PASS" endtime="20161110 16:31:56.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:56.435">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:31:56.435" status="PASS" endtime="20161110 16:31:56.435"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:56.767">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:31:56.768">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:56.435" status="PASS" endtime="20161110 16:31:56.768"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:56.769">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:31:56.768" status="PASS" endtime="20161110 16:31:56.769"></status>
</kw>
<status starttime="20161110 16:31:56.432" status="PASS" endtime="20161110 16:31:56.769"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:57.047">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:31:57.048">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:56.770" status="PASS" endtime="20161110 16:31:57.048"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:57.050">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:31:57.049" status="PASS" endtime="20161110 16:31:57.050"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:57.051">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:31:57.051" status="PASS" endtime="20161110 16:31:57.051"></status>
</kw>
<status starttime="20161110 16:31:57.050" status="PASS" endtime="20161110 16:31:57.051"></status>
</kw>
<status starttime="20161110 16:31:57.048" status="PASS" endtime="20161110 16:31:57.052"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:57.052">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:56.424" status="PASS" endtime="20161110 16:31:57.052"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:57.052">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:31:56.422" status="PASS" endtime="20161110 16:31:57.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:31:57.053">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:31:57.053" status="PASS" endtime="20161110 16:31:57.053"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:31:57.054">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:31:57.054">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:31:57.055">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:31:57.054" status="PASS" endtime="20161110 16:31:57.055"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:31:57.055">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:31:56.419" status="PASS" endtime="20161110 16:31:57.055"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:31:57.056">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:31:57.055" status="FAIL" endtime="20161110 16:31:57.056"></status>
</kw>
<status starttime="20161110 16:31:56.418" status="FAIL" endtime="20161110 16:31:57.056"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.059">@{arglist} = [ ]</msg>
<status starttime="20161110 16:32:07.058" status="PASS" endtime="20161110 16:32:07.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.060">${args} = {u'data': []}</msg>
<status starttime="20161110 16:32:07.059" status="PASS" endtime="20161110 16:32:07.060"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.061">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:32:07.061" status="PASS" endtime="20161110 16:32:07.061"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.064">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:32:07.063" status="PASS" endtime="20161110 16:32:07.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.064">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:32:07.064" status="PASS" endtime="20161110 16:32:07.064"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:32:07.065" status="PASS" endtime="20161110 16:32:07.065"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.068">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:32:07.066" status="PASS" endtime="20161110 16:32:07.068"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:07.069">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:32:07.069" status="PASS" endtime="20161110 16:32:07.070"></status>
</kw>
<status starttime="20161110 16:32:07.068" status="PASS" endtime="20161110 16:32:07.070"></status>
</kw>
<status starttime="20161110 16:32:07.065" status="PASS" endtime="20161110 16:32:07.070"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:07.071">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:32:07.071" status="PASS" endtime="20161110 16:32:07.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.073">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:32:07.072" status="PASS" endtime="20161110 16:32:07.073"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.073">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:32:07.073" status="PASS" endtime="20161110 16:32:07.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.074">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:32:07.073" status="PASS" endtime="20161110 16:32:07.074"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.399">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:32:07.399">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:07.074" status="PASS" endtime="20161110 16:32:07.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:07.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:32:07.399" status="PASS" endtime="20161110 16:32:07.400"></status>
</kw>
<status starttime="20161110 16:32:07.070" status="PASS" endtime="20161110 16:32:07.400"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.679">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:32:07.679">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:07.401" status="PASS" endtime="20161110 16:32:07.679"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.681">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:32:07.680" status="PASS" endtime="20161110 16:32:07.681"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:07.683">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:32:07.682" status="PASS" endtime="20161110 16:32:07.683"></status>
</kw>
<status starttime="20161110 16:32:07.681" status="PASS" endtime="20161110 16:32:07.683"></status>
</kw>
<status starttime="20161110 16:32:07.680" status="PASS" endtime="20161110 16:32:07.683"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:07.684">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:07.062" status="PASS" endtime="20161110 16:32:07.684"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:07.684">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:07.060" status="PASS" endtime="20161110 16:32:07.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:07.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:32:07.684" status="PASS" endtime="20161110 16:32:07.685"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:07.686">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:32:07.686">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:32:07.686">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:32:07.685" status="PASS" endtime="20161110 16:32:07.686"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:07.687">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:32:07.058" status="PASS" endtime="20161110 16:32:07.687"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:32:07.688">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:32:07.687" status="FAIL" endtime="20161110 16:32:07.688"></status>
</kw>
<status starttime="20161110 16:32:07.057" status="FAIL" endtime="20161110 16:32:07.688"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:17.691">@{arglist} = [ ]</msg>
<status starttime="20161110 16:32:17.690" status="PASS" endtime="20161110 16:32:17.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:17.692">${args} = {u'data': []}</msg>
<status starttime="20161110 16:32:17.691" status="PASS" endtime="20161110 16:32:17.692"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:17.694">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:32:17.693" status="PASS" endtime="20161110 16:32:17.694"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:17.696">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:32:17.695" status="PASS" endtime="20161110 16:32:17.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:17.697">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:32:17.696" status="PASS" endtime="20161110 16:32:17.697"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:32:17.697" status="PASS" endtime="20161110 16:32:17.697"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:17.700">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:32:17.699" status="PASS" endtime="20161110 16:32:17.700"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:17.701">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:32:17.701" status="PASS" endtime="20161110 16:32:17.702"></status>
</kw>
<status starttime="20161110 16:32:17.700" status="PASS" endtime="20161110 16:32:17.702"></status>
</kw>
<status starttime="20161110 16:32:17.698" status="PASS" endtime="20161110 16:32:17.702"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:17.703">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:32:17.703" status="PASS" endtime="20161110 16:32:17.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:17.704">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:32:17.704" status="PASS" endtime="20161110 16:32:17.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:17.704">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:32:17.704" status="PASS" endtime="20161110 16:32:17.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:17.705">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:32:17.705" status="PASS" endtime="20161110 16:32:17.705"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:21.625">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:32:21.625">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:17.705" status="PASS" endtime="20161110 16:32:21.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:21.627">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:32:21.626" status="PASS" endtime="20161110 16:32:21.627"></status>
</kw>
<status starttime="20161110 16:32:17.702" status="PASS" endtime="20161110 16:32:21.627"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:21.905">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:32:21.907">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:21.627" status="PASS" endtime="20161110 16:32:21.907"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:21.909">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:32:21.908" status="PASS" endtime="20161110 16:32:21.909"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:21.910">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:32:21.910" status="PASS" endtime="20161110 16:32:21.911"></status>
</kw>
<status starttime="20161110 16:32:21.909" status="PASS" endtime="20161110 16:32:21.911"></status>
</kw>
<status starttime="20161110 16:32:21.907" status="PASS" endtime="20161110 16:32:21.911"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:21.911">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:17.694" status="PASS" endtime="20161110 16:32:21.911"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:21.912">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:17.692" status="PASS" endtime="20161110 16:32:21.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:21.913">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:32:21.912" status="PASS" endtime="20161110 16:32:21.913"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:21.913">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:32:21.913">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:32:21.914">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:32:21.913" status="PASS" endtime="20161110 16:32:21.914"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:21.915">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:32:17.689" status="PASS" endtime="20161110 16:32:21.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:32:21.916">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:32:21.916" status="FAIL" endtime="20161110 16:32:21.916"></status>
</kw>
<status starttime="20161110 16:32:17.688" status="FAIL" endtime="20161110 16:32:21.917"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:31.919">@{arglist} = [ ]</msg>
<status starttime="20161110 16:32:31.919" status="PASS" endtime="20161110 16:32:31.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:31.920">${args} = {u'data': []}</msg>
<status starttime="20161110 16:32:31.919" status="PASS" endtime="20161110 16:32:31.920"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:31.922">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:32:31.922" status="PASS" endtime="20161110 16:32:31.922"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:31.924">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:32:31.923" status="PASS" endtime="20161110 16:32:31.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:31.924">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:32:31.924" status="PASS" endtime="20161110 16:32:31.924"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:32:31.925" status="PASS" endtime="20161110 16:32:31.925"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:31.926">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:32:31.926" status="PASS" endtime="20161110 16:32:31.927"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:31.927">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:32:31.927" status="PASS" endtime="20161110 16:32:31.928"></status>
</kw>
<status starttime="20161110 16:32:31.927" status="PASS" endtime="20161110 16:32:31.928"></status>
</kw>
<status starttime="20161110 16:32:31.925" status="PASS" endtime="20161110 16:32:31.928"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:31.929">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:32:31.929" status="PASS" endtime="20161110 16:32:31.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:31.930">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:32:31.930" status="PASS" endtime="20161110 16:32:31.930"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:31.931">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:32:31.930" status="PASS" endtime="20161110 16:32:31.931"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:31.931">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:32:31.931" status="PASS" endtime="20161110 16:32:31.931"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:32.257">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:32:32.257">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:31.932" status="PASS" endtime="20161110 16:32:32.257"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:32.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:32:32.257" status="PASS" endtime="20161110 16:32:32.258"></status>
</kw>
<status starttime="20161110 16:32:31.928" status="PASS" endtime="20161110 16:32:32.258"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:32.538">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:32:32.539">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:32.258" status="PASS" endtime="20161110 16:32:32.539"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:32.540">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:32:32.539" status="PASS" endtime="20161110 16:32:32.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:32.540">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:32:32.540" status="PASS" endtime="20161110 16:32:32.541"></status>
</kw>
<status starttime="20161110 16:32:32.540" status="PASS" endtime="20161110 16:32:32.541"></status>
</kw>
<status starttime="20161110 16:32:32.539" status="PASS" endtime="20161110 16:32:32.541"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:32.541">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:31.923" status="PASS" endtime="20161110 16:32:32.541"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:32.541">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:31.920" status="PASS" endtime="20161110 16:32:32.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:32.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:32:32.541" status="PASS" endtime="20161110 16:32:32.542"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:32.542">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:32:32.542">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:32:32.542">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:32:32.542" status="PASS" endtime="20161110 16:32:32.543"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:32.543">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:32:31.918" status="PASS" endtime="20161110 16:32:32.543"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:32:32.543">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:32:32.543" status="FAIL" endtime="20161110 16:32:32.543"></status>
</kw>
<status starttime="20161110 16:32:31.917" status="FAIL" endtime="20161110 16:32:32.544"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:42.547">@{arglist} = [ ]</msg>
<status starttime="20161110 16:32:42.546" status="PASS" endtime="20161110 16:32:42.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:42.548">${args} = {u'data': []}</msg>
<status starttime="20161110 16:32:42.547" status="PASS" endtime="20161110 16:32:42.548"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:42.550">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:32:42.549" status="PASS" endtime="20161110 16:32:42.550"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:42.552">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:32:42.551" status="PASS" endtime="20161110 16:32:42.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:42.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:32:42.552" status="PASS" endtime="20161110 16:32:42.553"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:32:42.553" status="PASS" endtime="20161110 16:32:42.554"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:42.555">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:32:42.554" status="PASS" endtime="20161110 16:32:42.555"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:42.556">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:32:42.556" status="PASS" endtime="20161110 16:32:42.556"></status>
</kw>
<status starttime="20161110 16:32:42.555" status="PASS" endtime="20161110 16:32:42.556"></status>
</kw>
<status starttime="20161110 16:32:42.554" status="PASS" endtime="20161110 16:32:42.556"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:42.557">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:32:42.557" status="PASS" endtime="20161110 16:32:42.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:42.558">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:32:42.558" status="PASS" endtime="20161110 16:32:42.558"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:42.559">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:32:42.558" status="PASS" endtime="20161110 16:32:42.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:42.559">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:32:42.559" status="PASS" endtime="20161110 16:32:42.559"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:42.892">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:32:42.892">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:42.560" status="PASS" endtime="20161110 16:32:42.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:42.893">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:32:42.892" status="PASS" endtime="20161110 16:32:42.893"></status>
</kw>
<status starttime="20161110 16:32:42.556" status="PASS" endtime="20161110 16:32:42.894"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:43.181">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:32:43.181">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:42.894" status="PASS" endtime="20161110 16:32:43.181"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:43.183">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:32:43.183" status="PASS" endtime="20161110 16:32:43.183"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:43.185">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:32:43.184" status="PASS" endtime="20161110 16:32:43.185"></status>
</kw>
<status starttime="20161110 16:32:43.184" status="PASS" endtime="20161110 16:32:43.185"></status>
</kw>
<status starttime="20161110 16:32:43.182" status="PASS" endtime="20161110 16:32:43.185"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:43.185">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:42.550" status="PASS" endtime="20161110 16:32:43.185"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:43.186">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:42.548" status="PASS" endtime="20161110 16:32:43.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:43.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:32:43.186" status="PASS" endtime="20161110 16:32:43.187"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:43.187">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:32:43.187">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:32:43.187">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:32:43.187" status="PASS" endtime="20161110 16:32:43.187"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:43.188">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:32:42.545" status="PASS" endtime="20161110 16:32:43.188"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:32:43.189">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:32:43.188" status="FAIL" endtime="20161110 16:32:43.189"></status>
</kw>
<status starttime="20161110 16:32:42.544" status="FAIL" endtime="20161110 16:32:43.189"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.192">@{arglist} = [ ]</msg>
<status starttime="20161110 16:32:53.191" status="PASS" endtime="20161110 16:32:53.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.193">${args} = {u'data': []}</msg>
<status starttime="20161110 16:32:53.192" status="PASS" endtime="20161110 16:32:53.193"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.194">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:32:53.194" status="PASS" endtime="20161110 16:32:53.194"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.196">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:32:53.196" status="PASS" endtime="20161110 16:32:53.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.197">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:32:53.197" status="PASS" endtime="20161110 16:32:53.197"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:32:53.198" status="PASS" endtime="20161110 16:32:53.198"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.201">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:32:53.199" status="PASS" endtime="20161110 16:32:53.201"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:53.203">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:32:53.202" status="PASS" endtime="20161110 16:32:53.203"></status>
</kw>
<status starttime="20161110 16:32:53.201" status="PASS" endtime="20161110 16:32:53.203"></status>
</kw>
<status starttime="20161110 16:32:53.198" status="PASS" endtime="20161110 16:32:53.203"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:53.205">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:32:53.204" status="PASS" endtime="20161110 16:32:53.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:32:53.209" status="PASS" endtime="20161110 16:32:53.209"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.210">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:32:53.209" status="PASS" endtime="20161110 16:32:53.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.211">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:32:53.211" status="PASS" endtime="20161110 16:32:53.211"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.543">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:32:53.543">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:53.212" status="PASS" endtime="20161110 16:32:53.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:53.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:32:53.543" status="PASS" endtime="20161110 16:32:53.544"></status>
</kw>
<status starttime="20161110 16:32:53.204" status="PASS" endtime="20161110 16:32:53.544"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.823">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:32:53.823">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:53.544" status="PASS" endtime="20161110 16:32:53.823"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.825">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:32:53.824" status="PASS" endtime="20161110 16:32:53.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:53.826">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:32:53.826" status="PASS" endtime="20161110 16:32:53.827"></status>
</kw>
<status starttime="20161110 16:32:53.825" status="PASS" endtime="20161110 16:32:53.827"></status>
</kw>
<status starttime="20161110 16:32:53.823" status="PASS" endtime="20161110 16:32:53.827"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:53.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:53.195" status="PASS" endtime="20161110 16:32:53.827"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:53.828">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:32:53.193" status="PASS" endtime="20161110 16:32:53.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:32:53.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:32:53.828" status="PASS" endtime="20161110 16:32:53.829"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:32:53.830">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:32:53.830">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:32:53.830">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:32:53.829" status="PASS" endtime="20161110 16:32:53.830"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:32:53.830">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:32:53.190" status="PASS" endtime="20161110 16:32:53.830"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:32:53.831">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:32:53.831" status="FAIL" endtime="20161110 16:32:53.831"></status>
</kw>
<status starttime="20161110 16:32:53.190" status="FAIL" endtime="20161110 16:32:53.832"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:03.834">@{arglist} = [ ]</msg>
<status starttime="20161110 16:33:03.834" status="PASS" endtime="20161110 16:33:03.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:03.836">${args} = {u'data': []}</msg>
<status starttime="20161110 16:33:03.835" status="PASS" endtime="20161110 16:33:03.836"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:03.838">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:33:03.837" status="PASS" endtime="20161110 16:33:03.838"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:03.841">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:33:03.840" status="PASS" endtime="20161110 16:33:03.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:03.842">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:33:03.841" status="PASS" endtime="20161110 16:33:03.842"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:33:03.843" status="PASS" endtime="20161110 16:33:03.844"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:03.845">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:33:03.845" status="PASS" endtime="20161110 16:33:03.846"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:03.847">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:33:03.846" status="PASS" endtime="20161110 16:33:03.847"></status>
</kw>
<status starttime="20161110 16:33:03.846" status="PASS" endtime="20161110 16:33:03.847"></status>
</kw>
<status starttime="20161110 16:33:03.844" status="PASS" endtime="20161110 16:33:03.847"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:03.848">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:33:03.848" status="PASS" endtime="20161110 16:33:03.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:03.849">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:33:03.848" status="PASS" endtime="20161110 16:33:03.849"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:03.849">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:33:03.849" status="PASS" endtime="20161110 16:33:03.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:03.850">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:33:03.849" status="PASS" endtime="20161110 16:33:03.850"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:04.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:33:04.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:03.850" status="PASS" endtime="20161110 16:33:04.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:04.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:33:04.177" status="PASS" endtime="20161110 16:33:04.177"></status>
</kw>
<status starttime="20161110 16:33:03.847" status="PASS" endtime="20161110 16:33:04.177"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:04.465">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:33:04.465">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:04.178" status="PASS" endtime="20161110 16:33:04.465"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:04.466">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:33:04.466" status="PASS" endtime="20161110 16:33:04.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:04.467">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:33:04.467" status="PASS" endtime="20161110 16:33:04.467"></status>
</kw>
<status starttime="20161110 16:33:04.466" status="PASS" endtime="20161110 16:33:04.467"></status>
</kw>
<status starttime="20161110 16:33:04.465" status="PASS" endtime="20161110 16:33:04.467"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:04.467">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:03.838" status="PASS" endtime="20161110 16:33:04.467"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:04.468">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:03.836" status="PASS" endtime="20161110 16:33:04.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:04.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:33:04.468" status="PASS" endtime="20161110 16:33:04.468"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:04.469">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:33:04.469">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:33:04.469">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:33:04.468" status="PASS" endtime="20161110 16:33:04.469"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:04.469">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:33:03.833" status="PASS" endtime="20161110 16:33:04.469"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:33:04.470">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:33:04.469" status="FAIL" endtime="20161110 16:33:04.470"></status>
</kw>
<status starttime="20161110 16:33:03.832" status="FAIL" endtime="20161110 16:33:04.470"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:14.472">@{arglist} = [ ]</msg>
<status starttime="20161110 16:33:14.472" status="PASS" endtime="20161110 16:33:14.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:14.473">${args} = {u'data': []}</msg>
<status starttime="20161110 16:33:14.473" status="PASS" endtime="20161110 16:33:14.474"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:14.475">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:33:14.475" status="PASS" endtime="20161110 16:33:14.475"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:14.477">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:33:14.476" status="PASS" endtime="20161110 16:33:14.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:14.478">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:33:14.477" status="PASS" endtime="20161110 16:33:14.478"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:33:14.478" status="PASS" endtime="20161110 16:33:14.478"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:14.480">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:33:14.479" status="PASS" endtime="20161110 16:33:14.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:14.482">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:33:14.481" status="PASS" endtime="20161110 16:33:14.482"></status>
</kw>
<status starttime="20161110 16:33:14.481" status="PASS" endtime="20161110 16:33:14.482"></status>
</kw>
<status starttime="20161110 16:33:14.479" status="PASS" endtime="20161110 16:33:14.482"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:14.483">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:33:14.483" status="PASS" endtime="20161110 16:33:14.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:14.484">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:33:14.484" status="PASS" endtime="20161110 16:33:14.484"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:14.485">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:33:14.485" status="PASS" endtime="20161110 16:33:14.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:14.485">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:33:14.485" status="PASS" endtime="20161110 16:33:14.485"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:14.816">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:33:14.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:14.486" status="PASS" endtime="20161110 16:33:14.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:14.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:33:14.817" status="PASS" endtime="20161110 16:33:14.817"></status>
</kw>
<status starttime="20161110 16:33:14.482" status="PASS" endtime="20161110 16:33:14.818"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:15.100">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:33:15.100">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:14.818" status="PASS" endtime="20161110 16:33:15.100"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:15.101">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:33:15.100" status="PASS" endtime="20161110 16:33:15.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:15.102">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:33:15.101" status="PASS" endtime="20161110 16:33:15.102"></status>
</kw>
<status starttime="20161110 16:33:15.101" status="PASS" endtime="20161110 16:33:15.102"></status>
</kw>
<status starttime="20161110 16:33:15.100" status="PASS" endtime="20161110 16:33:15.102"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:15.102">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:14.475" status="PASS" endtime="20161110 16:33:15.102"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:15.103">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:14.474" status="PASS" endtime="20161110 16:33:15.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:15.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:33:15.103" status="PASS" endtime="20161110 16:33:15.103"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:15.104">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:33:15.104">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:33:15.104">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:33:15.103" status="PASS" endtime="20161110 16:33:15.104"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:15.105">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:33:14.471" status="PASS" endtime="20161110 16:33:15.105"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:33:15.106">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:33:15.105" status="FAIL" endtime="20161110 16:33:15.106"></status>
</kw>
<status starttime="20161110 16:33:14.471" status="FAIL" endtime="20161110 16:33:15.106"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.108">@{arglist} = [ ]</msg>
<status starttime="20161110 16:33:25.108" status="PASS" endtime="20161110 16:33:25.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.110">${args} = {u'data': []}</msg>
<status starttime="20161110 16:33:25.109" status="PASS" endtime="20161110 16:33:25.110"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.111">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:33:25.111" status="PASS" endtime="20161110 16:33:25.111"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.113">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:33:25.113" status="PASS" endtime="20161110 16:33:25.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.114">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:33:25.114" status="PASS" endtime="20161110 16:33:25.114"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:33:25.115" status="PASS" endtime="20161110 16:33:25.115"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.117">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:33:25.116" status="PASS" endtime="20161110 16:33:25.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:25.119">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:33:25.119" status="PASS" endtime="20161110 16:33:25.120"></status>
</kw>
<status starttime="20161110 16:33:25.118" status="PASS" endtime="20161110 16:33:25.120"></status>
</kw>
<status starttime="20161110 16:33:25.115" status="PASS" endtime="20161110 16:33:25.120"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:25.121">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:33:25.121" status="PASS" endtime="20161110 16:33:25.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.123">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:33:25.122" status="PASS" endtime="20161110 16:33:25.123"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.124">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:33:25.123" status="PASS" endtime="20161110 16:33:25.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.124">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:33:25.124" status="PASS" endtime="20161110 16:33:25.124"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.450">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:33:25.450">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:25.125" status="PASS" endtime="20161110 16:33:25.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:25.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:33:25.450" status="PASS" endtime="20161110 16:33:25.451"></status>
</kw>
<status starttime="20161110 16:33:25.120" status="PASS" endtime="20161110 16:33:25.451"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.739">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:33:25.739">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:25.451" status="PASS" endtime="20161110 16:33:25.739"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.740">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:33:25.739" status="PASS" endtime="20161110 16:33:25.740"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:25.741">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:33:25.740" status="PASS" endtime="20161110 16:33:25.741"></status>
</kw>
<status starttime="20161110 16:33:25.740" status="PASS" endtime="20161110 16:33:25.741"></status>
</kw>
<status starttime="20161110 16:33:25.739" status="PASS" endtime="20161110 16:33:25.741"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:25.741">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:25.112" status="PASS" endtime="20161110 16:33:25.741"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:25.741">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:25.110" status="PASS" endtime="20161110 16:33:25.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:25.742">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:33:25.742" status="PASS" endtime="20161110 16:33:25.742"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:25.742">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:33:25.742">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:33:25.742">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:33:25.742" status="PASS" endtime="20161110 16:33:25.743"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:25.743">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:33:25.107" status="PASS" endtime="20161110 16:33:25.743"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:33:25.743">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:33:25.743" status="FAIL" endtime="20161110 16:33:25.743"></status>
</kw>
<status starttime="20161110 16:33:25.107" status="FAIL" endtime="20161110 16:33:25.744"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:35.746">@{arglist} = [ ]</msg>
<status starttime="20161110 16:33:35.746" status="PASS" endtime="20161110 16:33:35.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:35.748">${args} = {u'data': []}</msg>
<status starttime="20161110 16:33:35.746" status="PASS" endtime="20161110 16:33:35.748"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:35.749">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:33:35.749" status="PASS" endtime="20161110 16:33:35.749"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:35.751">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:33:35.751" status="PASS" endtime="20161110 16:33:35.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:35.753">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:33:35.752" status="PASS" endtime="20161110 16:33:35.753"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:33:35.754" status="PASS" endtime="20161110 16:33:35.754"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:35.756">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:33:35.755" status="PASS" endtime="20161110 16:33:35.757"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:35.758">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:33:35.758" status="PASS" endtime="20161110 16:33:35.758"></status>
</kw>
<status starttime="20161110 16:33:35.757" status="PASS" endtime="20161110 16:33:35.758"></status>
</kw>
<status starttime="20161110 16:33:35.754" status="PASS" endtime="20161110 16:33:35.758"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:35.760">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:33:35.759" status="PASS" endtime="20161110 16:33:35.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:35.761">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:33:35.761" status="PASS" endtime="20161110 16:33:35.761"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:35.762">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:33:35.762" status="PASS" endtime="20161110 16:33:35.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:35.764">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:33:35.763" status="PASS" endtime="20161110 16:33:35.764"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:36.092">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:33:36.092">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:35.764" status="PASS" endtime="20161110 16:33:36.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:36.093">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:33:36.092" status="PASS" endtime="20161110 16:33:36.093"></status>
</kw>
<status starttime="20161110 16:33:35.759" status="PASS" endtime="20161110 16:33:36.093"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:40.866">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:33:40.866">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:36.093" status="PASS" endtime="20161110 16:33:40.866"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:40.868">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:33:40.867" status="PASS" endtime="20161110 16:33:40.868"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:40.869">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:33:40.869" status="PASS" endtime="20161110 16:33:40.870"></status>
</kw>
<status starttime="20161110 16:33:40.868" status="PASS" endtime="20161110 16:33:40.870"></status>
</kw>
<status starttime="20161110 16:33:40.866" status="PASS" endtime="20161110 16:33:40.870"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:40.870">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:35.750" status="PASS" endtime="20161110 16:33:40.870"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:40.871">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:35.748" status="PASS" endtime="20161110 16:33:40.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:40.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:33:40.871" status="PASS" endtime="20161110 16:33:40.872"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:40.873">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:33:40.873">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:33:40.873">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:33:40.872" status="PASS" endtime="20161110 16:33:40.873"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:40.873">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:33:35.745" status="PASS" endtime="20161110 16:33:40.874"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:33:40.874">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:33:40.874" status="FAIL" endtime="20161110 16:33:40.874"></status>
</kw>
<status starttime="20161110 16:33:35.744" status="FAIL" endtime="20161110 16:33:40.875"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:50.877">@{arglist} = [ ]</msg>
<status starttime="20161110 16:33:50.877" status="PASS" endtime="20161110 16:33:50.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:50.878">${args} = {u'data': []}</msg>
<status starttime="20161110 16:33:50.878" status="PASS" endtime="20161110 16:33:50.878"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:50.880">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:33:50.880" status="PASS" endtime="20161110 16:33:50.880"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:50.882">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:33:50.882" status="PASS" endtime="20161110 16:33:50.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:50.883">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:33:50.883" status="PASS" endtime="20161110 16:33:50.883"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:33:50.883" status="PASS" endtime="20161110 16:33:50.884"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:50.886">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:33:50.885" status="PASS" endtime="20161110 16:33:50.887"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:50.888">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:33:50.887" status="PASS" endtime="20161110 16:33:50.888"></status>
</kw>
<status starttime="20161110 16:33:50.887" status="PASS" endtime="20161110 16:33:50.888"></status>
</kw>
<status starttime="20161110 16:33:50.884" status="PASS" endtime="20161110 16:33:50.888"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:50.890">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:33:50.889" status="PASS" endtime="20161110 16:33:50.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:50.892">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:33:50.891" status="PASS" endtime="20161110 16:33:50.892"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:50.893">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:33:50.892" status="PASS" endtime="20161110 16:33:50.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:50.894">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:33:50.893" status="PASS" endtime="20161110 16:33:50.894"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:51.228">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:33:51.228">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:50.894" status="PASS" endtime="20161110 16:33:51.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:51.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:33:51.228" status="PASS" endtime="20161110 16:33:51.229"></status>
</kw>
<status starttime="20161110 16:33:50.889" status="PASS" endtime="20161110 16:33:51.229"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:51.546">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:33:51.546">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:51.229" status="PASS" endtime="20161110 16:33:51.546"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:51.548">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:33:51.547" status="PASS" endtime="20161110 16:33:51.548"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:51.548">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:33:51.548" status="PASS" endtime="20161110 16:33:51.549"></status>
</kw>
<status starttime="20161110 16:33:51.548" status="PASS" endtime="20161110 16:33:51.549"></status>
</kw>
<status starttime="20161110 16:33:51.546" status="PASS" endtime="20161110 16:33:51.549"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:51.549">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:50.880" status="PASS" endtime="20161110 16:33:51.549"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:51.549">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:33:50.879" status="PASS" endtime="20161110 16:33:51.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:33:51.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:33:51.549" status="PASS" endtime="20161110 16:33:51.550"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:33:51.550">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:33:51.550">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:33:51.550">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:33:51.550" status="PASS" endtime="20161110 16:33:51.550"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:33:51.551">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:33:50.876" status="PASS" endtime="20161110 16:33:51.551"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:33:51.551">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:33:51.551" status="FAIL" endtime="20161110 16:33:51.551"></status>
</kw>
<status starttime="20161110 16:33:50.875" status="FAIL" endtime="20161110 16:33:51.551"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:01.554">@{arglist} = [ ]</msg>
<status starttime="20161110 16:34:01.554" status="PASS" endtime="20161110 16:34:01.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:01.556">${args} = {u'data': []}</msg>
<status starttime="20161110 16:34:01.555" status="PASS" endtime="20161110 16:34:01.556"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:01.557">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:34:01.557" status="PASS" endtime="20161110 16:34:01.558"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:01.560">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:34:01.560" status="PASS" endtime="20161110 16:34:01.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:01.562">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:34:01.561" status="PASS" endtime="20161110 16:34:01.563"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:34:01.563" status="PASS" endtime="20161110 16:34:01.564"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:01.566">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:34:01.565" status="PASS" endtime="20161110 16:34:01.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:01.567">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:34:01.567" status="PASS" endtime="20161110 16:34:01.567"></status>
</kw>
<status starttime="20161110 16:34:01.566" status="PASS" endtime="20161110 16:34:01.567"></status>
</kw>
<status starttime="20161110 16:34:01.564" status="PASS" endtime="20161110 16:34:01.567"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:01.568">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:34:01.568" status="PASS" endtime="20161110 16:34:01.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:01.569">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:34:01.569" status="PASS" endtime="20161110 16:34:01.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:01.570">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:34:01.569" status="PASS" endtime="20161110 16:34:01.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:01.570">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:34:01.570" status="PASS" endtime="20161110 16:34:01.570"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:01.905">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:34:01.905">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:01.571" status="PASS" endtime="20161110 16:34:01.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:01.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:34:01.905" status="PASS" endtime="20161110 16:34:01.906"></status>
</kw>
<status starttime="20161110 16:34:01.568" status="PASS" endtime="20161110 16:34:01.906"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:02.190">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:34:02.190">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:01.906" status="PASS" endtime="20161110 16:34:02.190"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:02.191">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:34:02.191" status="PASS" endtime="20161110 16:34:02.191"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:02.193">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:34:02.193" status="PASS" endtime="20161110 16:34:02.193"></status>
</kw>
<status starttime="20161110 16:34:02.191" status="PASS" endtime="20161110 16:34:02.193"></status>
</kw>
<status starttime="20161110 16:34:02.190" status="PASS" endtime="20161110 16:34:02.193"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:02.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:01.558" status="PASS" endtime="20161110 16:34:02.193"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:02.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:01.556" status="PASS" endtime="20161110 16:34:02.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:02.194">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:34:02.194" status="PASS" endtime="20161110 16:34:02.194"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:02.195">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:34:02.195">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:34:02.195">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:34:02.194" status="PASS" endtime="20161110 16:34:02.195"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:02.195">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:34:01.553" status="PASS" endtime="20161110 16:34:02.195"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:34:02.196">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:34:02.195" status="FAIL" endtime="20161110 16:34:02.196"></status>
</kw>
<status starttime="20161110 16:34:01.552" status="FAIL" endtime="20161110 16:34:02.196"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.198">@{arglist} = [ ]</msg>
<status starttime="20161110 16:34:12.198" status="PASS" endtime="20161110 16:34:12.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.200">${args} = {u'data': []}</msg>
<status starttime="20161110 16:34:12.199" status="PASS" endtime="20161110 16:34:12.200"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.201">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:34:12.201" status="PASS" endtime="20161110 16:34:12.201"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.203">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:34:12.203" status="PASS" endtime="20161110 16:34:12.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.204">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:34:12.204" status="PASS" endtime="20161110 16:34:12.204"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:34:12.205" status="PASS" endtime="20161110 16:34:12.205"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.207">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:34:12.206" status="PASS" endtime="20161110 16:34:12.207"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:12.209">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:34:12.208" status="PASS" endtime="20161110 16:34:12.209"></status>
</kw>
<status starttime="20161110 16:34:12.208" status="PASS" endtime="20161110 16:34:12.209"></status>
</kw>
<status starttime="20161110 16:34:12.205" status="PASS" endtime="20161110 16:34:12.209"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:12.210">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:34:12.210" status="PASS" endtime="20161110 16:34:12.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.213">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:34:12.212" status="PASS" endtime="20161110 16:34:12.213"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.214">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:34:12.213" status="PASS" endtime="20161110 16:34:12.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.214">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:34:12.214" status="PASS" endtime="20161110 16:34:12.214"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.546">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:34:12.546">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:12.215" status="PASS" endtime="20161110 16:34:12.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:12.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:34:12.546" status="PASS" endtime="20161110 16:34:12.547"></status>
</kw>
<status starttime="20161110 16:34:12.209" status="PASS" endtime="20161110 16:34:12.547"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.826">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:34:12.826">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:12.548" status="PASS" endtime="20161110 16:34:12.826"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.828">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:34:12.827" status="PASS" endtime="20161110 16:34:12.828"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:12.828">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:34:12.828" status="PASS" endtime="20161110 16:34:12.829"></status>
</kw>
<status starttime="20161110 16:34:12.828" status="PASS" endtime="20161110 16:34:12.829"></status>
</kw>
<status starttime="20161110 16:34:12.826" status="PASS" endtime="20161110 16:34:12.829"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:12.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:12.202" status="PASS" endtime="20161110 16:34:12.829"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:12.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:12.200" status="PASS" endtime="20161110 16:34:12.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:12.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:34:12.829" status="PASS" endtime="20161110 16:34:12.830"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:12.830">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:34:12.830">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:34:12.830">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:34:12.830" status="PASS" endtime="20161110 16:34:12.830"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:12.831">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:34:12.197" status="PASS" endtime="20161110 16:34:12.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:34:12.831">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:34:12.831" status="FAIL" endtime="20161110 16:34:12.831"></status>
</kw>
<status starttime="20161110 16:34:12.197" status="FAIL" endtime="20161110 16:34:12.831"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:22.834">@{arglist} = [ ]</msg>
<status starttime="20161110 16:34:22.833" status="PASS" endtime="20161110 16:34:22.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:22.835">${args} = {u'data': []}</msg>
<status starttime="20161110 16:34:22.834" status="PASS" endtime="20161110 16:34:22.835"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:22.837">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 16:34:22.836" status="PASS" endtime="20161110 16:34:22.837"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:22.839">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 16:34:22.838" status="PASS" endtime="20161110 16:34:22.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:22.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:34:22.839" status="PASS" endtime="20161110 16:34:22.840"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:34:22.840" status="PASS" endtime="20161110 16:34:22.840"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:22.843">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:34:22.842" status="PASS" endtime="20161110 16:34:22.844"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:22.845">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:34:22.845" status="PASS" endtime="20161110 16:34:22.845"></status>
</kw>
<status starttime="20161110 16:34:22.844" status="PASS" endtime="20161110 16:34:22.845"></status>
</kw>
<status starttime="20161110 16:34:22.841" status="PASS" endtime="20161110 16:34:22.845"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:22.846">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:34:22.846" status="PASS" endtime="20161110 16:34:22.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:22.847">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:34:22.847" status="PASS" endtime="20161110 16:34:22.847"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:22.847">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:34:22.847" status="PASS" endtime="20161110 16:34:22.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:22.848">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:34:22.848" status="PASS" endtime="20161110 16:34:22.848"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.174">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:34:23.174">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:22.848" status="PASS" endtime="20161110 16:34:23.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.175">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:34:23.174" status="PASS" endtime="20161110 16:34:23.175"></status>
</kw>
<status starttime="20161110 16:34:22.845" status="PASS" endtime="20161110 16:34:23.175"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.460">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:34:23.460">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:23.175" status="PASS" endtime="20161110 16:34:23.460"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.461">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:34:23.461" status="PASS" endtime="20161110 16:34:23.461"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.462">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:34:23.462" status="PASS" endtime="20161110 16:34:23.462"></status>
</kw>
<status starttime="20161110 16:34:23.461" status="PASS" endtime="20161110 16:34:23.462"></status>
</kw>
<status starttime="20161110 16:34:23.460" status="PASS" endtime="20161110 16:34:23.463"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:23.463">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:22.837" status="PASS" endtime="20161110 16:34:23.463"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:23.463">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:34:22.835" status="PASS" endtime="20161110 16:34:23.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.463">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:34:23.463" status="PASS" endtime="20161110 16:34:23.464"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.464">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:34:23.464">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:34:23.464">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:34:23.464" status="PASS" endtime="20161110 16:34:23.464"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:23.465">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 16:34:22.833" status="PASS" endtime="20161110 16:34:23.465"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:34:23.465">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:34:23.465" status="FAIL" endtime="20161110 16:34:23.465"></status>
</kw>
<status starttime="20161110 16:34:22.832" status="FAIL" endtime="20161110 16:34:23.465"></status>
</kw>
<msg level="FAIL" timestamp="20161110 16:34:23.465">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 16:19:22.317" status="FAIL" endtime="20161110 16:34:23.466"></status>
</kw>
<status starttime="20161110 16:19:22.317" status="FAIL" endtime="20161110 16:34:23.466"></status>
</kw>
<status starttime="20161110 16:19:00.900" status="FAIL" endtime="20161110 16:34:23.466"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Log FFDC if failed and collect SOL</doc>
<kw name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<kw name="Log FFDC If Test Case Failed" library="openbmc_ffdc">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.472">${cur_time} = 2016-11-10 16:34:23:471922</msg>
<status starttime="20161110 16:34:23.472" status="PASS" endtime="20161110 16:34:23.472"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.473">${cur_time} = 20161110163423471922</msg>
<status starttime="20161110 16:34:23.472" status="PASS" endtime="20161110 16:34:23.473"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:23.473">${cur_time} = 20161110163423471922</msg>
<status starttime="20161110 16:34:23.471" status="PASS" endtime="20161110 16:34:23.473"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.476">${FFDC_TIME} = 20161110163423471922</msg>
<status starttime="20161110 16:34:23.473" status="PASS" endtime="20161110 16:34:23.476"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status starttime="20161110 16:34:23.476" status="PASS" endtime="20161110 16:34:23.476"></status>
</kw>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.477">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20161110 16:34:23.477" status="PASS" endtime="20161110 16:34:23.477"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.478">${suite_name} = 20161110163423471922_TestsTestBasicPoweron</msg>
<status starttime="20161110 16:34:23.477" status="PASS" endtime="20161110 16:34:23.478"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.478">${test_name} = powerontest</msg>
<status starttime="20161110 16:34:23.478" status="PASS" endtime="20161110 16:34:23.478"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.479">${test_name} = 20161110163423471922_powerontest</msg>
<status starttime="20161110 16:34:23.478" status="PASS" endtime="20161110 16:34:23.479"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:23.479">${suitename} = 20161110163423471922_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161110 16:34:23.479">${testname} = 20161110163423471922_powerontest</msg>
<status starttime="20161110 16:34:23.476" status="PASS" endtime="20161110 16:34:23.479"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.482">${FFDC_DIR_PATH} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest</msg>
<status starttime="20161110 16:34:23.479" status="PASS" endtime="20161110 16:34:23.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.483">${prefix} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_</msg>
<status starttime="20161110 16:34:23.482" status="PASS" endtime="20161110 16:34:23.483"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.485">${LOG_PREFIX} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_</msg>
<status starttime="20161110 16:34:23.483" status="PASS" endtime="20161110 16:34:23.485"></status>
</kw>
<kw name="Create FFDC Directory" library="openbmc_ffdc_utils">
<doc>Creates directory and report file</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.487" html="yes">Created directory '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.486" status="PASS" endtime="20161110 16:34:23.487"></status>
</kw>
<kw name="Create FFDC Report File" library="openbmc_ffdc_utils">
<doc>Create a generic file name for ffdc</doc>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.491">${FFDC_FILE_PATH} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt</msg>
<status starttime="20161110 16:34:23.488" status="PASS" endtime="20161110 16:34:23.491"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.492" html="yes">Created file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.491" status="PASS" endtime="20161110 16:34:23.492"></status>
</kw>
<status starttime="20161110 16:34:23.488" status="PASS" endtime="20161110 16:34:23.492"></status>
</kw>
<status starttime="20161110 16:34:23.486" status="PASS" endtime="20161110 16:34:23.492"></status>
</kw>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.494" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.493" status="PASS" endtime="20161110 16:34:23.494"></status>
</kw>
<status starttime="20161110 16:34:23.492" status="PASS" endtime="20161110 16:34:23.495"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.495" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.495" status="PASS" endtime="20161110 16:34:23.496"></status>
</kw>
<status starttime="20161110 16:34:23.495" status="PASS" endtime="20161110 16:34:23.496"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.497" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.496" status="PASS" endtime="20161110 16:34:23.497"></status>
</kw>
<status starttime="20161110 16:34:23.496" status="PASS" endtime="20161110 16:34:23.497"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.498" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.498" status="PASS" endtime="20161110 16:34:23.498"></status>
</kw>
<status starttime="20161110 16:34:23.497" status="PASS" endtime="20161110 16:34:23.498"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.499" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.499" status="PASS" endtime="20161110 16:34:23.499"></status>
</kw>
<status starttime="20161110 16:34:23.498" status="PASS" endtime="20161110 16:34:23.499"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.500" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.500" status="PASS" endtime="20161110 16:34:23.500"></status>
</kw>
<status starttime="20161110 16:34:23.499" status="PASS" endtime="20161110 16:34:23.500"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.501" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.501" status="PASS" endtime="20161110 16:34:23.501"></status>
</kw>
<status starttime="20161110 16:34:23.500" status="PASS" endtime="20161110 16:34:23.502"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.503" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.502" status="PASS" endtime="20161110 16:34:23.503"></status>
</kw>
<status starttime="20161110 16:34:23.502" status="PASS" endtime="20161110 16:34:23.503"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.504" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.503" status="PASS" endtime="20161110 16:34:23.504"></status>
</kw>
<status starttime="20161110 16:34:23.503" status="PASS" endtime="20161110 16:34:23.504"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.505" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.505" status="PASS" endtime="20161110 16:34:23.505"></status>
</kw>
<status starttime="20161110 16:34:23.504" status="PASS" endtime="20161110 16:34:23.505"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.506" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.506" status="PASS" endtime="20161110 16:34:23.507"></status>
</kw>
<status starttime="20161110 16:34:23.506" status="PASS" endtime="20161110 16:34:23.507"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.508" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.507" status="PASS" endtime="20161110 16:34:23.508"></status>
</kw>
<status starttime="20161110 16:34:23.507" status="PASS" endtime="20161110 16:34:23.508"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.509" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.509" status="PASS" endtime="20161110 16:34:23.509"></status>
</kw>
<status starttime="20161110 16:34:23.508" status="PASS" endtime="20161110 16:34:23.509"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.510" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.510" status="PASS" endtime="20161110 16:34:23.510"></status>
</kw>
<status starttime="20161110 16:34:23.509" status="PASS" endtime="20161110 16:34:23.511"></status>
</kw>
<status starttime="20161110 16:34:23.504" status="PASS" endtime="20161110 16:34:23.511"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.512" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.511" status="PASS" endtime="20161110 16:34:23.512"></status>
</kw>
<status starttime="20161110 16:34:23.511" status="PASS" endtime="20161110 16:34:23.512"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.512">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20161110 16:34:23.512" status="PASS" endtime="20161110 16:34:23.512"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.513" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.513" status="PASS" endtime="20161110 16:34:23.514"></status>
</kw>
<status starttime="20161110 16:34:23.513" status="PASS" endtime="20161110 16:34:23.514"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.515" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.514" status="PASS" endtime="20161110 16:34:23.515"></status>
</kw>
<status starttime="20161110 16:34:23.514" status="PASS" endtime="20161110 16:34:23.515"></status>
</kw>
<status starttime="20161110 16:34:23.512" status="PASS" endtime="20161110 16:34:23.515"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.516" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.516" status="PASS" endtime="20161110 16:34:23.516"></status>
</kw>
<status starttime="20161110 16:34:23.515" status="PASS" endtime="20161110 16:34:23.516"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.517" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.517" status="PASS" endtime="20161110 16:34:23.517"></status>
</kw>
<status starttime="20161110 16:34:23.516" status="PASS" endtime="20161110 16:34:23.517"></status>
</kw>
<status starttime="20161110 16:34:23.515" status="PASS" endtime="20161110 16:34:23.517"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.518" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.518" status="PASS" endtime="20161110 16:34:23.518"></status>
</kw>
<status starttime="20161110 16:34:23.517" status="PASS" endtime="20161110 16:34:23.518"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.519" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.519" status="PASS" endtime="20161110 16:34:23.520"></status>
</kw>
<status starttime="20161110 16:34:23.519" status="PASS" endtime="20161110 16:34:23.520"></status>
</kw>
<status starttime="20161110 16:34:23.517" status="PASS" endtime="20161110 16:34:23.520"></status>
</kw>
<status starttime="20161110 16:34:23.512" status="PASS" endtime="20161110 16:34:23.520"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.521" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:23.520" status="PASS" endtime="20161110 16:34:23.521"></status>
</kw>
<status starttime="20161110 16:34:23.520" status="PASS" endtime="20161110 16:34:23.521"></status>
</kw>
<status starttime="20161110 16:34:23.492" status="PASS" endtime="20161110 16:34:23.521"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.522">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20161110 16:34:23.521" status="PASS" endtime="20161110 16:34:23.522"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.523">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') ]</msg>
<status starttime="20161110 16:34:23.523" status="PASS" endtime="20161110 16:34:23.523"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:34:23.526">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 16:34:23.526" status="FAIL" endtime="20161110 16:34:23.526"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:23.526">${has_host} = False</msg>
<status starttime="20161110 16:34:23.525" status="PASS" endtime="20161110 16:34:23.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 16:34:23.529" status="PASS" endtime="20161110 16:34:23.529"></status>
</kw>
<status starttime="20161110 16:34:23.526" status="PASS" endtime="20161110 16:34:23.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.533">${port_num} = 22</msg>
<status starttime="20161110 16:34:23.533" status="PASS" endtime="20161110 16:34:23.533"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.534">${SSH_PORT} = 22</msg>
<status starttime="20161110 16:34:23.533" status="PASS" endtime="20161110 16:34:23.534"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:23.534">${https_num} = 443</msg>
<status starttime="20161110 16:34:23.534" status="PASS" endtime="20161110 16:34:23.534"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.535">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 16:34:23.535" status="PASS" endtime="20161110 16:34:23.535"></status>
</kw>
<status starttime="20161110 16:34:23.532" status="PASS" endtime="20161110 16:34:23.535"></status>
</kw>
<status starttime="20161110 16:34:23.530" status="PASS" endtime="20161110 16:34:23.535"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:34:23.536">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 16:34:23.536" status="FAIL" endtime="20161110 16:34:23.536"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:23.536">${has_port} = False</msg>
<status starttime="20161110 16:34:23.536" status="PASS" endtime="20161110 16:34:23.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 16:34:23.540" status="PASS" endtime="20161110 16:34:23.540"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 16:34:23.541" status="PASS" endtime="20161110 16:34:23.541"></status>
</kw>
<status starttime="20161110 16:34:23.540" status="PASS" endtime="20161110 16:34:23.541"></status>
</kw>
<status starttime="20161110 16:34:23.537" status="PASS" endtime="20161110 16:34:23.541"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:23.541">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 16:34:27.539">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 16:34:23.541" status="PASS" endtime="20161110 16:34:27.540"></status>
</kw>
<status starttime="20161110 16:34:23.525" status="PASS" endtime="20161110 16:34:27.540"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:27.541">@{entries} = [ BMC FILES ]</msg>
<status starttime="20161110 16:34:27.541" status="PASS" endtime="20161110 16:34:27.541"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:27.544">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_dmesg', 'dmesg') ]</msg>
<status starttime="20161110 16:34:27.543" status="PASS" endtime="20161110 16:34:27.544"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:27.545">${logpath} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_procinfo</msg>
<status starttime="20161110 16:34:27.544" status="PASS" endtime="20161110 16:34:27.545"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 16:34:27.547" status="PASS" endtime="20161110 16:34:27.551"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:27.552">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161110 16:34:27.620">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:27.620">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161110 16:34:27.620">${stderr} = </msg>
<status starttime="20161110 16:34:27.551" status="PASS" endtime="20161110 16:34:27.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:27.625" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_procinfo"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_procinfo&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:27.624" status="PASS" endtime="20161110 16:34:27.625"></status>
</kw>
<status starttime="20161110 16:34:27.624" status="PASS" endtime="20161110 16:34:27.625"></status>
</kw>
<status starttime="20161110 16:34:27.621" status="PASS" endtime="20161110 16:34:27.626"></status>
</kw>
<status starttime="20161110 16:34:27.546" status="PASS" endtime="20161110 16:34:27.626"></status>
</kw>
<status starttime="20161110 16:34:27.544" status="PASS" endtime="20161110 16:34:27.626"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:27.627">${logpath} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_journalctl</msg>
<status starttime="20161110 16:34:27.626" status="PASS" endtime="20161110 16:34:27.627"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 16:34:27.628" status="PASS" endtime="20161110 16:34:27.633"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:27.634">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161110 16:34:39.328">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:39.331">${stdout} = -- Logs begin at Thu 2016-10-20 19:57:23 UTC, end at Thu 2016-10-20 20:18:07 UTC. --
Oct 20 19:57:23 barreleye systemd-journald[449]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161110 16:34:39.331">${stderr} = </msg>
<status starttime="20161110 16:34:27.633" status="PASS" endtime="20161110 16:34:39.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:39.339" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_journalctl"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_journalctl&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:39.338" status="PASS" endtime="20161110 16:34:39.339"></status>
</kw>
<status starttime="20161110 16:34:39.336" status="PASS" endtime="20161110 16:34:39.339"></status>
</kw>
<status starttime="20161110 16:34:39.332" status="PASS" endtime="20161110 16:34:39.340"></status>
</kw>
<status starttime="20161110 16:34:27.627" status="PASS" endtime="20161110 16:34:39.340"></status>
</kw>
<status starttime="20161110 16:34:27.626" status="PASS" endtime="20161110 16:34:39.340"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:39.340">${logpath} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_proc_list</msg>
<status starttime="20161110 16:34:39.340" status="PASS" endtime="20161110 16:34:39.340"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 16:34:39.341" status="PASS" endtime="20161110 16:34:39.344"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:39.344">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161110 16:34:46.302">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:46.302">${stdout} = Mem: 163788K used, 335232K free, 33428K shrd, 10468K buff, 66964K cached
CPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 5.70 5.41 4.24 9/113 1192
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20161110 16:34:46.303">${stderr} = </msg>
<status starttime="20161110 16:34:39.344" status="PASS" endtime="20161110 16:34:46.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:46.309" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_proc_list"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_proc_list&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:46.309" status="PASS" endtime="20161110 16:34:46.310"></status>
</kw>
<status starttime="20161110 16:34:46.308" status="PASS" endtime="20161110 16:34:46.310"></status>
</kw>
<status starttime="20161110 16:34:46.303" status="PASS" endtime="20161110 16:34:46.310"></status>
</kw>
<status starttime="20161110 16:34:39.341" status="PASS" endtime="20161110 16:34:46.310"></status>
</kw>
<status starttime="20161110 16:34:39.340" status="PASS" endtime="20161110 16:34:46.310"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:46.312">${logpath} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_meminfo</msg>
<status starttime="20161110 16:34:46.311" status="PASS" endtime="20161110 16:34:46.312"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 16:34:46.313" status="PASS" endtime="20161110 16:34:46.316"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:46.316">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161110 16:34:49.823">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:49.823">${stdout} = MemTotal:         499020 kB
MemFree:          335224 kB
MemAvailable:     373940 kB
Buffers:           10468 kB
Cached:            66964 kB
SwapCached:            0 kB
Active:           111484 kB
Inac...</msg>
<msg level="INFO" timestamp="20161110 16:34:49.823">${stderr} = </msg>
<status starttime="20161110 16:34:46.316" status="PASS" endtime="20161110 16:34:49.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:49.831" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_meminfo"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_meminfo&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:49.830" status="PASS" endtime="20161110 16:34:49.832"></status>
</kw>
<status starttime="20161110 16:34:49.829" status="PASS" endtime="20161110 16:34:49.832"></status>
</kw>
<status starttime="20161110 16:34:49.824" status="PASS" endtime="20161110 16:34:49.832"></status>
</kw>
<status starttime="20161110 16:34:46.312" status="PASS" endtime="20161110 16:34:49.832"></status>
</kw>
<status starttime="20161110 16:34:46.310" status="PASS" endtime="20161110 16:34:49.832"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:49.833">${logpath} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_dmesg</msg>
<status starttime="20161110 16:34:49.833" status="PASS" endtime="20161110 16:34:49.834"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 16:34:49.835" status="PASS" endtime="20161110 16:34:49.838"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:49.838">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161110 16:34:50.214">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:50.214">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-c5682cbc3542add705e35152329436067bb1f94a (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Tue Nov 1 05:44:54 UTC 2016
CPU: ARM926EJ-S [41069265] re...</msg>
<msg level="INFO" timestamp="20161110 16:34:50.214">${stderr} = </msg>
<status starttime="20161110 16:34:49.838" status="PASS" endtime="20161110 16:34:50.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:50.219" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_dmesg"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_dmesg&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:50.218" status="PASS" endtime="20161110 16:34:50.219"></status>
</kw>
<status starttime="20161110 16:34:50.218" status="PASS" endtime="20161110 16:34:50.219"></status>
</kw>
<status starttime="20161110 16:34:50.214" status="PASS" endtime="20161110 16:34:50.219"></status>
</kw>
<status starttime="20161110 16:34:49.834" status="PASS" endtime="20161110 16:34:50.220"></status>
</kw>
<status starttime="20161110 16:34:49.832" status="PASS" endtime="20161110 16:34:50.220"></status>
</kw>
<status starttime="20161110 16:34:27.544" status="PASS" endtime="20161110 16:34:50.220"></status>
</kw>
<status starttime="20161110 16:34:27.542" status="PASS" endtime="20161110 16:34:50.220"></status>
</kw>
<status starttime="20161110 16:34:27.542" status="PASS" endtime="20161110 16:34:50.220"></status>
</kw>
<status starttime="20161110 16:34:27.541" status="PASS" endtime="20161110 16:34:50.220"></status>
</kw>
<status starttime="20161110 16:34:23.524" status="PASS" endtime="20161110 16:34:50.220"></status>
</kw>
<status starttime="20161110 16:34:23.524" status="PASS" endtime="20161110 16:34:50.220"></status>
</kw>
<status starttime="20161110 16:34:23.523" status="PASS" endtime="20161110 16:34:50.220"></status>
</kw>
<status starttime="20161110 16:34:23.523" status="PASS" endtime="20161110 16:34:50.220"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:50.224">Returning from the enclosing user keyword.</msg>
<status starttime="20161110 16:34:50.222" status="PASS" endtime="20161110 16:34:50.224"></status>
</kw>
<status starttime="20161110 16:34:50.221" status="PASS" endtime="20161110 16:34:50.225"></status>
</kw>
<status starttime="20161110 16:34:50.221" status="PASS" endtime="20161110 16:34:50.225"></status>
</kw>
<status starttime="20161110 16:34:50.220" status="PASS" endtime="20161110 16:34:50.225"></status>
</kw>
<status starttime="20161110 16:34:50.220" status="PASS" endtime="20161110 16:34:50.225"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:34:50.228">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 16:34:50.227" status="FAIL" endtime="20161110 16:34:50.228"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:50.228">${has_host} = False</msg>
<status starttime="20161110 16:34:50.227" status="PASS" endtime="20161110 16:34:50.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 16:34:50.231" status="PASS" endtime="20161110 16:34:50.231"></status>
</kw>
<status starttime="20161110 16:34:50.228" status="PASS" endtime="20161110 16:34:50.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:50.235">${port_num} = 22</msg>
<status starttime="20161110 16:34:50.235" status="PASS" endtime="20161110 16:34:50.235"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:50.236">${SSH_PORT} = 22</msg>
<status starttime="20161110 16:34:50.235" status="PASS" endtime="20161110 16:34:50.236"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:50.236">${https_num} = 443</msg>
<status starttime="20161110 16:34:50.236" status="PASS" endtime="20161110 16:34:50.236"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:50.237">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 16:34:50.236" status="PASS" endtime="20161110 16:34:50.237"></status>
</kw>
<status starttime="20161110 16:34:50.234" status="PASS" endtime="20161110 16:34:50.237"></status>
</kw>
<status starttime="20161110 16:34:50.232" status="PASS" endtime="20161110 16:34:50.237"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:34:50.238">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 16:34:50.238" status="FAIL" endtime="20161110 16:34:50.238"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:50.238">${has_port} = False</msg>
<status starttime="20161110 16:34:50.237" status="PASS" endtime="20161110 16:34:50.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 16:34:50.242" status="PASS" endtime="20161110 16:34:50.242"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 16:34:50.242" status="PASS" endtime="20161110 16:34:50.243"></status>
</kw>
<status starttime="20161110 16:34:50.241" status="PASS" endtime="20161110 16:34:50.243"></status>
</kw>
<status starttime="20161110 16:34:50.238" status="PASS" endtime="20161110 16:34:50.243"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:50.243">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 16:34:52.831">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 16:34:50.243" status="PASS" endtime="20161110 16:34:52.831"></status>
</kw>
<status starttime="20161110 16:34:50.226" status="PASS" endtime="20161110 16:34:52.832"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:52.833">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20161110 16:34:52.832" status="PASS" endtime="20161110 16:34:52.833"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:52.835">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20161110 16:34:52.834" status="PASS" endtime="20161110 16:34:52.835"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:52.841">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20161110 16:34:52.835" status="PASS" endtime="20161110 16:34:52.841"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:52.849" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:52.849" status="PASS" endtime="20161110 16:34:52.850"></status>
</kw>
<status starttime="20161110 16:34:52.848" status="PASS" endtime="20161110 16:34:52.850"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:52.852" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:52.851" status="PASS" endtime="20161110 16:34:52.852"></status>
</kw>
<status starttime="20161110 16:34:52.850" status="PASS" endtime="20161110 16:34:52.852"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:52.854" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:52.853" status="PASS" endtime="20161110 16:34:52.854"></status>
</kw>
<status starttime="20161110 16:34:52.852" status="PASS" endtime="20161110 16:34:52.855"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:52.856" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:52.856" status="PASS" endtime="20161110 16:34:52.856"></status>
</kw>
<status starttime="20161110 16:34:52.855" status="PASS" endtime="20161110 16:34:52.856"></status>
</kw>
<status starttime="20161110 16:34:52.847" status="PASS" endtime="20161110 16:34:52.857"></status>
</kw>
<status starttime="20161110 16:34:52.843" status="PASS" endtime="20161110 16:34:52.857"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:52.857">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161110 16:34:52.927">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:52.927">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-213"
VERSION_ID="v1.99.0-213-g17b02f3-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161110 16:34:52.927">${stderr} = </msg>
<status starttime="20161110 16:34:52.857" status="PASS" endtime="20161110 16:34:52.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:52.933" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:52.932" status="PASS" endtime="20161110 16:34:52.933"></status>
</kw>
<status starttime="20161110 16:34:52.931" status="PASS" endtime="20161110 16:34:52.933"></status>
</kw>
<status starttime="20161110 16:34:52.927" status="PASS" endtime="20161110 16:34:52.933"></status>
</kw>
<status starttime="20161110 16:34:52.841" status="PASS" endtime="20161110 16:34:52.933"></status>
</kw>
<status starttime="20161110 16:34:52.841" status="PASS" endtime="20161110 16:34:52.933"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:52.939" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:52.938" status="PASS" endtime="20161110 16:34:52.939"></status>
</kw>
<status starttime="20161110 16:34:52.938" status="PASS" endtime="20161110 16:34:52.939"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:52.940" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:52.940" status="PASS" endtime="20161110 16:34:52.940"></status>
</kw>
<status starttime="20161110 16:34:52.939" status="PASS" endtime="20161110 16:34:52.940"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:52.941" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:52.941" status="PASS" endtime="20161110 16:34:52.941"></status>
</kw>
<status starttime="20161110 16:34:52.940" status="PASS" endtime="20161110 16:34:52.942"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:52.942" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:52.942" status="PASS" endtime="20161110 16:34:52.943"></status>
</kw>
<status starttime="20161110 16:34:52.942" status="PASS" endtime="20161110 16:34:52.943"></status>
</kw>
<status starttime="20161110 16:34:52.937" status="PASS" endtime="20161110 16:34:52.943"></status>
</kw>
<status starttime="20161110 16:34:52.934" status="PASS" endtime="20161110 16:34:52.943"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:52.944">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161110 16:34:53.241">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:53.241">${stdout} = 20161109203916</msg>
<msg level="INFO" timestamp="20161110 16:34:53.241">${stderr} = </msg>
<status starttime="20161110 16:34:52.944" status="PASS" endtime="20161110 16:34:53.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:53.246" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:53.245" status="PASS" endtime="20161110 16:34:53.246"></status>
</kw>
<status starttime="20161110 16:34:53.244" status="PASS" endtime="20161110 16:34:53.246"></status>
</kw>
<status starttime="20161110 16:34:53.241" status="PASS" endtime="20161110 16:34:53.246"></status>
</kw>
<status starttime="20161110 16:34:52.934" status="PASS" endtime="20161110 16:34:53.246"></status>
</kw>
<status starttime="20161110 16:34:52.933" status="PASS" endtime="20161110 16:34:53.246"></status>
</kw>
<status starttime="20161110 16:34:52.841" status="PASS" endtime="20161110 16:34:53.246"></status>
</kw>
<status starttime="20161110 16:34:52.833" status="PASS" endtime="20161110 16:34:53.246"></status>
</kw>
<status starttime="20161110 16:34:52.833" status="PASS" endtime="20161110 16:34:53.246"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:53.247">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20161110 16:34:53.247" status="PASS" endtime="20161110 16:34:53.247"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:53.248">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20161110 16:34:53.247" status="PASS" endtime="20161110 16:34:53.248"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:53.254" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:53.253" status="PASS" endtime="20161110 16:34:53.254"></status>
</kw>
<status starttime="20161110 16:34:53.253" status="PASS" endtime="20161110 16:34:53.254"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:53.255" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:53.255" status="PASS" endtime="20161110 16:34:53.255"></status>
</kw>
<status starttime="20161110 16:34:53.254" status="PASS" endtime="20161110 16:34:53.255"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:53.256" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:53.256" status="PASS" endtime="20161110 16:34:53.256"></status>
</kw>
<status starttime="20161110 16:34:53.256" status="PASS" endtime="20161110 16:34:53.257"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:53.257" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:53.257" status="PASS" endtime="20161110 16:34:53.258"></status>
</kw>
<status starttime="20161110 16:34:53.257" status="PASS" endtime="20161110 16:34:53.258"></status>
</kw>
<status starttime="20161110 16:34:53.252" status="PASS" endtime="20161110 16:34:53.258"></status>
</kw>
<status starttime="20161110 16:34:53.249" status="PASS" endtime="20161110 16:34:53.258"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:53.258">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161110 16:34:57.057">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:57.057">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M     32.6...</msg>
<msg level="INFO" timestamp="20161110 16:34:57.058">${stderr} = </msg>
<status starttime="20161110 16:34:53.258" status="PASS" endtime="20161110 16:34:57.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.067" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.065" status="PASS" endtime="20161110 16:34:57.067"></status>
</kw>
<status starttime="20161110 16:34:57.064" status="PASS" endtime="20161110 16:34:57.067"></status>
</kw>
<status starttime="20161110 16:34:57.058" status="PASS" endtime="20161110 16:34:57.067"></status>
</kw>
<status starttime="20161110 16:34:53.248" status="PASS" endtime="20161110 16:34:57.067"></status>
</kw>
<status starttime="20161110 16:34:53.248" status="PASS" endtime="20161110 16:34:57.067"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.076" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.075" status="PASS" endtime="20161110 16:34:57.076"></status>
</kw>
<status starttime="20161110 16:34:57.074" status="PASS" endtime="20161110 16:34:57.076"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.077" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.077" status="PASS" endtime="20161110 16:34:57.077"></status>
</kw>
<status starttime="20161110 16:34:57.076" status="PASS" endtime="20161110 16:34:57.077"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.078" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.078" status="PASS" endtime="20161110 16:34:57.078"></status>
</kw>
<status starttime="20161110 16:34:57.077" status="PASS" endtime="20161110 16:34:57.079"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.080" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.079" status="PASS" endtime="20161110 16:34:57.080"></status>
</kw>
<status starttime="20161110 16:34:57.079" status="PASS" endtime="20161110 16:34:57.080"></status>
</kw>
<status starttime="20161110 16:34:57.074" status="PASS" endtime="20161110 16:34:57.080"></status>
</kw>
<status starttime="20161110 16:34:57.069" status="PASS" endtime="20161110 16:34:57.080"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:57.080">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161110 16:34:57.409">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:57.410">${stdout} =  20:18:38 up 21 min,  load average: 5.74, 5.42, 4.26</msg>
<msg level="INFO" timestamp="20161110 16:34:57.410">${stderr} = </msg>
<status starttime="20161110 16:34:57.080" status="PASS" endtime="20161110 16:34:57.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.414" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.414" status="PASS" endtime="20161110 16:34:57.414"></status>
</kw>
<status starttime="20161110 16:34:57.413" status="PASS" endtime="20161110 16:34:57.414"></status>
</kw>
<status starttime="20161110 16:34:57.410" status="PASS" endtime="20161110 16:34:57.414"></status>
</kw>
<status starttime="20161110 16:34:57.068" status="PASS" endtime="20161110 16:34:57.415"></status>
</kw>
<status starttime="20161110 16:34:57.068" status="PASS" endtime="20161110 16:34:57.415"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.419" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.419" status="PASS" endtime="20161110 16:34:57.420"></status>
</kw>
<status starttime="20161110 16:34:57.419" status="PASS" endtime="20161110 16:34:57.420"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.421" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.420" status="PASS" endtime="20161110 16:34:57.421"></status>
</kw>
<status starttime="20161110 16:34:57.420" status="PASS" endtime="20161110 16:34:57.421"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.422" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.422" status="PASS" endtime="20161110 16:34:57.422"></status>
</kw>
<status starttime="20161110 16:34:57.421" status="PASS" endtime="20161110 16:34:57.422"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.423" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.423" status="PASS" endtime="20161110 16:34:57.423"></status>
</kw>
<status starttime="20161110 16:34:57.422" status="PASS" endtime="20161110 16:34:57.423"></status>
</kw>
<status starttime="20161110 16:34:57.418" status="PASS" endtime="20161110 16:34:57.423"></status>
</kw>
<status starttime="20161110 16:34:57.416" status="PASS" endtime="20161110 16:34:57.423"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:57.424">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161110 16:34:57.790">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:57.791">${stdout} = Linux barreleye 4.7.10-c5682cbc3542add705e35152329436067bb1f94a #1 Tue Nov 1 05:44:54 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161110 16:34:57.791">${stderr} = </msg>
<status starttime="20161110 16:34:57.424" status="PASS" endtime="20161110 16:34:57.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.797" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.797" status="PASS" endtime="20161110 16:34:57.797"></status>
</kw>
<status starttime="20161110 16:34:57.796" status="PASS" endtime="20161110 16:34:57.798"></status>
</kw>
<status starttime="20161110 16:34:57.791" status="PASS" endtime="20161110 16:34:57.798"></status>
</kw>
<status starttime="20161110 16:34:57.415" status="PASS" endtime="20161110 16:34:57.798"></status>
</kw>
<status starttime="20161110 16:34:57.415" status="PASS" endtime="20161110 16:34:57.798"></status>
</kw>
<status starttime="20161110 16:34:53.248" status="PASS" endtime="20161110 16:34:57.798"></status>
</kw>
<status starttime="20161110 16:34:53.246" status="PASS" endtime="20161110 16:34:57.798"></status>
</kw>
<status starttime="20161110 16:34:53.246" status="PASS" endtime="20161110 16:34:57.798"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:57.799">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20161110 16:34:57.799" status="PASS" endtime="20161110 16:34:57.799"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.800">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20161110 16:34:57.800" status="PASS" endtime="20161110 16:34:57.800"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.809" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.809" status="PASS" endtime="20161110 16:34:57.810"></status>
</kw>
<status starttime="20161110 16:34:57.808" status="PASS" endtime="20161110 16:34:57.810"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.812" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.811" status="PASS" endtime="20161110 16:34:57.812"></status>
</kw>
<status starttime="20161110 16:34:57.810" status="PASS" endtime="20161110 16:34:57.812"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.814" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.813" status="PASS" endtime="20161110 16:34:57.814"></status>
</kw>
<status starttime="20161110 16:34:57.812" status="PASS" endtime="20161110 16:34:57.814"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:57.815" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:57.815" status="PASS" endtime="20161110 16:34:57.816"></status>
</kw>
<status starttime="20161110 16:34:57.814" status="PASS" endtime="20161110 16:34:57.816"></status>
</kw>
<status starttime="20161110 16:34:57.807" status="PASS" endtime="20161110 16:34:57.816"></status>
</kw>
<status starttime="20161110 16:34:57.802" status="PASS" endtime="20161110 16:34:57.816"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:57.816">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161110 16:34:59.676">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:34:59.676">${stdout} =  = HOST_POWERED_ON</msg>
<msg level="INFO" timestamp="20161110 16:34:59.676">${stderr} = </msg>
<status starttime="20161110 16:34:57.816" status="PASS" endtime="20161110 16:34:59.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:59.683" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:34:59.682" status="PASS" endtime="20161110 16:34:59.683"></status>
</kw>
<status starttime="20161110 16:34:59.682" status="PASS" endtime="20161110 16:34:59.683"></status>
</kw>
<status starttime="20161110 16:34:59.677" status="PASS" endtime="20161110 16:34:59.683"></status>
</kw>
<status starttime="20161110 16:34:57.801" status="PASS" endtime="20161110 16:34:59.684"></status>
</kw>
<status starttime="20161110 16:34:57.801" status="PASS" endtime="20161110 16:34:59.684"></status>
</kw>
<status starttime="20161110 16:34:57.800" status="PASS" endtime="20161110 16:34:59.684"></status>
</kw>
<status starttime="20161110 16:34:57.798" status="PASS" endtime="20161110 16:34:59.684"></status>
</kw>
<status starttime="20161110 16:34:57.798" status="PASS" endtime="20161110 16:34:59.684"></status>
</kw>
<status starttime="20161110 16:34:52.833" status="PASS" endtime="20161110 16:34:59.684"></status>
</kw>
<status starttime="20161110 16:34:50.226" status="PASS" endtime="20161110 16:34:59.684"></status>
</kw>
<status starttime="20161110 16:34:50.225" status="PASS" endtime="20161110 16:34:59.684"></status>
</kw>
<status starttime="20161110 16:34:50.225" status="PASS" endtime="20161110 16:34:59.685"></status>
</kw>
<status starttime="20161110 16:34:50.225" status="PASS" endtime="20161110 16:34:59.685"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:34:59.689">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 16:34:59.688" status="FAIL" endtime="20161110 16:34:59.689"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:59.689">${has_host} = False</msg>
<status starttime="20161110 16:34:59.688" status="PASS" endtime="20161110 16:34:59.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 16:34:59.695" status="PASS" endtime="20161110 16:34:59.695"></status>
</kw>
<status starttime="20161110 16:34:59.690" status="PASS" endtime="20161110 16:34:59.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:59.699">${port_num} = 22</msg>
<status starttime="20161110 16:34:59.699" status="PASS" endtime="20161110 16:34:59.699"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:59.700">${SSH_PORT} = 22</msg>
<status starttime="20161110 16:34:59.700" status="PASS" endtime="20161110 16:34:59.700"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:34:59.700">${https_num} = 443</msg>
<status starttime="20161110 16:34:59.700" status="PASS" endtime="20161110 16:34:59.700"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:59.701">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 16:34:59.701" status="PASS" endtime="20161110 16:34:59.701"></status>
</kw>
<status starttime="20161110 16:34:59.699" status="PASS" endtime="20161110 16:34:59.701"></status>
</kw>
<status starttime="20161110 16:34:59.696" status="PASS" endtime="20161110 16:34:59.701"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:34:59.702">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 16:34:59.702" status="FAIL" endtime="20161110 16:34:59.702"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:34:59.702">${has_port} = False</msg>
<status starttime="20161110 16:34:59.701" status="PASS" endtime="20161110 16:34:59.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 16:34:59.707" status="PASS" endtime="20161110 16:34:59.707"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 16:34:59.707" status="PASS" endtime="20161110 16:34:59.708"></status>
</kw>
<status starttime="20161110 16:34:59.707" status="PASS" endtime="20161110 16:34:59.708"></status>
</kw>
<status starttime="20161110 16:34:59.703" status="PASS" endtime="20161110 16:34:59.708"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:34:59.708">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 16:35:06.933">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 16:34:59.708" status="PASS" endtime="20161110 16:35:06.934"></status>
</kw>
<status starttime="20161110 16:34:59.687" status="PASS" endtime="20161110 16:35:06.934"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:06.935">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20161110 16:35:06.935" status="PASS" endtime="20161110 16:35:06.935"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:06.938">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_record_log', '/org/openbmc/records/events/enumerate') | ('BMC_led', '/org/openbmc/control/led/enumerate') | ('BMC_inventory', '/org/open...</msg>
<status starttime="20161110 16:35:06.937" status="PASS" endtime="20161110 16:35:06.938"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:06.940">${logpath} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_sensor_list</msg>
<status starttime="20161110 16:35:06.939" status="PASS" endtime="20161110 16:35:06.940"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:06.942">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20161110 16:35:06.941" status="PASS" endtime="20161110 16:35:06.942"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:06.946">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 16:35:06.944" status="PASS" endtime="20161110 16:35:06.946"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:06.947">URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 16:35:06.946" status="PASS" endtime="20161110 16:35:06.947"></status>
</kw>
<status starttime="20161110 16:35:06.946" status="PASS" endtime="20161110 16:35:06.947"></status>
</kw>
<status starttime="20161110 16:35:06.943" status="PASS" endtime="20161110 16:35:06.947"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:06.948">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:35:06.948" status="PASS" endtime="20161110 16:35:06.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:06.949">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:06.949" status="PASS" endtime="20161110 16:35:06.949"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:06.950">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:35:06.949" status="PASS" endtime="20161110 16:35:06.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:06.950">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:35:06.950" status="PASS" endtime="20161110 16:35:06.950"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:07.283">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:07.283">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:06.950" status="PASS" endtime="20161110 16:35:07.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:07.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:07.283" status="PASS" endtime="20161110 16:35:07.284"></status>
</kw>
<status starttime="20161110 16:35:06.947" status="PASS" endtime="20161110 16:35:07.284"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:09.151">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:35:09.151">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:07.284" status="PASS" endtime="20161110 16:35:09.151"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:09.153">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "er...</msg>
<status starttime="20161110 16:35:09.152" status="PASS" endtime="20161110 16:35:09.153"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:09.155">Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 11724, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12021, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 12224, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 20149, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 20149, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 23275, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 20149, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 20149, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 29000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 958, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 960, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1028, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1030, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1304, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:09.154" status="PASS" endtime="20161110 16:35:09.156"></status>
</kw>
<status starttime="20161110 16:35:09.154" status="PASS" endtime="20161110 16:35:09.156"></status>
</kw>
<status starttime="20161110 16:35:09.151" status="PASS" endtime="20161110 16:35:09.156"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:09.156">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:06.940" status="PASS" endtime="20161110 16:35:09.156"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:09.157">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:09.157" status="PASS" endtime="20161110 16:35:09.157"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:09.158">${status} = True</msg>
<status starttime="20161110 16:35:09.157" status="PASS" endtime="20161110 16:35:09.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 16:35:09.158" status="PASS" endtime="20161110 16:35:09.161"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:09.165">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 11724, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12021, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 12224, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 20149, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 20149, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 23275, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 20149, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 20149, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 29000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 958, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 960, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1028, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1030, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1304, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:35:09.166">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 16:35:09.166">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status starttime="20161110 16:35:09.161" status="PASS" endtime="20161110 16:35:09.166"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:09.168" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_sensor_list"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_sensor_list&lt;/a&gt;'.</msg>
<status starttime="20161110 16:35:09.167" status="PASS" endtime="20161110 16:35:09.168"></status>
</kw>
<status starttime="20161110 16:35:09.166" status="PASS" endtime="20161110 16:35:09.168"></status>
</kw>
<status starttime="20161110 16:35:06.938" status="PASS" endtime="20161110 16:35:09.168"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:09.169">${logpath} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_record_log</msg>
<status starttime="20161110 16:35:09.168" status="PASS" endtime="20161110 16:35:09.169"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:09.170">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20161110 16:35:09.169" status="PASS" endtime="20161110 16:35:09.170"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:09.171">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 16:35:09.171" status="PASS" endtime="20161110 16:35:09.171"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:09.172">URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 16:35:09.172" status="PASS" endtime="20161110 16:35:09.172"></status>
</kw>
<status starttime="20161110 16:35:09.172" status="PASS" endtime="20161110 16:35:09.173"></status>
</kw>
<status starttime="20161110 16:35:09.170" status="PASS" endtime="20161110 16:35:09.173"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:09.174">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:35:09.173" status="PASS" endtime="20161110 16:35:09.174"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:09.174">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:09.174" status="PASS" endtime="20161110 16:35:09.174"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:09.175">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:35:09.175" status="PASS" endtime="20161110 16:35:09.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:09.176">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:35:09.175" status="PASS" endtime="20161110 16:35:09.176"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:09.522">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:09.523">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:09.176" status="PASS" endtime="20161110 16:35:09.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:09.523">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:09.523" status="PASS" endtime="20161110 16:35:09.523"></status>
</kw>
<status starttime="20161110 16:35:09.173" status="PASS" endtime="20161110 16:35:09.523"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.405">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:35:11.405">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:09.524" status="PASS" endtime="20161110 16:35:11.405"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.408">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/269": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chass...</msg>
<status starttime="20161110 16:35:11.407" status="PASS" endtime="20161110 16:35:11.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.410">Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/269": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 20:02:12"
    }, 
    "/org/openbmc/records/events/269/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/271": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 20:02:17"
    }, 
    "/org/openbmc/records/events/271/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:11.410" status="PASS" endtime="20161110 16:35:11.410"></status>
</kw>
<status starttime="20161110 16:35:11.409" status="PASS" endtime="20161110 16:35:11.411"></status>
</kw>
<status starttime="20161110 16:35:11.406" status="PASS" endtime="20161110 16:35:11.411"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:11.412">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:09.169" status="PASS" endtime="20161110 16:35:11.412"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.414">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:11.413" status="PASS" endtime="20161110 16:35:11.414"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:11.414">${status} = True</msg>
<status starttime="20161110 16:35:11.412" status="PASS" endtime="20161110 16:35:11.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 16:35:11.415" status="PASS" endtime="20161110 16:35:11.419"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.420">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/269": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 20:02:12"
    }, 
    "/org/openbmc/records/events/269/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/271": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 20:02:17"
    }, 
    "/org/openbmc/records/events/271/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:35:11.420">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 16:35:11.421">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/269": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status starttime="20161110 16:35:11.420" status="PASS" endtime="20161110 16:35:11.421"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.422" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_record_log"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_record_log&lt;/a&gt;'.</msg>
<status starttime="20161110 16:35:11.422" status="PASS" endtime="20161110 16:35:11.422"></status>
</kw>
<status starttime="20161110 16:35:11.421" status="PASS" endtime="20161110 16:35:11.423"></status>
</kw>
<status starttime="20161110 16:35:09.168" status="PASS" endtime="20161110 16:35:11.423"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.423">${logpath} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_led</msg>
<status starttime="20161110 16:35:11.423" status="PASS" endtime="20161110 16:35:11.423"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.425">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20161110 16:35:11.424" status="PASS" endtime="20161110 16:35:11.425"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.426">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 16:35:11.425" status="PASS" endtime="20161110 16:35:11.426"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.427">URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 16:35:11.427" status="PASS" endtime="20161110 16:35:11.427"></status>
</kw>
<status starttime="20161110 16:35:11.426" status="PASS" endtime="20161110 16:35:11.427"></status>
</kw>
<status starttime="20161110 16:35:11.425" status="PASS" endtime="20161110 16:35:11.427"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.428">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:35:11.428" status="PASS" endtime="20161110 16:35:11.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:11.429" status="PASS" endtime="20161110 16:35:11.429"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.430">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:35:11.429" status="PASS" endtime="20161110 16:35:11.430"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.430">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:35:11.430" status="PASS" endtime="20161110 16:35:11.430"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.763">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:11.763">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:11.431" status="PASS" endtime="20161110 16:35:11.763"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:11.764" status="PASS" endtime="20161110 16:35:11.765"></status>
</kw>
<status starttime="20161110 16:35:11.427" status="PASS" endtime="20161110 16:35:11.765"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.954">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:35:11.954">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:11.765" status="PASS" endtime="20161110 16:35:11.954"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.956">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK...</msg>
<status starttime="20161110 16:35:11.955" status="PASS" endtime="20161110 16:35:11.956"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.958">Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:11.957" status="PASS" endtime="20161110 16:35:11.958"></status>
</kw>
<status starttime="20161110 16:35:11.956" status="PASS" endtime="20161110 16:35:11.958"></status>
</kw>
<status starttime="20161110 16:35:11.954" status="PASS" endtime="20161110 16:35:11.958"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:11.959">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:11.423" status="PASS" endtime="20161110 16:35:11.959"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:11.960" status="PASS" endtime="20161110 16:35:11.960"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:11.961">${status} = True</msg>
<status starttime="20161110 16:35:11.959" status="PASS" endtime="20161110 16:35:11.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 16:35:11.961" status="PASS" endtime="20161110 16:35:11.966"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.966">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:35:11.966">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 16:35:11.967">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status starttime="20161110 16:35:11.966" status="PASS" endtime="20161110 16:35:11.967"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.968" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_led"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_led&lt;/a&gt;'.</msg>
<status starttime="20161110 16:35:11.967" status="PASS" endtime="20161110 16:35:11.968"></status>
</kw>
<status starttime="20161110 16:35:11.967" status="PASS" endtime="20161110 16:35:11.968"></status>
</kw>
<status starttime="20161110 16:35:11.423" status="PASS" endtime="20161110 16:35:11.968"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.969">${logpath} = /tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_inventory</msg>
<status starttime="20161110 16:35:11.968" status="PASS" endtime="20161110 16:35:11.969"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.970">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status starttime="20161110 16:35:11.969" status="PASS" endtime="20161110 16:35:11.970"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.971">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 16:35:11.970" status="PASS" endtime="20161110 16:35:11.971"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.972">URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 16:35:11.972" status="PASS" endtime="20161110 16:35:11.972"></status>
</kw>
<status starttime="20161110 16:35:11.971" status="PASS" endtime="20161110 16:35:11.972"></status>
</kw>
<status starttime="20161110 16:35:11.970" status="PASS" endtime="20161110 16:35:11.972"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:11.973">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:35:11.973" status="PASS" endtime="20161110 16:35:11.973"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:11.974" status="PASS" endtime="20161110 16:35:11.974"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.974">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:35:11.974" status="PASS" endtime="20161110 16:35:11.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:11.975">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:35:11.975" status="PASS" endtime="20161110 16:35:11.975"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:12.302">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:12.302">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:11.976" status="PASS" endtime="20161110 16:35:12.302"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:12.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:12.302" status="PASS" endtime="20161110 16:35:12.303"></status>
</kw>
<status starttime="20161110 16:35:11.972" status="PASS" endtime="20161110 16:35:12.303"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:16.475">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:35:16.476">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:12.303" status="PASS" endtime="20161110 16:35:16.476"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:16.478">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-op...</msg>
<status starttime="20161110 16:35:16.477" status="PASS" endtime="20161110 16:35:16.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:16.479">Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g17b02f3-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/269"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/271"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/271"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "ECID:019C0097401407181C1D0000006D0391", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "ECID:019C009740140718141D000000350461", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "ECID:019C0097401407181C1C0000003A03C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "ECID:019C009740140718221D000000300481", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:16.479" status="PASS" endtime="20161110 16:35:16.480"></status>
</kw>
<status starttime="20161110 16:35:16.478" status="PASS" endtime="20161110 16:35:16.480"></status>
</kw>
<status starttime="20161110 16:35:16.476" status="PASS" endtime="20161110 16:35:16.480"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:16.481">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:11.969" status="PASS" endtime="20161110 16:35:16.481"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:16.482">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:16.481" status="PASS" endtime="20161110 16:35:16.482"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:16.482">${status} = True</msg>
<status starttime="20161110 16:35:16.481" status="PASS" endtime="20161110 16:35:16.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 16:35:16.482" status="PASS" endtime="20161110 16:35:16.485"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:16.490">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g17b02f3-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/269"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/271"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/271"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "ECID:019C0097401407181C1D0000006D0391", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "ECID:019C009740140718141D000000350461", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "ECID:019C0097401407181C1C0000003A03C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "ECID:019C009740140718221D000000300481", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:35:16.491">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 16:35:16.492">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-81b8d98",
            "Custom Field 2": "\tskiboot-5.3.2-opdirty...</msg>
<status starttime="20161110 16:35:16.486" status="PASS" endtime="20161110 16:35:16.492"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:16.493" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_inventory"&gt;/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest/20161110163423471922_BMC_inventory&lt;/a&gt;'.</msg>
<status starttime="20161110 16:35:16.493" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:35:16.492" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:35:11.968" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:35:06.938" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:35:06.936" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:35:06.936" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:35:06.936" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:34:59.686" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:34:59.686" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:34:59.685" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:34:59.685" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:34:23.523" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:34:23.522" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:34:23.522" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:34:23.522" status="PASS" endtime="20161110 16:35:16.494"></status>
</kw>
<status starttime="20161110 16:34:23.521" status="PASS" endtime="20161110 16:35:16.495"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:16.496">${cur_time} = 2016-11-10 16:35:16:495402</msg>
<status starttime="20161110 16:35:16.495" status="PASS" endtime="20161110 16:35:16.496"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:16.496">${cur_time} = 20161110163516495402</msg>
<status starttime="20161110 16:35:16.496" status="PASS" endtime="20161110 16:35:16.496"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:16.496">${cur_time} = 20161110163516495402</msg>
<status starttime="20161110 16:35:16.495" status="PASS" endtime="20161110 16:35:16.496"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status starttime="20161110 16:35:16.496" status="PASS" endtime="20161110 16:35:16.497"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:16.497">
/tmp/root/5497/obmc-robot/logs/20161110163423471922_TestsTestBasicPoweron/20161110163423471922_powerontest</msg>
<status starttime="20161110 16:35:16.497" status="PASS" endtime="20161110 16:35:16.497"></status>
</kw>
<status starttime="20161110 16:34:23.471" status="PASS" endtime="20161110 16:35:16.497"></status>
</kw>
<status starttime="20161110 16:34:23.467" status="PASS" endtime="20161110 16:35:16.497"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:16.498" html="yes">Directory '&lt;a href="file:///tmp/root/5497/obmc-robot/logs"&gt;/tmp/root/5497/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 16:35:16.498" status="PASS" endtime="20161110 16:35:16.498"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:16.499" html="yes">File '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 16:35:16.499" status="PASS" endtime="20161110 16:35:16.499"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:16.499">${exist} = True</msg>
<status starttime="20161110 16:35:16.498" status="PASS" endtime="20161110 16:35:16.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 16:35:16.500" status="PASS" endtime="20161110 16:35:16.502"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:16.503">${cur_time} = 2016-11-10 16:35:16:502982</msg>
<status starttime="20161110 16:35:16.503" status="PASS" endtime="20161110 16:35:16.503"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:16.504">${cur_time} = 20161110163516502982</msg>
<status starttime="20161110 16:35:16.503" status="PASS" endtime="20161110 16:35:16.504"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:16.504">${cur_time} = 20161110163516502982</msg>
<status starttime="20161110 16:35:16.502" status="PASS" endtime="20161110 16:35:16.504"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:16.505" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:35:16.504" status="PASS" endtime="20161110 16:35:16.505"></status>
</kw>
<status starttime="20161110 16:35:16.498" status="PASS" endtime="20161110 16:35:16.505"></status>
</kw>
<status starttime="20161110 16:34:23.467" status="PASS" endtime="20161110 16:35:16.505"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:35:16.507">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 16:35:16.506" status="FAIL" endtime="20161110 16:35:16.507"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:16.507">${has_host} = False</msg>
<status starttime="20161110 16:35:16.506" status="PASS" endtime="20161110 16:35:16.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 16:35:16.510" status="PASS" endtime="20161110 16:35:16.511"></status>
</kw>
<status starttime="20161110 16:35:16.508" status="PASS" endtime="20161110 16:35:16.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:16.514">${port_num} = 22</msg>
<status starttime="20161110 16:35:16.514" status="PASS" endtime="20161110 16:35:16.514"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:16.515">${SSH_PORT} = 22</msg>
<status starttime="20161110 16:35:16.515" status="PASS" endtime="20161110 16:35:16.515"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:16.515">${https_num} = 443</msg>
<status starttime="20161110 16:35:16.515" status="PASS" endtime="20161110 16:35:16.515"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:16.516">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 16:35:16.516" status="PASS" endtime="20161110 16:35:16.516"></status>
</kw>
<status starttime="20161110 16:35:16.514" status="PASS" endtime="20161110 16:35:16.516"></status>
</kw>
<status starttime="20161110 16:35:16.511" status="PASS" endtime="20161110 16:35:16.516"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:35:16.517">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 16:35:16.517" status="FAIL" endtime="20161110 16:35:16.517"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:16.517">${has_port} = False</msg>
<status starttime="20161110 16:35:16.517" status="PASS" endtime="20161110 16:35:16.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 16:35:16.521" status="PASS" endtime="20161110 16:35:16.521"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 16:35:16.521" status="PASS" endtime="20161110 16:35:16.522"></status>
</kw>
<status starttime="20161110 16:35:16.521" status="PASS" endtime="20161110 16:35:16.522"></status>
</kw>
<status starttime="20161110 16:35:16.518" status="PASS" endtime="20161110 16:35:16.522"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:16.522">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 16:35:20.832">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 16:35:16.522" status="PASS" endtime="20161110 16:35:20.832"></status>
</kw>
<status starttime="20161110 16:35:16.506" status="PASS" endtime="20161110 16:35:20.832"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:20.833">Executing command 'ls /tmp/obmc-console.log-20161110161845416122_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161110 16:35:20.952">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:35:20.953">${pid} = 931</msg>
<msg level="INFO" timestamp="20161110 16:35:20.953">${stderr} = </msg>
<status starttime="20161110 16:35:20.833" status="PASS" endtime="20161110 16:35:20.953"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:20.953">Length is 0</msg>
<status starttime="20161110 16:35:20.953" status="PASS" endtime="20161110 16:35:20.953"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:20.954">Executing command 'ps ax | grep 931 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161110 16:35:21.376">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:35:21.376">${rc} = 0</msg>
<status starttime="20161110 16:35:20.954" status="PASS" endtime="20161110 16:35:21.376"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status starttime="20161110 16:35:21.377" status="PASS" endtime="20161110 16:35:21.381"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:21.382">Executing command 'kill -s KILL 931'.</msg>
<msg level="INFO" timestamp="20161110 16:35:21.702">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:35:21.702">${console} = </msg>
<msg level="INFO" timestamp="20161110 16:35:21.702">${stderr} = </msg>
<status starttime="20161110 16:35:21.382" status="PASS" endtime="20161110 16:35:21.702"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:21.703">Length is 0</msg>
<status starttime="20161110 16:35:21.703" status="PASS" endtime="20161110 16:35:21.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:21.704">Current Client PID:931</msg>
<status starttime="20161110 16:35:21.703" status="PASS" endtime="20161110 16:35:21.704"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:21.705">Executing command 'cat /tmp/obmc-console.log-20161110161845416122_931'.</msg>
<msg level="INFO" timestamp="20161110 16:35:25.722">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 16:35:25.723">${console} = </msg>
<msg level="INFO" timestamp="20161110 16:35:25.723">${stderr} = </msg>
<status starttime="20161110 16:35:21.704" status="PASS" endtime="20161110 16:35:25.724"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:25.725">Length is 0</msg>
<status starttime="20161110 16:35:25.724" status="PASS" endtime="20161110 16:35:25.725"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:25.725">${sol_log} = </msg>
<status starttime="20161110 16:35:16.505" status="PASS" endtime="20161110 16:35:25.725"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:25.726"></msg>
<status starttime="20161110 16:35:25.726" status="PASS" endtime="20161110 16:35:25.726"></status>
</kw>
<status starttime="20161110 16:34:23.466" status="PASS" endtime="20161110 16:35:25.727"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status starttime="20161110 16:18:41.014" status="FAIL" endtime="20161110 16:35:25.727" critical="yes">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status starttime="20161110 16:18:40.990" status="FAIL" endtime="20161110 16:35:25.729"></status>
</suite>
<suite id="s1-s4" name="Test Eventlog" source="/tmp/root/5497/obmc-robot/tests/test_eventlog.robot">
<kw name="Open Connection And Log In" type="setup" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:35:25.757">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 16:35:25.756" status="FAIL" endtime="20161110 16:35:25.757"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:25.757">${has_host} = False</msg>
<status starttime="20161110 16:35:25.756" status="PASS" endtime="20161110 16:35:25.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 16:35:25.761" status="PASS" endtime="20161110 16:35:25.762"></status>
</kw>
<status starttime="20161110 16:35:25.757" status="PASS" endtime="20161110 16:35:25.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:25.767">${port_num} = 22</msg>
<status starttime="20161110 16:35:25.766" status="PASS" endtime="20161110 16:35:25.767"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:25.767">${SSH_PORT} = 22</msg>
<status starttime="20161110 16:35:25.767" status="PASS" endtime="20161110 16:35:25.768"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:25.768">${https_num} = 443</msg>
<status starttime="20161110 16:35:25.768" status="PASS" endtime="20161110 16:35:25.768"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:25.769">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 16:35:25.769" status="PASS" endtime="20161110 16:35:25.769"></status>
</kw>
<status starttime="20161110 16:35:25.766" status="PASS" endtime="20161110 16:35:25.769"></status>
</kw>
<status starttime="20161110 16:35:25.762" status="PASS" endtime="20161110 16:35:25.769"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 16:35:25.770">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 16:35:25.770" status="FAIL" endtime="20161110 16:35:25.770"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:25.770">${has_port} = False</msg>
<status starttime="20161110 16:35:25.769" status="PASS" endtime="20161110 16:35:25.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 16:35:25.774" status="PASS" endtime="20161110 16:35:25.774"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 16:35:25.774" status="PASS" endtime="20161110 16:35:25.775"></status>
</kw>
<status starttime="20161110 16:35:25.774" status="PASS" endtime="20161110 16:35:25.775"></status>
</kw>
<status starttime="20161110 16:35:25.770" status="PASS" endtime="20161110 16:35:25.775"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:25.775">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 16:35:29.308">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 16:35:25.775" status="PASS" endtime="20161110 16:35:29.309"></status>
</kw>
<status starttime="20161110 16:35:25.755" status="PASS" endtime="20161110 16:35:29.309"></status>
</kw>
<test id="s1-s4-t1" name="clear any logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.312">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161110 16:35:29.311" status="PASS" endtime="20161110 16:35:29.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.313">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:29.312" status="PASS" endtime="20161110 16:35:29.313"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:35:29.313" status="PASS" endtime="20161110 16:35:29.314"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.316">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:35:29.315" status="PASS" endtime="20161110 16:35:29.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:29.318">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:35:29.317" status="PASS" endtime="20161110 16:35:29.318"></status>
</kw>
<status starttime="20161110 16:35:29.316" status="PASS" endtime="20161110 16:35:29.318"></status>
</kw>
<status starttime="20161110 16:35:29.314" status="PASS" endtime="20161110 16:35:29.318"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:29.320">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:35:29.319" status="PASS" endtime="20161110 16:35:29.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.321">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:29.321" status="PASS" endtime="20161110 16:35:29.322"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.322">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:35:29.322" status="PASS" endtime="20161110 16:35:29.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.324">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:35:29.323" status="PASS" endtime="20161110 16:35:29.324"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.657">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:29.657">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:29.324" status="PASS" endtime="20161110 16:35:29.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:29.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:29.658" status="PASS" endtime="20161110 16:35:29.658"></status>
</kw>
<status starttime="20161110 16:35:29.318" status="PASS" endtime="20161110 16:35:29.659"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.916">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:29.917">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:29.659" status="PASS" endtime="20161110 16:35:29.917"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.919">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:29.918" status="PASS" endtime="20161110 16:35:29.919"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:29.920">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:29.920" status="PASS" endtime="20161110 16:35:29.920"></status>
</kw>
<status starttime="20161110 16:35:29.919" status="PASS" endtime="20161110 16:35:29.920"></status>
</kw>
<status starttime="20161110 16:35:29.917" status="PASS" endtime="20161110 16:35:29.921"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:29.921">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:29.310" status="PASS" endtime="20161110 16:35:29.921"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:29.922">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:29.921" status="PASS" endtime="20161110 16:35:29.922"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.924">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 16:35:29.923" status="PASS" endtime="20161110 16:35:29.924"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.926">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 16:35:29.925" status="PASS" endtime="20161110 16:35:29.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:29.927">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 16:35:29.926" status="PASS" endtime="20161110 16:35:29.927"></status>
</kw>
<status starttime="20161110 16:35:29.926" status="PASS" endtime="20161110 16:35:29.927"></status>
</kw>
<status starttime="20161110 16:35:29.924" status="PASS" endtime="20161110 16:35:29.927"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:29.928">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:35:29.928" status="PASS" endtime="20161110 16:35:29.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.929">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:29.928" status="PASS" endtime="20161110 16:35:29.929"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.929">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:35:29.929" status="PASS" endtime="20161110 16:35:29.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:29.930">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:35:29.929" status="PASS" endtime="20161110 16:35:29.930"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.379">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:30.380">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:29.930" status="PASS" endtime="20161110 16:35:30.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:30.380">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:30.380" status="PASS" endtime="20161110 16:35:30.380"></status>
</kw>
<status starttime="20161110 16:35:29.927" status="PASS" endtime="20161110 16:35:30.381"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.573">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:35:30.573">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:30.381" status="PASS" endtime="20161110 16:35:30.573"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.575">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:30.574" status="PASS" endtime="20161110 16:35:30.575"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:30.576">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:30.575" status="PASS" endtime="20161110 16:35:30.576"></status>
</kw>
<status starttime="20161110 16:35:30.575" status="PASS" endtime="20161110 16:35:30.576"></status>
</kw>
<status starttime="20161110 16:35:30.574" status="PASS" endtime="20161110 16:35:30.576"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:30.576">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:29.922" status="PASS" endtime="20161110 16:35:30.576"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.577">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:35:30.577">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:35:30.577">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:35:30.577" status="PASS" endtime="20161110 16:35:30.577"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:30.578">Length is 0</msg>
<status starttime="20161110 16:35:30.578" status="PASS" endtime="20161110 16:35:30.578"></status>
</kw>
<kw name="Log FFDC" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 16:35:30.579" status="PASS" endtime="20161110 16:35:30.584"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:30.585" html="yes">Directory '&lt;a href="file:///tmp/root/5497/obmc-robot/logs"&gt;/tmp/root/5497/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 16:35:30.585" status="PASS" endtime="20161110 16:35:30.585"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:30.586" html="yes">File '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 16:35:30.586" status="PASS" endtime="20161110 16:35:30.586"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:30.586">${exist} = True</msg>
<status starttime="20161110 16:35:30.586" status="PASS" endtime="20161110 16:35:30.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 16:35:30.587" status="PASS" endtime="20161110 16:35:30.590"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.591">${cur_time} = 2016-11-10 16:35:30:590438</msg>
<status starttime="20161110 16:35:30.590" status="PASS" endtime="20161110 16:35:30.591"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.591">${cur_time} = 20161110163530590438</msg>
<status starttime="20161110 16:35:30.591" status="PASS" endtime="20161110 16:35:30.591"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:30.591">${cur_time} = 20161110163530590438</msg>
<status starttime="20161110 16:35:30.590" status="PASS" endtime="20161110 16:35:30.591"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:30.592" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:35:30.592" status="PASS" endtime="20161110 16:35:30.592"></status>
</kw>
<status starttime="20161110 16:35:30.584" status="PASS" endtime="20161110 16:35:30.592"></status>
</kw>
<status starttime="20161110 16:35:30.579" status="PASS" endtime="20161110 16:35:30.592"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status starttime="20161110 16:35:29.309" status="PASS" endtime="20161110 16:35:30.592" critical="yes"></status>
</test>
<test id="s1-s4-t2" name="write a log">
<kw name="create a test log">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.594">${data} = {u'data': []}</msg>
<status starttime="20161110 16:35:30.593" status="PASS" endtime="20161110 16:35:30.594"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.595">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161110 16:35:30.595" status="PASS" endtime="20161110 16:35:30.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.596">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:30.595" status="PASS" endtime="20161110 16:35:30.596"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 16:35:30.597" status="PASS" endtime="20161110 16:35:30.601"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.611">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:35:30.609" status="PASS" endtime="20161110 16:35:30.611"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:30.616">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 16:35:30.615" status="PASS" endtime="20161110 16:35:30.616"></status>
</kw>
<status starttime="20161110 16:35:30.611" status="PASS" endtime="20161110 16:35:30.616"></status>
</kw>
<status starttime="20161110 16:35:30.603" status="PASS" endtime="20161110 16:35:30.616"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:30.619">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:35:30.619" status="PASS" endtime="20161110 16:35:30.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.622">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:30.621" status="PASS" endtime="20161110 16:35:30.622"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.624">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:35:30.622" status="PASS" endtime="20161110 16:35:30.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:30.625">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:35:30.625" status="PASS" endtime="20161110 16:35:30.625"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.000">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:31.000">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:30.626" status="PASS" endtime="20161110 16:35:31.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:31.001">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:31.000" status="PASS" endtime="20161110 16:35:31.001"></status>
</kw>
<status starttime="20161110 16:35:30.617" status="PASS" endtime="20161110 16:35:31.001"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.325">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:31.326">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:31.001" status="PASS" endtime="20161110 16:35:31.326"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.327">${msg} = Response code:200, Content:{
  "data": 272, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:31.326" status="PASS" endtime="20161110 16:35:31.327"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:31.328">Response code:200, Content:{
  "data": 272, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:31.328" status="PASS" endtime="20161110 16:35:31.328"></status>
</kw>
<status starttime="20161110 16:35:31.327" status="PASS" endtime="20161110 16:35:31.328"></status>
</kw>
<status starttime="20161110 16:35:31.326" status="PASS" endtime="20161110 16:35:31.328"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:31.332">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:30.594" status="PASS" endtime="20161110 16:35:31.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:31.340">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:31.337" status="PASS" endtime="20161110 16:35:31.340"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.340">To JSON using : content={
  "data": 272, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:35:31.340">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:35:31.341">${json} = {u'data': 272, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:35:31.340" status="PASS" endtime="20161110 16:35:31.341"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.341">${LOGID} = 272</msg>
<status starttime="20161110 16:35:31.341" status="PASS" endtime="20161110 16:35:31.341"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.342">${uri} = /org/openbmc/records/events/272</msg>
<status starttime="20161110 16:35:31.341" status="PASS" endtime="20161110 16:35:31.344"></status>
</kw>
<status starttime="20161110 16:35:30.593" status="PASS" endtime="20161110 16:35:31.345"></status>
</kw>
<kw name="Log FFDC" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 16:35:31.346" status="PASS" endtime="20161110 16:35:31.352"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:31.353" html="yes">Directory '&lt;a href="file:///tmp/root/5497/obmc-robot/logs"&gt;/tmp/root/5497/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 16:35:31.353" status="PASS" endtime="20161110 16:35:31.353"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:31.357" html="yes">File '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 16:35:31.354" status="PASS" endtime="20161110 16:35:31.357"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:31.357">${exist} = True</msg>
<status starttime="20161110 16:35:31.354" status="PASS" endtime="20161110 16:35:31.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 16:35:31.357" status="PASS" endtime="20161110 16:35:31.360"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.360">${cur_time} = 2016-11-10 16:35:31:360224</msg>
<status starttime="20161110 16:35:31.360" status="PASS" endtime="20161110 16:35:31.360"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.361">${cur_time} = 20161110163531360224</msg>
<status starttime="20161110 16:35:31.361" status="PASS" endtime="20161110 16:35:31.361"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:31.361">${cur_time} = 20161110163531360224</msg>
<status starttime="20161110 16:35:31.360" status="PASS" endtime="20161110 16:35:31.361"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:31.362" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:35:31.361" status="PASS" endtime="20161110 16:35:31.362"></status>
</kw>
<status starttime="20161110 16:35:31.352" status="PASS" endtime="20161110 16:35:31.362"></status>
</kw>
<status starttime="20161110 16:35:31.346" status="PASS" endtime="20161110 16:35:31.362"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status starttime="20161110 16:35:30.593" status="PASS" endtime="20161110 16:35:31.362" critical="yes"></status>
</test>
<kw name="Close All Connections" type="teardown" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20161110 16:35:31.363" status="PASS" endtime="20161110 16:35:31.723"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status starttime="20161110 16:35:25.732" status="PASS" endtime="20161110 16:35:31.723"></status>
</suite>
<suite id="s1-s5" name="Test Obmcrest" source="/tmp/root/5497/obmc-robot/tests/test_obmcrest.robot">
<test id="s1-s5-t1" name="Good connection for testing">
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.750">${base_uri} = /</msg>
<status starttime="20161110 16:35:31.750" status="PASS" endtime="20161110 16:35:31.750"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.752">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 16:35:31.752" status="PASS" endtime="20161110 16:35:31.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:31.753">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 16:35:31.753" status="PASS" endtime="20161110 16:35:31.753"></status>
</kw>
<status starttime="20161110 16:35:31.753" status="PASS" endtime="20161110 16:35:31.753"></status>
</kw>
<status starttime="20161110 16:35:31.751" status="PASS" endtime="20161110 16:35:31.754"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:31.754">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:35:31.754" status="PASS" endtime="20161110 16:35:31.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:31.755" status="PASS" endtime="20161110 16:35:31.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.756">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:35:31.755" status="PASS" endtime="20161110 16:35:31.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:31.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:35:31.756" status="PASS" endtime="20161110 16:35:31.756"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.088">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:32.089">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:31.757" status="PASS" endtime="20161110 16:35:32.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.089">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:32.089" status="PASS" endtime="20161110 16:35:32.089"></status>
</kw>
<status starttime="20161110 16:35:31.754" status="PASS" endtime="20161110 16:35:32.090"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.150">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:35:32.150">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:32.090" status="PASS" endtime="20161110 16:35:32.150"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.151">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:32.151" status="PASS" endtime="20161110 16:35:32.152"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.152">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:32.152" status="PASS" endtime="20161110 16:35:32.152"></status>
</kw>
<status starttime="20161110 16:35:32.152" status="PASS" endtime="20161110 16:35:32.153"></status>
</kw>
<status starttime="20161110 16:35:32.151" status="PASS" endtime="20161110 16:35:32.153"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:32.153">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:31.750" status="PASS" endtime="20161110 16:35:32.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.154">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:32.154" status="PASS" endtime="20161110 16:35:32.154"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.155">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:35:32.155">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:35:32.155">${content} = {u'data': [u'/org'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:35:32.154" status="PASS" endtime="20161110 16:35:32.155"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:32.155">${content} = [u'/org']</msg>
<status starttime="20161110 16:35:31.749" status="PASS" endtime="20161110 16:35:32.155"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${content}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${c}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.156">${c} = /org</msg>
<status starttime="20161110 16:35:32.155" status="PASS" endtime="20161110 16:35:32.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${c}</arg>
<arg>/org</arg>
</arguments>
<status starttime="20161110 16:35:32.156" status="PASS" endtime="20161110 16:35:32.156"></status>
</kw>
<kw name="Log FFDC" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 16:35:32.157" status="PASS" endtime="20161110 16:35:32.159"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.160" html="yes">Directory '&lt;a href="file:///tmp/root/5497/obmc-robot/logs"&gt;/tmp/root/5497/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 16:35:32.160" status="PASS" endtime="20161110 16:35:32.160"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.161" html="yes">File '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 16:35:32.161" status="PASS" endtime="20161110 16:35:32.161"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:32.161">${exist} = True</msg>
<status starttime="20161110 16:35:32.161" status="PASS" endtime="20161110 16:35:32.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 16:35:32.161" status="PASS" endtime="20161110 16:35:32.164"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.165">${cur_time} = 2016-11-10 16:35:32:164693</msg>
<status starttime="20161110 16:35:32.165" status="PASS" endtime="20161110 16:35:32.165"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.165">${cur_time} = 20161110163532164693</msg>
<status starttime="20161110 16:35:32.165" status="PASS" endtime="20161110 16:35:32.165"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:32.166">${cur_time} = 20161110163532164693</msg>
<status starttime="20161110 16:35:32.164" status="PASS" endtime="20161110 16:35:32.166"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.166" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:35:32.166" status="PASS" endtime="20161110 16:35:32.166"></status>
</kw>
<status starttime="20161110 16:35:32.159" status="PASS" endtime="20161110 16:35:32.167"></status>
</kw>
<status starttime="20161110 16:35:32.156" status="PASS" endtime="20161110 16:35:32.167"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>Good_connection_for_testing</tag>
</tags>
<status starttime="20161110 16:35:31.748" status="PASS" endtime="20161110 16:35:32.167" critical="yes"></status>
</test>
<test id="s1-s5-t2" name="get directory listing /">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.168">${base_uri} = /</msg>
<status starttime="20161110 16:35:32.168" status="PASS" endtime="20161110 16:35:32.168"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.170">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 16:35:32.169" status="PASS" endtime="20161110 16:35:32.170"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.171">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 16:35:32.171" status="PASS" endtime="20161110 16:35:32.171"></status>
</kw>
<status starttime="20161110 16:35:32.170" status="PASS" endtime="20161110 16:35:32.171"></status>
</kw>
<status starttime="20161110 16:35:32.168" status="PASS" endtime="20161110 16:35:32.171"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.172">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 16:35:32.172" status="PASS" endtime="20161110 16:35:32.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.173">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 16:35:32.172" status="PASS" endtime="20161110 16:35:32.173"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.173">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 16:35:32.173" status="PASS" endtime="20161110 16:35:32.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.174">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 16:35:32.174" status="PASS" endtime="20161110 16:35:32.174"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 16:35:32.503">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:32.174" status="PASS" endtime="20161110 16:35:32.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:32.503" status="PASS" endtime="20161110 16:35:32.504"></status>
</kw>
<status starttime="20161110 16:35:32.171" status="PASS" endtime="20161110 16:35:32.504"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.566">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161110 16:35:32.566">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:32.504" status="PASS" endtime="20161110 16:35:32.566"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.568">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:32.567" status="PASS" endtime="20161110 16:35:32.568"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.569">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 16:35:32.569" status="PASS" endtime="20161110 16:35:32.570"></status>
</kw>
<status starttime="20161110 16:35:32.568" status="PASS" endtime="20161110 16:35:32.570"></status>
</kw>
<status starttime="20161110 16:35:32.566" status="PASS" endtime="20161110 16:35:32.570"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:32.570">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 16:35:32.168" status="PASS" endtime="20161110 16:35:32.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 16:35:32.571" status="PASS" endtime="20161110 16:35:32.571"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.572">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 16:35:32.572">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 16:35:32.572">${json} = {u'data': [u'/org'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 16:35:32.572" status="PASS" endtime="20161110 16:35:32.572"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${json['data']}</arg>
<arg>/org</arg>
</arguments>
<status starttime="20161110 16:35:32.573" status="PASS" endtime="20161110 16:35:32.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json['status']}</arg>
<arg>ok</arg>
</arguments>
<status starttime="20161110 16:35:32.574" status="PASS" endtime="20161110 16:35:32.574"></status>
</kw>
<kw name="Log FFDC" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 16:35:32.576" status="PASS" endtime="20161110 16:35:32.578"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.579" html="yes">Directory '&lt;a href="file:///tmp/root/5497/obmc-robot/logs"&gt;/tmp/root/5497/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 16:35:32.579" status="PASS" endtime="20161110 16:35:32.579"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.580" html="yes">File '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 16:35:32.580" status="PASS" endtime="20161110 16:35:32.580"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:32.580">${exist} = True</msg>
<status starttime="20161110 16:35:32.580" status="PASS" endtime="20161110 16:35:32.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 16:35:32.580" status="PASS" endtime="20161110 16:35:32.583"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.584">${cur_time} = 2016-11-10 16:35:32:583575</msg>
<status starttime="20161110 16:35:32.583" status="PASS" endtime="20161110 16:35:32.584"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 16:35:32.584">${cur_time} = 20161110163532583575</msg>
<status starttime="20161110 16:35:32.584" status="PASS" endtime="20161110 16:35:32.584"></status>
</kw>
<msg level="INFO" timestamp="20161110 16:35:32.584">${cur_time} = 20161110163532583575</msg>
<status starttime="20161110 16:35:32.583" status="PASS" endtime="20161110 16:35:32.584"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 16:35:32.585" html="yes">Appended to file '&lt;a href="file:///tmp/root/5497/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5497/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 16:35:32.585" status="PASS" endtime="20161110 16:35:32.585"></status>
</kw>
<status starttime="20161110 16:35:32.578" status="PASS" endtime="20161110 16:35:32.585"></status>
</kw>
<status starttime="20161110 16:35:32.575" status="PASS" endtime="20161110 16:35:32.585"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>get_directory_listing</tag>
</tags>
<status starttime="20161110 16:35:32.167" status="PASS" endtime="20161110 16:35:32.586" critical="yes"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status starttime="20161110 16:35:31.727" status="PASS" endtime="20161110 16:35:32.586"></status>
</suite>
<status starttime="20161110 16:18:21.881" status="FAIL" endtime="20161110 16:35:32.589"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="1">Critical Tests</stat>
<stat pass="7" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="4" fail="0">CI</stat>
<stat pass="1" fail="0">clear_any_logs</stat>
<stat pass="1" fail="0">Create_error_log_on_single_FRU</stat>
<stat pass="1" fail="0">Delete_error_log</stat>
<stat pass="1" fail="0">get_directory_listing</stat>
<stat pass="1" fail="0">Good_connection_for_testing</stat>
<stat pass="0" fail="1">power_on_test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
<stat pass="1" fail="0">write_a_log</stat>
</tag>
<suite>
<stat id="s1" name="Tests" pass="7" fail="1">Tests</stat>
<stat id="s1-s1" name="Security" pass="1" fail="0">Tests.Security</stat>
<stat id="s1-s1-s1" name="Test Ssl" pass="1" fail="0">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" name="Test Association" pass="2" fail="0">Tests.Test Association</stat>
<stat id="s1-s3" name="Test Basic Poweron" pass="0" fail="1">Tests.Test Basic Poweron</stat>
<stat id="s1-s4" name="Test Eventlog" pass="2" fail="0">Tests.Test Eventlog</stat>
<stat id="s1-s5" name="Test Obmcrest" pass="2" fail="0">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
