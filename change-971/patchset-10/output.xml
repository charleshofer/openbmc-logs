<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161110 17:26:16.958" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite name="Tests" id="s1" source="/tmp/root/30449/obmc-robot/tests">
<suite name="Security" id="s1-s1" source="/tmp/root/30449/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/root/30449/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>https://${OPENBMC_HOST}/</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:17.407">Creating Session using : alias=openbmc, url=https://9.3.23.30/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:17.407" status="PASS" endtime="20161110 17:26:17.408"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:17.408">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:17.408" status="PASS" endtime="20161110 17:26:17.408"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:17.409">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:17.408" status="PASS" endtime="20161110 17:26:17.409"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:17.409">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:17.409" status="PASS" endtime="20161110 17:26:17.409"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:17.774">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:17.774">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:17.410" status="PASS" endtime="20161110 17:26:17.774"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:18.316">Get Request using : alias=openbmc, uri=/list, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:26:18.317">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:17.774" status="PASS" endtime="20161110 17:26:18.317"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:18.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:18.317" status="PASS" endtime="20161110 17:26:18.318"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:18.319">To JSON using : content={
  "data": [
    "/org/openbmc/control", 
    "/org/openbmc/sensors/host/powercap", 
    "/org/openbmc/UserManager/Group", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28", 
    "/org/openbmc/control/power0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25", 
    "/org/openbmc/settings/host0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event", 
    "/org/openbmc/inventory/system/systemevent", 
    "/org/openbmc/sensors/host/cpu0/OccStatus", 
    "/org/openbmc/sensors/host/cpu1/OccStatus", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
    "/org/openbmc/control/checkstop0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7", 
    "/org/openbmc/sensors/tach/fan0L", 
    "/org/openbmc/inventory/system/chassis/sas_expander", 
    "/org/openbmc/sensors/tach/fan0H", 
    "/org/openbmc/watchdog", 
    "/org/openbmc/inventory/system/misc", 
    "/org/openbmc/UserManager/Users", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10", 
    "/org/openbmc/records/events", 
    "/org/openbmc/sensors/tach/fan1H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29", 
    "/org/openbmc/sensors/tach/fan1L", 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4", 
    "/org/openbmc/sensors/speed/fan1", 
    "/org/openbmc/sensors/speed/fan0", 
    "/org/openbmc/sensors/speed/fan3", 
    "/org/openbmc/sensors/speed/fan2", 
    "/org/openbmc/sensors/speed/fan5", 
    "/org/openbmc/sensors/speed/fan4", 
    "/org/openbmc/managers/Download", 
    "/org/openbmc/sensors/HSCA/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14", 
    "/org/openbmc/control/flash/bmc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2", 
    "/org/openbmc/records/events/272", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11", 
    "/org/openbmc/managers/System", 
    "/org/openbmc/control/led/identify", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9", 
    "/org/openbmc/control/bmc0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6", 
    "/org/openbmc/control/flash/bios", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3", 
    "/org/openbmc/control/fans", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2", 
    "/org/openbmc/watchdog/host0", 
    "/org/openbmc/inventory/system/chassis", 
    "/org/openbmc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1", 
    "/org/openbmc/HostServices", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5", 
    "/org/openbmc/buttons", 
    "/org/openbmc/control/host0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM1", 
    "/org/openbmc/sensors/voltage/P0V97_CPU0", 
    "/org/openbmc/sensors/voltage/P0V97_CPU1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12", 
    "/org/openbmc/inventory", 
    "/org/openbmc/sensors/tach/fan4H", 
    "/org/openbmc/sensors/tach/fan4L", 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock", 
    "/org/openbmc/control/led/heartbeat", 
    "/org/openbmc/control/flash", 
    "/org/openbmc/sensors/HSCB/Iout", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1", 
    "/org/openbmc/buttons/reset0", 
    "/org/openbmc/HostIpmi/1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1", 
    "/org/openbmc/control/led", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0", 
    "/org/openbmc/sensors/host/BootCount", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4", 
    "/org/openbmc/sensors/tach/fan5L", 
    "/org/openbmc/sensors/host/BootProgress", 
    "/org/openbmc/sensors/tach/fan5H", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4", 
    "/org/openbmc/records/events/272/fru", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3", 
    "/org/openbmc/control/chassis0", 
    "/org/openbmc/inventory/system/chassis/hdd_backplane", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7", 
    "/org/openbmc/buttons/power0", 
    "/org/openbmc/UserManager/Groups", 
    "/org/openbmc/sensors/HSCA/Iout", 
    "/org/openbmc/inventory/system", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8", 
    "/org/openbmc/inventory/system/bios", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser", 
    "/org/openbmc/sensors/host/OperatingSystemStatus", 
    "/org/openbmc/sensors/tach/fan2L", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2", 
    "/org/openbmc/control/led/beep", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0", 
    "/org/openbmc/sensors/tach/fan2H", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4", 
    "/org/openbmc/inventory/system/chassis/fan4", 
    "/org/openbmc/inventory/system/chassis/fan5", 
    "/org/openbmc/inventory/system/chassis/fan2", 
    "/org/openbmc/inventory/system/chassis/fan3", 
    "/org/openbmc/inventory/system/chassis/fan0", 
    "/org/openbmc/inventory/system/chassis/fan1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15", 
    "/org/openbmc/sensors/temperature/rtc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11", 
    "/org/openbmc/NetworkManager/Interface", 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10", 
    "/org/openbmc/inventory/system/chassis/motherboard/apss", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18", 
    "/org/openbmc/inventory/system/chassis/io_board", 
    "/org/openbmc/UserManager/User", 
    "/org/openbmc/sensors", 
    "/org/openbmc/sensors/temperature/ambient", 
    "/org/openbmc/sensors/HSCB/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1", 
    "/org/openbmc/inventory/system/chassis/motherboard", 
    "/org/openbmc/sensors/tach/fan3L", 
    "/org/openbmc/sensors/tach/fan3H"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:18.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:18.320">${jsondata} = {u'data': [u'/org/openbmc/control', u'/org/openbmc/sensors/host/powercap', u'/org/openbmc/UserManager/Group', u'/org/openbmc/inventory/system/chassis/io_board/pcie_slot2', u'/org/openbmc/inventory/sys...</msg>
<status starttime="20161110 17:26:18.318" status="PASS" endtime="20161110 17:26:18.320"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${jsondata}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:18.321">Length is 3</msg>
<status starttime="20161110 17:26:18.320" status="PASS" endtime="20161110 17:26:18.321"></status>
</kw>
<kw library="openbmc_ffdc" name="Log FFDC" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 17:26:18.322" status="PASS" endtime="20161110 17:26:18.326"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:26:18.328">Created directory '&lt;a href="file:///tmp/root/30449/obmc-robot/logs"&gt;/tmp/root/30449/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20161110 17:26:18.327" status="PASS" endtime="20161110 17:26:18.328"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:26:18.329">File '/tmp/root/30449/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20161110 17:26:18.329" status="FAIL" endtime="20161110 17:26:18.330"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:18.330">${exist} = False</msg>
<status starttime="20161110 17:26:18.328" status="PASS" endtime="20161110 17:26:18.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:26:18.334">Created file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:26:18.334" status="PASS" endtime="20161110 17:26:18.334"></status>
</kw>
<status starttime="20161110 17:26:18.330" status="PASS" endtime="20161110 17:26:18.334"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:18.335">${cur_time} = 2016-11-10 17:26:18:335083</msg>
<status starttime="20161110 17:26:18.335" status="PASS" endtime="20161110 17:26:18.335"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:18.336">${cur_time} = 20161110172618335083</msg>
<status starttime="20161110 17:26:18.336" status="PASS" endtime="20161110 17:26:18.336"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:18.336">${cur_time} = 20161110172618335083</msg>
<status starttime="20161110 17:26:18.335" status="PASS" endtime="20161110 17:26:18.336"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:26:18.337">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:26:18.336" status="PASS" endtime="20161110 17:26:18.337"></status>
</kw>
<status starttime="20161110 17:26:18.327" status="PASS" endtime="20161110 17:26:18.337"></status>
</kw>
<status starttime="20161110 17:26:18.321" status="PASS" endtime="20161110 17:26:18.337"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20161110 17:26:17.406" critical="yes" status="PASS" endtime="20161110 17:26:18.337"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161110 17:26:18.338">Delete All Sessions</msg>
<status starttime="20161110 17:26:18.338" status="PASS" endtime="20161110 17:26:18.338"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20161110 17:26:16.982" status="PASS" endtime="20161110 17:26:18.338"></status>
</suite>
<status starttime="20161110 17:26:16.981" status="PASS" endtime="20161110 17:26:18.340"></status>
</suite>
<suite name="Test Association" id="s1-s2" source="/tmp/root/30449/obmc-robot/tests/test_association.robot">
<kw name="Suite Initialization Setup" type="setup">
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:26:18.363">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 17:26:18.363" status="FAIL" endtime="20161110 17:26:18.363"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:18.363">${has_host} = False</msg>
<status starttime="20161110 17:26:18.362" status="PASS" endtime="20161110 17:26:18.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 17:26:18.375" status="PASS" endtime="20161110 17:26:18.375"></status>
</kw>
<status starttime="20161110 17:26:18.372" status="PASS" endtime="20161110 17:26:18.375"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:18.379">${port_num} = 22</msg>
<status starttime="20161110 17:26:18.379" status="PASS" endtime="20161110 17:26:18.379"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:18.379">${SSH_PORT} = 22</msg>
<status starttime="20161110 17:26:18.379" status="PASS" endtime="20161110 17:26:18.380"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:18.380">${https_num} = 443</msg>
<status starttime="20161110 17:26:18.380" status="PASS" endtime="20161110 17:26:18.380"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:18.381">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 17:26:18.380" status="PASS" endtime="20161110 17:26:18.381"></status>
</kw>
<status starttime="20161110 17:26:18.378" status="PASS" endtime="20161110 17:26:18.381"></status>
</kw>
<status starttime="20161110 17:26:18.376" status="PASS" endtime="20161110 17:26:18.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:26:18.382">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 17:26:18.381" status="FAIL" endtime="20161110 17:26:18.382"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:18.382">${has_port} = False</msg>
<status starttime="20161110 17:26:18.381" status="PASS" endtime="20161110 17:26:18.382"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 17:26:18.385" status="PASS" endtime="20161110 17:26:18.386"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 17:26:18.386" status="PASS" endtime="20161110 17:26:18.387"></status>
</kw>
<status starttime="20161110 17:26:18.385" status="PASS" endtime="20161110 17:26:18.387"></status>
</kw>
<status starttime="20161110 17:26:18.382" status="PASS" endtime="20161110 17:26:18.387"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:18.388">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 17:26:27.681">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 17:26:18.387" status="PASS" endtime="20161110 17:26:27.681"></status>
</kw>
<status starttime="20161110 17:26:18.362" status="PASS" endtime="20161110 17:26:27.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:27.685">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161110 17:26:27.684" status="PASS" endtime="20161110 17:26:27.685"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:27.686">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:27.685" status="PASS" endtime="20161110 17:26:27.686"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:26:27.686" status="PASS" endtime="20161110 17:26:27.687"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:27.689">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:27.688" status="PASS" endtime="20161110 17:26:27.689"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:27.690">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:27.690" status="PASS" endtime="20161110 17:26:27.690"></status>
</kw>
<status starttime="20161110 17:26:27.689" status="PASS" endtime="20161110 17:26:27.691"></status>
</kw>
<status starttime="20161110 17:26:27.687" status="PASS" endtime="20161110 17:26:27.691"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:27.692">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:27.692" status="PASS" endtime="20161110 17:26:27.693"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:27.694">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:27.693" status="PASS" endtime="20161110 17:26:27.694"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:27.694">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:27.694" status="PASS" endtime="20161110 17:26:27.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:27.695">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:27.694" status="PASS" endtime="20161110 17:26:27.695"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.036">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:28.036">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:27.695" status="PASS" endtime="20161110 17:26:28.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:28.037">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:28.036" status="PASS" endtime="20161110 17:26:28.037"></status>
</kw>
<status starttime="20161110 17:26:27.691" status="PASS" endtime="20161110 17:26:28.037"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.276">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:28.276">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:28.037" status="PASS" endtime="20161110 17:26:28.276"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.277">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:28.277" status="PASS" endtime="20161110 17:26:28.277"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:28.278">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:28.278" status="PASS" endtime="20161110 17:26:28.278"></status>
</kw>
<status starttime="20161110 17:26:28.277" status="PASS" endtime="20161110 17:26:28.278"></status>
</kw>
<status starttime="20161110 17:26:28.276" status="PASS" endtime="20161110 17:26:28.278"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:28.278">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:27.683" status="PASS" endtime="20161110 17:26:28.278"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:28.279">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:28.278" status="PASS" endtime="20161110 17:26:28.279"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.280">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 17:26:28.279" status="PASS" endtime="20161110 17:26:28.280"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.281">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 17:26:28.280" status="PASS" endtime="20161110 17:26:28.281"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:28.282">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 17:26:28.281" status="PASS" endtime="20161110 17:26:28.282"></status>
</kw>
<status starttime="20161110 17:26:28.281" status="PASS" endtime="20161110 17:26:28.282"></status>
</kw>
<status starttime="20161110 17:26:28.280" status="PASS" endtime="20161110 17:26:28.282"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:28.283">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:28.283" status="PASS" endtime="20161110 17:26:28.283"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.284">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:28.284" status="PASS" endtime="20161110 17:26:28.284"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.285">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:28.284" status="PASS" endtime="20161110 17:26:28.285"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.285">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:28.285" status="PASS" endtime="20161110 17:26:28.285"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.691">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:28.691">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:28.286" status="PASS" endtime="20161110 17:26:28.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:28.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:28.691" status="PASS" endtime="20161110 17:26:28.692"></status>
</kw>
<status starttime="20161110 17:26:28.282" status="PASS" endtime="20161110 17:26:28.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.820">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:26:28.820">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:28.692" status="PASS" endtime="20161110 17:26:28.820"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.822">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:28.821" status="PASS" endtime="20161110 17:26:28.822"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:28.823">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:28.822" status="PASS" endtime="20161110 17:26:28.823"></status>
</kw>
<status starttime="20161110 17:26:28.822" status="PASS" endtime="20161110 17:26:28.823"></status>
</kw>
<status starttime="20161110 17:26:28.820" status="PASS" endtime="20161110 17:26:28.824"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:28.824">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:28.279" status="PASS" endtime="20161110 17:26:28.824"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.825">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:28.825">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:28.825">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:26:28.824" status="PASS" endtime="20161110 17:26:28.825"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:28.826">Length is 0</msg>
<status starttime="20161110 17:26:28.825" status="PASS" endtime="20161110 17:26:28.826"></status>
</kw>
<status starttime="20161110 17:26:27.683" status="PASS" endtime="20161110 17:26:28.826"></status>
</kw>
<status starttime="20161110 17:26:27.682" status="PASS" endtime="20161110 17:26:28.826"></status>
</kw>
<status starttime="20161110 17:26:18.362" status="PASS" endtime="20161110 17:26:28.826"></status>
</kw>
<test name="Create error log on single FRU" id="s1-s2-t1">
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.830">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161110 17:26:28.829" status="PASS" endtime="20161110 17:26:28.830"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.831">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:28.831" status="PASS" endtime="20161110 17:26:28.831"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:26:28.832" status="PASS" endtime="20161110 17:26:28.832"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.834">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:28.833" status="PASS" endtime="20161110 17:26:28.834"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:28.835">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:28.835" status="PASS" endtime="20161110 17:26:28.835"></status>
</kw>
<status starttime="20161110 17:26:28.834" status="PASS" endtime="20161110 17:26:28.835"></status>
</kw>
<status starttime="20161110 17:26:28.832" status="PASS" endtime="20161110 17:26:28.835"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:28.836">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:28.836" status="PASS" endtime="20161110 17:26:28.836"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.837">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:28.837" status="PASS" endtime="20161110 17:26:28.837"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.837">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:28.837" status="PASS" endtime="20161110 17:26:28.838"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:28.838">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:28.838" status="PASS" endtime="20161110 17:26:28.838"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:29.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:28.838" status="PASS" endtime="20161110 17:26:29.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:29.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:29.177" status="PASS" endtime="20161110 17:26:29.177"></status>
</kw>
<status starttime="20161110 17:26:28.835" status="PASS" endtime="20161110 17:26:29.177"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.418">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:29.418">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:29.178" status="PASS" endtime="20161110 17:26:29.418"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.419">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:29.419" status="PASS" endtime="20161110 17:26:29.419"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:29.420">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:29.420" status="PASS" endtime="20161110 17:26:29.420"></status>
</kw>
<status starttime="20161110 17:26:29.419" status="PASS" endtime="20161110 17:26:29.420"></status>
</kw>
<status starttime="20161110 17:26:29.418" status="PASS" endtime="20161110 17:26:29.420"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:29.420">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:28.828" status="PASS" endtime="20161110 17:26:29.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:29.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:29.421" status="PASS" endtime="20161110 17:26:29.421"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.422">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 17:26:29.422" status="PASS" endtime="20161110 17:26:29.422"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.424">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 17:26:29.423" status="PASS" endtime="20161110 17:26:29.424"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:29.424">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 17:26:29.424" status="PASS" endtime="20161110 17:26:29.425"></status>
</kw>
<status starttime="20161110 17:26:29.424" status="PASS" endtime="20161110 17:26:29.425"></status>
</kw>
<status starttime="20161110 17:26:29.422" status="PASS" endtime="20161110 17:26:29.425"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:29.426">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:29.425" status="PASS" endtime="20161110 17:26:29.426"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.426">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:29.426" status="PASS" endtime="20161110 17:26:29.426"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.427">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:29.427" status="PASS" endtime="20161110 17:26:29.427"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.427">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:29.427" status="PASS" endtime="20161110 17:26:29.427"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.767">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:29.767">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:29.428" status="PASS" endtime="20161110 17:26:29.767"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:29.768">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:29.768" status="PASS" endtime="20161110 17:26:29.768"></status>
</kw>
<status starttime="20161110 17:26:29.425" status="PASS" endtime="20161110 17:26:29.769"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.829">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:26:29.830">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:29.769" status="PASS" endtime="20161110 17:26:29.830"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.831">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:29.831" status="PASS" endtime="20161110 17:26:29.831"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:29.833">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:29.832" status="PASS" endtime="20161110 17:26:29.833"></status>
</kw>
<status starttime="20161110 17:26:29.832" status="PASS" endtime="20161110 17:26:29.833"></status>
</kw>
<status starttime="20161110 17:26:29.830" status="PASS" endtime="20161110 17:26:29.833"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:29.834">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:29.421" status="PASS" endtime="20161110 17:26:29.834"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.835">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:29.835">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:29.835">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:26:29.835" status="PASS" endtime="20161110 17:26:29.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:29.837">Length is 0</msg>
<status starttime="20161110 17:26:29.836" status="PASS" endtime="20161110 17:26:29.837"></status>
</kw>
<status starttime="20161110 17:26:28.828" status="PASS" endtime="20161110 17:26:29.837"></status>
</kw>
<status starttime="20161110 17:26:28.828" status="PASS" endtime="20161110 17:26:29.837"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:29.838">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161110 17:26:33.136">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:26:33.137">${elog} = q 273</msg>
<msg level="INFO" timestamp="20161110 17:26:33.137">${stderr} = </msg>
<status starttime="20161110 17:26:29.838" status="PASS" endtime="20161110 17:26:33.137"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:33.138">Length is 0</msg>
<status starttime="20161110 17:26:33.137" status="PASS" endtime="20161110 17:26:33.138"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.140">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 17:26:33.139" status="PASS" endtime="20161110 17:26:33.140"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.142">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 17:26:33.141" status="PASS" endtime="20161110 17:26:33.142"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:33.143">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 17:26:33.143" status="PASS" endtime="20161110 17:26:33.143"></status>
</kw>
<status starttime="20161110 17:26:33.142" status="PASS" endtime="20161110 17:26:33.144"></status>
</kw>
<status starttime="20161110 17:26:33.140" status="PASS" endtime="20161110 17:26:33.144"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:33.145">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:33.144" status="PASS" endtime="20161110 17:26:33.145"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.145">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:33.145" status="PASS" endtime="20161110 17:26:33.146"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.146">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:33.146" status="PASS" endtime="20161110 17:26:33.146"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.147">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:33.146" status="PASS" endtime="20161110 17:26:33.147"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.487">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:33.487">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:33.147" status="PASS" endtime="20161110 17:26:33.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:33.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:33.487" status="PASS" endtime="20161110 17:26:33.488"></status>
</kw>
<status starttime="20161110 17:26:33.144" status="PASS" endtime="20161110 17:26:33.488"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.554">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:26:33.554">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:33.488" status="PASS" endtime="20161110 17:26:33.554"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.556">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/273"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:33.555" status="PASS" endtime="20161110 17:26:33.556"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:33.557">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/273"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:33.557" status="PASS" endtime="20161110 17:26:33.558"></status>
</kw>
<status starttime="20161110 17:26:33.556" status="PASS" endtime="20161110 17:26:33.558"></status>
</kw>
<status starttime="20161110 17:26:33.554" status="PASS" endtime="20161110 17:26:33.558"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:33.558">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:33.138" status="PASS" endtime="20161110 17:26:33.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:33.559">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:33.559" status="PASS" endtime="20161110 17:26:33.559"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.560">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/273"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:33.560">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:33.560">${jsondata} = {u'data': [u'/org/openbmc/records/events/273'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:26:33.560" status="PASS" endtime="20161110 17:26:33.560"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:33.561">${log_list} = [u'/org/openbmc/records/events/273']</msg>
<status starttime="20161110 17:26:33.138" status="PASS" endtime="20161110 17:26:33.561"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status starttime="20161110 17:26:33.561" status="PASS" endtime="20161110 17:26:33.562"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.563">${association_uri} = /org/openbmc/records/events/273/fru</msg>
<status starttime="20161110 17:26:33.562" status="PASS" endtime="20161110 17:26:33.563"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.564">${base_uri} = /org/openbmc/records/events/273/fru/attr/endpoints</msg>
<status starttime="20161110 17:26:33.564" status="PASS" endtime="20161110 17:26:33.571"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.573">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/273/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 17:26:33.572" status="PASS" endtime="20161110 17:26:33.573"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:33.573">URI:https://9.3.23.30:443/org/openbmc/records/events/273/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 17:26:33.573" status="PASS" endtime="20161110 17:26:33.573"></status>
</kw>
<status starttime="20161110 17:26:33.573" status="PASS" endtime="20161110 17:26:33.574"></status>
</kw>
<status starttime="20161110 17:26:33.571" status="PASS" endtime="20161110 17:26:33.574"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:33.574">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:33.574" status="PASS" endtime="20161110 17:26:33.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.575">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:33.575" status="PASS" endtime="20161110 17:26:33.575"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.576">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:33.575" status="PASS" endtime="20161110 17:26:33.576"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.576">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:33.576" status="PASS" endtime="20161110 17:26:33.576"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.911">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:33.911">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:33.577" status="PASS" endtime="20161110 17:26:33.911"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:33.912">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:33.912" status="PASS" endtime="20161110 17:26:33.913"></status>
</kw>
<status starttime="20161110 17:26:33.574" status="PASS" endtime="20161110 17:26:33.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.994">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/273/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:26:33.995">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:33.913" status="PASS" endtime="20161110 17:26:33.995"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.996">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:33.995" status="PASS" endtime="20161110 17:26:33.996"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:33.997">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:33.997" status="PASS" endtime="20161110 17:26:33.998"></status>
</kw>
<status starttime="20161110 17:26:33.996" status="PASS" endtime="20161110 17:26:33.998"></status>
</kw>
<status starttime="20161110 17:26:33.995" status="PASS" endtime="20161110 17:26:33.998"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:33.998">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:33.564" status="PASS" endtime="20161110 17:26:33.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:33.999">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:33.999">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:33.999">${content} = {u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:26:33.999" status="PASS" endtime="20161110 17:26:34.000"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:34.000">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status starttime="20161110 17:26:33.563" status="PASS" endtime="20161110 17:26:34.000"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status starttime="20161110 17:26:34.000" status="PASS" endtime="20161110 17:26:34.001"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.003">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status starttime="20161110 17:26:34.002" status="PASS" endtime="20161110 17:26:34.003"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.005">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 17:26:34.004" status="PASS" endtime="20161110 17:26:34.005"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:34.006">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 17:26:34.006" status="PASS" endtime="20161110 17:26:34.007"></status>
</kw>
<status starttime="20161110 17:26:34.005" status="PASS" endtime="20161110 17:26:34.007"></status>
</kw>
<status starttime="20161110 17:26:34.003" status="PASS" endtime="20161110 17:26:34.007"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:34.008">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:34.008" status="PASS" endtime="20161110 17:26:34.009"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.010">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:34.009" status="PASS" endtime="20161110 17:26:34.010"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.010">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:34.010" status="PASS" endtime="20161110 17:26:34.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.011">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:34.011" status="PASS" endtime="20161110 17:26:34.011"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.350">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:34.350">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:34.012" status="PASS" endtime="20161110 17:26:34.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:34.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:34.350" status="PASS" endtime="20161110 17:26:34.351"></status>
</kw>
<status starttime="20161110 17:26:34.007" status="PASS" endtime="20161110 17:26:34.351"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.433">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:26:34.434">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:34.351" status="PASS" endtime="20161110 17:26:34.434"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.435">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/273"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:34.434" status="PASS" endtime="20161110 17:26:34.435"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:34.435">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/273"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:34.435" status="PASS" endtime="20161110 17:26:34.435"></status>
</kw>
<status starttime="20161110 17:26:34.435" status="PASS" endtime="20161110 17:26:34.436"></status>
</kw>
<status starttime="20161110 17:26:34.434" status="PASS" endtime="20161110 17:26:34.436"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:34.436">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:34.002" status="PASS" endtime="20161110 17:26:34.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.436">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/273"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:34.437">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:34.437">${content} = {u'data': [u'/org/openbmc/records/events/273'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:26:34.436" status="PASS" endtime="20161110 17:26:34.437"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:34.437">${dimm1_event} = [u'/org/openbmc/records/events/273']</msg>
<status starttime="20161110 17:26:34.001" status="PASS" endtime="20161110 17:26:34.437"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status starttime="20161110 17:26:34.444" status="PASS" endtime="20161110 17:26:34.444"></status>
</kw>
<kw library="openbmc_ffdc" name="Log FFDC" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 17:26:34.445" status="PASS" endtime="20161110 17:26:34.449"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:26:34.450">Directory '&lt;a href="file:///tmp/root/30449/obmc-robot/logs"&gt;/tmp/root/30449/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 17:26:34.450" status="PASS" endtime="20161110 17:26:34.450"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:26:34.451">File '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 17:26:34.451" status="PASS" endtime="20161110 17:26:34.451"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:34.451">${exist} = True</msg>
<status starttime="20161110 17:26:34.450" status="PASS" endtime="20161110 17:26:34.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 17:26:34.451" status="PASS" endtime="20161110 17:26:34.454"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.455">${cur_time} = 2016-11-10 17:26:34:454693</msg>
<status starttime="20161110 17:26:34.455" status="PASS" endtime="20161110 17:26:34.455"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.456">${cur_time} = 20161110172634454693</msg>
<status starttime="20161110 17:26:34.455" status="PASS" endtime="20161110 17:26:34.456"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:34.456">${cur_time} = 20161110172634454693</msg>
<status starttime="20161110 17:26:34.454" status="PASS" endtime="20161110 17:26:34.456"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:26:34.456">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:26:34.456" status="PASS" endtime="20161110 17:26:34.457"></status>
</kw>
<status starttime="20161110 17:26:34.449" status="PASS" endtime="20161110 17:26:34.457"></status>
</kw>
<status starttime="20161110 17:26:34.445" status="PASS" endtime="20161110 17:26:34.457"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status starttime="20161110 17:26:28.826" critical="yes" status="PASS" endtime="20161110 17:26:34.457"></status>
</test>
<test name="Delete error log" id="s1-s2-t2">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.458">${data} = {u'data': []}</msg>
<status starttime="20161110 17:26:34.458" status="PASS" endtime="20161110 17:26:34.458"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.459">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161110 17:26:34.459" status="PASS" endtime="20161110 17:26:34.459"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.460">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:34.459" status="PASS" endtime="20161110 17:26:34.460"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:26:34.460" status="PASS" endtime="20161110 17:26:34.460"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.461">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:34.461" status="PASS" endtime="20161110 17:26:34.461"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:34.462">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:34.462" status="PASS" endtime="20161110 17:26:34.462"></status>
</kw>
<status starttime="20161110 17:26:34.462" status="PASS" endtime="20161110 17:26:34.462"></status>
</kw>
<status starttime="20161110 17:26:34.460" status="PASS" endtime="20161110 17:26:34.463"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:34.463">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:34.463" status="PASS" endtime="20161110 17:26:34.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.466">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:34.464" status="PASS" endtime="20161110 17:26:34.466"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.466">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:34.466" status="PASS" endtime="20161110 17:26:34.466"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.467">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:34.466" status="PASS" endtime="20161110 17:26:34.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:34.804">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:34.804">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:34.467" status="PASS" endtime="20161110 17:26:34.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:34.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:34.804" status="PASS" endtime="20161110 17:26:34.805"></status>
</kw>
<status starttime="20161110 17:26:34.463" status="PASS" endtime="20161110 17:26:34.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.134">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:35.134">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:34.806" status="PASS" endtime="20161110 17:26:35.135"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.136">${msg} = Response code:200, Content:{
  "data": 274, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:35.135" status="PASS" endtime="20161110 17:26:35.136"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:35.137">Response code:200, Content:{
  "data": 274, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:35.137" status="PASS" endtime="20161110 17:26:35.138"></status>
</kw>
<status starttime="20161110 17:26:35.136" status="PASS" endtime="20161110 17:26:35.138"></status>
</kw>
<status starttime="20161110 17:26:35.135" status="PASS" endtime="20161110 17:26:35.138"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:35.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:34.458" status="PASS" endtime="20161110 17:26:35.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:35.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:35.139" status="PASS" endtime="20161110 17:26:35.139"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.141">To JSON using : content={
  "data": 274, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:35.141">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:35.141">${json} = {u'data': 274, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:26:35.139" status="PASS" endtime="20161110 17:26:35.141"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.142">${LOGID} = 274</msg>
<status starttime="20161110 17:26:35.142" status="PASS" endtime="20161110 17:26:35.142"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.143">${uri} = /org/openbmc/records/events/274</msg>
<status starttime="20161110 17:26:35.143" status="PASS" endtime="20161110 17:26:35.143"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:35.143">${log_uri1} = /org/openbmc/records/events/274</msg>
<status starttime="20161110 17:26:34.458" status="PASS" endtime="20161110 17:26:35.144"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.144">${association_uri1} = /org/openbmc/records/events/274/fru</msg>
<status starttime="20161110 17:26:35.144" status="PASS" endtime="20161110 17:26:35.144"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.145">${data} = {u'data': []}</msg>
<status starttime="20161110 17:26:35.144" status="PASS" endtime="20161110 17:26:35.145"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.146">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161110 17:26:35.145" status="PASS" endtime="20161110 17:26:35.146"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.146">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:35.146" status="PASS" endtime="20161110 17:26:35.146"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:26:35.146" status="PASS" endtime="20161110 17:26:35.150"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.151">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:35.150" status="PASS" endtime="20161110 17:26:35.151"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:35.152">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:35.152" status="PASS" endtime="20161110 17:26:35.152"></status>
</kw>
<status starttime="20161110 17:26:35.151" status="PASS" endtime="20161110 17:26:35.152"></status>
</kw>
<status starttime="20161110 17:26:35.150" status="PASS" endtime="20161110 17:26:35.152"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:35.153">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:35.153" status="PASS" endtime="20161110 17:26:35.154"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.154">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:35.154" status="PASS" endtime="20161110 17:26:35.154"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.155">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:35.155" status="PASS" endtime="20161110 17:26:35.155"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.155">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:35.155" status="PASS" endtime="20161110 17:26:35.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.576">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:35.576">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:35.156" status="PASS" endtime="20161110 17:26:35.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:35.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:35.576" status="PASS" endtime="20161110 17:26:35.577"></status>
</kw>
<status starttime="20161110 17:26:35.152" status="PASS" endtime="20161110 17:26:35.577"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.896">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:35.896">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:35.578" status="PASS" endtime="20161110 17:26:35.896"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.898">${msg} = Response code:200, Content:{
  "data": 275, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:35.897" status="PASS" endtime="20161110 17:26:35.898"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:35.899">Response code:200, Content:{
  "data": 275, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:35.899" status="PASS" endtime="20161110 17:26:35.900"></status>
</kw>
<status starttime="20161110 17:26:35.898" status="PASS" endtime="20161110 17:26:35.900"></status>
</kw>
<status starttime="20161110 17:26:35.897" status="PASS" endtime="20161110 17:26:35.900"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:35.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:35.145" status="PASS" endtime="20161110 17:26:35.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:35.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:35.901" status="PASS" endtime="20161110 17:26:35.901"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.902">To JSON using : content={
  "data": 275, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:35.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:35.902">${json} = {u'data': 275, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:26:35.902" status="PASS" endtime="20161110 17:26:35.902"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.903">${LOGID} = 275</msg>
<status starttime="20161110 17:26:35.903" status="PASS" endtime="20161110 17:26:35.903"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.904">${uri} = /org/openbmc/records/events/275</msg>
<status starttime="20161110 17:26:35.904" status="PASS" endtime="20161110 17:26:35.904"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:35.904">${log_uri2} = /org/openbmc/records/events/275</msg>
<status starttime="20161110 17:26:35.144" status="PASS" endtime="20161110 17:26:35.904"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.905">${del_uri} = /org/openbmc/records/events/274/action/delete</msg>
<status starttime="20161110 17:26:35.905" status="PASS" endtime="20161110 17:26:35.905"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.906">${base_uri} = /org/openbmc/records/events/274/action/delete</msg>
<status starttime="20161110 17:26:35.906" status="PASS" endtime="20161110 17:26:35.907"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.907">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:35.907" status="PASS" endtime="20161110 17:26:35.907"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:26:35.907" status="PASS" endtime="20161110 17:26:35.908"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.910">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/274/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:35.909" status="PASS" endtime="20161110 17:26:35.910"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:35.911">URI:https://9.3.23.30:443/org/openbmc/records/events/274/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:35.911" status="PASS" endtime="20161110 17:26:35.911"></status>
</kw>
<status starttime="20161110 17:26:35.910" status="PASS" endtime="20161110 17:26:35.911"></status>
</kw>
<status starttime="20161110 17:26:35.908" status="PASS" endtime="20161110 17:26:35.912"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:35.913">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:35.912" status="PASS" endtime="20161110 17:26:35.913"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.914">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:35.913" status="PASS" endtime="20161110 17:26:35.914"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.914">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:35.914" status="PASS" endtime="20161110 17:26:35.914"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:35.915">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:35.914" status="PASS" endtime="20161110 17:26:35.915"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:36.287">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:36.287">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:35.915" status="PASS" endtime="20161110 17:26:36.287"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:36.288">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:36.288" status="PASS" endtime="20161110 17:26:36.288"></status>
</kw>
<status starttime="20161110 17:26:35.912" status="PASS" endtime="20161110 17:26:36.288"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:36.554">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/274/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:36.554">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:36.288" status="PASS" endtime="20161110 17:26:36.554"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:36.555">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:36.555" status="PASS" endtime="20161110 17:26:36.555"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:36.556">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:36.556" status="PASS" endtime="20161110 17:26:36.556"></status>
</kw>
<status starttime="20161110 17:26:36.555" status="PASS" endtime="20161110 17:26:36.556"></status>
</kw>
<status starttime="20161110 17:26:36.554" status="PASS" endtime="20161110 17:26:36.556"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:36.556">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:35.905" status="PASS" endtime="20161110 17:26:36.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:36.557">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:36.557" status="PASS" endtime="20161110 17:26:36.557"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:36.558">${base_uri} = /org/openbmc/records/events/274/fru</msg>
<status starttime="20161110 17:26:36.558" status="PASS" endtime="20161110 17:26:36.558"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:36.560">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/274/fru, method:Get, args:{}</msg>
<status starttime="20161110 17:26:36.559" status="PASS" endtime="20161110 17:26:36.560"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:36.561">URI:https://9.3.23.30:443/org/openbmc/records/events/274/fru, method:Get, args:{}</msg>
<status starttime="20161110 17:26:36.561" status="PASS" endtime="20161110 17:26:36.561"></status>
</kw>
<status starttime="20161110 17:26:36.561" status="PASS" endtime="20161110 17:26:36.561"></status>
</kw>
<status starttime="20161110 17:26:36.558" status="PASS" endtime="20161110 17:26:36.561"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:36.562">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:36.562" status="PASS" endtime="20161110 17:26:36.563"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:36.563">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:36.563" status="PASS" endtime="20161110 17:26:36.572"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:36.573">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:36.572" status="PASS" endtime="20161110 17:26:36.573"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:36.573">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:36.573" status="PASS" endtime="20161110 17:26:36.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:36.944">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:36.944">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:36.573" status="PASS" endtime="20161110 17:26:36.944"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:36.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:36.945" status="PASS" endtime="20161110 17:26:36.945"></status>
</kw>
<status starttime="20161110 17:26:36.562" status="PASS" endtime="20161110 17:26:36.945"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.003">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/274/fru, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:26:37.004">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20161110 17:26:36.945" status="PASS" endtime="20161110 17:26:37.004"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.005">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/274/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status starttime="20161110 17:26:37.004" status="PASS" endtime="20161110 17:26:37.005"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.006">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/274/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status starttime="20161110 17:26:37.005" status="PASS" endtime="20161110 17:26:37.006"></status>
</kw>
<status starttime="20161110 17:26:37.005" status="PASS" endtime="20161110 17:26:37.006"></status>
</kw>
<status starttime="20161110 17:26:37.004" status="PASS" endtime="20161110 17:26:37.006"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:37.006">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20161110 17:26:36.557" status="PASS" endtime="20161110 17:26:37.006"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.007">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/274/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:37.007">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:37.007">${jsondata} = {u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/274/fru'}, u'status': u'error', u'message': u'404 Not Found'}</msg>
<status starttime="20161110 17:26:37.006" status="PASS" endtime="20161110 17:26:37.007"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status starttime="20161110 17:26:37.007" status="PASS" endtime="20161110 17:26:37.007"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.009">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status starttime="20161110 17:26:37.008" status="PASS" endtime="20161110 17:26:37.009"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.010">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 17:26:37.010" status="PASS" endtime="20161110 17:26:37.010"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.011">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 17:26:37.011" status="PASS" endtime="20161110 17:26:37.011"></status>
</kw>
<status starttime="20161110 17:26:37.010" status="PASS" endtime="20161110 17:26:37.011"></status>
</kw>
<status starttime="20161110 17:26:37.009" status="PASS" endtime="20161110 17:26:37.012"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.012">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:37.012" status="PASS" endtime="20161110 17:26:37.013"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:37.013" status="PASS" endtime="20161110 17:26:37.013"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.014">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:37.013" status="PASS" endtime="20161110 17:26:37.014"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.014">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:37.014" status="PASS" endtime="20161110 17:26:37.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.349">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:37.349">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:37.015" status="PASS" endtime="20161110 17:26:37.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:37.350" status="PASS" endtime="20161110 17:26:37.350"></status>
</kw>
<status starttime="20161110 17:26:37.012" status="PASS" endtime="20161110 17:26:37.350"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.433">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:26:37.433">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:37.351" status="PASS" endtime="20161110 17:26:37.433"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.434">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/275"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:37.434" status="PASS" endtime="20161110 17:26:37.435"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.435">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/275"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:37.435" status="PASS" endtime="20161110 17:26:37.435"></status>
</kw>
<status starttime="20161110 17:26:37.435" status="PASS" endtime="20161110 17:26:37.436"></status>
</kw>
<status starttime="20161110 17:26:37.434" status="PASS" endtime="20161110 17:26:37.436"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:37.436">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:37.008" status="PASS" endtime="20161110 17:26:37.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.436">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/275"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:37.436">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:37.437">${content} = {u'data': [u'/org/openbmc/records/events/275'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:26:37.436" status="PASS" endtime="20161110 17:26:37.437"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:37.437">${dimm3_event} = [u'/org/openbmc/records/events/275']</msg>
<status starttime="20161110 17:26:37.007" status="PASS" endtime="20161110 17:26:37.437"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161110 17:26:37.437" status="PASS" endtime="20161110 17:26:37.438"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.439">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status starttime="20161110 17:26:37.439" status="PASS" endtime="20161110 17:26:37.439"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.441">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 17:26:37.440" status="PASS" endtime="20161110 17:26:37.441"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.441">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161110 17:26:37.441" status="PASS" endtime="20161110 17:26:37.442"></status>
</kw>
<status starttime="20161110 17:26:37.441" status="PASS" endtime="20161110 17:26:37.442"></status>
</kw>
<status starttime="20161110 17:26:37.440" status="PASS" endtime="20161110 17:26:37.442"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.442">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:37.442" status="PASS" endtime="20161110 17:26:37.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.443">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:37.443" status="PASS" endtime="20161110 17:26:37.443"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.444">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:37.444" status="PASS" endtime="20161110 17:26:37.444"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.445">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:37.444" status="PASS" endtime="20161110 17:26:37.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:37.791">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:37.445" status="PASS" endtime="20161110 17:26:37.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:37.792" status="PASS" endtime="20161110 17:26:37.792"></status>
</kw>
<status starttime="20161110 17:26:37.442" status="PASS" endtime="20161110 17:26:37.793"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.874">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:26:37.874">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:37.793" status="PASS" endtime="20161110 17:26:37.874"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.876">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/275"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:37.875" status="PASS" endtime="20161110 17:26:37.876"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.877">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/275"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:37.877" status="PASS" endtime="20161110 17:26:37.877"></status>
</kw>
<status starttime="20161110 17:26:37.876" status="PASS" endtime="20161110 17:26:37.878"></status>
</kw>
<status starttime="20161110 17:26:37.875" status="PASS" endtime="20161110 17:26:37.878"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:37.878">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:37.438" status="PASS" endtime="20161110 17:26:37.878"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.878">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/275"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:37.879">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:37.879">${content} = {u'data': [u'/org/openbmc/records/events/275'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:26:37.878" status="PASS" endtime="20161110 17:26:37.879"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:37.879">${dimm2_event} = [u'/org/openbmc/records/events/275']</msg>
<status starttime="20161110 17:26:37.438" status="PASS" endtime="20161110 17:26:37.879"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161110 17:26:37.879" status="PASS" endtime="20161110 17:26:37.880"></status>
</kw>
<kw library="openbmc_ffdc" name="Log FFDC" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 17:26:37.880" status="PASS" endtime="20161110 17:26:37.883"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:26:37.884">Directory '&lt;a href="file:///tmp/root/30449/obmc-robot/logs"&gt;/tmp/root/30449/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 17:26:37.884" status="PASS" endtime="20161110 17:26:37.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:26:37.885">File '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 17:26:37.885" status="PASS" endtime="20161110 17:26:37.885"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:37.885">${exist} = True</msg>
<status starttime="20161110 17:26:37.885" status="PASS" endtime="20161110 17:26:37.885"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 17:26:37.886" status="PASS" endtime="20161110 17:26:37.888"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.889">${cur_time} = 2016-11-10 17:26:37:889060</msg>
<status starttime="20161110 17:26:37.889" status="PASS" endtime="20161110 17:26:37.889"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.890">${cur_time} = 20161110172637889060</msg>
<status starttime="20161110 17:26:37.889" status="PASS" endtime="20161110 17:26:37.890"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:37.890">${cur_time} = 20161110172637889060</msg>
<status starttime="20161110 17:26:37.888" status="PASS" endtime="20161110 17:26:37.890"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:26:37.891">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:26:37.890" status="PASS" endtime="20161110 17:26:37.891"></status>
</kw>
<status starttime="20161110 17:26:37.884" status="PASS" endtime="20161110 17:26:37.891"></status>
</kw>
<status starttime="20161110 17:26:37.880" status="PASS" endtime="20161110 17:26:37.891"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status starttime="20161110 17:26:34.457" critical="yes" status="PASS" endtime="20161110 17:26:37.891"></status>
</test>
<kw library="SSHLibrary" name="Close All Connections" type="teardown">
<doc>Closes all open connections.</doc>
<status starttime="20161110 17:26:37.892" status="PASS" endtime="20161110 17:26:37.897"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status starttime="20161110 17:26:18.342" status="PASS" endtime="20161110 17:26:37.897"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s3" source="/tmp/root/30449/obmc-robot/tests/test_basic_poweron.robot">
<test name="power on test" id="s1-s3-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:26:37.925">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 17:26:37.924" status="FAIL" endtime="20161110 17:26:37.925"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:37.925">${has_host} = False</msg>
<status starttime="20161110 17:26:37.924" status="PASS" endtime="20161110 17:26:37.925"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 17:26:37.928" status="PASS" endtime="20161110 17:26:37.928"></status>
</kw>
<status starttime="20161110 17:26:37.925" status="PASS" endtime="20161110 17:26:37.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.931">${port_num} = 22</msg>
<status starttime="20161110 17:26:37.931" status="PASS" endtime="20161110 17:26:37.931"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.932">${SSH_PORT} = 22</msg>
<status starttime="20161110 17:26:37.932" status="PASS" endtime="20161110 17:26:37.932"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:37.932">${https_num} = 443</msg>
<status starttime="20161110 17:26:37.932" status="PASS" endtime="20161110 17:26:37.932"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.934">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 17:26:37.934" status="PASS" endtime="20161110 17:26:37.934"></status>
</kw>
<status starttime="20161110 17:26:37.931" status="PASS" endtime="20161110 17:26:37.934"></status>
</kw>
<status starttime="20161110 17:26:37.928" status="PASS" endtime="20161110 17:26:37.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:26:37.935">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 17:26:37.935" status="FAIL" endtime="20161110 17:26:37.935"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:37.935">${has_port} = False</msg>
<status starttime="20161110 17:26:37.935" status="PASS" endtime="20161110 17:26:37.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 17:26:37.940" status="PASS" endtime="20161110 17:26:37.940"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 17:26:37.940" status="PASS" endtime="20161110 17:26:37.940"></status>
</kw>
<status starttime="20161110 17:26:37.939" status="PASS" endtime="20161110 17:26:37.940"></status>
</kw>
<status starttime="20161110 17:26:37.936" status="PASS" endtime="20161110 17:26:37.940"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:37.941">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 17:26:39.990">Read output:</msg>
<status starttime="20161110 17:26:37.941" status="PASS" endtime="20161110 17:26:39.990"></status>
</kw>
<status starttime="20161110 17:26:37.923" status="PASS" endtime="20161110 17:26:39.991"></status>
</kw>
<kw library="utils" name="Get Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:39.993">${cur_time} = 20161110172639992617</msg>
<status starttime="20161110 17:26:39.992" status="PASS" endtime="20161110 17:26:39.993"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:39.994">${cur_time} = 20161110172639992617</msg>
<status starttime="20161110 17:26:39.991" status="PASS" endtime="20161110 17:26:39.994"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:39.999">${LOG_TIME} = 20161110172639992617</msg>
<status starttime="20161110 17:26:39.994" status="PASS" endtime="20161110 17:26:39.999"></status>
</kw>
<kw library="SSHLibrary" name="Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:40.000">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161110172639992617_$$'.</msg>
<status starttime="20161110 17:26:40.000" status="PASS" endtime="20161110 17:26:40.008"></status>
</kw>
<status starttime="20161110 17:26:37.923" status="PASS" endtime="20161110 17:26:40.008"></status>
</kw>
<kw library="poweroffs" name="BMC Power Off">
<doc>Powers off the system and makes sure that all states are</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:26:40.010">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 17:26:40.010" status="FAIL" endtime="20161110 17:26:40.010"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:40.011">${has_host} = False</msg>
<status starttime="20161110 17:26:40.010" status="PASS" endtime="20161110 17:26:40.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 17:26:40.014" status="PASS" endtime="20161110 17:26:40.014"></status>
</kw>
<status starttime="20161110 17:26:40.011" status="PASS" endtime="20161110 17:26:40.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:40.019">${port_num} = 22</msg>
<status starttime="20161110 17:26:40.018" status="PASS" endtime="20161110 17:26:40.019"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:40.019">${SSH_PORT} = 22</msg>
<status starttime="20161110 17:26:40.019" status="PASS" endtime="20161110 17:26:40.019"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:40.020">${https_num} = 443</msg>
<status starttime="20161110 17:26:40.020" status="PASS" endtime="20161110 17:26:40.020"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:40.021">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 17:26:40.020" status="PASS" endtime="20161110 17:26:40.021"></status>
</kw>
<status starttime="20161110 17:26:40.018" status="PASS" endtime="20161110 17:26:40.021"></status>
</kw>
<status starttime="20161110 17:26:40.014" status="PASS" endtime="20161110 17:26:40.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:26:40.022">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 17:26:40.022" status="FAIL" endtime="20161110 17:26:40.022"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:40.022">${has_port} = False</msg>
<status starttime="20161110 17:26:40.021" status="PASS" endtime="20161110 17:26:40.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 17:26:40.026" status="PASS" endtime="20161110 17:26:40.026"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 17:26:40.026" status="PASS" endtime="20161110 17:26:40.027"></status>
</kw>
<status starttime="20161110 17:26:40.026" status="PASS" endtime="20161110 17:26:40.027"></status>
</kw>
<status starttime="20161110 17:26:40.023" status="PASS" endtime="20161110 17:26:40.027"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:40.027">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 17:26:48.385">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 17:26:40.027" status="PASS" endtime="20161110 17:26:48.385"></status>
</kw>
<status starttime="20161110 17:26:40.009" status="PASS" endtime="20161110 17:26:48.386"></status>
</kw>
<kw library="utils" name="Initiate Power Off">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.387">@{arglist} = [ ]</msg>
<status starttime="20161110 17:26:48.387" status="PASS" endtime="20161110 17:26:48.387"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.388">${args} = {u'data': []}</msg>
<status starttime="20161110 17:26:48.388" status="PASS" endtime="20161110 17:26:48.388"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.390">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 17:26:48.389" status="PASS" endtime="20161110 17:26:48.390"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.393">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status starttime="20161110 17:26:48.392" status="PASS" endtime="20161110 17:26:48.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.394">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:48.393" status="PASS" endtime="20161110 17:26:48.394"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:26:48.394" status="PASS" endtime="20161110 17:26:48.395"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.397">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:48.396" status="PASS" endtime="20161110 17:26:48.397"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:48.398">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:48.398" status="PASS" endtime="20161110 17:26:48.398"></status>
</kw>
<status starttime="20161110 17:26:48.397" status="PASS" endtime="20161110 17:26:48.398"></status>
</kw>
<status starttime="20161110 17:26:48.395" status="PASS" endtime="20161110 17:26:48.398"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:48.400">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:48.399" status="PASS" endtime="20161110 17:26:48.400"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.401">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:48.401" status="PASS" endtime="20161110 17:26:48.401"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.402">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:48.401" status="PASS" endtime="20161110 17:26:48.402"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.403">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:48.402" status="PASS" endtime="20161110 17:26:48.403"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.734">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:48.734">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:48.403" status="PASS" endtime="20161110 17:26:48.734"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:48.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:48.735" status="PASS" endtime="20161110 17:26:48.736"></status>
</kw>
<status starttime="20161110 17:26:48.399" status="PASS" endtime="20161110 17:26:48.736"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.997">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:48.997">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:48.736" status="PASS" endtime="20161110 17:26:48.997"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:48.999">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:48.998" status="PASS" endtime="20161110 17:26:48.999"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:49.001">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:49.001" status="PASS" endtime="20161110 17:26:49.001"></status>
</kw>
<status starttime="20161110 17:26:48.999" status="PASS" endtime="20161110 17:26:49.001"></status>
</kw>
<status starttime="20161110 17:26:48.998" status="PASS" endtime="20161110 17:26:49.002"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:49.002">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:48.390" status="PASS" endtime="20161110 17:26:49.002"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:49.002">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:48.389" status="PASS" endtime="20161110 17:26:49.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:49.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:49.003" status="PASS" endtime="20161110 17:26:49.003"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw library="utils" name="Is Power Off">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.006">@{arglist} = [ ]</msg>
<status starttime="20161110 17:26:49.005" status="PASS" endtime="20161110 17:26:49.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.007">${args} = {u'data': []}</msg>
<status starttime="20161110 17:26:49.006" status="PASS" endtime="20161110 17:26:49.007"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.009">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 17:26:49.008" status="PASS" endtime="20161110 17:26:49.009"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.011">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 17:26:49.010" status="PASS" endtime="20161110 17:26:49.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.012">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:49.011" status="PASS" endtime="20161110 17:26:49.012"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:26:49.012" status="PASS" endtime="20161110 17:26:49.013"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.015">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:49.014" status="PASS" endtime="20161110 17:26:49.015"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:49.016">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:49.016" status="PASS" endtime="20161110 17:26:49.017"></status>
</kw>
<status starttime="20161110 17:26:49.016" status="PASS" endtime="20161110 17:26:49.017"></status>
</kw>
<status starttime="20161110 17:26:49.013" status="PASS" endtime="20161110 17:26:49.017"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:49.018">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:49.017" status="PASS" endtime="20161110 17:26:49.018"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.019">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:49.018" status="PASS" endtime="20161110 17:26:49.019"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.019">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:49.019" status="PASS" endtime="20161110 17:26:49.019"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.020">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:49.020" status="PASS" endtime="20161110 17:26:49.020"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.363">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:49.363">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:49.020" status="PASS" endtime="20161110 17:26:49.363"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:49.365">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:49.363" status="PASS" endtime="20161110 17:26:49.365"></status>
</kw>
<status starttime="20161110 17:26:49.017" status="PASS" endtime="20161110 17:26:49.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.770">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:26:49.770">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:49.365" status="PASS" endtime="20161110 17:26:49.770"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.772">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:49.771" status="PASS" endtime="20161110 17:26:49.772"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:49.774">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:26:49.773" status="PASS" endtime="20161110 17:26:49.774"></status>
</kw>
<status starttime="20161110 17:26:49.772" status="PASS" endtime="20161110 17:26:49.774"></status>
</kw>
<status starttime="20161110 17:26:49.770" status="PASS" endtime="20161110 17:26:49.774"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:49.775">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:49.009" status="PASS" endtime="20161110 17:26:49.775"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:49.775">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:49.007" status="PASS" endtime="20161110 17:26:49.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:49.776">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:26:49.776" status="PASS" endtime="20161110 17:26:49.776"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:49.777">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:26:49.777">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:26:49.777">${content} = {u'data': 1, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:26:49.777" status="PASS" endtime="20161110 17:26:49.777"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:26:49.778">${state} = 1</msg>
<status starttime="20161110 17:26:49.005" status="PASS" endtime="20161110 17:26:49.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:26:49.779">1 != 0</msg>
<status starttime="20161110 17:26:49.778" status="FAIL" endtime="20161110 17:26:49.779"></status>
</kw>
<status starttime="20161110 17:26:49.004" status="FAIL" endtime="20161110 17:26:49.779"></status>
</kw>
<kw library="utils" name="Is Power Off">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:59.782">@{arglist} = [ ]</msg>
<status starttime="20161110 17:26:59.782" status="PASS" endtime="20161110 17:26:59.782"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:59.783">${args} = {u'data': []}</msg>
<status starttime="20161110 17:26:59.782" status="PASS" endtime="20161110 17:26:59.783"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:59.785">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 17:26:59.785" status="PASS" endtime="20161110 17:26:59.785"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:59.789">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 17:26:59.787" status="PASS" endtime="20161110 17:26:59.789"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:59.790">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:59.790" status="PASS" endtime="20161110 17:26:59.790"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:26:59.791" status="PASS" endtime="20161110 17:26:59.791"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:59.793">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:59.792" status="PASS" endtime="20161110 17:26:59.793"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:59.794">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:26:59.794" status="PASS" endtime="20161110 17:26:59.795"></status>
</kw>
<status starttime="20161110 17:26:59.793" status="PASS" endtime="20161110 17:26:59.795"></status>
</kw>
<status starttime="20161110 17:26:59.791" status="PASS" endtime="20161110 17:26:59.795"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:26:59.796">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:26:59.795" status="PASS" endtime="20161110 17:26:59.796"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:59.797">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:26:59.796" status="PASS" endtime="20161110 17:26:59.797"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:59.797">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:26:59.797" status="PASS" endtime="20161110 17:26:59.797"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:26:59.798">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:26:59.797" status="PASS" endtime="20161110 17:26:59.798"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.128">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:00.128">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:59.798" status="PASS" endtime="20161110 17:27:00.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:00.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:00.129" status="PASS" endtime="20161110 17:27:00.129"></status>
</kw>
<status starttime="20161110 17:26:59.795" status="PASS" endtime="20161110 17:27:00.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.404">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:00.404">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:00.129" status="PASS" endtime="20161110 17:27:00.404"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.406">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:00.405" status="PASS" endtime="20161110 17:27:00.406"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:00.407">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:00.407" status="PASS" endtime="20161110 17:27:00.407"></status>
</kw>
<status starttime="20161110 17:27:00.406" status="PASS" endtime="20161110 17:27:00.407"></status>
</kw>
<status starttime="20161110 17:27:00.405" status="PASS" endtime="20161110 17:27:00.407"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:00.407">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:59.786" status="PASS" endtime="20161110 17:27:00.407"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:00.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:26:59.784" status="PASS" endtime="20161110 17:27:00.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:00.408">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:00.408" status="PASS" endtime="20161110 17:27:00.408"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.409">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:27:00.409">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:27:00.409">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:27:00.408" status="PASS" endtime="20161110 17:27:00.409"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:00.409">${state} = 0</msg>
<status starttime="20161110 17:26:59.781" status="PASS" endtime="20161110 17:27:00.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161110 17:27:00.409" status="PASS" endtime="20161110 17:27:00.410"></status>
</kw>
<status starttime="20161110 17:26:59.780" status="PASS" endtime="20161110 17:27:00.410"></status>
</kw>
<status starttime="20161110 17:26:49.004" status="PASS" endtime="20161110 17:27:00.410"></status>
</kw>
<status starttime="20161110 17:26:48.386" status="PASS" endtime="20161110 17:27:00.410"></status>
</kw>
<kw library="poweroffs" name="Check Power Off States">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.411">@{arglist} = [ ]</msg>
<status starttime="20161110 17:27:00.411" status="PASS" endtime="20161110 17:27:00.411"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.412">${args} = {u'data': []}</msg>
<status starttime="20161110 17:27:00.411" status="PASS" endtime="20161110 17:27:00.412"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.413">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 17:27:00.412" status="PASS" endtime="20161110 17:27:00.413"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.414">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 17:27:00.413" status="PASS" endtime="20161110 17:27:00.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.414">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:00.414" status="PASS" endtime="20161110 17:27:00.414"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:27:00.414" status="PASS" endtime="20161110 17:27:00.415"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.416">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:00.415" status="PASS" endtime="20161110 17:27:00.416"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:00.417">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:00.417" status="PASS" endtime="20161110 17:27:00.417"></status>
</kw>
<status starttime="20161110 17:27:00.416" status="PASS" endtime="20161110 17:27:00.417"></status>
</kw>
<status starttime="20161110 17:27:00.415" status="PASS" endtime="20161110 17:27:00.417"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:00.418">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:27:00.418" status="PASS" endtime="20161110 17:27:00.418"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.419">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:00.419" status="PASS" endtime="20161110 17:27:00.419"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.419">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:27:00.419" status="PASS" endtime="20161110 17:27:00.419"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.420">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:27:00.420" status="PASS" endtime="20161110 17:27:00.420"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:00.754">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:00.754">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:00.420" status="PASS" endtime="20161110 17:27:00.754"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:00.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:00.755" status="PASS" endtime="20161110 17:27:00.755"></status>
</kw>
<status starttime="20161110 17:27:00.417" status="PASS" endtime="20161110 17:27:00.755"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.020">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:01.020">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:00.756" status="PASS" endtime="20161110 17:27:01.020"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.022">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:01.021" status="PASS" endtime="20161110 17:27:01.022"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:01.022">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:01.022" status="PASS" endtime="20161110 17:27:01.022"></status>
</kw>
<status starttime="20161110 17:27:01.022" status="PASS" endtime="20161110 17:27:01.023"></status>
</kw>
<status starttime="20161110 17:27:01.021" status="PASS" endtime="20161110 17:27:01.023"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:01.023">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:00.413" status="PASS" endtime="20161110 17:27:01.023"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:01.023">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:00.412" status="PASS" endtime="20161110 17:27:01.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:01.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:01.023" status="PASS" endtime="20161110 17:27:01.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.024">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:27:01.024">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:27:01.024">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:27:01.024" status="PASS" endtime="20161110 17:27:01.024"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:01.025">${power_state} = 0</msg>
<status starttime="20161110 17:27:00.410" status="PASS" endtime="20161110 17:27:01.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161110 17:27:01.025" status="PASS" endtime="20161110 17:27:01.025"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status starttime="20161110 17:27:01.025" status="PASS" endtime="20161110 17:27:01.026"></status>
</kw>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>/org/openbmc/sensors/host/BootProgress</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.027">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20161110 17:27:01.027" status="PASS" endtime="20161110 17:27:01.027"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.035">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161110 17:27:01.034" status="PASS" endtime="20161110 17:27:01.035"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:01.036">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161110 17:27:01.036" status="PASS" endtime="20161110 17:27:01.036"></status>
</kw>
<status starttime="20161110 17:27:01.035" status="PASS" endtime="20161110 17:27:01.036"></status>
</kw>
<status starttime="20161110 17:27:01.028" status="PASS" endtime="20161110 17:27:01.036"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:01.037">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:27:01.037" status="PASS" endtime="20161110 17:27:01.037"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.038">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:01.038" status="PASS" endtime="20161110 17:27:01.038"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.039">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:27:01.038" status="PASS" endtime="20161110 17:27:01.039"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.039">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:27:01.039" status="PASS" endtime="20161110 17:27:01.039"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.377">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:01.377">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:01.040" status="PASS" endtime="20161110 17:27:01.377"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:01.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:01.377" status="PASS" endtime="20161110 17:27:01.378"></status>
</kw>
<status starttime="20161110 17:27:01.036" status="PASS" endtime="20161110 17:27:01.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.456">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:27:01.456">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:01.378" status="PASS" endtime="20161110 17:27:01.456"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.457">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:01.457" status="PASS" endtime="20161110 17:27:01.457"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:01.458">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:01.458" status="PASS" endtime="20161110 17:27:01.458"></status>
</kw>
<status starttime="20161110 17:27:01.457" status="PASS" endtime="20161110 17:27:01.458"></status>
</kw>
<status starttime="20161110 17:27:01.456" status="PASS" endtime="20161110 17:27:01.458"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:01.459">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:01.026" status="PASS" endtime="20161110 17:27:01.459"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.459">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:27:01.459">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:27:01.459">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:27:01.459" status="PASS" endtime="20161110 17:27:01.459"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:01.459">${state} = Off</msg>
<status starttime="20161110 17:27:01.026" status="PASS" endtime="20161110 17:27:01.460"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:01.460">${boot_progress} = Off</msg>
<status starttime="20161110 17:27:01.026" status="PASS" endtime="20161110 17:27:01.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20161110 17:27:01.460" status="PASS" endtime="20161110 17:27:01.460"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status starttime="20161110 17:27:01.460" status="PASS" endtime="20161110 17:27:01.461"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.461">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status starttime="20161110 17:27:01.461" status="PASS" endtime="20161110 17:27:01.461"></status>
</kw>
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.462">@{arglist} = [ ]</msg>
<status starttime="20161110 17:27:01.462" status="PASS" endtime="20161110 17:27:01.462"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.462">${args} = {u'data': []}</msg>
<status starttime="20161110 17:27:01.462" status="PASS" endtime="20161110 17:27:01.462"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.465">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:27:01.463" status="PASS" endtime="20161110 17:27:01.465"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.466">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:27:01.466" status="PASS" endtime="20161110 17:27:01.466"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.466">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:01.466" status="PASS" endtime="20161110 17:27:01.466"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:27:01.467" status="PASS" endtime="20161110 17:27:01.467"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.469">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:01.468" status="PASS" endtime="20161110 17:27:01.469"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:01.469">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:01.469" status="PASS" endtime="20161110 17:27:01.469"></status>
</kw>
<status starttime="20161110 17:27:01.469" status="PASS" endtime="20161110 17:27:01.470"></status>
</kw>
<status starttime="20161110 17:27:01.467" status="PASS" endtime="20161110 17:27:01.470"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:01.470">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:27:01.470" status="PASS" endtime="20161110 17:27:01.471"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.471">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:01.471" status="PASS" endtime="20161110 17:27:01.471"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.472">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:27:01.471" status="PASS" endtime="20161110 17:27:01.472"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:01.472">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:27:01.472" status="PASS" endtime="20161110 17:27:01.472"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:02.036">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:02.037">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:01.473" status="PASS" endtime="20161110 17:27:02.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:02.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:02.037" status="PASS" endtime="20161110 17:27:02.038"></status>
</kw>
<status starttime="20161110 17:27:01.470" status="PASS" endtime="20161110 17:27:02.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:02.324">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:02.324">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:02.038" status="PASS" endtime="20161110 17:27:02.325"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:02.327">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:02.326" status="PASS" endtime="20161110 17:27:02.328"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:02.329">Response code:200, Content:{
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:02.329" status="PASS" endtime="20161110 17:27:02.329"></status>
</kw>
<status starttime="20161110 17:27:02.328" status="PASS" endtime="20161110 17:27:02.329"></status>
</kw>
<status starttime="20161110 17:27:02.325" status="PASS" endtime="20161110 17:27:02.330"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:02.330">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:01.465" status="PASS" endtime="20161110 17:27:02.330"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:02.330">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:01.463" status="PASS" endtime="20161110 17:27:02.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:02.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:02.331" status="PASS" endtime="20161110 17:27:02.331"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:02.336">To JSON using : content={
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:27:02.336">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:27:02.336">${content} = {u'data': u'HOST_POWERED_OFF', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:27:02.332" status="PASS" endtime="20161110 17:27:02.337"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:02.337">${bmc_state} = HOST_POWERED_OFF</msg>
<status starttime="20161110 17:27:01.461" status="PASS" endtime="20161110 17:27:02.337"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status starttime="20161110 17:27:02.337" status="PASS" endtime="20161110 17:27:02.337"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status starttime="20161110 17:27:02.337" status="PASS" endtime="20161110 17:27:02.338"></status>
</kw>
<status starttime="20161110 17:27:00.410" status="PASS" endtime="20161110 17:27:02.338"></status>
</kw>
<kw library="SSHLibrary" name="Close Connection">
<doc>Closes the current connection.</doc>
<status starttime="20161110 17:27:02.338" status="PASS" endtime="20161110 17:27:02.370"></status>
</kw>
<status starttime="20161110 17:26:40.009" status="PASS" endtime="20161110 17:27:02.370"></status>
</kw>
<kw library="powerons" name="BMC Power On">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:02.371">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status starttime="20161110 17:27:02.371" status="PASS" endtime="20161110 17:27:02.371"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:27:02.373">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 17:27:02.373" status="FAIL" endtime="20161110 17:27:02.373"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:02.373">${has_host} = False</msg>
<status starttime="20161110 17:27:02.372" status="PASS" endtime="20161110 17:27:02.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 17:27:02.376" status="PASS" endtime="20161110 17:27:02.377"></status>
</kw>
<status starttime="20161110 17:27:02.373" status="PASS" endtime="20161110 17:27:02.377"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:02.381">${port_num} = 22</msg>
<status starttime="20161110 17:27:02.381" status="PASS" endtime="20161110 17:27:02.381"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:02.381">${SSH_PORT} = 22</msg>
<status starttime="20161110 17:27:02.381" status="PASS" endtime="20161110 17:27:02.381"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:02.382">${https_num} = 443</msg>
<status starttime="20161110 17:27:02.382" status="PASS" endtime="20161110 17:27:02.382"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:02.384">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 17:27:02.382" status="PASS" endtime="20161110 17:27:02.384"></status>
</kw>
<status starttime="20161110 17:27:02.380" status="PASS" endtime="20161110 17:27:02.384"></status>
</kw>
<status starttime="20161110 17:27:02.377" status="PASS" endtime="20161110 17:27:02.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:27:02.385">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 17:27:02.385" status="FAIL" endtime="20161110 17:27:02.385"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:02.385">${has_port} = False</msg>
<status starttime="20161110 17:27:02.384" status="PASS" endtime="20161110 17:27:02.385"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 17:27:02.389" status="PASS" endtime="20161110 17:27:02.389"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 17:27:02.389" status="PASS" endtime="20161110 17:27:02.390"></status>
</kw>
<status starttime="20161110 17:27:02.388" status="PASS" endtime="20161110 17:27:02.390"></status>
</kw>
<status starttime="20161110 17:27:02.385" status="PASS" endtime="20161110 17:27:02.390"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:02.390">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 17:27:04.673">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 17:27:02.390" status="PASS" endtime="20161110 17:27:04.673"></status>
</kw>
<status starttime="20161110 17:27:02.372" status="PASS" endtime="20161110 17:27:04.674"></status>
</kw>
<kw library="utils" name="Initiate Power On">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:04.675">@{arglist} = [ ]</msg>
<status starttime="20161110 17:27:04.675" status="PASS" endtime="20161110 17:27:04.675"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:04.676">${args} = {u'data': []}</msg>
<status starttime="20161110 17:27:04.675" status="PASS" endtime="20161110 17:27:04.676"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:04.677">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 17:27:04.677" status="PASS" endtime="20161110 17:27:04.678"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:04.680">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status starttime="20161110 17:27:04.679" status="PASS" endtime="20161110 17:27:04.680"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:04.681">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:04.680" status="PASS" endtime="20161110 17:27:04.681"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:27:04.681" status="PASS" endtime="20161110 17:27:04.682"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:04.684">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:04.683" status="PASS" endtime="20161110 17:27:04.684"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:04.685">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:04.685" status="PASS" endtime="20161110 17:27:04.685"></status>
</kw>
<status starttime="20161110 17:27:04.685" status="PASS" endtime="20161110 17:27:04.685"></status>
</kw>
<status starttime="20161110 17:27:04.682" status="PASS" endtime="20161110 17:27:04.685"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:04.686">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:27:04.686" status="PASS" endtime="20161110 17:27:04.687"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:04.687">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:04.687" status="PASS" endtime="20161110 17:27:04.687"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:04.688">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:27:04.687" status="PASS" endtime="20161110 17:27:04.688"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:04.688">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:27:04.688" status="PASS" endtime="20161110 17:27:04.688"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.138">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:05.139">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:04.689" status="PASS" endtime="20161110 17:27:05.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:05.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:05.139" status="PASS" endtime="20161110 17:27:05.139"></status>
</kw>
<status starttime="20161110 17:27:04.686" status="PASS" endtime="20161110 17:27:05.140"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.599">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:05.599">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:05.140" status="PASS" endtime="20161110 17:27:05.599"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.600">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:05.600" status="PASS" endtime="20161110 17:27:05.600"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:05.601">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:05.601" status="PASS" endtime="20161110 17:27:05.601"></status>
</kw>
<status starttime="20161110 17:27:05.600" status="PASS" endtime="20161110 17:27:05.601"></status>
</kw>
<status starttime="20161110 17:27:05.599" status="PASS" endtime="20161110 17:27:05.602"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:05.602">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:04.678" status="PASS" endtime="20161110 17:27:05.602"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:05.602">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:04.676" status="PASS" endtime="20161110 17:27:05.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:05.602">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:05.602" status="PASS" endtime="20161110 17:27:05.603"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.604">@{arglist} = [ ]</msg>
<status starttime="20161110 17:27:05.604" status="PASS" endtime="20161110 17:27:05.604"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.605">${args} = {u'data': []}</msg>
<status starttime="20161110 17:27:05.604" status="PASS" endtime="20161110 17:27:05.605"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.606">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161110 17:27:05.605" status="PASS" endtime="20161110 17:27:05.606"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.607">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161110 17:27:05.606" status="PASS" endtime="20161110 17:27:05.607"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.607">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:05.607" status="PASS" endtime="20161110 17:27:05.607"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:27:05.608" status="PASS" endtime="20161110 17:27:05.608"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.609">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:05.608" status="PASS" endtime="20161110 17:27:05.609"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:05.610">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:05.610" status="PASS" endtime="20161110 17:27:05.610"></status>
</kw>
<status starttime="20161110 17:27:05.610" status="PASS" endtime="20161110 17:27:05.610"></status>
</kw>
<status starttime="20161110 17:27:05.608" status="PASS" endtime="20161110 17:27:05.610"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:05.611">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:27:05.611" status="PASS" endtime="20161110 17:27:05.612"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.612">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:05.612" status="PASS" endtime="20161110 17:27:05.612"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.613">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:27:05.612" status="PASS" endtime="20161110 17:27:05.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:05.613">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:27:05.613" status="PASS" endtime="20161110 17:27:05.613"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:07.379">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:07.379">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:05.613" status="PASS" endtime="20161110 17:27:07.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:07.380">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:07.380" status="PASS" endtime="20161110 17:27:07.381"></status>
</kw>
<status starttime="20161110 17:27:05.611" status="PASS" endtime="20161110 17:27:07.381"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.220">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:10.220">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:07.381" status="PASS" endtime="20161110 17:27:10.220"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.223">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:10.221" status="PASS" endtime="20161110 17:27:10.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:10.224">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:10.224" status="PASS" endtime="20161110 17:27:10.224"></status>
</kw>
<status starttime="20161110 17:27:10.223" status="PASS" endtime="20161110 17:27:10.225"></status>
</kw>
<status starttime="20161110 17:27:10.221" status="PASS" endtime="20161110 17:27:10.225"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:10.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:05.606" status="PASS" endtime="20161110 17:27:10.225"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:10.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:05.605" status="PASS" endtime="20161110 17:27:10.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:10.226">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:10.226" status="PASS" endtime="20161110 17:27:10.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.227">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:27:10.227">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:27:10.228">${content} = {u'data': 1, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:27:10.227" status="PASS" endtime="20161110 17:27:10.228"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:10.228">${state} = 1</msg>
<status starttime="20161110 17:27:05.603" status="PASS" endtime="20161110 17:27:10.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<status starttime="20161110 17:27:10.229" status="PASS" endtime="20161110 17:27:10.229"></status>
</kw>
<status starttime="20161110 17:27:05.603" status="PASS" endtime="20161110 17:27:10.229"></status>
</kw>
<status starttime="20161110 17:27:05.603" status="PASS" endtime="20161110 17:27:10.229"></status>
</kw>
<status starttime="20161110 17:27:04.674" status="PASS" endtime="20161110 17:27:10.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' != '${EMPTY}'</arg>
<arg>Wait For OS</arg>
</arguments>
<status starttime="20161110 17:27:10.230" status="PASS" endtime="20161110 17:27:10.234"></status>
</kw>
<kw library="SSHLibrary" name="Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>bmc_connection</arg>
</arguments>
<status starttime="20161110 17:27:10.234" status="PASS" endtime="20161110 17:27:10.235"></status>
</kw>
<kw library="powerons" name="Check Power On States">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${OS_WAIT_TIMEOUT}</arg>
<arg>10sec</arg>
<arg>Is Host Booted</arg>
</arguments>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.237">@{arglist} = [ ]</msg>
<status starttime="20161110 17:27:10.237" status="PASS" endtime="20161110 17:27:10.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.238">${args} = {u'data': []}</msg>
<status starttime="20161110 17:27:10.238" status="PASS" endtime="20161110 17:27:10.238"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.239">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:27:10.239" status="PASS" endtime="20161110 17:27:10.239"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.240">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:27:10.240" status="PASS" endtime="20161110 17:27:10.240"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.240">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:10.240" status="PASS" endtime="20161110 17:27:10.240"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:27:10.241" status="PASS" endtime="20161110 17:27:10.241"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.242">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:10.242" status="PASS" endtime="20161110 17:27:10.242"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:10.243">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:10.243" status="PASS" endtime="20161110 17:27:10.243"></status>
</kw>
<status starttime="20161110 17:27:10.242" status="PASS" endtime="20161110 17:27:10.243"></status>
</kw>
<status starttime="20161110 17:27:10.241" status="PASS" endtime="20161110 17:27:10.243"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:10.244">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:27:10.244" status="PASS" endtime="20161110 17:27:10.245"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.245">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:10.245" status="PASS" endtime="20161110 17:27:10.245"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.246">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:27:10.245" status="PASS" endtime="20161110 17:27:10.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:10.246">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:27:10.246" status="PASS" endtime="20161110 17:27:10.246"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:11.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:11.059">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:10.246" status="PASS" endtime="20161110 17:27:11.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:11.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:11.059" status="PASS" endtime="20161110 17:27:11.060"></status>
</kw>
<status starttime="20161110 17:27:10.244" status="PASS" endtime="20161110 17:27:11.061"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:11.411">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:11.411">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:11.061" status="PASS" endtime="20161110 17:27:11.411"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:11.413">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:11.412" status="PASS" endtime="20161110 17:27:11.413"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:11.415">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:11.414" status="PASS" endtime="20161110 17:27:11.415"></status>
</kw>
<status starttime="20161110 17:27:11.413" status="PASS" endtime="20161110 17:27:11.415"></status>
</kw>
<status starttime="20161110 17:27:11.411" status="PASS" endtime="20161110 17:27:11.415"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:11.416">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:10.239" status="PASS" endtime="20161110 17:27:11.416"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:11.416">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:10.238" status="PASS" endtime="20161110 17:27:11.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:11.417">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:11.416" status="PASS" endtime="20161110 17:27:11.417"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:11.418">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:27:11.418">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:27:11.418">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:27:11.417" status="PASS" endtime="20161110 17:27:11.418"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:11.418">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:27:10.237" status="PASS" endtime="20161110 17:27:11.419"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:27:11.421">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:27:11.420" status="FAIL" endtime="20161110 17:27:11.421"></status>
</kw>
<status starttime="20161110 17:27:10.236" status="FAIL" endtime="20161110 17:27:11.421"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:21.424">@{arglist} = [ ]</msg>
<status starttime="20161110 17:27:21.423" status="PASS" endtime="20161110 17:27:21.424"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:21.425">${args} = {u'data': []}</msg>
<status starttime="20161110 17:27:21.424" status="PASS" endtime="20161110 17:27:21.425"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:21.426">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:27:21.426" status="PASS" endtime="20161110 17:27:21.426"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:21.428">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:27:21.428" status="PASS" endtime="20161110 17:27:21.428"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:21.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:21.428" status="PASS" endtime="20161110 17:27:21.429"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:27:21.429" status="PASS" endtime="20161110 17:27:21.429"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:21.432">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:21.430" status="PASS" endtime="20161110 17:27:21.432"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:21.433">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:21.433" status="PASS" endtime="20161110 17:27:21.433"></status>
</kw>
<status starttime="20161110 17:27:21.432" status="PASS" endtime="20161110 17:27:21.433"></status>
</kw>
<status starttime="20161110 17:27:21.430" status="PASS" endtime="20161110 17:27:21.433"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:21.435">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:27:21.434" status="PASS" endtime="20161110 17:27:21.435"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:21.435">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:21.435" status="PASS" endtime="20161110 17:27:21.435"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:21.436">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:27:21.436" status="PASS" endtime="20161110 17:27:21.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:21.437">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:27:21.436" status="PASS" endtime="20161110 17:27:21.437"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:21.861">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:21.861">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:21.437" status="PASS" endtime="20161110 17:27:21.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:21.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:21.861" status="PASS" endtime="20161110 17:27:21.862"></status>
</kw>
<status starttime="20161110 17:27:21.434" status="PASS" endtime="20161110 17:27:21.862"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:22.141">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:22.141">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:21.863" status="PASS" endtime="20161110 17:27:22.141"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:22.143">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:22.142" status="PASS" endtime="20161110 17:27:22.143"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:22.145">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:22.144" status="PASS" endtime="20161110 17:27:22.145"></status>
</kw>
<status starttime="20161110 17:27:22.143" status="PASS" endtime="20161110 17:27:22.145"></status>
</kw>
<status starttime="20161110 17:27:22.141" status="PASS" endtime="20161110 17:27:22.145"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:22.146">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:21.427" status="PASS" endtime="20161110 17:27:22.146"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:22.146">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:21.425" status="PASS" endtime="20161110 17:27:22.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:22.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:22.146" status="PASS" endtime="20161110 17:27:22.147"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:22.148">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:27:22.148">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:27:22.148">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:27:22.148" status="PASS" endtime="20161110 17:27:22.148"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:22.149">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:27:21.423" status="PASS" endtime="20161110 17:27:22.149"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:27:22.150">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:27:22.149" status="FAIL" endtime="20161110 17:27:22.150"></status>
</kw>
<status starttime="20161110 17:27:21.422" status="FAIL" endtime="20161110 17:27:22.150"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.153">@{arglist} = [ ]</msg>
<status starttime="20161110 17:27:32.152" status="PASS" endtime="20161110 17:27:32.153"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.157">${args} = {u'data': []}</msg>
<status starttime="20161110 17:27:32.153" status="PASS" endtime="20161110 17:27:32.157"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.158">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:27:32.158" status="PASS" endtime="20161110 17:27:32.159"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.161">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:27:32.160" status="PASS" endtime="20161110 17:27:32.161"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.161">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:32.161" status="PASS" endtime="20161110 17:27:32.161"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:27:32.162" status="PASS" endtime="20161110 17:27:32.162"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.165">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:32.164" status="PASS" endtime="20161110 17:27:32.165"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:32.166">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:32.165" status="PASS" endtime="20161110 17:27:32.166"></status>
</kw>
<status starttime="20161110 17:27:32.165" status="PASS" endtime="20161110 17:27:32.166"></status>
</kw>
<status starttime="20161110 17:27:32.163" status="PASS" endtime="20161110 17:27:32.166"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:32.167">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:27:32.167" status="PASS" endtime="20161110 17:27:32.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.168">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:32.167" status="PASS" endtime="20161110 17:27:32.168"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.168">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:27:32.168" status="PASS" endtime="20161110 17:27:32.168"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.169">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:27:32.168" status="PASS" endtime="20161110 17:27:32.169"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:32.503">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:32.169" status="PASS" endtime="20161110 17:27:32.503"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:32.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:32.503" status="PASS" endtime="20161110 17:27:32.504"></status>
</kw>
<status starttime="20161110 17:27:32.166" status="PASS" endtime="20161110 17:27:32.504"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.791">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:32.791">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:32.504" status="PASS" endtime="20161110 17:27:32.791"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.792">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:32.792" status="PASS" endtime="20161110 17:27:32.792"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:32.793">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:32.793" status="PASS" endtime="20161110 17:27:32.793"></status>
</kw>
<status starttime="20161110 17:27:32.793" status="PASS" endtime="20161110 17:27:32.793"></status>
</kw>
<status starttime="20161110 17:27:32.791" status="PASS" endtime="20161110 17:27:32.793"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:32.794">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:32.159" status="PASS" endtime="20161110 17:27:32.794"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:32.794">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:32.157" status="PASS" endtime="20161110 17:27:32.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:32.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:32.794" status="PASS" endtime="20161110 17:27:32.795"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:32.795">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:27:32.795">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:27:32.795">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:27:32.795" status="PASS" endtime="20161110 17:27:32.795"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:32.796">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:27:32.151" status="PASS" endtime="20161110 17:27:32.796"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:27:32.797">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:27:32.796" status="FAIL" endtime="20161110 17:27:32.797"></status>
</kw>
<status starttime="20161110 17:27:32.151" status="FAIL" endtime="20161110 17:27:32.797"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:42.800">@{arglist} = [ ]</msg>
<status starttime="20161110 17:27:42.800" status="PASS" endtime="20161110 17:27:42.800"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:42.801">${args} = {u'data': []}</msg>
<status starttime="20161110 17:27:42.801" status="PASS" endtime="20161110 17:27:42.801"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:42.803">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:27:42.802" status="PASS" endtime="20161110 17:27:42.803"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:42.805">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:27:42.804" status="PASS" endtime="20161110 17:27:42.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:42.806">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:42.806" status="PASS" endtime="20161110 17:27:42.806"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:27:42.806" status="PASS" endtime="20161110 17:27:42.807"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:42.809">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:42.808" status="PASS" endtime="20161110 17:27:42.809"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:42.811">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:42.810" status="PASS" endtime="20161110 17:27:42.811"></status>
</kw>
<status starttime="20161110 17:27:42.810" status="PASS" endtime="20161110 17:27:42.811"></status>
</kw>
<status starttime="20161110 17:27:42.807" status="PASS" endtime="20161110 17:27:42.811"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:42.813">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:27:42.812" status="PASS" endtime="20161110 17:27:42.814"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:42.815">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:42.814" status="PASS" endtime="20161110 17:27:42.815"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:42.815">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:27:42.815" status="PASS" endtime="20161110 17:27:42.816"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:42.816">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:27:42.816" status="PASS" endtime="20161110 17:27:42.816"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:43.146">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:43.146">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:42.816" status="PASS" endtime="20161110 17:27:43.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:43.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:43.147" status="PASS" endtime="20161110 17:27:43.148"></status>
</kw>
<status starttime="20161110 17:27:42.811" status="PASS" endtime="20161110 17:27:43.148"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:43.429">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:43.429">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:43.148" status="PASS" endtime="20161110 17:27:43.429"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:43.430">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:43.430" status="PASS" endtime="20161110 17:27:43.430"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:43.431">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:43.431" status="PASS" endtime="20161110 17:27:43.431"></status>
</kw>
<status starttime="20161110 17:27:43.431" status="PASS" endtime="20161110 17:27:43.431"></status>
</kw>
<status starttime="20161110 17:27:43.429" status="PASS" endtime="20161110 17:27:43.431"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:43.432">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:42.803" status="PASS" endtime="20161110 17:27:43.432"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:43.432">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:42.801" status="PASS" endtime="20161110 17:27:43.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:43.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:43.432" status="PASS" endtime="20161110 17:27:43.432"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:43.433">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:27:43.433">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:27:43.433">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:27:43.433" status="PASS" endtime="20161110 17:27:43.433"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:43.433">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:27:42.799" status="PASS" endtime="20161110 17:27:43.433"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:27:43.434">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:27:43.434" status="FAIL" endtime="20161110 17:27:43.434"></status>
</kw>
<status starttime="20161110 17:27:42.798" status="FAIL" endtime="20161110 17:27:43.434"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:53.437">@{arglist} = [ ]</msg>
<status starttime="20161110 17:27:53.436" status="PASS" endtime="20161110 17:27:53.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:53.438">${args} = {u'data': []}</msg>
<status starttime="20161110 17:27:53.437" status="PASS" endtime="20161110 17:27:53.438"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:53.440">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:27:53.439" status="PASS" endtime="20161110 17:27:53.440"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:53.442">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:27:53.441" status="PASS" endtime="20161110 17:27:53.442"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:53.443">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:53.442" status="PASS" endtime="20161110 17:27:53.443"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:27:53.443" status="PASS" endtime="20161110 17:27:53.444"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:53.446">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:53.445" status="PASS" endtime="20161110 17:27:53.446"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:53.447">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:27:53.447" status="PASS" endtime="20161110 17:27:53.447"></status>
</kw>
<status starttime="20161110 17:27:53.446" status="PASS" endtime="20161110 17:27:53.447"></status>
</kw>
<status starttime="20161110 17:27:53.444" status="PASS" endtime="20161110 17:27:53.448"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:53.448">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:27:53.448" status="PASS" endtime="20161110 17:27:53.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:53.449">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:27:53.449" status="PASS" endtime="20161110 17:27:53.449"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:53.450">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:27:53.449" status="PASS" endtime="20161110 17:27:53.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:53.450">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:27:53.450" status="PASS" endtime="20161110 17:27:53.450"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:53.783">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:53.783">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:53.451" status="PASS" endtime="20161110 17:27:53.783"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:53.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:53.784" status="PASS" endtime="20161110 17:27:53.785"></status>
</kw>
<status starttime="20161110 17:27:53.448" status="PASS" endtime="20161110 17:27:53.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:54.062">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:27:54.062">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:53.786" status="PASS" endtime="20161110 17:27:54.062"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:54.064">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:54.063" status="PASS" endtime="20161110 17:27:54.064"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:54.066">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:27:54.065" status="PASS" endtime="20161110 17:27:54.066"></status>
</kw>
<status starttime="20161110 17:27:54.065" status="PASS" endtime="20161110 17:27:54.066"></status>
</kw>
<status starttime="20161110 17:27:54.063" status="PASS" endtime="20161110 17:27:54.066"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:54.067">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:53.440" status="PASS" endtime="20161110 17:27:54.067"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:54.067">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:27:53.438" status="PASS" endtime="20161110 17:27:54.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:27:54.068">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:27:54.067" status="PASS" endtime="20161110 17:27:54.068"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:27:54.069">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:27:54.069">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:27:54.069">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:27:54.068" status="PASS" endtime="20161110 17:27:54.069"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:27:54.070">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:27:53.436" status="PASS" endtime="20161110 17:27:54.070"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:27:54.071">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:27:54.071" status="FAIL" endtime="20161110 17:27:54.071"></status>
</kw>
<status starttime="20161110 17:27:53.435" status="FAIL" endtime="20161110 17:27:54.071"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.075">@{arglist} = [ ]</msg>
<status starttime="20161110 17:28:04.074" status="PASS" endtime="20161110 17:28:04.075"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.076">${args} = {u'data': []}</msg>
<status starttime="20161110 17:28:04.075" status="PASS" endtime="20161110 17:28:04.076"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.078">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:28:04.077" status="PASS" endtime="20161110 17:28:04.078"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.080">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:28:04.079" status="PASS" endtime="20161110 17:28:04.080"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.081">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:04.080" status="PASS" endtime="20161110 17:28:04.081"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:28:04.081" status="PASS" endtime="20161110 17:28:04.081"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.084">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:04.083" status="PASS" endtime="20161110 17:28:04.084"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:04.085">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:04.085" status="PASS" endtime="20161110 17:28:04.085"></status>
</kw>
<status starttime="20161110 17:28:04.084" status="PASS" endtime="20161110 17:28:04.086"></status>
</kw>
<status starttime="20161110 17:28:04.082" status="PASS" endtime="20161110 17:28:04.086"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:04.086">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:28:04.086" status="PASS" endtime="20161110 17:28:04.087"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.087">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:04.087" status="PASS" endtime="20161110 17:28:04.088"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.088">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:28:04.088" status="PASS" endtime="20161110 17:28:04.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.089">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:28:04.088" status="PASS" endtime="20161110 17:28:04.089"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.425">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:04.425">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:04.089" status="PASS" endtime="20161110 17:28:04.425"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:04.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:04.425" status="PASS" endtime="20161110 17:28:04.426"></status>
</kw>
<status starttime="20161110 17:28:04.086" status="PASS" endtime="20161110 17:28:04.426"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.702">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:04.703">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:04.426" status="PASS" endtime="20161110 17:28:04.703"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.704">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:04.703" status="PASS" endtime="20161110 17:28:04.704"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:04.705">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:04.705" status="PASS" endtime="20161110 17:28:04.705"></status>
</kw>
<status starttime="20161110 17:28:04.704" status="PASS" endtime="20161110 17:28:04.706"></status>
</kw>
<status starttime="20161110 17:28:04.703" status="PASS" endtime="20161110 17:28:04.706"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:04.706">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:04.078" status="PASS" endtime="20161110 17:28:04.706"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:04.707">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:04.076" status="PASS" endtime="20161110 17:28:04.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:04.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:04.707" status="PASS" endtime="20161110 17:28:04.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:04.709">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:28:04.709">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:28:04.709">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:28:04.708" status="PASS" endtime="20161110 17:28:04.709"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:04.709">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:28:04.074" status="PASS" endtime="20161110 17:28:04.710"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:28:04.710">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:28:04.710" status="FAIL" endtime="20161110 17:28:04.710"></status>
</kw>
<status starttime="20161110 17:28:04.073" status="FAIL" endtime="20161110 17:28:04.711"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:14.713">@{arglist} = [ ]</msg>
<status starttime="20161110 17:28:14.713" status="PASS" endtime="20161110 17:28:14.713"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:14.714">${args} = {u'data': []}</msg>
<status starttime="20161110 17:28:14.713" status="PASS" endtime="20161110 17:28:14.714"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:14.716">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:28:14.715" status="PASS" endtime="20161110 17:28:14.716"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:14.718">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:28:14.717" status="PASS" endtime="20161110 17:28:14.718"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:14.719">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:14.718" status="PASS" endtime="20161110 17:28:14.719"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:28:14.719" status="PASS" endtime="20161110 17:28:14.720"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:14.723">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:14.721" status="PASS" endtime="20161110 17:28:14.723"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:14.725">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:14.724" status="PASS" endtime="20161110 17:28:14.725"></status>
</kw>
<status starttime="20161110 17:28:14.723" status="PASS" endtime="20161110 17:28:14.725"></status>
</kw>
<status starttime="20161110 17:28:14.720" status="PASS" endtime="20161110 17:28:14.725"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:14.726">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:28:14.726" status="PASS" endtime="20161110 17:28:14.727"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:14.727">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:14.727" status="PASS" endtime="20161110 17:28:14.727"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:14.728">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:28:14.727" status="PASS" endtime="20161110 17:28:14.728"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:14.728">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:28:14.728" status="PASS" endtime="20161110 17:28:14.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:15.058">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:15.058">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:14.728" status="PASS" endtime="20161110 17:28:15.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:15.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:15.059" status="PASS" endtime="20161110 17:28:15.059"></status>
</kw>
<status starttime="20161110 17:28:14.726" status="PASS" endtime="20161110 17:28:15.059"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:15.554">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:15.554">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:15.059" status="PASS" endtime="20161110 17:28:15.554"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:15.555">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:15.555" status="PASS" endtime="20161110 17:28:15.555"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:15.556">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:15.556" status="PASS" endtime="20161110 17:28:15.556"></status>
</kw>
<status starttime="20161110 17:28:15.555" status="PASS" endtime="20161110 17:28:15.556"></status>
</kw>
<status starttime="20161110 17:28:15.554" status="PASS" endtime="20161110 17:28:15.556"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:15.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:14.716" status="PASS" endtime="20161110 17:28:15.557"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:15.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:14.714" status="PASS" endtime="20161110 17:28:15.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:15.557">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:15.557" status="PASS" endtime="20161110 17:28:15.557"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:15.558">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:28:15.558">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:28:15.558">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:28:15.558" status="PASS" endtime="20161110 17:28:15.558"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:15.558">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:28:14.712" status="PASS" endtime="20161110 17:28:15.558"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:28:15.559">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:28:15.559" status="FAIL" endtime="20161110 17:28:15.559"></status>
</kw>
<status starttime="20161110 17:28:14.711" status="FAIL" endtime="20161110 17:28:15.559"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:25.562">@{arglist} = [ ]</msg>
<status starttime="20161110 17:28:25.561" status="PASS" endtime="20161110 17:28:25.562"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:25.563">${args} = {u'data': []}</msg>
<status starttime="20161110 17:28:25.562" status="PASS" endtime="20161110 17:28:25.563"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:25.565">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:28:25.564" status="PASS" endtime="20161110 17:28:25.565"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:25.567">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:28:25.566" status="PASS" endtime="20161110 17:28:25.567"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:25.568">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:25.567" status="PASS" endtime="20161110 17:28:25.568"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:28:25.568" status="PASS" endtime="20161110 17:28:25.569"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:25.571">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:25.570" status="PASS" endtime="20161110 17:28:25.571"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:25.572">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:25.572" status="PASS" endtime="20161110 17:28:25.573"></status>
</kw>
<status starttime="20161110 17:28:25.571" status="PASS" endtime="20161110 17:28:25.573"></status>
</kw>
<status starttime="20161110 17:28:25.569" status="PASS" endtime="20161110 17:28:25.573"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:25.574">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:28:25.574" status="PASS" endtime="20161110 17:28:25.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:25.576">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:25.575" status="PASS" endtime="20161110 17:28:25.576"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:25.576">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:28:25.576" status="PASS" endtime="20161110 17:28:25.576"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:25.577">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:28:25.577" status="PASS" endtime="20161110 17:28:25.577"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:27.081">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:27.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:25.577" status="PASS" endtime="20161110 17:28:27.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:27.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:27.082" status="PASS" endtime="20161110 17:28:27.083"></status>
</kw>
<status starttime="20161110 17:28:25.573" status="PASS" endtime="20161110 17:28:27.083"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:28.041">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:28.041">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:27.084" status="PASS" endtime="20161110 17:28:28.041"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:28.043">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:28.042" status="PASS" endtime="20161110 17:28:28.044"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:28.047">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:28.047" status="PASS" endtime="20161110 17:28:28.047"></status>
</kw>
<status starttime="20161110 17:28:28.044" status="PASS" endtime="20161110 17:28:28.048"></status>
</kw>
<status starttime="20161110 17:28:28.042" status="PASS" endtime="20161110 17:28:28.048"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:28.048">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:25.565" status="PASS" endtime="20161110 17:28:28.048"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:28.049">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:25.563" status="PASS" endtime="20161110 17:28:28.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:28.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:28.050" status="PASS" endtime="20161110 17:28:28.050"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:28.052">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:28:28.052">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:28:28.052">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:28:28.051" status="PASS" endtime="20161110 17:28:28.052"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:28.052">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:28:25.561" status="PASS" endtime="20161110 17:28:28.053"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:28:28.054">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:28:28.053" status="FAIL" endtime="20161110 17:28:28.054"></status>
</kw>
<status starttime="20161110 17:28:25.560" status="FAIL" endtime="20161110 17:28:28.054"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.057">@{arglist} = [ ]</msg>
<status starttime="20161110 17:28:38.057" status="PASS" endtime="20161110 17:28:38.057"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.058">${args} = {u'data': []}</msg>
<status starttime="20161110 17:28:38.058" status="PASS" endtime="20161110 17:28:38.058"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.060">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:28:38.060" status="PASS" endtime="20161110 17:28:38.060"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.063">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:28:38.062" status="PASS" endtime="20161110 17:28:38.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.064">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:38.063" status="PASS" endtime="20161110 17:28:38.064"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:28:38.065" status="PASS" endtime="20161110 17:28:38.065"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.068">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:38.067" status="PASS" endtime="20161110 17:28:38.068"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:38.069">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:38.069" status="PASS" endtime="20161110 17:28:38.069"></status>
</kw>
<status starttime="20161110 17:28:38.068" status="PASS" endtime="20161110 17:28:38.069"></status>
</kw>
<status starttime="20161110 17:28:38.066" status="PASS" endtime="20161110 17:28:38.069"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:38.070">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:28:38.070" status="PASS" endtime="20161110 17:28:38.071"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.071">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:38.071" status="PASS" endtime="20161110 17:28:38.071"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.072">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:28:38.071" status="PASS" endtime="20161110 17:28:38.072"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.072">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:28:38.072" status="PASS" endtime="20161110 17:28:38.072"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:38.405">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:38.073" status="PASS" endtime="20161110 17:28:38.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:38.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:38.405" status="PASS" endtime="20161110 17:28:38.405"></status>
</kw>
<status starttime="20161110 17:28:38.069" status="PASS" endtime="20161110 17:28:38.405"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.682">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:38.682">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:38.406" status="PASS" endtime="20161110 17:28:38.682"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.683">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:38.683" status="PASS" endtime="20161110 17:28:38.683"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:38.684">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:38.684" status="PASS" endtime="20161110 17:28:38.684"></status>
</kw>
<status starttime="20161110 17:28:38.683" status="PASS" endtime="20161110 17:28:38.684"></status>
</kw>
<status starttime="20161110 17:28:38.682" status="PASS" endtime="20161110 17:28:38.684"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:38.684">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:38.061" status="PASS" endtime="20161110 17:28:38.685"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:38.685">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:38.059" status="PASS" endtime="20161110 17:28:38.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:38.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:38.685" status="PASS" endtime="20161110 17:28:38.685"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:38.686">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:28:38.686">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:28:38.686">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:28:38.685" status="PASS" endtime="20161110 17:28:38.686"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:38.686">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:28:38.056" status="PASS" endtime="20161110 17:28:38.686"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:28:38.687">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:28:38.687" status="FAIL" endtime="20161110 17:28:38.687"></status>
</kw>
<status starttime="20161110 17:28:38.055" status="FAIL" endtime="20161110 17:28:38.688"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:48.690">@{arglist} = [ ]</msg>
<status starttime="20161110 17:28:48.690" status="PASS" endtime="20161110 17:28:48.690"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:48.691">${args} = {u'data': []}</msg>
<status starttime="20161110 17:28:48.691" status="PASS" endtime="20161110 17:28:48.691"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:48.693">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:28:48.692" status="PASS" endtime="20161110 17:28:48.693"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:48.695">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:28:48.694" status="PASS" endtime="20161110 17:28:48.695"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:48.695">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:48.695" status="PASS" endtime="20161110 17:28:48.696"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:28:48.696" status="PASS" endtime="20161110 17:28:48.697"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:48.699">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:48.698" status="PASS" endtime="20161110 17:28:48.699"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:48.700">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:48.699" status="PASS" endtime="20161110 17:28:48.700"></status>
</kw>
<status starttime="20161110 17:28:48.699" status="PASS" endtime="20161110 17:28:48.700"></status>
</kw>
<status starttime="20161110 17:28:48.697" status="PASS" endtime="20161110 17:28:48.700"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:48.701">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:28:48.701" status="PASS" endtime="20161110 17:28:48.702"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:48.702">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:48.702" status="PASS" endtime="20161110 17:28:48.702"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:48.703">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:28:48.703" status="PASS" endtime="20161110 17:28:48.703"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:48.704">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:28:48.703" status="PASS" endtime="20161110 17:28:48.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:49.037">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:49.037">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:48.704" status="PASS" endtime="20161110 17:28:49.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:49.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:49.037" status="PASS" endtime="20161110 17:28:49.038"></status>
</kw>
<status starttime="20161110 17:28:48.700" status="PASS" endtime="20161110 17:28:49.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:49.324">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:49.324">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:49.038" status="PASS" endtime="20161110 17:28:49.324"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:49.325">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:49.325" status="PASS" endtime="20161110 17:28:49.325"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:49.326">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:49.326" status="PASS" endtime="20161110 17:28:49.326"></status>
</kw>
<status starttime="20161110 17:28:49.326" status="PASS" endtime="20161110 17:28:49.327"></status>
</kw>
<status starttime="20161110 17:28:49.324" status="PASS" endtime="20161110 17:28:49.327"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:49.327">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:48.693" status="PASS" endtime="20161110 17:28:49.327"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:49.327">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:48.691" status="PASS" endtime="20161110 17:28:49.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:49.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:49.327" status="PASS" endtime="20161110 17:28:49.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:49.328">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:28:49.328">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:28:49.328">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:28:49.328" status="PASS" endtime="20161110 17:28:49.328"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:49.329">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:28:48.689" status="PASS" endtime="20161110 17:28:49.329"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:28:49.329">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:28:49.329" status="FAIL" endtime="20161110 17:28:49.329"></status>
</kw>
<status starttime="20161110 17:28:48.688" status="FAIL" endtime="20161110 17:28:49.330"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.332">@{arglist} = [ ]</msg>
<status starttime="20161110 17:28:59.332" status="PASS" endtime="20161110 17:28:59.333"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.334">${args} = {u'data': []}</msg>
<status starttime="20161110 17:28:59.333" status="PASS" endtime="20161110 17:28:59.334"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.335">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:28:59.335" status="PASS" endtime="20161110 17:28:59.335"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.337">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:28:59.337" status="PASS" endtime="20161110 17:28:59.338"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.338">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:59.338" status="PASS" endtime="20161110 17:28:59.338"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:28:59.339" status="PASS" endtime="20161110 17:28:59.339"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.342">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:59.341" status="PASS" endtime="20161110 17:28:59.342"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:59.343">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:28:59.343" status="PASS" endtime="20161110 17:28:59.344"></status>
</kw>
<status starttime="20161110 17:28:59.342" status="PASS" endtime="20161110 17:28:59.344"></status>
</kw>
<status starttime="20161110 17:28:59.340" status="PASS" endtime="20161110 17:28:59.344"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:59.345">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:28:59.345" status="PASS" endtime="20161110 17:28:59.346"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.347">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:28:59.347" status="PASS" endtime="20161110 17:28:59.347"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.348">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:28:59.347" status="PASS" endtime="20161110 17:28:59.348"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.348">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:28:59.348" status="PASS" endtime="20161110 17:28:59.348"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.683">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:59.683">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:59.348" status="PASS" endtime="20161110 17:28:59.683"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:59.684">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:59.684" status="PASS" endtime="20161110 17:28:59.684"></status>
</kw>
<status starttime="20161110 17:28:59.344" status="PASS" endtime="20161110 17:28:59.685"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.961">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:28:59.961">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:59.685" status="PASS" endtime="20161110 17:28:59.962"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.963">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:59.962" status="PASS" endtime="20161110 17:28:59.963"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:59.965">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:28:59.964" status="PASS" endtime="20161110 17:28:59.965"></status>
</kw>
<status starttime="20161110 17:28:59.964" status="PASS" endtime="20161110 17:28:59.965"></status>
</kw>
<status starttime="20161110 17:28:59.962" status="PASS" endtime="20161110 17:28:59.965"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:59.965">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:59.336" status="PASS" endtime="20161110 17:28:59.966"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:59.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:28:59.334" status="PASS" endtime="20161110 17:28:59.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:28:59.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:28:59.966" status="PASS" endtime="20161110 17:28:59.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:28:59.967">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:28:59.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:28:59.968">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:28:59.967" status="PASS" endtime="20161110 17:28:59.968"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:28:59.968">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:28:59.331" status="PASS" endtime="20161110 17:28:59.968"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:28:59.969">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:28:59.968" status="FAIL" endtime="20161110 17:28:59.969"></status>
</kw>
<status starttime="20161110 17:28:59.330" status="FAIL" endtime="20161110 17:28:59.969"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:09.971">@{arglist} = [ ]</msg>
<status starttime="20161110 17:29:09.971" status="PASS" endtime="20161110 17:29:09.971"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:09.972">${args} = {u'data': []}</msg>
<status starttime="20161110 17:29:09.971" status="PASS" endtime="20161110 17:29:09.972"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:09.974">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:29:09.973" status="PASS" endtime="20161110 17:29:09.974"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:09.976">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:29:09.975" status="PASS" endtime="20161110 17:29:09.976"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:09.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:29:09.976" status="PASS" endtime="20161110 17:29:09.977"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:29:09.977" status="PASS" endtime="20161110 17:29:09.977"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:09.980">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:29:09.978" status="PASS" endtime="20161110 17:29:09.980"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:09.981">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:29:09.981" status="PASS" endtime="20161110 17:29:09.981"></status>
</kw>
<status starttime="20161110 17:29:09.980" status="PASS" endtime="20161110 17:29:09.982"></status>
</kw>
<status starttime="20161110 17:29:09.978" status="PASS" endtime="20161110 17:29:09.982"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:09.983">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:29:09.983" status="PASS" endtime="20161110 17:29:09.984"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:09.984">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:29:09.984" status="PASS" endtime="20161110 17:29:09.984"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:09.985">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:29:09.985" status="PASS" endtime="20161110 17:29:09.985"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:09.986">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:29:09.986" status="PASS" endtime="20161110 17:29:09.986"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:10.314">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:29:10.314">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:29:09.986" status="PASS" endtime="20161110 17:29:10.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:10.315">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:29:10.315" status="PASS" endtime="20161110 17:29:10.315"></status>
</kw>
<status starttime="20161110 17:29:09.982" status="PASS" endtime="20161110 17:29:10.316"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:10.708">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:29:10.708">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:29:10.316" status="PASS" endtime="20161110 17:29:10.708"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:10.711">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:29:10.709" status="PASS" endtime="20161110 17:29:10.711"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:10.712">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:29:10.712" status="PASS" endtime="20161110 17:29:10.712"></status>
</kw>
<status starttime="20161110 17:29:10.711" status="PASS" endtime="20161110 17:29:10.713"></status>
</kw>
<status starttime="20161110 17:29:10.709" status="PASS" endtime="20161110 17:29:10.713"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:29:10.713">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:29:09.974" status="PASS" endtime="20161110 17:29:10.713"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:29:10.714">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:29:09.973" status="PASS" endtime="20161110 17:29:10.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:10.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:29:10.714" status="PASS" endtime="20161110 17:29:10.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:10.716">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:29:10.717">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:29:10.717">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:29:10.716" status="PASS" endtime="20161110 17:29:10.717"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:29:10.718">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:29:09.970" status="PASS" endtime="20161110 17:29:10.718"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:29:10.719">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:29:10.718" status="FAIL" endtime="20161110 17:29:10.719"></status>
</kw>
<status starttime="20161110 17:29:09.969" status="FAIL" endtime="20161110 17:29:10.719"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:20.722">@{arglist} = [ ]</msg>
<status starttime="20161110 17:29:20.721" status="PASS" endtime="20161110 17:29:20.722"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:20.723">${args} = {u'data': []}</msg>
<status starttime="20161110 17:29:20.722" status="PASS" endtime="20161110 17:29:20.723"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:20.725">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:29:20.725" status="PASS" endtime="20161110 17:29:20.725"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:20.727">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:29:20.726" status="PASS" endtime="20161110 17:29:20.727"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:20.728">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:29:20.728" status="PASS" endtime="20161110 17:29:20.728"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:29:20.729" status="PASS" endtime="20161110 17:29:20.729"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:20.731">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:29:20.730" status="PASS" endtime="20161110 17:29:20.732"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:20.733">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:29:20.732" status="PASS" endtime="20161110 17:29:20.733"></status>
</kw>
<status starttime="20161110 17:29:20.732" status="PASS" endtime="20161110 17:29:20.733"></status>
</kw>
<status starttime="20161110 17:29:20.729" status="PASS" endtime="20161110 17:29:20.733"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:20.735">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:29:20.734" status="PASS" endtime="20161110 17:29:20.735"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:20.736">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:29:20.736" status="PASS" endtime="20161110 17:29:20.736"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:20.737">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:29:20.737" status="PASS" endtime="20161110 17:29:20.737"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:20.738">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:29:20.737" status="PASS" endtime="20161110 17:29:20.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:21.066">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:29:21.067">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:29:20.738" status="PASS" endtime="20161110 17:29:21.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:21.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:29:21.067" status="PASS" endtime="20161110 17:29:21.067"></status>
</kw>
<status starttime="20161110 17:29:20.734" status="PASS" endtime="20161110 17:29:21.068"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:21.346">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:29:21.346">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:29:21.068" status="PASS" endtime="20161110 17:29:21.346"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:21.348">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:29:21.347" status="PASS" endtime="20161110 17:29:21.348"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:21.349">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:29:21.349" status="PASS" endtime="20161110 17:29:21.349"></status>
</kw>
<status starttime="20161110 17:29:21.348" status="PASS" endtime="20161110 17:29:21.349"></status>
</kw>
<status starttime="20161110 17:29:21.347" status="PASS" endtime="20161110 17:29:21.350"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:29:21.350">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:29:20.725" status="PASS" endtime="20161110 17:29:21.350"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:29:21.350">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:29:20.723" status="PASS" endtime="20161110 17:29:21.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:21.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:29:21.350" status="PASS" endtime="20161110 17:29:21.351"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:21.351">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:29:21.351">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:29:21.351">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:29:21.351" status="PASS" endtime="20161110 17:29:21.351"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:29:21.351">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:29:20.721" status="PASS" endtime="20161110 17:29:21.351"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:29:21.352">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:29:21.352" status="FAIL" endtime="20161110 17:29:21.352"></status>
</kw>
<status starttime="20161110 17:29:20.720" status="FAIL" endtime="20161110 17:29:21.352"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:31.354">@{arglist} = [ ]</msg>
<status starttime="20161110 17:29:31.354" status="PASS" endtime="20161110 17:29:31.354"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:31.355">${args} = {u'data': []}</msg>
<status starttime="20161110 17:29:31.354" status="PASS" endtime="20161110 17:29:31.355"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:31.356">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:29:31.355" status="PASS" endtime="20161110 17:29:31.356"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:31.358">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:29:31.357" status="PASS" endtime="20161110 17:29:31.358"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:31.358">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:29:31.358" status="PASS" endtime="20161110 17:29:31.358"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:29:31.358" status="PASS" endtime="20161110 17:29:31.359"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:31.360">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:29:31.360" status="PASS" endtime="20161110 17:29:31.360"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:31.361">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:29:31.361" status="PASS" endtime="20161110 17:29:31.361"></status>
</kw>
<status starttime="20161110 17:29:31.360" status="PASS" endtime="20161110 17:29:31.361"></status>
</kw>
<status starttime="20161110 17:29:31.359" status="PASS" endtime="20161110 17:29:31.361"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:29:31.362">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:29:31.362" status="PASS" endtime="20161110 17:29:31.363"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:31.363">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:29:31.363" status="PASS" endtime="20161110 17:29:31.363"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:31.364">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:29:31.363" status="PASS" endtime="20161110 17:29:31.364"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:29:31.364">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:29:31.364" status="PASS" endtime="20161110 17:29:31.364"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="FAIL" timestamp="20161110 17:30:12.012">ConnectTimeout: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7d3f9e10&gt;, 'Connection to 9.3.23.30 timed out. (connect timeout=10.0)'))</msg>
<status starttime="20161110 17:29:31.365" status="FAIL" endtime="20161110 17:30:12.012"></status>
</kw>
<status starttime="20161110 17:29:31.361" status="FAIL" endtime="20161110 17:30:12.012"></status>
</kw>
<status starttime="20161110 17:29:31.356" status="FAIL" endtime="20161110 17:30:12.013"></status>
</kw>
<status starttime="20161110 17:29:31.355" status="FAIL" endtime="20161110 17:30:12.013"></status>
</kw>
<status starttime="20161110 17:29:31.353" status="FAIL" endtime="20161110 17:30:12.013"></status>
</kw>
<status starttime="20161110 17:29:31.353" status="FAIL" endtime="20161110 17:30:12.013"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:22.016">@{arglist} = [ ]</msg>
<status starttime="20161110 17:30:22.016" status="PASS" endtime="20161110 17:30:22.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:22.017">${args} = {u'data': []}</msg>
<status starttime="20161110 17:30:22.017" status="PASS" endtime="20161110 17:30:22.017"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:22.019">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:30:22.019" status="PASS" endtime="20161110 17:30:22.019"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:22.021">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:30:22.021" status="PASS" endtime="20161110 17:30:22.021"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:22.023">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:30:22.021" status="PASS" endtime="20161110 17:30:22.023"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:30:22.023" status="PASS" endtime="20161110 17:30:22.023"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:22.026">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:30:22.025" status="PASS" endtime="20161110 17:30:22.026"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:22.027">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:30:22.027" status="PASS" endtime="20161110 17:30:22.029"></status>
</kw>
<status starttime="20161110 17:30:22.026" status="PASS" endtime="20161110 17:30:22.029"></status>
</kw>
<status starttime="20161110 17:30:22.024" status="PASS" endtime="20161110 17:30:22.029"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:22.030">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:30:22.030" status="PASS" endtime="20161110 17:30:22.030"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:22.031">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:30:22.031" status="PASS" endtime="20161110 17:30:22.031"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:22.032">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:30:22.031" status="PASS" endtime="20161110 17:30:22.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:22.033">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:30:22.032" status="PASS" endtime="20161110 17:30:22.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:32.378">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:30:32.378">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:22.033" status="PASS" endtime="20161110 17:30:32.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:32.380">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:30:32.379" status="PASS" endtime="20161110 17:30:32.380"></status>
</kw>
<status starttime="20161110 17:30:22.029" status="PASS" endtime="20161110 17:30:32.380"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:32.655">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:30:32.656">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:32.380" status="PASS" endtime="20161110 17:30:32.656"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:32.657">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:30:32.657" status="PASS" endtime="20161110 17:30:32.658"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:32.659">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:30:32.659" status="PASS" endtime="20161110 17:30:32.659"></status>
</kw>
<status starttime="20161110 17:30:32.658" status="PASS" endtime="20161110 17:30:32.659"></status>
</kw>
<status starttime="20161110 17:30:32.656" status="PASS" endtime="20161110 17:30:32.660"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:30:32.660">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:22.019" status="PASS" endtime="20161110 17:30:32.660"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:30:32.660">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:22.018" status="PASS" endtime="20161110 17:30:32.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:32.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:30:32.661" status="PASS" endtime="20161110 17:30:32.661"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:32.662">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:30:32.662">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:30:32.662">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:30:32.662" status="PASS" endtime="20161110 17:30:32.662"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:30:32.663">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:30:22.015" status="PASS" endtime="20161110 17:30:32.663"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:30:32.664">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:30:32.663" status="FAIL" endtime="20161110 17:30:32.664"></status>
</kw>
<status starttime="20161110 17:30:22.014" status="FAIL" endtime="20161110 17:30:32.664"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:42.666">@{arglist} = [ ]</msg>
<status starttime="20161110 17:30:42.666" status="PASS" endtime="20161110 17:30:42.666"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:42.667">${args} = {u'data': []}</msg>
<status starttime="20161110 17:30:42.667" status="PASS" endtime="20161110 17:30:42.667"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:42.670">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:30:42.669" status="PASS" endtime="20161110 17:30:42.670"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:42.673">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:30:42.672" status="PASS" endtime="20161110 17:30:42.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:42.674">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:30:42.673" status="PASS" endtime="20161110 17:30:42.674"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:30:42.674" status="PASS" endtime="20161110 17:30:42.675"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:42.679">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:30:42.677" status="PASS" endtime="20161110 17:30:42.679"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:42.680">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:30:42.680" status="PASS" endtime="20161110 17:30:42.680"></status>
</kw>
<status starttime="20161110 17:30:42.679" status="PASS" endtime="20161110 17:30:42.680"></status>
</kw>
<status starttime="20161110 17:30:42.676" status="PASS" endtime="20161110 17:30:42.680"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:42.681">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:30:42.681" status="PASS" endtime="20161110 17:30:42.681"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:42.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:30:42.682" status="PASS" endtime="20161110 17:30:42.682"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:42.682">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:30:42.682" status="PASS" endtime="20161110 17:30:42.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:42.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:30:42.683" status="PASS" endtime="20161110 17:30:42.683"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:44.272">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:30:44.272">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:42.683" status="PASS" endtime="20161110 17:30:44.272"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:44.273">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:30:44.272" status="PASS" endtime="20161110 17:30:44.273"></status>
</kw>
<status starttime="20161110 17:30:42.680" status="PASS" endtime="20161110 17:30:44.273"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:45.722">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:30:45.723">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:44.273" status="PASS" endtime="20161110 17:30:45.723"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:45.725">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:30:45.724" status="PASS" endtime="20161110 17:30:45.725"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:45.726">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:30:45.725" status="PASS" endtime="20161110 17:30:45.726"></status>
</kw>
<status starttime="20161110 17:30:45.725" status="PASS" endtime="20161110 17:30:45.726"></status>
</kw>
<status starttime="20161110 17:30:45.723" status="PASS" endtime="20161110 17:30:45.726"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:30:45.727">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:42.670" status="PASS" endtime="20161110 17:30:45.727"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:30:45.727">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:42.668" status="PASS" endtime="20161110 17:30:45.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:45.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:30:45.727" status="PASS" endtime="20161110 17:30:45.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:45.729">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:30:45.729">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:30:45.729">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:30:45.728" status="PASS" endtime="20161110 17:30:45.729"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:30:45.729">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:30:42.665" status="PASS" endtime="20161110 17:30:45.729"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:30:45.730">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:30:45.730" status="FAIL" endtime="20161110 17:30:45.731"></status>
</kw>
<status starttime="20161110 17:30:42.665" status="FAIL" endtime="20161110 17:30:45.731"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:55.734">@{arglist} = [ ]</msg>
<status starttime="20161110 17:30:55.733" status="PASS" endtime="20161110 17:30:55.734"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:55.735">${args} = {u'data': []}</msg>
<status starttime="20161110 17:30:55.734" status="PASS" endtime="20161110 17:30:55.735"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:55.736">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:30:55.736" status="PASS" endtime="20161110 17:30:55.736"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:55.738">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:30:55.738" status="PASS" endtime="20161110 17:30:55.738"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:55.739">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:30:55.739" status="PASS" endtime="20161110 17:30:55.739"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:30:55.740" status="PASS" endtime="20161110 17:30:55.740"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:55.742">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:30:55.741" status="PASS" endtime="20161110 17:30:55.743"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:55.744">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:30:55.744" status="PASS" endtime="20161110 17:30:55.744"></status>
</kw>
<status starttime="20161110 17:30:55.743" status="PASS" endtime="20161110 17:30:55.744"></status>
</kw>
<status starttime="20161110 17:30:55.740" status="PASS" endtime="20161110 17:30:55.744"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:55.746">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:30:55.745" status="PASS" endtime="20161110 17:30:55.746"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:55.747">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:30:55.747" status="PASS" endtime="20161110 17:30:55.747"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:55.748">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:30:55.748" status="PASS" endtime="20161110 17:30:55.748"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:55.749">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:30:55.749" status="PASS" endtime="20161110 17:30:55.749"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:56.078">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:30:56.078">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:55.749" status="PASS" endtime="20161110 17:30:56.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:56.079">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:30:56.078" status="PASS" endtime="20161110 17:30:56.079"></status>
</kw>
<status starttime="20161110 17:30:55.745" status="PASS" endtime="20161110 17:30:56.079"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:56.418">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:30:56.418">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:56.079" status="PASS" endtime="20161110 17:30:56.418"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:56.419">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:30:56.419" status="PASS" endtime="20161110 17:30:56.419"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:56.420">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:30:56.420" status="PASS" endtime="20161110 17:30:56.420"></status>
</kw>
<status starttime="20161110 17:30:56.419" status="PASS" endtime="20161110 17:30:56.420"></status>
</kw>
<status starttime="20161110 17:30:56.418" status="PASS" endtime="20161110 17:30:56.420"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:30:56.420">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:55.737" status="PASS" endtime="20161110 17:30:56.420"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:30:56.421">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:30:55.735" status="PASS" endtime="20161110 17:30:56.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:30:56.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:30:56.421" status="PASS" endtime="20161110 17:30:56.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:30:56.422">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:30:56.422">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:30:56.422">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:30:56.421" status="PASS" endtime="20161110 17:30:56.422"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:30:56.422">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:30:55.732" status="PASS" endtime="20161110 17:30:56.422"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:30:56.423">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:30:56.422" status="FAIL" endtime="20161110 17:30:56.423"></status>
</kw>
<status starttime="20161110 17:30:55.731" status="FAIL" endtime="20161110 17:30:56.423"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:06.425">@{arglist} = [ ]</msg>
<status starttime="20161110 17:31:06.425" status="PASS" endtime="20161110 17:31:06.425"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:06.426">${args} = {u'data': []}</msg>
<status starttime="20161110 17:31:06.425" status="PASS" endtime="20161110 17:31:06.426"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:06.428">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:31:06.427" status="PASS" endtime="20161110 17:31:06.428"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:06.431">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:31:06.430" status="PASS" endtime="20161110 17:31:06.431"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:06.432">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:31:06.431" status="PASS" endtime="20161110 17:31:06.432"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:31:06.432" status="PASS" endtime="20161110 17:31:06.433"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:06.436">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:31:06.435" status="PASS" endtime="20161110 17:31:06.436"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:06.438">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:31:06.437" status="PASS" endtime="20161110 17:31:06.438"></status>
</kw>
<status starttime="20161110 17:31:06.436" status="PASS" endtime="20161110 17:31:06.438"></status>
</kw>
<status starttime="20161110 17:31:06.433" status="PASS" endtime="20161110 17:31:06.438"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:06.440">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:31:06.439" status="PASS" endtime="20161110 17:31:06.440"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:06.441">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:31:06.440" status="PASS" endtime="20161110 17:31:06.441"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:06.441">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:31:06.441" status="PASS" endtime="20161110 17:31:06.441"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:06.442">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:31:06.441" status="PASS" endtime="20161110 17:31:06.442"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:07.090">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:31:07.090">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:06.442" status="PASS" endtime="20161110 17:31:07.090"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:07.091">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:31:07.091" status="PASS" endtime="20161110 17:31:07.091"></status>
</kw>
<status starttime="20161110 17:31:06.439" status="PASS" endtime="20161110 17:31:07.092"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:07.591">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:31:07.591">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:07.092" status="PASS" endtime="20161110 17:31:07.591"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:07.593">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:31:07.592" status="PASS" endtime="20161110 17:31:07.593"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:07.596">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:31:07.595" status="PASS" endtime="20161110 17:31:07.596"></status>
</kw>
<status starttime="20161110 17:31:07.594" status="PASS" endtime="20161110 17:31:07.596"></status>
</kw>
<status starttime="20161110 17:31:07.591" status="PASS" endtime="20161110 17:31:07.596"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:07.596">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:06.428" status="PASS" endtime="20161110 17:31:07.597"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:07.597">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:06.426" status="PASS" endtime="20161110 17:31:07.597"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:07.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:31:07.597" status="PASS" endtime="20161110 17:31:07.598"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:07.599">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:31:07.599">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:31:07.599">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:31:07.598" status="PASS" endtime="20161110 17:31:07.599"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:07.600">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:31:06.424" status="PASS" endtime="20161110 17:31:07.600"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:31:07.601">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:31:07.600" status="FAIL" endtime="20161110 17:31:07.601"></status>
</kw>
<status starttime="20161110 17:31:06.423" status="FAIL" endtime="20161110 17:31:07.601"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:17.605">@{arglist} = [ ]</msg>
<status starttime="20161110 17:31:17.605" status="PASS" endtime="20161110 17:31:17.605"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:17.606">${args} = {u'data': []}</msg>
<status starttime="20161110 17:31:17.605" status="PASS" endtime="20161110 17:31:17.606"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:17.608">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:31:17.608" status="PASS" endtime="20161110 17:31:17.608"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:17.610">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:31:17.610" status="PASS" endtime="20161110 17:31:17.610"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:17.611">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:31:17.611" status="PASS" endtime="20161110 17:31:17.611"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:31:17.611" status="PASS" endtime="20161110 17:31:17.612"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:17.614">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:31:17.613" status="PASS" endtime="20161110 17:31:17.614"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:17.615">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:31:17.615" status="PASS" endtime="20161110 17:31:17.616"></status>
</kw>
<status starttime="20161110 17:31:17.614" status="PASS" endtime="20161110 17:31:17.616"></status>
</kw>
<status starttime="20161110 17:31:17.612" status="PASS" endtime="20161110 17:31:17.616"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:17.617">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:31:17.617" status="PASS" endtime="20161110 17:31:17.618"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:17.619">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:31:17.618" status="PASS" endtime="20161110 17:31:17.619"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:17.620">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:31:17.619" status="PASS" endtime="20161110 17:31:17.620"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:17.620">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:31:17.620" status="PASS" endtime="20161110 17:31:17.620"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:18.201">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:31:18.202">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:17.620" status="PASS" endtime="20161110 17:31:18.202"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:18.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:31:18.202" status="PASS" endtime="20161110 17:31:18.203"></status>
</kw>
<status starttime="20161110 17:31:17.616" status="PASS" endtime="20161110 17:31:18.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:18.755">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:31:18.756">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:18.203" status="PASS" endtime="20161110 17:31:18.756"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:18.757">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:31:18.757" status="PASS" endtime="20161110 17:31:18.758"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:18.759">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:31:18.758" status="PASS" endtime="20161110 17:31:18.759"></status>
</kw>
<status starttime="20161110 17:31:18.758" status="PASS" endtime="20161110 17:31:18.759"></status>
</kw>
<status starttime="20161110 17:31:18.756" status="PASS" endtime="20161110 17:31:18.760"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:18.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:17.609" status="PASS" endtime="20161110 17:31:18.760"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:18.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:17.606" status="PASS" endtime="20161110 17:31:18.760"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:18.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:31:18.761" status="PASS" endtime="20161110 17:31:18.761"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:18.762">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:31:18.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:31:18.762">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:31:18.762" status="PASS" endtime="20161110 17:31:18.762"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:18.763">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:31:17.603" status="PASS" endtime="20161110 17:31:18.763"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:31:18.764">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:31:18.763" status="FAIL" endtime="20161110 17:31:18.764"></status>
</kw>
<status starttime="20161110 17:31:17.602" status="FAIL" endtime="20161110 17:31:18.764"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:28.767">@{arglist} = [ ]</msg>
<status starttime="20161110 17:31:28.766" status="PASS" endtime="20161110 17:31:28.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:28.768">${args} = {u'data': []}</msg>
<status starttime="20161110 17:31:28.768" status="PASS" endtime="20161110 17:31:28.769"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:28.771">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:31:28.770" status="PASS" endtime="20161110 17:31:28.771"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:28.774">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:31:28.773" status="PASS" endtime="20161110 17:31:28.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:28.775">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:31:28.774" status="PASS" endtime="20161110 17:31:28.775"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:31:28.775" status="PASS" endtime="20161110 17:31:28.776"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:28.779">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:31:28.778" status="PASS" endtime="20161110 17:31:28.779"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:28.780">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:31:28.780" status="PASS" endtime="20161110 17:31:28.780"></status>
</kw>
<status starttime="20161110 17:31:28.780" status="PASS" endtime="20161110 17:31:28.781"></status>
</kw>
<status starttime="20161110 17:31:28.776" status="PASS" endtime="20161110 17:31:28.781"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:28.782">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:31:28.781" status="PASS" endtime="20161110 17:31:28.784"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:28.784">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:31:28.784" status="PASS" endtime="20161110 17:31:28.784"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:28.785">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:31:28.784" status="PASS" endtime="20161110 17:31:28.785"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:28.785">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:31:28.785" status="PASS" endtime="20161110 17:31:28.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:29.265">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:31:29.265">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:28.786" status="PASS" endtime="20161110 17:31:29.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:29.266">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:31:29.265" status="PASS" endtime="20161110 17:31:29.266"></status>
</kw>
<status starttime="20161110 17:31:28.781" status="PASS" endtime="20161110 17:31:29.266"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:29.585">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:31:29.585">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:29.266" status="PASS" endtime="20161110 17:31:29.585"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:29.586">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:31:29.586" status="PASS" endtime="20161110 17:31:29.586"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:29.587">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:31:29.587" status="PASS" endtime="20161110 17:31:29.587"></status>
</kw>
<status starttime="20161110 17:31:29.587" status="PASS" endtime="20161110 17:31:29.587"></status>
</kw>
<status starttime="20161110 17:31:29.585" status="PASS" endtime="20161110 17:31:29.588"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:29.588">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:28.771" status="PASS" endtime="20161110 17:31:29.588"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:29.588">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:28.769" status="PASS" endtime="20161110 17:31:29.588"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:29.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:31:29.588" status="PASS" endtime="20161110 17:31:29.589"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:29.589">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:31:29.589">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:31:29.589">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:31:29.589" status="PASS" endtime="20161110 17:31:29.589"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:29.589">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:31:28.766" status="PASS" endtime="20161110 17:31:29.590"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:31:29.590">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:31:29.590" status="FAIL" endtime="20161110 17:31:29.590"></status>
</kw>
<status starttime="20161110 17:31:28.765" status="FAIL" endtime="20161110 17:31:29.590"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:39.593">@{arglist} = [ ]</msg>
<status starttime="20161110 17:31:39.593" status="PASS" endtime="20161110 17:31:39.593"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:39.594">${args} = {u'data': []}</msg>
<status starttime="20161110 17:31:39.593" status="PASS" endtime="20161110 17:31:39.594"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:39.596">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:31:39.596" status="PASS" endtime="20161110 17:31:39.597"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:39.599">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:31:39.598" status="PASS" endtime="20161110 17:31:39.599"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:39.601">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:31:39.600" status="PASS" endtime="20161110 17:31:39.601"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:31:39.601" status="PASS" endtime="20161110 17:31:39.603"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:39.606">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:31:39.604" status="PASS" endtime="20161110 17:31:39.606"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:39.608">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:31:39.607" status="PASS" endtime="20161110 17:31:39.608"></status>
</kw>
<status starttime="20161110 17:31:39.606" status="PASS" endtime="20161110 17:31:39.608"></status>
</kw>
<status starttime="20161110 17:31:39.603" status="PASS" endtime="20161110 17:31:39.608"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:39.610">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:31:39.609" status="PASS" endtime="20161110 17:31:39.610"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:39.611">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:31:39.611" status="PASS" endtime="20161110 17:31:39.611"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:39.611">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:31:39.611" status="PASS" endtime="20161110 17:31:39.611"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:39.612">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:31:39.612" status="PASS" endtime="20161110 17:31:39.612"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:39.956">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:31:39.956">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:39.612" status="PASS" endtime="20161110 17:31:39.956"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:39.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:31:39.956" status="PASS" endtime="20161110 17:31:39.957"></status>
</kw>
<status starttime="20161110 17:31:39.609" status="PASS" endtime="20161110 17:31:39.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:40.238">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:31:40.238">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:39.957" status="PASS" endtime="20161110 17:31:40.238"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:40.240">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:31:40.239" status="PASS" endtime="20161110 17:31:40.240"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:40.242">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:31:40.241" status="PASS" endtime="20161110 17:31:40.242"></status>
</kw>
<status starttime="20161110 17:31:40.240" status="PASS" endtime="20161110 17:31:40.242"></status>
</kw>
<status starttime="20161110 17:31:40.238" status="PASS" endtime="20161110 17:31:40.242"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:40.243">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:39.597" status="PASS" endtime="20161110 17:31:40.243"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:40.243">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:39.594" status="PASS" endtime="20161110 17:31:40.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:40.244">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:31:40.243" status="PASS" endtime="20161110 17:31:40.244"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:40.245">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:31:40.245">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:31:40.245">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:31:40.244" status="PASS" endtime="20161110 17:31:40.245"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:40.246">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:31:39.592" status="PASS" endtime="20161110 17:31:40.246"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:31:40.246">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:31:40.246" status="FAIL" endtime="20161110 17:31:40.247"></status>
</kw>
<status starttime="20161110 17:31:39.591" status="FAIL" endtime="20161110 17:31:40.247"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:50.250">@{arglist} = [ ]</msg>
<status starttime="20161110 17:31:50.249" status="PASS" endtime="20161110 17:31:50.250"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:50.251">${args} = {u'data': []}</msg>
<status starttime="20161110 17:31:50.250" status="PASS" endtime="20161110 17:31:50.251"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:50.253">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:31:50.252" status="PASS" endtime="20161110 17:31:50.253"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:50.255">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:31:50.254" status="PASS" endtime="20161110 17:31:50.255"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:50.256">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:31:50.255" status="PASS" endtime="20161110 17:31:50.256"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:31:50.256" status="PASS" endtime="20161110 17:31:50.256"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:50.259">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:31:50.258" status="PASS" endtime="20161110 17:31:50.259"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:50.260">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:31:50.260" status="PASS" endtime="20161110 17:31:50.260"></status>
</kw>
<status starttime="20161110 17:31:50.259" status="PASS" endtime="20161110 17:31:50.261"></status>
</kw>
<status starttime="20161110 17:31:50.257" status="PASS" endtime="20161110 17:31:50.261"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:50.262">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:31:50.261" status="PASS" endtime="20161110 17:31:50.262"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:50.262">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:31:50.262" status="PASS" endtime="20161110 17:31:50.262"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:50.263">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:31:50.263" status="PASS" endtime="20161110 17:31:50.263"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:50.264">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:31:50.263" status="PASS" endtime="20161110 17:31:50.264"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:58.267">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:31:58.268">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:50.264" status="PASS" endtime="20161110 17:31:58.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:58.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:31:58.268" status="PASS" endtime="20161110 17:31:58.269"></status>
</kw>
<status starttime="20161110 17:31:50.261" status="PASS" endtime="20161110 17:31:58.269"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:58.926">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:31:58.926">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:58.270" status="PASS" endtime="20161110 17:31:58.927"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:58.928">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:31:58.928" status="PASS" endtime="20161110 17:31:58.929"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:58.930">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:31:58.929" status="PASS" endtime="20161110 17:31:58.930"></status>
</kw>
<status starttime="20161110 17:31:58.929" status="PASS" endtime="20161110 17:31:58.930"></status>
</kw>
<status starttime="20161110 17:31:58.927" status="PASS" endtime="20161110 17:31:58.931"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:58.931">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:50.253" status="PASS" endtime="20161110 17:31:58.931"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:58.931">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:31:50.251" status="PASS" endtime="20161110 17:31:58.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:31:58.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:31:58.932" status="PASS" endtime="20161110 17:31:58.932"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:31:58.933">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:31:58.933">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:31:58.933">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:31:58.933" status="PASS" endtime="20161110 17:31:58.933"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:31:58.934">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:31:50.249" status="PASS" endtime="20161110 17:31:58.934"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:31:58.935">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:31:58.934" status="FAIL" endtime="20161110 17:31:58.935"></status>
</kw>
<status starttime="20161110 17:31:50.248" status="FAIL" endtime="20161110 17:31:58.935"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:08.938">@{arglist} = [ ]</msg>
<status starttime="20161110 17:32:08.938" status="PASS" endtime="20161110 17:32:08.938"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:08.939">${args} = {u'data': []}</msg>
<status starttime="20161110 17:32:08.939" status="PASS" endtime="20161110 17:32:08.939"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:08.941">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:32:08.940" status="PASS" endtime="20161110 17:32:08.941"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:08.943">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:32:08.942" status="PASS" endtime="20161110 17:32:08.943"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:08.943">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:32:08.943" status="PASS" endtime="20161110 17:32:08.943"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:32:08.944" status="PASS" endtime="20161110 17:32:08.944"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:08.947">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:32:08.945" status="PASS" endtime="20161110 17:32:08.947"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:08.948">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:32:08.948" status="PASS" endtime="20161110 17:32:08.948"></status>
</kw>
<status starttime="20161110 17:32:08.947" status="PASS" endtime="20161110 17:32:08.948"></status>
</kw>
<status starttime="20161110 17:32:08.944" status="PASS" endtime="20161110 17:32:08.948"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:08.950">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:32:08.949" status="PASS" endtime="20161110 17:32:08.951"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:08.951">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:32:08.951" status="PASS" endtime="20161110 17:32:08.951"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:08.952">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:32:08.952" status="PASS" endtime="20161110 17:32:08.952"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:08.953">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:32:08.953" status="PASS" endtime="20161110 17:32:08.953"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:09.290">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:32:09.290">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:08.953" status="PASS" endtime="20161110 17:32:09.290"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:09.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:32:09.291" status="PASS" endtime="20161110 17:32:09.291"></status>
</kw>
<status starttime="20161110 17:32:08.949" status="PASS" endtime="20161110 17:32:09.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:09.569">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:32:09.569">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:09.292" status="PASS" endtime="20161110 17:32:09.569"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:09.570">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:32:09.570" status="PASS" endtime="20161110 17:32:09.570"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:09.571">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:32:09.571" status="PASS" endtime="20161110 17:32:09.571"></status>
</kw>
<status starttime="20161110 17:32:09.570" status="PASS" endtime="20161110 17:32:09.571"></status>
</kw>
<status starttime="20161110 17:32:09.569" status="PASS" endtime="20161110 17:32:09.571"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:09.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:08.941" status="PASS" endtime="20161110 17:32:09.571"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:09.572">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:08.940" status="PASS" endtime="20161110 17:32:09.572"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:09.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:32:09.572" status="PASS" endtime="20161110 17:32:09.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:09.573">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:32:09.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:32:09.573">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:32:09.572" status="PASS" endtime="20161110 17:32:09.573"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:09.573">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:32:08.937" status="PASS" endtime="20161110 17:32:09.573"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:32:09.574">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:32:09.573" status="FAIL" endtime="20161110 17:32:09.574"></status>
</kw>
<status starttime="20161110 17:32:08.936" status="FAIL" endtime="20161110 17:32:09.574"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:19.577">@{arglist} = [ ]</msg>
<status starttime="20161110 17:32:19.576" status="PASS" endtime="20161110 17:32:19.577"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:19.578">${args} = {u'data': []}</msg>
<status starttime="20161110 17:32:19.577" status="PASS" endtime="20161110 17:32:19.578"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:19.579">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:32:19.579" status="PASS" endtime="20161110 17:32:19.579"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:19.581">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:32:19.581" status="PASS" endtime="20161110 17:32:19.581"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:19.582">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:32:19.581" status="PASS" endtime="20161110 17:32:19.582"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:32:19.582" status="PASS" endtime="20161110 17:32:19.582"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:19.584">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:32:19.584" status="PASS" endtime="20161110 17:32:19.584"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:19.586">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:32:19.585" status="PASS" endtime="20161110 17:32:19.586"></status>
</kw>
<status starttime="20161110 17:32:19.585" status="PASS" endtime="20161110 17:32:19.586"></status>
</kw>
<status starttime="20161110 17:32:19.583" status="PASS" endtime="20161110 17:32:19.586"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:19.592">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:32:19.592" status="PASS" endtime="20161110 17:32:19.593"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:19.593">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:32:19.593" status="PASS" endtime="20161110 17:32:19.593"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:19.594">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:32:19.593" status="PASS" endtime="20161110 17:32:19.594"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:19.594">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:32:19.594" status="PASS" endtime="20161110 17:32:19.594"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:19.932">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:32:19.932">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:19.595" status="PASS" endtime="20161110 17:32:19.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:19.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:32:19.933" status="PASS" endtime="20161110 17:32:19.934"></status>
</kw>
<status starttime="20161110 17:32:19.586" status="PASS" endtime="20161110 17:32:19.934"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:20.214">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:32:20.214">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:19.934" status="PASS" endtime="20161110 17:32:20.215"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:20.217">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:32:20.216" status="PASS" endtime="20161110 17:32:20.217"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:20.219">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:32:20.218" status="PASS" endtime="20161110 17:32:20.219"></status>
</kw>
<status starttime="20161110 17:32:20.217" status="PASS" endtime="20161110 17:32:20.219"></status>
</kw>
<status starttime="20161110 17:32:20.215" status="PASS" endtime="20161110 17:32:20.219"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:20.219">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:19.579" status="PASS" endtime="20161110 17:32:20.219"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:20.220">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:19.578" status="PASS" endtime="20161110 17:32:20.220"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:20.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:32:20.220" status="PASS" endtime="20161110 17:32:20.221"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:20.222">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:32:20.222">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:32:20.222">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:32:20.221" status="PASS" endtime="20161110 17:32:20.222"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:20.222">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:32:19.575" status="PASS" endtime="20161110 17:32:20.222"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:32:20.223">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:32:20.223" status="FAIL" endtime="20161110 17:32:20.223"></status>
</kw>
<status starttime="20161110 17:32:19.574" status="FAIL" endtime="20161110 17:32:20.224"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:30.226">@{arglist} = [ ]</msg>
<status starttime="20161110 17:32:30.226" status="PASS" endtime="20161110 17:32:30.227"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:30.228">${args} = {u'data': []}</msg>
<status starttime="20161110 17:32:30.227" status="PASS" endtime="20161110 17:32:30.228"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:30.229">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:32:30.229" status="PASS" endtime="20161110 17:32:30.229"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:30.232">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:32:30.231" status="PASS" endtime="20161110 17:32:30.232"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:30.232">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:32:30.232" status="PASS" endtime="20161110 17:32:30.233"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:32:30.233" status="PASS" endtime="20161110 17:32:30.234"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:30.237">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:32:30.236" status="PASS" endtime="20161110 17:32:30.237"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:30.239">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:32:30.239" status="PASS" endtime="20161110 17:32:30.240"></status>
</kw>
<status starttime="20161110 17:32:30.238" status="PASS" endtime="20161110 17:32:30.240"></status>
</kw>
<status starttime="20161110 17:32:30.234" status="PASS" endtime="20161110 17:32:30.240"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:30.242">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:32:30.241" status="PASS" endtime="20161110 17:32:30.242"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:30.242">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:32:30.242" status="PASS" endtime="20161110 17:32:30.242"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:30.243">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:32:30.243" status="PASS" endtime="20161110 17:32:30.243"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:30.244">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:32:30.243" status="PASS" endtime="20161110 17:32:30.244"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:30.570">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:32:30.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:30.244" status="PASS" endtime="20161110 17:32:30.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:30.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:32:30.571" status="PASS" endtime="20161110 17:32:30.571"></status>
</kw>
<status starttime="20161110 17:32:30.241" status="PASS" endtime="20161110 17:32:30.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:31.010">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:32:31.010">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:30.572" status="PASS" endtime="20161110 17:32:31.010"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:31.011">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:32:31.010" status="PASS" endtime="20161110 17:32:31.011"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:31.012">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:32:31.012" status="PASS" endtime="20161110 17:32:31.012"></status>
</kw>
<status starttime="20161110 17:32:31.011" status="PASS" endtime="20161110 17:32:31.013"></status>
</kw>
<status starttime="20161110 17:32:31.010" status="PASS" endtime="20161110 17:32:31.013"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:31.013">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:30.230" status="PASS" endtime="20161110 17:32:31.013"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:31.013">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:30.228" status="PASS" endtime="20161110 17:32:31.013"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:31.014">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:32:31.014" status="PASS" endtime="20161110 17:32:31.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:31.015">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:32:31.015">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:32:31.015">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:32:31.015" status="PASS" endtime="20161110 17:32:31.016"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:31.016">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:32:30.225" status="PASS" endtime="20161110 17:32:31.016"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:32:31.017">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:32:31.016" status="FAIL" endtime="20161110 17:32:31.017"></status>
</kw>
<status starttime="20161110 17:32:30.224" status="FAIL" endtime="20161110 17:32:31.017"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.020">@{arglist} = [ ]</msg>
<status starttime="20161110 17:32:41.019" status="PASS" endtime="20161110 17:32:41.020"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.021">${args} = {u'data': []}</msg>
<status starttime="20161110 17:32:41.020" status="PASS" endtime="20161110 17:32:41.021"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.023">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:32:41.023" status="PASS" endtime="20161110 17:32:41.023"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.025">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:32:41.024" status="PASS" endtime="20161110 17:32:41.025"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:32:41.025" status="PASS" endtime="20161110 17:32:41.026"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:32:41.026" status="PASS" endtime="20161110 17:32:41.027"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.029">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:32:41.028" status="PASS" endtime="20161110 17:32:41.029"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:41.030">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:32:41.030" status="PASS" endtime="20161110 17:32:41.031"></status>
</kw>
<status starttime="20161110 17:32:41.029" status="PASS" endtime="20161110 17:32:41.031"></status>
</kw>
<status starttime="20161110 17:32:41.027" status="PASS" endtime="20161110 17:32:41.031"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:41.032">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:32:41.032" status="PASS" endtime="20161110 17:32:41.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:32:41.033" status="PASS" endtime="20161110 17:32:41.033"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.033">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:32:41.033" status="PASS" endtime="20161110 17:32:41.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.034">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:32:41.034" status="PASS" endtime="20161110 17:32:41.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:32:41.367">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:41.034" status="PASS" endtime="20161110 17:32:41.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:41.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:32:41.367" status="PASS" endtime="20161110 17:32:41.368"></status>
</kw>
<status starttime="20161110 17:32:41.031" status="PASS" endtime="20161110 17:32:41.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.648">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:32:41.648">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:41.368" status="PASS" endtime="20161110 17:32:41.648"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.650">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:32:41.649" status="PASS" endtime="20161110 17:32:41.650"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:41.651">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:32:41.651" status="PASS" endtime="20161110 17:32:41.651"></status>
</kw>
<status starttime="20161110 17:32:41.650" status="PASS" endtime="20161110 17:32:41.652"></status>
</kw>
<status starttime="20161110 17:32:41.648" status="PASS" endtime="20161110 17:32:41.652"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:41.652">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:41.023" status="PASS" endtime="20161110 17:32:41.652"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:41.652">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:41.021" status="PASS" endtime="20161110 17:32:41.652"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:41.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:32:41.652" status="PASS" endtime="20161110 17:32:41.653"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:41.654">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:32:41.654">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:32:41.654">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:32:41.653" status="PASS" endtime="20161110 17:32:41.654"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:41.654">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:32:41.019" status="PASS" endtime="20161110 17:32:41.654"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:32:41.655">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:32:41.654" status="FAIL" endtime="20161110 17:32:41.655"></status>
</kw>
<status starttime="20161110 17:32:41.018" status="FAIL" endtime="20161110 17:32:41.656"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:51.658">@{arglist} = [ ]</msg>
<status starttime="20161110 17:32:51.657" status="PASS" endtime="20161110 17:32:51.658"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:51.659">${args} = {u'data': []}</msg>
<status starttime="20161110 17:32:51.658" status="PASS" endtime="20161110 17:32:51.659"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:51.661">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:32:51.660" status="PASS" endtime="20161110 17:32:51.661"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:51.663">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:32:51.662" status="PASS" endtime="20161110 17:32:51.663"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:51.664">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:32:51.663" status="PASS" endtime="20161110 17:32:51.664"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:32:51.664" status="PASS" endtime="20161110 17:32:51.664"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:51.667">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:32:51.666" status="PASS" endtime="20161110 17:32:51.667"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:51.668">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:32:51.668" status="PASS" endtime="20161110 17:32:51.669"></status>
</kw>
<status starttime="20161110 17:32:51.667" status="PASS" endtime="20161110 17:32:51.669"></status>
</kw>
<status starttime="20161110 17:32:51.665" status="PASS" endtime="20161110 17:32:51.669"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:51.670">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:32:51.670" status="PASS" endtime="20161110 17:32:51.672"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:51.672">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:32:51.672" status="PASS" endtime="20161110 17:32:51.672"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:51.673">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:32:51.672" status="PASS" endtime="20161110 17:32:51.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:51.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:32:51.673" status="PASS" endtime="20161110 17:32:51.674"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:52.096">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:32:52.096">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:51.674" status="PASS" endtime="20161110 17:32:52.096"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:52.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:32:52.096" status="PASS" endtime="20161110 17:32:52.096"></status>
</kw>
<status starttime="20161110 17:32:51.669" status="PASS" endtime="20161110 17:32:52.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:52.381">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:32:52.381">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:52.097" status="PASS" endtime="20161110 17:32:52.381"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:52.382">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:32:52.381" status="PASS" endtime="20161110 17:32:52.382"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:52.383">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:32:52.383" status="PASS" endtime="20161110 17:32:52.383"></status>
</kw>
<status starttime="20161110 17:32:52.382" status="PASS" endtime="20161110 17:32:52.383"></status>
</kw>
<status starttime="20161110 17:32:52.381" status="PASS" endtime="20161110 17:32:52.383"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:52.383">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:51.661" status="PASS" endtime="20161110 17:32:52.383"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:52.384">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:32:51.659" status="PASS" endtime="20161110 17:32:52.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:32:52.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:32:52.384" status="PASS" endtime="20161110 17:32:52.384"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:32:52.385">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:32:52.385">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:32:52.385">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:32:52.385" status="PASS" endtime="20161110 17:32:52.385"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:32:52.385">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:32:51.657" status="PASS" endtime="20161110 17:32:52.385"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:32:52.386">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:32:52.385" status="FAIL" endtime="20161110 17:32:52.386"></status>
</kw>
<status starttime="20161110 17:32:51.656" status="FAIL" endtime="20161110 17:32:52.386"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:02.388">@{arglist} = [ ]</msg>
<status starttime="20161110 17:33:02.388" status="PASS" endtime="20161110 17:33:02.388"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:02.390">${args} = {u'data': []}</msg>
<status starttime="20161110 17:33:02.389" status="PASS" endtime="20161110 17:33:02.390"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:02.392">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:33:02.392" status="PASS" endtime="20161110 17:33:02.392"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:02.395">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:33:02.394" status="PASS" endtime="20161110 17:33:02.395"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:02.396">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:33:02.395" status="PASS" endtime="20161110 17:33:02.396"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:33:02.397" status="PASS" endtime="20161110 17:33:02.397"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:02.400">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:33:02.399" status="PASS" endtime="20161110 17:33:02.400"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:02.401">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:33:02.401" status="PASS" endtime="20161110 17:33:02.402"></status>
</kw>
<status starttime="20161110 17:33:02.400" status="PASS" endtime="20161110 17:33:02.402"></status>
</kw>
<status starttime="20161110 17:33:02.398" status="PASS" endtime="20161110 17:33:02.402"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:02.403">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:33:02.402" status="PASS" endtime="20161110 17:33:02.403"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:02.403">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:33:02.403" status="PASS" endtime="20161110 17:33:02.404"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:02.404">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:33:02.404" status="PASS" endtime="20161110 17:33:02.404"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:02.405">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:33:02.404" status="PASS" endtime="20161110 17:33:02.405"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:03.748">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:33:03.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:02.405" status="PASS" endtime="20161110 17:33:03.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:03.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:33:03.748" status="PASS" endtime="20161110 17:33:03.749"></status>
</kw>
<status starttime="20161110 17:33:02.402" status="PASS" endtime="20161110 17:33:03.749"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:06.893">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:33:06.893">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:03.750" status="PASS" endtime="20161110 17:33:06.893"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:06.895">${msg} = Response code:200, Content:{
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:33:06.894" status="PASS" endtime="20161110 17:33:06.895"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:06.899">Response code:200, Content:{
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:33:06.899" status="PASS" endtime="20161110 17:33:06.899"></status>
</kw>
<status starttime="20161110 17:33:06.896" status="PASS" endtime="20161110 17:33:06.899"></status>
</kw>
<status starttime="20161110 17:33:06.893" status="PASS" endtime="20161110 17:33:06.900"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:06.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:02.393" status="PASS" endtime="20161110 17:33:06.900"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:06.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:02.390" status="PASS" endtime="20161110 17:33:06.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:06.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:33:06.901" status="PASS" endtime="20161110 17:33:06.901"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:06.902">To JSON using : content={
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:33:06.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:33:06.902">${content} = {u'data': u'HOST_POWERING_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:33:06.902" status="PASS" endtime="20161110 17:33:06.902"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:06.903">${bmc_state} = HOST_POWERING_ON</msg>
<status starttime="20161110 17:33:02.387" status="PASS" endtime="20161110 17:33:06.903"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:33:06.904">'HOST_POWERING_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:33:06.903" status="FAIL" endtime="20161110 17:33:06.904"></status>
</kw>
<status starttime="20161110 17:33:02.386" status="FAIL" endtime="20161110 17:33:06.904"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:16.907">@{arglist} = [ ]</msg>
<status starttime="20161110 17:33:16.906" status="PASS" endtime="20161110 17:33:16.907"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:16.908">${args} = {u'data': []}</msg>
<status starttime="20161110 17:33:16.907" status="PASS" endtime="20161110 17:33:16.908"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:16.909">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:33:16.909" status="PASS" endtime="20161110 17:33:16.909"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:16.911">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:33:16.911" status="PASS" endtime="20161110 17:33:16.912"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:16.912">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:33:16.912" status="PASS" endtime="20161110 17:33:16.912"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:33:16.913" status="PASS" endtime="20161110 17:33:16.913"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:16.916">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:33:16.914" status="PASS" endtime="20161110 17:33:16.916"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:16.917">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:33:16.917" status="PASS" endtime="20161110 17:33:16.917"></status>
</kw>
<status starttime="20161110 17:33:16.916" status="PASS" endtime="20161110 17:33:16.917"></status>
</kw>
<status starttime="20161110 17:33:16.914" status="PASS" endtime="20161110 17:33:16.918"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:16.919">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:33:16.919" status="PASS" endtime="20161110 17:33:16.920"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:16.921">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:33:16.920" status="PASS" endtime="20161110 17:33:16.921"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:16.922">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:33:16.921" status="PASS" endtime="20161110 17:33:16.922"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:16.922">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:33:16.922" status="PASS" endtime="20161110 17:33:16.922"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:17.609">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:33:17.609">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:16.923" status="PASS" endtime="20161110 17:33:17.609"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:17.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:33:17.609" status="PASS" endtime="20161110 17:33:17.610"></status>
</kw>
<status starttime="20161110 17:33:16.918" status="PASS" endtime="20161110 17:33:17.610"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:18.171">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:33:18.172">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:17.610" status="PASS" endtime="20161110 17:33:18.172"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:18.174">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:33:18.173" status="PASS" endtime="20161110 17:33:18.174"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:18.175">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:33:18.175" status="PASS" endtime="20161110 17:33:18.176"></status>
</kw>
<status starttime="20161110 17:33:18.174" status="PASS" endtime="20161110 17:33:18.176"></status>
</kw>
<status starttime="20161110 17:33:18.172" status="PASS" endtime="20161110 17:33:18.176"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:18.177">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:16.910" status="PASS" endtime="20161110 17:33:18.177"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:18.177">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:16.908" status="PASS" endtime="20161110 17:33:18.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:18.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:33:18.178" status="PASS" endtime="20161110 17:33:18.179"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:18.180">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:33:18.180">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:33:18.180">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:33:18.179" status="PASS" endtime="20161110 17:33:18.180"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:18.181">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:33:16.906" status="PASS" endtime="20161110 17:33:18.181"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:33:18.182">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:33:18.181" status="FAIL" endtime="20161110 17:33:18.182"></status>
</kw>
<status starttime="20161110 17:33:16.905" status="FAIL" endtime="20161110 17:33:18.183"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.185">@{arglist} = [ ]</msg>
<status starttime="20161110 17:33:28.185" status="PASS" endtime="20161110 17:33:28.185"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.186">${args} = {u'data': []}</msg>
<status starttime="20161110 17:33:28.186" status="PASS" endtime="20161110 17:33:28.186"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.188">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:33:28.188" status="PASS" endtime="20161110 17:33:28.188"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.190">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:33:28.189" status="PASS" endtime="20161110 17:33:28.190"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.191">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:33:28.191" status="PASS" endtime="20161110 17:33:28.191"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:33:28.192" status="PASS" endtime="20161110 17:33:28.192"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.195">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:33:28.194" status="PASS" endtime="20161110 17:33:28.195"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:28.196">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:33:28.196" status="PASS" endtime="20161110 17:33:28.196"></status>
</kw>
<status starttime="20161110 17:33:28.195" status="PASS" endtime="20161110 17:33:28.197"></status>
</kw>
<status starttime="20161110 17:33:28.192" status="PASS" endtime="20161110 17:33:28.197"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:28.199">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:33:28.198" status="PASS" endtime="20161110 17:33:28.200"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.201">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:33:28.200" status="PASS" endtime="20161110 17:33:28.201"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.202">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:33:28.201" status="PASS" endtime="20161110 17:33:28.202"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.203">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:33:28.203" status="PASS" endtime="20161110 17:33:28.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.537">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:33:28.537">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:28.203" status="PASS" endtime="20161110 17:33:28.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:28.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:33:28.537" status="PASS" endtime="20161110 17:33:28.538"></status>
</kw>
<status starttime="20161110 17:33:28.197" status="PASS" endtime="20161110 17:33:28.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.817">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:33:28.817">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:28.538" status="PASS" endtime="20161110 17:33:28.817"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.820">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:33:28.818" status="PASS" endtime="20161110 17:33:28.820"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:28.821">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:33:28.821" status="PASS" endtime="20161110 17:33:28.821"></status>
</kw>
<status starttime="20161110 17:33:28.820" status="PASS" endtime="20161110 17:33:28.821"></status>
</kw>
<status starttime="20161110 17:33:28.817" status="PASS" endtime="20161110 17:33:28.822"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:28.822">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:28.188" status="PASS" endtime="20161110 17:33:28.822"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:28.822">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:28.187" status="PASS" endtime="20161110 17:33:28.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:28.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:33:28.823" status="PASS" endtime="20161110 17:33:28.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:28.824">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:33:28.824">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:33:28.824">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:33:28.824" status="PASS" endtime="20161110 17:33:28.825"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:28.825">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:33:28.184" status="PASS" endtime="20161110 17:33:28.825"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:33:28.826">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:33:28.825" status="FAIL" endtime="20161110 17:33:28.826"></status>
</kw>
<status starttime="20161110 17:33:28.183" status="FAIL" endtime="20161110 17:33:28.826"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:38.829">@{arglist} = [ ]</msg>
<status starttime="20161110 17:33:38.828" status="PASS" endtime="20161110 17:33:38.829"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:38.830">${args} = {u'data': []}</msg>
<status starttime="20161110 17:33:38.829" status="PASS" endtime="20161110 17:33:38.830"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:38.832">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:33:38.831" status="PASS" endtime="20161110 17:33:38.832"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:38.833">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:33:38.833" status="PASS" endtime="20161110 17:33:38.833"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:38.834">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:33:38.834" status="PASS" endtime="20161110 17:33:38.834"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:33:38.834" status="PASS" endtime="20161110 17:33:38.835"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:38.836">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:33:38.836" status="PASS" endtime="20161110 17:33:38.836"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:38.837">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:33:38.837" status="PASS" endtime="20161110 17:33:38.837"></status>
</kw>
<status starttime="20161110 17:33:38.837" status="PASS" endtime="20161110 17:33:38.838"></status>
</kw>
<status starttime="20161110 17:33:38.835" status="PASS" endtime="20161110 17:33:38.838"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:38.839">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:33:38.838" status="PASS" endtime="20161110 17:33:38.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:38.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:33:38.840" status="PASS" endtime="20161110 17:33:38.840"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:38.841">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:33:38.840" status="PASS" endtime="20161110 17:33:38.841"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:38.842">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:33:38.841" status="PASS" endtime="20161110 17:33:38.842"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:39.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:33:39.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:38.842" status="PASS" endtime="20161110 17:33:39.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:39.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:33:39.179" status="PASS" endtime="20161110 17:33:39.180"></status>
</kw>
<status starttime="20161110 17:33:38.838" status="PASS" endtime="20161110 17:33:39.180"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:39.458">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:33:39.458">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:39.181" status="PASS" endtime="20161110 17:33:39.458"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:39.460">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:33:39.459" status="PASS" endtime="20161110 17:33:39.460"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:39.461">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:33:39.461" status="PASS" endtime="20161110 17:33:39.462"></status>
</kw>
<status starttime="20161110 17:33:39.460" status="PASS" endtime="20161110 17:33:39.462"></status>
</kw>
<status starttime="20161110 17:33:39.458" status="PASS" endtime="20161110 17:33:39.462"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:39.462">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:38.832" status="PASS" endtime="20161110 17:33:39.462"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:39.463">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:38.830" status="PASS" endtime="20161110 17:33:39.463"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:39.463">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:33:39.463" status="PASS" endtime="20161110 17:33:39.464"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:39.464">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:33:39.464">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:33:39.464">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:33:39.464" status="PASS" endtime="20161110 17:33:39.465"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:39.465">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:33:38.828" status="PASS" endtime="20161110 17:33:39.465"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:33:39.466">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:33:39.465" status="FAIL" endtime="20161110 17:33:39.466"></status>
</kw>
<status starttime="20161110 17:33:38.827" status="FAIL" endtime="20161110 17:33:39.466"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:49.468">@{arglist} = [ ]</msg>
<status starttime="20161110 17:33:49.468" status="PASS" endtime="20161110 17:33:49.468"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:49.469">${args} = {u'data': []}</msg>
<status starttime="20161110 17:33:49.468" status="PASS" endtime="20161110 17:33:49.469"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:49.470">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:33:49.469" status="PASS" endtime="20161110 17:33:49.470"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:49.471">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:33:49.470" status="PASS" endtime="20161110 17:33:49.471"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:49.471">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:33:49.471" status="PASS" endtime="20161110 17:33:49.471"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:33:49.471" status="PASS" endtime="20161110 17:33:49.472"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:49.474">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:33:49.473" status="PASS" endtime="20161110 17:33:49.474"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:49.474">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:33:49.474" status="PASS" endtime="20161110 17:33:49.475"></status>
</kw>
<status starttime="20161110 17:33:49.474" status="PASS" endtime="20161110 17:33:49.475"></status>
</kw>
<status starttime="20161110 17:33:49.472" status="PASS" endtime="20161110 17:33:49.475"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:49.476">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:33:49.475" status="PASS" endtime="20161110 17:33:49.476"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:49.476">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:33:49.476" status="PASS" endtime="20161110 17:33:49.477"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:49.477">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:33:49.477" status="PASS" endtime="20161110 17:33:49.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:49.478">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:33:49.477" status="PASS" endtime="20161110 17:33:49.478"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:49.808">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:33:49.808">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:49.478" status="PASS" endtime="20161110 17:33:49.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:49.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:33:49.809" status="PASS" endtime="20161110 17:33:49.810"></status>
</kw>
<status starttime="20161110 17:33:49.475" status="PASS" endtime="20161110 17:33:49.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:50.099">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:33:50.099">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:49.810" status="PASS" endtime="20161110 17:33:50.100"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:50.103">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:33:50.102" status="PASS" endtime="20161110 17:33:50.103"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:50.105">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:33:50.104" status="PASS" endtime="20161110 17:33:50.105"></status>
</kw>
<status starttime="20161110 17:33:50.103" status="PASS" endtime="20161110 17:33:50.105"></status>
</kw>
<status starttime="20161110 17:33:50.100" status="PASS" endtime="20161110 17:33:50.105"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:50.106">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:49.470" status="PASS" endtime="20161110 17:33:50.106"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:50.106">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:33:49.469" status="PASS" endtime="20161110 17:33:50.106"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:33:50.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:33:50.106" status="PASS" endtime="20161110 17:33:50.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:33:50.108">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:33:50.108">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:33:50.108">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:33:50.107" status="PASS" endtime="20161110 17:33:50.108"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:33:50.109">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:33:49.467" status="PASS" endtime="20161110 17:33:50.109"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:33:50.110">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:33:50.109" status="FAIL" endtime="20161110 17:33:50.110"></status>
</kw>
<status starttime="20161110 17:33:49.467" status="FAIL" endtime="20161110 17:33:50.111"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.113">@{arglist} = [ ]</msg>
<status starttime="20161110 17:34:00.113" status="PASS" endtime="20161110 17:34:00.114"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.115">${args} = {u'data': []}</msg>
<status starttime="20161110 17:34:00.114" status="PASS" endtime="20161110 17:34:00.115"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.116">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:34:00.116" status="PASS" endtime="20161110 17:34:00.116"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.118">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:34:00.118" status="PASS" endtime="20161110 17:34:00.118"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.120">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:00.119" status="PASS" endtime="20161110 17:34:00.120"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:34:00.120" status="PASS" endtime="20161110 17:34:00.121"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.124">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:00.123" status="PASS" endtime="20161110 17:34:00.124"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:00.125">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:00.124" status="PASS" endtime="20161110 17:34:00.125"></status>
</kw>
<status starttime="20161110 17:34:00.124" status="PASS" endtime="20161110 17:34:00.125"></status>
</kw>
<status starttime="20161110 17:34:00.121" status="PASS" endtime="20161110 17:34:00.125"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:00.126">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:34:00.126" status="PASS" endtime="20161110 17:34:00.126"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:00.127" status="PASS" endtime="20161110 17:34:00.127"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.127">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:34:00.127" status="PASS" endtime="20161110 17:34:00.127"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:34:00.128" status="PASS" endtime="20161110 17:34:00.128"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.458">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:00.458">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:00.128" status="PASS" endtime="20161110 17:34:00.458"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:00.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:00.458" status="PASS" endtime="20161110 17:34:00.459"></status>
</kw>
<status starttime="20161110 17:34:00.125" status="PASS" endtime="20161110 17:34:00.459"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.745">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:00.745">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:00.459" status="PASS" endtime="20161110 17:34:00.745"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.746">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:00.746" status="PASS" endtime="20161110 17:34:00.746"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:00.747">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:00.747" status="PASS" endtime="20161110 17:34:00.747"></status>
</kw>
<status starttime="20161110 17:34:00.746" status="PASS" endtime="20161110 17:34:00.747"></status>
</kw>
<status starttime="20161110 17:34:00.745" status="PASS" endtime="20161110 17:34:00.747"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:00.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:00.117" status="PASS" endtime="20161110 17:34:00.748"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:00.748">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:00.115" status="PASS" endtime="20161110 17:34:00.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:00.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:00.748" status="PASS" endtime="20161110 17:34:00.748"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:00.749">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:34:00.749">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:34:00.749">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:34:00.749" status="PASS" endtime="20161110 17:34:00.749"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:00.749">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:34:00.112" status="PASS" endtime="20161110 17:34:00.749"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:34:00.750">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:34:00.750" status="FAIL" endtime="20161110 17:34:00.750"></status>
</kw>
<status starttime="20161110 17:34:00.111" status="FAIL" endtime="20161110 17:34:00.750"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:10.753">@{arglist} = [ ]</msg>
<status starttime="20161110 17:34:10.752" status="PASS" endtime="20161110 17:34:10.753"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:10.754">${args} = {u'data': []}</msg>
<status starttime="20161110 17:34:10.753" status="PASS" endtime="20161110 17:34:10.754"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:10.756">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:34:10.755" status="PASS" endtime="20161110 17:34:10.756"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:10.758">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:34:10.757" status="PASS" endtime="20161110 17:34:10.758"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:10.759">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:10.759" status="PASS" endtime="20161110 17:34:10.759"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:34:10.760" status="PASS" endtime="20161110 17:34:10.760"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:10.763">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:10.761" status="PASS" endtime="20161110 17:34:10.763"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:10.764">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:10.764" status="PASS" endtime="20161110 17:34:10.764"></status>
</kw>
<status starttime="20161110 17:34:10.763" status="PASS" endtime="20161110 17:34:10.764"></status>
</kw>
<status starttime="20161110 17:34:10.760" status="PASS" endtime="20161110 17:34:10.764"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:10.765">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:34:10.765" status="PASS" endtime="20161110 17:34:10.765"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:10.766">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:10.766" status="PASS" endtime="20161110 17:34:10.766"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:10.766">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:34:10.766" status="PASS" endtime="20161110 17:34:10.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:10.767">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:34:10.767" status="PASS" endtime="20161110 17:34:10.767"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:14.934">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:14.935">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:10.767" status="PASS" endtime="20161110 17:34:14.935"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:14.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:14.935" status="PASS" endtime="20161110 17:34:14.937"></status>
</kw>
<status starttime="20161110 17:34:10.764" status="PASS" endtime="20161110 17:34:14.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:15.227">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:15.227">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:14.937" status="PASS" endtime="20161110 17:34:15.227"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:15.229">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:15.228" status="PASS" endtime="20161110 17:34:15.229"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:15.230">Response code:200, Content:{
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:15.230" status="PASS" endtime="20161110 17:34:15.231"></status>
</kw>
<status starttime="20161110 17:34:15.229" status="PASS" endtime="20161110 17:34:15.231"></status>
</kw>
<status starttime="20161110 17:34:15.227" status="PASS" endtime="20161110 17:34:15.231"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:15.231">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:10.756" status="PASS" endtime="20161110 17:34:15.231"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:15.232">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:10.754" status="PASS" endtime="20161110 17:34:15.232"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:15.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:15.232" status="PASS" endtime="20161110 17:34:15.233"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:15.234">To JSON using : content={
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:34:15.234">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:34:15.234">${content} = {u'data': u'HOST_POWERED_OFF', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:34:15.233" status="PASS" endtime="20161110 17:34:15.234"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:15.235">${bmc_state} = HOST_POWERED_OFF</msg>
<status starttime="20161110 17:34:10.752" status="PASS" endtime="20161110 17:34:15.235"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:34:15.236">'HOST_POWERED_OFF' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:34:15.235" status="FAIL" endtime="20161110 17:34:15.236"></status>
</kw>
<status starttime="20161110 17:34:10.751" status="FAIL" endtime="20161110 17:34:15.236"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:25.239">@{arglist} = [ ]</msg>
<status starttime="20161110 17:34:25.238" status="PASS" endtime="20161110 17:34:25.239"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:25.240">${args} = {u'data': []}</msg>
<status starttime="20161110 17:34:25.240" status="PASS" endtime="20161110 17:34:25.241"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:25.242">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:34:25.242" status="PASS" endtime="20161110 17:34:25.242"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:25.244">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:34:25.244" status="PASS" endtime="20161110 17:34:25.244"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:25.245">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:25.245" status="PASS" endtime="20161110 17:34:25.245"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:34:25.245" status="PASS" endtime="20161110 17:34:25.246"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:25.248">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:25.247" status="PASS" endtime="20161110 17:34:25.248"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:25.249">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:25.249" status="PASS" endtime="20161110 17:34:25.249"></status>
</kw>
<status starttime="20161110 17:34:25.248" status="PASS" endtime="20161110 17:34:25.250"></status>
</kw>
<status starttime="20161110 17:34:25.246" status="PASS" endtime="20161110 17:34:25.250"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:25.251">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:34:25.251" status="PASS" endtime="20161110 17:34:25.252"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:25.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:25.252" status="PASS" endtime="20161110 17:34:25.253"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:25.253">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:34:25.253" status="PASS" endtime="20161110 17:34:25.253"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:25.254">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:34:25.254" status="PASS" endtime="20161110 17:34:25.254"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:26.164">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:26.164">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:25.254" status="PASS" endtime="20161110 17:34:26.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:26.165">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:26.164" status="PASS" endtime="20161110 17:34:26.165"></status>
</kw>
<status starttime="20161110 17:34:25.250" status="PASS" endtime="20161110 17:34:26.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:26.441">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:26.441">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:26.165" status="PASS" endtime="20161110 17:34:26.441"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:26.443">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:26.442" status="PASS" endtime="20161110 17:34:26.443"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:26.444">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:26.444" status="PASS" endtime="20161110 17:34:26.444"></status>
</kw>
<status starttime="20161110 17:34:26.443" status="PASS" endtime="20161110 17:34:26.444"></status>
</kw>
<status starttime="20161110 17:34:26.441" status="PASS" endtime="20161110 17:34:26.444"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:26.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:25.242" status="PASS" endtime="20161110 17:34:26.445"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:26.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:25.241" status="PASS" endtime="20161110 17:34:26.445"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:26.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:26.445" status="PASS" endtime="20161110 17:34:26.446"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:26.447">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:34:26.447">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:34:26.447">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:34:26.446" status="PASS" endtime="20161110 17:34:26.447"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:26.447">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:34:25.238" status="PASS" endtime="20161110 17:34:26.447"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:34:26.448">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:34:26.447" status="FAIL" endtime="20161110 17:34:26.448"></status>
</kw>
<status starttime="20161110 17:34:25.237" status="FAIL" endtime="20161110 17:34:26.448"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:36.451">@{arglist} = [ ]</msg>
<status starttime="20161110 17:34:36.450" status="PASS" endtime="20161110 17:34:36.451"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:36.452">${args} = {u'data': []}</msg>
<status starttime="20161110 17:34:36.451" status="PASS" endtime="20161110 17:34:36.452"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:36.454">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:34:36.453" status="PASS" endtime="20161110 17:34:36.454"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:36.456">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:34:36.455" status="PASS" endtime="20161110 17:34:36.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:36.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:36.456" status="PASS" endtime="20161110 17:34:36.457"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:34:36.457" status="PASS" endtime="20161110 17:34:36.457"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:36.460">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:36.458" status="PASS" endtime="20161110 17:34:36.460"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:36.462">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:36.461" status="PASS" endtime="20161110 17:34:36.462"></status>
</kw>
<status starttime="20161110 17:34:36.460" status="PASS" endtime="20161110 17:34:36.462"></status>
</kw>
<status starttime="20161110 17:34:36.458" status="PASS" endtime="20161110 17:34:36.462"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:36.464">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:34:36.463" status="PASS" endtime="20161110 17:34:36.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:36.465">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:36.464" status="PASS" endtime="20161110 17:34:36.465"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:36.465">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:34:36.465" status="PASS" endtime="20161110 17:34:36.465"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:36.466">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:34:36.465" status="PASS" endtime="20161110 17:34:36.466"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:36.847">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:36.848">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:36.466" status="PASS" endtime="20161110 17:34:36.848"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:36.849">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:36.848" status="PASS" endtime="20161110 17:34:36.849"></status>
</kw>
<status starttime="20161110 17:34:36.462" status="PASS" endtime="20161110 17:34:36.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:37.139">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:37.139">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:36.849" status="PASS" endtime="20161110 17:34:37.140"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:37.141">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:37.141" status="PASS" endtime="20161110 17:34:37.142"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:37.143">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:37.142" status="PASS" endtime="20161110 17:34:37.143"></status>
</kw>
<status starttime="20161110 17:34:37.142" status="PASS" endtime="20161110 17:34:37.143"></status>
</kw>
<status starttime="20161110 17:34:37.140" status="PASS" endtime="20161110 17:34:37.144"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:37.144">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:36.454" status="PASS" endtime="20161110 17:34:37.144"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:37.144">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:36.452" status="PASS" endtime="20161110 17:34:37.144"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:37.145">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:37.145" status="PASS" endtime="20161110 17:34:37.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:37.146">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:34:37.146">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:34:37.147">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:34:37.146" status="PASS" endtime="20161110 17:34:37.147"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:37.147">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:34:36.450" status="PASS" endtime="20161110 17:34:37.147"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:34:37.148">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:34:37.147" status="FAIL" endtime="20161110 17:34:37.148"></status>
</kw>
<status starttime="20161110 17:34:36.449" status="FAIL" endtime="20161110 17:34:37.149"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.152">@{arglist} = [ ]</msg>
<status starttime="20161110 17:34:47.151" status="PASS" endtime="20161110 17:34:47.152"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.153">${args} = {u'data': []}</msg>
<status starttime="20161110 17:34:47.152" status="PASS" endtime="20161110 17:34:47.153"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.155">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:34:47.155" status="PASS" endtime="20161110 17:34:47.155"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.157">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:34:47.157" status="PASS" endtime="20161110 17:34:47.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.158">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:47.158" status="PASS" endtime="20161110 17:34:47.158"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:34:47.159" status="PASS" endtime="20161110 17:34:47.159"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.161">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:47.160" status="PASS" endtime="20161110 17:34:47.161"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:47.163">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:47.163" status="PASS" endtime="20161110 17:34:47.163"></status>
</kw>
<status starttime="20161110 17:34:47.162" status="PASS" endtime="20161110 17:34:47.164"></status>
</kw>
<status starttime="20161110 17:34:47.159" status="PASS" endtime="20161110 17:34:47.164"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:47.165">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:34:47.164" status="PASS" endtime="20161110 17:34:47.165"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.166">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:47.165" status="PASS" endtime="20161110 17:34:47.166"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.166">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:34:47.166" status="PASS" endtime="20161110 17:34:47.166"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.167">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:34:47.166" status="PASS" endtime="20161110 17:34:47.167"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.498">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:47.499">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:47.167" status="PASS" endtime="20161110 17:34:47.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:47.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:47.499" status="PASS" endtime="20161110 17:34:47.499"></status>
</kw>
<status starttime="20161110 17:34:47.164" status="PASS" endtime="20161110 17:34:47.500"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.848">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:47.848">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:47.500" status="PASS" endtime="20161110 17:34:47.848"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.850">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:47.849" status="PASS" endtime="20161110 17:34:47.850"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:47.852">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:47.851" status="PASS" endtime="20161110 17:34:47.852"></status>
</kw>
<status starttime="20161110 17:34:47.851" status="PASS" endtime="20161110 17:34:47.852"></status>
</kw>
<status starttime="20161110 17:34:47.848" status="PASS" endtime="20161110 17:34:47.852"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:47.853">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:47.156" status="PASS" endtime="20161110 17:34:47.853"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:47.853">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:47.153" status="PASS" endtime="20161110 17:34:47.853"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:47.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:47.854" status="PASS" endtime="20161110 17:34:47.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:47.855">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:34:47.855">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:34:47.855">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:34:47.854" status="PASS" endtime="20161110 17:34:47.855"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:47.856">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:34:47.150" status="PASS" endtime="20161110 17:34:47.856"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:34:47.856">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:34:47.856" status="FAIL" endtime="20161110 17:34:47.857"></status>
</kw>
<status starttime="20161110 17:34:47.149" status="FAIL" endtime="20161110 17:34:47.857"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:57.860">@{arglist} = [ ]</msg>
<status starttime="20161110 17:34:57.859" status="PASS" endtime="20161110 17:34:57.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:57.862">${args} = {u'data': []}</msg>
<status starttime="20161110 17:34:57.861" status="PASS" endtime="20161110 17:34:57.862"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:57.864">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:34:57.863" status="PASS" endtime="20161110 17:34:57.864"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:57.866">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:34:57.865" status="PASS" endtime="20161110 17:34:57.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:57.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:57.866" status="PASS" endtime="20161110 17:34:57.866"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:34:57.867" status="PASS" endtime="20161110 17:34:57.867"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:57.869">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:57.868" status="PASS" endtime="20161110 17:34:57.869"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:57.871">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:34:57.870" status="PASS" endtime="20161110 17:34:57.871"></status>
</kw>
<status starttime="20161110 17:34:57.870" status="PASS" endtime="20161110 17:34:57.871"></status>
</kw>
<status starttime="20161110 17:34:57.867" status="PASS" endtime="20161110 17:34:57.871"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:57.872">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:34:57.872" status="PASS" endtime="20161110 17:34:57.873"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:57.874">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:34:57.874" status="PASS" endtime="20161110 17:34:57.874"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:57.875">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:34:57.874" status="PASS" endtime="20161110 17:34:57.875"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:57.875">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:34:57.875" status="PASS" endtime="20161110 17:34:57.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:58.524">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:58.524">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:57.876" status="PASS" endtime="20161110 17:34:58.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:58.525">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:58.525" status="PASS" endtime="20161110 17:34:58.525"></status>
</kw>
<status starttime="20161110 17:34:57.871" status="PASS" endtime="20161110 17:34:58.525"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:59.138">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:34:59.138">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:58.526" status="PASS" endtime="20161110 17:34:59.138"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:59.140">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:59.139" status="PASS" endtime="20161110 17:34:59.140"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:59.142">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:34:59.141" status="PASS" endtime="20161110 17:34:59.142"></status>
</kw>
<status starttime="20161110 17:34:59.141" status="PASS" endtime="20161110 17:34:59.142"></status>
</kw>
<status starttime="20161110 17:34:59.139" status="PASS" endtime="20161110 17:34:59.142"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:59.143">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:57.864" status="PASS" endtime="20161110 17:34:59.143"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:59.143">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:34:57.862" status="PASS" endtime="20161110 17:34:59.143"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:34:59.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:34:59.144" status="PASS" endtime="20161110 17:34:59.144"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:34:59.145">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:34:59.146">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:34:59.146">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:34:59.145" status="PASS" endtime="20161110 17:34:59.146"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:34:59.146">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:34:57.859" status="PASS" endtime="20161110 17:34:59.146"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:34:59.147">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:34:59.147" status="FAIL" endtime="20161110 17:34:59.147"></status>
</kw>
<status starttime="20161110 17:34:57.857" status="FAIL" endtime="20161110 17:34:59.148"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.151">@{arglist} = [ ]</msg>
<status starttime="20161110 17:35:09.150" status="PASS" endtime="20161110 17:35:09.151"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.152">${args} = {u'data': []}</msg>
<status starttime="20161110 17:35:09.151" status="PASS" endtime="20161110 17:35:09.152"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.155">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:35:09.154" status="PASS" endtime="20161110 17:35:09.155"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.157">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:35:09.156" status="PASS" endtime="20161110 17:35:09.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.158">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:35:09.157" status="PASS" endtime="20161110 17:35:09.158"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:35:09.158" status="PASS" endtime="20161110 17:35:09.159"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.162">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:35:09.161" status="PASS" endtime="20161110 17:35:09.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:09.164">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:35:09.163" status="PASS" endtime="20161110 17:35:09.164"></status>
</kw>
<status starttime="20161110 17:35:09.162" status="PASS" endtime="20161110 17:35:09.164"></status>
</kw>
<status starttime="20161110 17:35:09.160" status="PASS" endtime="20161110 17:35:09.164"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:09.165">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:35:09.165" status="PASS" endtime="20161110 17:35:09.166"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.166">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:35:09.166" status="PASS" endtime="20161110 17:35:09.166"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.167">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:35:09.166" status="PASS" endtime="20161110 17:35:09.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.167">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:35:09.167" status="PASS" endtime="20161110 17:35:09.167"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:35:09.504">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:09.167" status="PASS" endtime="20161110 17:35:09.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:09.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:35:09.504" status="PASS" endtime="20161110 17:35:09.504"></status>
</kw>
<status starttime="20161110 17:35:09.164" status="PASS" endtime="20161110 17:35:09.505"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.787">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:35:09.787">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:09.505" status="PASS" endtime="20161110 17:35:09.787"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.789">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:35:09.788" status="PASS" endtime="20161110 17:35:09.789"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:09.791">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:35:09.790" status="PASS" endtime="20161110 17:35:09.791"></status>
</kw>
<status starttime="20161110 17:35:09.789" status="PASS" endtime="20161110 17:35:09.791"></status>
</kw>
<status starttime="20161110 17:35:09.787" status="PASS" endtime="20161110 17:35:09.792"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:09.792">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:09.155" status="PASS" endtime="20161110 17:35:09.792"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:09.793">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:09.152" status="PASS" endtime="20161110 17:35:09.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:09.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:35:09.793" status="PASS" endtime="20161110 17:35:09.794"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:09.795">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:35:09.795">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:35:09.795">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:35:09.794" status="PASS" endtime="20161110 17:35:09.795"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:09.795">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:35:09.149" status="PASS" endtime="20161110 17:35:09.795"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:35:09.796">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:35:09.796" status="FAIL" endtime="20161110 17:35:09.796"></status>
</kw>
<status starttime="20161110 17:35:09.148" status="FAIL" endtime="20161110 17:35:09.797"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:19.799">@{arglist} = [ ]</msg>
<status starttime="20161110 17:35:19.799" status="PASS" endtime="20161110 17:35:19.799"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:19.800">${args} = {u'data': []}</msg>
<status starttime="20161110 17:35:19.800" status="PASS" endtime="20161110 17:35:19.800"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:19.802">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:35:19.801" status="PASS" endtime="20161110 17:35:19.802"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:19.804">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:35:19.804" status="PASS" endtime="20161110 17:35:19.804"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:19.805">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:35:19.805" status="PASS" endtime="20161110 17:35:19.805"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:35:19.805" status="PASS" endtime="20161110 17:35:19.806"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:19.808">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:35:19.807" status="PASS" endtime="20161110 17:35:19.808"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:19.810">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:35:19.809" status="PASS" endtime="20161110 17:35:19.810"></status>
</kw>
<status starttime="20161110 17:35:19.809" status="PASS" endtime="20161110 17:35:19.810"></status>
</kw>
<status starttime="20161110 17:35:19.806" status="PASS" endtime="20161110 17:35:19.810"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:19.812">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:35:19.811" status="PASS" endtime="20161110 17:35:19.812"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:19.813">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:35:19.813" status="PASS" endtime="20161110 17:35:19.813"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:19.814">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:35:19.813" status="PASS" endtime="20161110 17:35:19.814"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:19.815">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:35:19.814" status="PASS" endtime="20161110 17:35:19.815"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:20.149">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:35:20.149">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:19.815" status="PASS" endtime="20161110 17:35:20.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:20.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:35:20.150" status="PASS" endtime="20161110 17:35:20.150"></status>
</kw>
<status starttime="20161110 17:35:19.811" status="PASS" endtime="20161110 17:35:20.150"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:20.428">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:35:20.428">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:20.151" status="PASS" endtime="20161110 17:35:20.428"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:20.429">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:35:20.429" status="PASS" endtime="20161110 17:35:20.429"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:20.430">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:35:20.430" status="PASS" endtime="20161110 17:35:20.430"></status>
</kw>
<status starttime="20161110 17:35:20.429" status="PASS" endtime="20161110 17:35:20.430"></status>
</kw>
<status starttime="20161110 17:35:20.428" status="PASS" endtime="20161110 17:35:20.430"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:20.430">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:19.802" status="PASS" endtime="20161110 17:35:20.430"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:20.431">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:19.801" status="PASS" endtime="20161110 17:35:20.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:20.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:35:20.431" status="PASS" endtime="20161110 17:35:20.431"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:20.432">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:35:20.432">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:35:20.432">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:35:20.432" status="PASS" endtime="20161110 17:35:20.432"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:20.432">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:35:19.798" status="PASS" endtime="20161110 17:35:20.432"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:35:20.433">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:35:20.432" status="FAIL" endtime="20161110 17:35:20.433"></status>
</kw>
<status starttime="20161110 17:35:19.797" status="FAIL" endtime="20161110 17:35:20.433"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:30.436">@{arglist} = [ ]</msg>
<status starttime="20161110 17:35:30.435" status="PASS" endtime="20161110 17:35:30.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:30.437">${args} = {u'data': []}</msg>
<status starttime="20161110 17:35:30.436" status="PASS" endtime="20161110 17:35:30.437"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:30.439">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:35:30.438" status="PASS" endtime="20161110 17:35:30.439"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:30.441">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:35:30.441" status="PASS" endtime="20161110 17:35:30.441"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:30.442">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:35:30.442" status="PASS" endtime="20161110 17:35:30.442"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:35:30.443" status="PASS" endtime="20161110 17:35:30.443"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:30.446">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:35:30.444" status="PASS" endtime="20161110 17:35:30.446"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:30.447">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:35:30.447" status="PASS" endtime="20161110 17:35:30.447"></status>
</kw>
<status starttime="20161110 17:35:30.446" status="PASS" endtime="20161110 17:35:30.447"></status>
</kw>
<status starttime="20161110 17:35:30.443" status="PASS" endtime="20161110 17:35:30.447"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:30.448">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:35:30.448" status="PASS" endtime="20161110 17:35:30.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:30.449">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:35:30.449" status="PASS" endtime="20161110 17:35:30.449"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:30.450">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:35:30.449" status="PASS" endtime="20161110 17:35:30.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:30.450">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:35:30.450" status="PASS" endtime="20161110 17:35:30.450"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:31.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:35:31.622">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:30.450" status="PASS" endtime="20161110 17:35:31.622"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:31.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:35:31.622" status="PASS" endtime="20161110 17:35:31.623"></status>
</kw>
<status starttime="20161110 17:35:30.447" status="PASS" endtime="20161110 17:35:31.623"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:32.518">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:35:32.518">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:31.624" status="PASS" endtime="20161110 17:35:32.518"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:32.520">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:35:32.519" status="PASS" endtime="20161110 17:35:32.520"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:32.522">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:35:32.521" status="PASS" endtime="20161110 17:35:32.522"></status>
</kw>
<status starttime="20161110 17:35:32.520" status="PASS" endtime="20161110 17:35:32.522"></status>
</kw>
<status starttime="20161110 17:35:32.518" status="PASS" endtime="20161110 17:35:32.522"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:32.522">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:30.439" status="PASS" endtime="20161110 17:35:32.522"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:32.523">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:30.437" status="PASS" endtime="20161110 17:35:32.523"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:32.524">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:35:32.523" status="PASS" endtime="20161110 17:35:32.524"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:32.525">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:35:32.525">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:35:32.525">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:35:32.524" status="PASS" endtime="20161110 17:35:32.525"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:32.525">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:35:30.435" status="PASS" endtime="20161110 17:35:32.525"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:35:32.526">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:35:32.526" status="FAIL" endtime="20161110 17:35:32.526"></status>
</kw>
<status starttime="20161110 17:35:30.434" status="FAIL" endtime="20161110 17:35:32.527"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:42.529">@{arglist} = [ ]</msg>
<status starttime="20161110 17:35:42.528" status="PASS" endtime="20161110 17:35:42.529"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:42.529">${args} = {u'data': []}</msg>
<status starttime="20161110 17:35:42.529" status="PASS" endtime="20161110 17:35:42.529"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:42.530">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:35:42.530" status="PASS" endtime="20161110 17:35:42.530"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:42.532">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:35:42.531" status="PASS" endtime="20161110 17:35:42.532"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:42.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:35:42.532" status="PASS" endtime="20161110 17:35:42.532"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:35:42.532" status="PASS" endtime="20161110 17:35:42.533"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:42.534">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:35:42.533" status="PASS" endtime="20161110 17:35:42.534"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:42.535">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:35:42.535" status="PASS" endtime="20161110 17:35:42.535"></status>
</kw>
<status starttime="20161110 17:35:42.534" status="PASS" endtime="20161110 17:35:42.535"></status>
</kw>
<status starttime="20161110 17:35:42.533" status="PASS" endtime="20161110 17:35:42.535"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:42.536">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:35:42.536" status="PASS" endtime="20161110 17:35:42.537"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:42.537">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:35:42.537" status="PASS" endtime="20161110 17:35:42.537"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:42.538">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:35:42.537" status="PASS" endtime="20161110 17:35:42.538"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:42.538">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:35:42.538" status="PASS" endtime="20161110 17:35:42.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:42.873">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:35:42.874">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:42.538" status="PASS" endtime="20161110 17:35:42.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:42.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:35:42.874" status="PASS" endtime="20161110 17:35:42.875"></status>
</kw>
<status starttime="20161110 17:35:42.536" status="PASS" endtime="20161110 17:35:42.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:43.156">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:35:43.156">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:42.876" status="PASS" endtime="20161110 17:35:43.156"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:43.158">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:35:43.157" status="PASS" endtime="20161110 17:35:43.158"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:43.159">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:35:43.159" status="PASS" endtime="20161110 17:35:43.160"></status>
</kw>
<status starttime="20161110 17:35:43.158" status="PASS" endtime="20161110 17:35:43.160"></status>
</kw>
<status starttime="20161110 17:35:43.156" status="PASS" endtime="20161110 17:35:43.160"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:43.160">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:42.531" status="PASS" endtime="20161110 17:35:43.160"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:43.161">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:42.530" status="PASS" endtime="20161110 17:35:43.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:43.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:35:43.161" status="PASS" endtime="20161110 17:35:43.162"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:43.162">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:35:43.162">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:35:43.163">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:35:43.162" status="PASS" endtime="20161110 17:35:43.163"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:43.163">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:35:42.528" status="PASS" endtime="20161110 17:35:43.163"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:35:43.164">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:35:43.163" status="FAIL" endtime="20161110 17:35:43.164"></status>
</kw>
<status starttime="20161110 17:35:42.527" status="FAIL" endtime="20161110 17:35:43.165"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.167">@{arglist} = [ ]</msg>
<status starttime="20161110 17:35:53.167" status="PASS" endtime="20161110 17:35:53.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.168">${args} = {u'data': []}</msg>
<status starttime="20161110 17:35:53.168" status="PASS" endtime="20161110 17:35:53.168"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.170">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:35:53.170" status="PASS" endtime="20161110 17:35:53.170"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.172">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:35:53.172" status="PASS" endtime="20161110 17:35:53.172"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.173">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:35:53.173" status="PASS" endtime="20161110 17:35:53.173"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:35:53.173" status="PASS" endtime="20161110 17:35:53.174"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.176">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:35:53.175" status="PASS" endtime="20161110 17:35:53.176"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:53.177">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:35:53.176" status="PASS" endtime="20161110 17:35:53.177"></status>
</kw>
<status starttime="20161110 17:35:53.176" status="PASS" endtime="20161110 17:35:53.177"></status>
</kw>
<status starttime="20161110 17:35:53.174" status="PASS" endtime="20161110 17:35:53.177"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:53.178">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:35:53.178" status="PASS" endtime="20161110 17:35:53.179"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:35:53.179" status="PASS" endtime="20161110 17:35:53.179"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.180">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:35:53.179" status="PASS" endtime="20161110 17:35:53.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.180">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:35:53.180" status="PASS" endtime="20161110 17:35:53.180"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.530">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:35:53.530">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:53.180" status="PASS" endtime="20161110 17:35:53.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:53.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:35:53.531" status="PASS" endtime="20161110 17:35:53.532"></status>
</kw>
<status starttime="20161110 17:35:53.177" status="PASS" endtime="20161110 17:35:53.532"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.824">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:35:53.824">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:53.532" status="PASS" endtime="20161110 17:35:53.824"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.827">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:35:53.825" status="PASS" endtime="20161110 17:35:53.827"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:53.828">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:35:53.828" status="PASS" endtime="20161110 17:35:53.829"></status>
</kw>
<status starttime="20161110 17:35:53.827" status="PASS" endtime="20161110 17:35:53.829"></status>
</kw>
<status starttime="20161110 17:35:53.824" status="PASS" endtime="20161110 17:35:53.829"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:53.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:53.171" status="PASS" endtime="20161110 17:35:53.829"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:53.830">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:35:53.169" status="PASS" endtime="20161110 17:35:53.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:35:53.831">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:35:53.830" status="PASS" endtime="20161110 17:35:53.831"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:35:53.832">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:35:53.832">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:35:53.832">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:35:53.831" status="PASS" endtime="20161110 17:35:53.832"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:35:53.832">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:35:53.166" status="PASS" endtime="20161110 17:35:53.832"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:35:53.833">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:35:53.833" status="FAIL" endtime="20161110 17:35:53.833"></status>
</kw>
<status starttime="20161110 17:35:53.165" status="FAIL" endtime="20161110 17:35:53.834"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:03.836">@{arglist} = [ ]</msg>
<status starttime="20161110 17:36:03.836" status="PASS" endtime="20161110 17:36:03.836"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:03.837">${args} = {u'data': []}</msg>
<status starttime="20161110 17:36:03.836" status="PASS" endtime="20161110 17:36:03.837"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:03.838">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:36:03.838" status="PASS" endtime="20161110 17:36:03.838"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:03.839">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:36:03.839" status="PASS" endtime="20161110 17:36:03.839"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:03.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:36:03.839" status="PASS" endtime="20161110 17:36:03.840"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:36:03.840" status="PASS" endtime="20161110 17:36:03.840"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:03.842">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:36:03.841" status="PASS" endtime="20161110 17:36:03.842"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:03.842">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:36:03.842" status="PASS" endtime="20161110 17:36:03.843"></status>
</kw>
<status starttime="20161110 17:36:03.842" status="PASS" endtime="20161110 17:36:03.843"></status>
</kw>
<status starttime="20161110 17:36:03.840" status="PASS" endtime="20161110 17:36:03.843"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:03.844">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:36:03.843" status="PASS" endtime="20161110 17:36:03.844"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:03.845">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:36:03.844" status="PASS" endtime="20161110 17:36:03.845"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:03.845">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:36:03.845" status="PASS" endtime="20161110 17:36:03.845"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:03.846">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:36:03.846" status="PASS" endtime="20161110 17:36:03.846"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:04.179">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:36:04.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:03.846" status="PASS" endtime="20161110 17:36:04.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:04.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:36:04.180" status="PASS" endtime="20161110 17:36:04.181"></status>
</kw>
<status starttime="20161110 17:36:03.843" status="PASS" endtime="20161110 17:36:04.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:04.466">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:36:04.466">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:04.182" status="PASS" endtime="20161110 17:36:04.466"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:04.468">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:36:04.467" status="PASS" endtime="20161110 17:36:04.468"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:04.469">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:36:04.469" status="PASS" endtime="20161110 17:36:04.469"></status>
</kw>
<status starttime="20161110 17:36:04.468" status="PASS" endtime="20161110 17:36:04.469"></status>
</kw>
<status starttime="20161110 17:36:04.466" status="PASS" endtime="20161110 17:36:04.469"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:04.469">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:03.838" status="PASS" endtime="20161110 17:36:04.470"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:04.470">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:03.837" status="PASS" endtime="20161110 17:36:04.470"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:04.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:36:04.470" status="PASS" endtime="20161110 17:36:04.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:04.471">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:36:04.471">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:36:04.471">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:36:04.471" status="PASS" endtime="20161110 17:36:04.472"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:04.472">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:36:03.835" status="PASS" endtime="20161110 17:36:04.472"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:36:04.473">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:36:04.472" status="FAIL" endtime="20161110 17:36:04.473"></status>
</kw>
<status starttime="20161110 17:36:03.834" status="FAIL" endtime="20161110 17:36:04.473"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:14.476">@{arglist} = [ ]</msg>
<status starttime="20161110 17:36:14.475" status="PASS" endtime="20161110 17:36:14.476"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:14.477">${args} = {u'data': []}</msg>
<status starttime="20161110 17:36:14.476" status="PASS" endtime="20161110 17:36:14.477"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:14.478">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:36:14.478" status="PASS" endtime="20161110 17:36:14.478"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:14.480">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:36:14.480" status="PASS" endtime="20161110 17:36:14.480"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:14.481">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:36:14.481" status="PASS" endtime="20161110 17:36:14.481"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:36:14.481" status="PASS" endtime="20161110 17:36:14.482"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:14.484">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:36:14.483" status="PASS" endtime="20161110 17:36:14.484"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:14.486">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:36:14.486" status="PASS" endtime="20161110 17:36:14.486"></status>
</kw>
<status starttime="20161110 17:36:14.485" status="PASS" endtime="20161110 17:36:14.486"></status>
</kw>
<status starttime="20161110 17:36:14.482" status="PASS" endtime="20161110 17:36:14.487"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:14.487">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:36:14.487" status="PASS" endtime="20161110 17:36:14.488"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:14.489">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:36:14.488" status="PASS" endtime="20161110 17:36:14.489"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:14.489">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:36:14.489" status="PASS" endtime="20161110 17:36:14.489"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:14.490">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:36:14.490" status="PASS" endtime="20161110 17:36:14.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:14.826">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:36:14.826">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:14.490" status="PASS" endtime="20161110 17:36:14.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:14.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:36:14.826" status="PASS" endtime="20161110 17:36:14.827"></status>
</kw>
<status starttime="20161110 17:36:14.487" status="PASS" endtime="20161110 17:36:14.827"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:15.110">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:36:15.111">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:14.828" status="PASS" endtime="20161110 17:36:15.111"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:15.113">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:36:15.112" status="PASS" endtime="20161110 17:36:15.113"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:15.115">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:36:15.114" status="PASS" endtime="20161110 17:36:15.115"></status>
</kw>
<status starttime="20161110 17:36:15.113" status="PASS" endtime="20161110 17:36:15.116"></status>
</kw>
<status starttime="20161110 17:36:15.111" status="PASS" endtime="20161110 17:36:15.116"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:15.116">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:14.479" status="PASS" endtime="20161110 17:36:15.117"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:15.117">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:14.477" status="PASS" endtime="20161110 17:36:15.117"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:15.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:36:15.117" status="PASS" endtime="20161110 17:36:15.118"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:15.119">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:36:15.119">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:36:15.119">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:36:15.118" status="PASS" endtime="20161110 17:36:15.119"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:15.119">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:36:14.474" status="PASS" endtime="20161110 17:36:15.119"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:36:15.120">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:36:15.120" status="FAIL" endtime="20161110 17:36:15.120"></status>
</kw>
<status starttime="20161110 17:36:14.474" status="FAIL" endtime="20161110 17:36:15.121"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.126">@{arglist} = [ ]</msg>
<status starttime="20161110 17:36:25.125" status="PASS" endtime="20161110 17:36:25.126"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.127">${args} = {u'data': []}</msg>
<status starttime="20161110 17:36:25.126" status="PASS" endtime="20161110 17:36:25.127"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.128">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:36:25.128" status="PASS" endtime="20161110 17:36:25.128"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.130">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:36:25.130" status="PASS" endtime="20161110 17:36:25.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.134">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:36:25.131" status="PASS" endtime="20161110 17:36:25.134"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:36:25.134" status="PASS" endtime="20161110 17:36:25.135"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.137">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:36:25.136" status="PASS" endtime="20161110 17:36:25.137"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:25.138">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:36:25.138" status="PASS" endtime="20161110 17:36:25.138"></status>
</kw>
<status starttime="20161110 17:36:25.137" status="PASS" endtime="20161110 17:36:25.138"></status>
</kw>
<status starttime="20161110 17:36:25.135" status="PASS" endtime="20161110 17:36:25.139"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:25.139">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:36:25.139" status="PASS" endtime="20161110 17:36:25.140"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:36:25.140" status="PASS" endtime="20161110 17:36:25.140"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.141">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:36:25.141" status="PASS" endtime="20161110 17:36:25.141"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:36:25.141" status="PASS" endtime="20161110 17:36:25.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.478">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:36:25.478">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:25.142" status="PASS" endtime="20161110 17:36:25.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:25.479">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:36:25.478" status="PASS" endtime="20161110 17:36:25.479"></status>
</kw>
<status starttime="20161110 17:36:25.139" status="PASS" endtime="20161110 17:36:25.479"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.763">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:36:25.763">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:25.479" status="PASS" endtime="20161110 17:36:25.763"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.765">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:36:25.764" status="PASS" endtime="20161110 17:36:25.765"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:25.766">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:36:25.765" status="PASS" endtime="20161110 17:36:25.766"></status>
</kw>
<status starttime="20161110 17:36:25.765" status="PASS" endtime="20161110 17:36:25.766"></status>
</kw>
<status starttime="20161110 17:36:25.764" status="PASS" endtime="20161110 17:36:25.767"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:25.767">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:25.129" status="PASS" endtime="20161110 17:36:25.767"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:25.767">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:25.127" status="PASS" endtime="20161110 17:36:25.767"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:25.768">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:36:25.768" status="PASS" endtime="20161110 17:36:25.768"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:25.769">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:36:25.769">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:36:25.769">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:36:25.769" status="PASS" endtime="20161110 17:36:25.769"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:25.770">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:36:25.125" status="PASS" endtime="20161110 17:36:25.770"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:36:25.771">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:36:25.770" status="FAIL" endtime="20161110 17:36:25.771"></status>
</kw>
<status starttime="20161110 17:36:25.124" status="FAIL" endtime="20161110 17:36:25.771"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:35.774">@{arglist} = [ ]</msg>
<status starttime="20161110 17:36:35.773" status="PASS" endtime="20161110 17:36:35.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:35.775">${args} = {u'data': []}</msg>
<status starttime="20161110 17:36:35.774" status="PASS" endtime="20161110 17:36:35.775"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:35.776">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:36:35.776" status="PASS" endtime="20161110 17:36:35.776"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:35.778">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:36:35.778" status="PASS" endtime="20161110 17:36:35.778"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:35.779">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:36:35.779" status="PASS" endtime="20161110 17:36:35.779"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:36:35.780" status="PASS" endtime="20161110 17:36:35.780"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:35.783">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:36:35.781" status="PASS" endtime="20161110 17:36:35.783"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:35.784">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:36:35.784" status="PASS" endtime="20161110 17:36:35.784"></status>
</kw>
<status starttime="20161110 17:36:35.783" status="PASS" endtime="20161110 17:36:35.784"></status>
</kw>
<status starttime="20161110 17:36:35.780" status="PASS" endtime="20161110 17:36:35.785"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:35.786">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:36:35.785" status="PASS" endtime="20161110 17:36:35.786"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:35.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:36:35.787" status="PASS" endtime="20161110 17:36:35.787"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:35.787">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:36:35.787" status="PASS" endtime="20161110 17:36:35.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:35.788">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:36:35.788" status="PASS" endtime="20161110 17:36:35.788"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:43.808">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:36:43.808">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:35.788" status="PASS" endtime="20161110 17:36:43.808"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:43.809">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:36:43.809" status="PASS" endtime="20161110 17:36:43.810"></status>
</kw>
<status starttime="20161110 17:36:35.785" status="PASS" endtime="20161110 17:36:43.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:44.444">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:36:44.444">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:43.810" status="PASS" endtime="20161110 17:36:44.444"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:44.446">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:36:44.445" status="PASS" endtime="20161110 17:36:44.446"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:44.448">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:36:44.447" status="PASS" endtime="20161110 17:36:44.448"></status>
</kw>
<status starttime="20161110 17:36:44.447" status="PASS" endtime="20161110 17:36:44.448"></status>
</kw>
<status starttime="20161110 17:36:44.445" status="PASS" endtime="20161110 17:36:44.448"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:44.449">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:35.777" status="PASS" endtime="20161110 17:36:44.449"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:44.449">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:35.775" status="PASS" endtime="20161110 17:36:44.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:44.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:36:44.449" status="PASS" endtime="20161110 17:36:44.450"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:44.451">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:36:44.451">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:36:44.451">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:36:44.450" status="PASS" endtime="20161110 17:36:44.451"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:44.451">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:36:35.773" status="PASS" endtime="20161110 17:36:44.451"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:36:44.452">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:36:44.452" status="FAIL" endtime="20161110 17:36:44.452"></status>
</kw>
<status starttime="20161110 17:36:35.772" status="FAIL" endtime="20161110 17:36:44.453"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:54.455">@{arglist} = [ ]</msg>
<status starttime="20161110 17:36:54.455" status="PASS" endtime="20161110 17:36:54.455"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:54.456">${args} = {u'data': []}</msg>
<status starttime="20161110 17:36:54.456" status="PASS" endtime="20161110 17:36:54.456"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:54.458">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:36:54.457" status="PASS" endtime="20161110 17:36:54.458"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:54.460">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:36:54.459" status="PASS" endtime="20161110 17:36:54.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:54.461">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:36:54.460" status="PASS" endtime="20161110 17:36:54.461"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:36:54.461" status="PASS" endtime="20161110 17:36:54.462"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:54.465">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:36:54.463" status="PASS" endtime="20161110 17:36:54.465"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:54.466">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:36:54.466" status="PASS" endtime="20161110 17:36:54.466"></status>
</kw>
<status starttime="20161110 17:36:54.465" status="PASS" endtime="20161110 17:36:54.467"></status>
</kw>
<status starttime="20161110 17:36:54.462" status="PASS" endtime="20161110 17:36:54.467"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:54.467">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:36:54.467" status="PASS" endtime="20161110 17:36:54.468"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:54.468">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:36:54.468" status="PASS" endtime="20161110 17:36:54.468"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:54.469">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:36:54.469" status="PASS" endtime="20161110 17:36:54.469"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:54.469">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:36:54.469" status="PASS" endtime="20161110 17:36:54.469"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:54.803">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:36:54.804">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:54.470" status="PASS" endtime="20161110 17:36:54.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:54.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:36:54.804" status="PASS" endtime="20161110 17:36:54.805"></status>
</kw>
<status starttime="20161110 17:36:54.467" status="PASS" endtime="20161110 17:36:54.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:55.130">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:36:55.130">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:54.805" status="PASS" endtime="20161110 17:36:55.130"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:55.132">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:36:55.131" status="PASS" endtime="20161110 17:36:55.132"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:55.133">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:36:55.133" status="PASS" endtime="20161110 17:36:55.134"></status>
</kw>
<status starttime="20161110 17:36:55.132" status="PASS" endtime="20161110 17:36:55.134"></status>
</kw>
<status starttime="20161110 17:36:55.131" status="PASS" endtime="20161110 17:36:55.134"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:55.134">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:54.458" status="PASS" endtime="20161110 17:36:55.134"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:55.135">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:36:54.457" status="PASS" endtime="20161110 17:36:55.135"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:36:55.136">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:36:55.135" status="PASS" endtime="20161110 17:36:55.136"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:36:55.137">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:36:55.137">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:36:55.137">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:36:55.136" status="PASS" endtime="20161110 17:36:55.137"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:36:55.137">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:36:54.454" status="PASS" endtime="20161110 17:36:55.137"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:36:55.138">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:36:55.138" status="FAIL" endtime="20161110 17:36:55.138"></status>
</kw>
<status starttime="20161110 17:36:54.453" status="FAIL" endtime="20161110 17:36:55.139"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.141">@{arglist} = [ ]</msg>
<status starttime="20161110 17:37:05.141" status="PASS" endtime="20161110 17:37:05.141"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.143">${args} = {u'data': []}</msg>
<status starttime="20161110 17:37:05.142" status="PASS" endtime="20161110 17:37:05.143"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.145">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:37:05.144" status="PASS" endtime="20161110 17:37:05.145"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.147">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:37:05.146" status="PASS" endtime="20161110 17:37:05.147"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.148">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:37:05.147" status="PASS" endtime="20161110 17:37:05.148"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:37:05.148" status="PASS" endtime="20161110 17:37:05.148"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.151">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:37:05.150" status="PASS" endtime="20161110 17:37:05.151"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:05.152">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:37:05.152" status="PASS" endtime="20161110 17:37:05.152"></status>
</kw>
<status starttime="20161110 17:37:05.151" status="PASS" endtime="20161110 17:37:05.152"></status>
</kw>
<status starttime="20161110 17:37:05.149" status="PASS" endtime="20161110 17:37:05.153"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:05.154">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:37:05.153" status="PASS" endtime="20161110 17:37:05.154"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.155">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:37:05.155" status="PASS" endtime="20161110 17:37:05.155"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.156">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:37:05.155" status="PASS" endtime="20161110 17:37:05.156"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.157">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:37:05.156" status="PASS" endtime="20161110 17:37:05.157"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.496">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:37:05.496">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:05.157" status="PASS" endtime="20161110 17:37:05.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:05.497">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:37:05.496" status="PASS" endtime="20161110 17:37:05.497"></status>
</kw>
<status starttime="20161110 17:37:05.153" status="PASS" endtime="20161110 17:37:05.497"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.780">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:37:05.780">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:05.497" status="PASS" endtime="20161110 17:37:05.780"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.782">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:37:05.781" status="PASS" endtime="20161110 17:37:05.782"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:05.783">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:37:05.783" status="PASS" endtime="20161110 17:37:05.783"></status>
</kw>
<status starttime="20161110 17:37:05.782" status="PASS" endtime="20161110 17:37:05.784"></status>
</kw>
<status starttime="20161110 17:37:05.780" status="PASS" endtime="20161110 17:37:05.784"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:05.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:05.145" status="PASS" endtime="20161110 17:37:05.784"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:05.785">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:05.143" status="PASS" endtime="20161110 17:37:05.785"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:05.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:37:05.785" status="PASS" endtime="20161110 17:37:05.786"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:05.786">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:37:05.787">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:37:05.787">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:37:05.786" status="PASS" endtime="20161110 17:37:05.787"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:05.788">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:37:05.140" status="PASS" endtime="20161110 17:37:05.788"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:37:05.788">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:37:05.788" status="FAIL" endtime="20161110 17:37:05.788"></status>
</kw>
<status starttime="20161110 17:37:05.139" status="FAIL" endtime="20161110 17:37:05.789"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:15.791">@{arglist} = [ ]</msg>
<status starttime="20161110 17:37:15.791" status="PASS" endtime="20161110 17:37:15.791"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:15.792">${args} = {u'data': []}</msg>
<status starttime="20161110 17:37:15.792" status="PASS" endtime="20161110 17:37:15.792"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:15.794">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:37:15.793" status="PASS" endtime="20161110 17:37:15.794"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:15.796">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:37:15.796" status="PASS" endtime="20161110 17:37:15.796"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:15.797">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:37:15.797" status="PASS" endtime="20161110 17:37:15.797"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:37:15.797" status="PASS" endtime="20161110 17:37:15.798"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:15.800">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:37:15.799" status="PASS" endtime="20161110 17:37:15.800"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:15.801">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:37:15.801" status="PASS" endtime="20161110 17:37:15.801"></status>
</kw>
<status starttime="20161110 17:37:15.800" status="PASS" endtime="20161110 17:37:15.801"></status>
</kw>
<status starttime="20161110 17:37:15.798" status="PASS" endtime="20161110 17:37:15.801"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:15.802">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:37:15.802" status="PASS" endtime="20161110 17:37:15.804"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:15.804">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:37:15.804" status="PASS" endtime="20161110 17:37:15.804"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:15.805">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:37:15.805" status="PASS" endtime="20161110 17:37:15.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:15.806">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:37:15.805" status="PASS" endtime="20161110 17:37:15.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:16.142">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:37:16.142">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:15.806" status="PASS" endtime="20161110 17:37:16.142"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:16.143">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:37:16.143" status="PASS" endtime="20161110 17:37:16.143"></status>
</kw>
<status starttime="20161110 17:37:15.802" status="PASS" endtime="20161110 17:37:16.143"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:16.431">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:37:16.431">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:16.143" status="PASS" endtime="20161110 17:37:16.431"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:16.432">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:37:16.432" status="PASS" endtime="20161110 17:37:16.432"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:16.433">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:37:16.433" status="PASS" endtime="20161110 17:37:16.433"></status>
</kw>
<status starttime="20161110 17:37:16.432" status="PASS" endtime="20161110 17:37:16.433"></status>
</kw>
<status starttime="20161110 17:37:16.431" status="PASS" endtime="20161110 17:37:16.433"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:16.433">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:15.794" status="PASS" endtime="20161110 17:37:16.433"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:16.434">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:15.792" status="PASS" endtime="20161110 17:37:16.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:16.434">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:37:16.434" status="PASS" endtime="20161110 17:37:16.434"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:16.435">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:37:16.435">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:37:16.435">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:37:16.434" status="PASS" endtime="20161110 17:37:16.435"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:16.435">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:37:15.790" status="PASS" endtime="20161110 17:37:16.436"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:37:16.436">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:37:16.436" status="FAIL" endtime="20161110 17:37:16.437"></status>
</kw>
<status starttime="20161110 17:37:15.789" status="FAIL" endtime="20161110 17:37:16.437"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:26.439">@{arglist} = [ ]</msg>
<status starttime="20161110 17:37:26.439" status="PASS" endtime="20161110 17:37:26.439"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:26.441">${args} = {u'data': []}</msg>
<status starttime="20161110 17:37:26.440" status="PASS" endtime="20161110 17:37:26.441"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:26.442">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:37:26.442" status="PASS" endtime="20161110 17:37:26.443"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:26.445">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:37:26.444" status="PASS" endtime="20161110 17:37:26.445"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:26.446">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:37:26.445" status="PASS" endtime="20161110 17:37:26.446"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:37:26.446" status="PASS" endtime="20161110 17:37:26.447"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:26.450">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:37:26.449" status="PASS" endtime="20161110 17:37:26.450"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:26.451">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:37:26.451" status="PASS" endtime="20161110 17:37:26.451"></status>
</kw>
<status starttime="20161110 17:37:26.450" status="PASS" endtime="20161110 17:37:26.451"></status>
</kw>
<status starttime="20161110 17:37:26.448" status="PASS" endtime="20161110 17:37:26.452"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:26.454">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:37:26.453" status="PASS" endtime="20161110 17:37:26.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:26.455">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:37:26.455" status="PASS" endtime="20161110 17:37:26.456"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:26.457">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:37:26.456" status="PASS" endtime="20161110 17:37:26.457"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:26.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:37:26.457" status="PASS" endtime="20161110 17:37:26.458"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:26.790">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:37:26.790">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:26.458" status="PASS" endtime="20161110 17:37:26.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:26.791">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:37:26.790" status="PASS" endtime="20161110 17:37:26.791"></status>
</kw>
<status starttime="20161110 17:37:26.452" status="PASS" endtime="20161110 17:37:26.791"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:27.076">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:37:27.076">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:26.792" status="PASS" endtime="20161110 17:37:27.076"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:27.078">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:37:27.077" status="PASS" endtime="20161110 17:37:27.078"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:27.080">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:37:27.080" status="PASS" endtime="20161110 17:37:27.080"></status>
</kw>
<status starttime="20161110 17:37:27.078" status="PASS" endtime="20161110 17:37:27.080"></status>
</kw>
<status starttime="20161110 17:37:27.076" status="PASS" endtime="20161110 17:37:27.081"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:27.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:26.443" status="PASS" endtime="20161110 17:37:27.081"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:27.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:26.441" status="PASS" endtime="20161110 17:37:27.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:27.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:37:27.082" status="PASS" endtime="20161110 17:37:27.082"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:27.083">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:37:27.083">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:37:27.083">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:37:27.083" status="PASS" endtime="20161110 17:37:27.083"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:27.084">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:37:26.438" status="PASS" endtime="20161110 17:37:27.084"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:37:27.085">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:37:27.084" status="FAIL" endtime="20161110 17:37:27.085"></status>
</kw>
<status starttime="20161110 17:37:26.437" status="FAIL" endtime="20161110 17:37:27.085"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.087">@{arglist} = [ ]</msg>
<status starttime="20161110 17:37:37.087" status="PASS" endtime="20161110 17:37:37.087"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.088">${args} = {u'data': []}</msg>
<status starttime="20161110 17:37:37.088" status="PASS" endtime="20161110 17:37:37.088"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.090">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:37:37.089" status="PASS" endtime="20161110 17:37:37.090"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.092">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:37:37.091" status="PASS" endtime="20161110 17:37:37.092"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:37:37.092" status="PASS" endtime="20161110 17:37:37.093"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:37:37.093" status="PASS" endtime="20161110 17:37:37.093"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.096">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:37:37.095" status="PASS" endtime="20161110 17:37:37.096"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:37.098">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:37:37.097" status="PASS" endtime="20161110 17:37:37.098"></status>
</kw>
<status starttime="20161110 17:37:37.097" status="PASS" endtime="20161110 17:37:37.098"></status>
</kw>
<status starttime="20161110 17:37:37.094" status="PASS" endtime="20161110 17:37:37.098"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:37.099">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:37:37.098" status="PASS" endtime="20161110 17:37:37.099"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.099">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:37:37.099" status="PASS" endtime="20161110 17:37:37.100"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.100">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:37:37.100" status="PASS" endtime="20161110 17:37:37.100"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.101">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:37:37.100" status="PASS" endtime="20161110 17:37:37.101"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.582">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:37:37.582">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:37.101" status="PASS" endtime="20161110 17:37:37.582"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:37.582">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:37:37.582" status="PASS" endtime="20161110 17:37:37.583"></status>
</kw>
<status starttime="20161110 17:37:37.098" status="PASS" endtime="20161110 17:37:37.583"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.970">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:37:37.970">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:37.583" status="PASS" endtime="20161110 17:37:37.970"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.972">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:37:37.971" status="PASS" endtime="20161110 17:37:37.972"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:37.974">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:37:37.973" status="PASS" endtime="20161110 17:37:37.974"></status>
</kw>
<status starttime="20161110 17:37:37.973" status="PASS" endtime="20161110 17:37:37.974"></status>
</kw>
<status starttime="20161110 17:37:37.970" status="PASS" endtime="20161110 17:37:37.974"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:37.974">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:37.090" status="PASS" endtime="20161110 17:37:37.975"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:37.975">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:37.088" status="PASS" endtime="20161110 17:37:37.975"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:37.976">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:37:37.975" status="PASS" endtime="20161110 17:37:37.976"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:37.977">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:37:37.977">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:37:37.978">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:37:37.977" status="PASS" endtime="20161110 17:37:37.978"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:37.978">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:37:37.086" status="PASS" endtime="20161110 17:37:37.978"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:37:37.980">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:37:37.979" status="FAIL" endtime="20161110 17:37:37.980"></status>
</kw>
<status starttime="20161110 17:37:37.085" status="FAIL" endtime="20161110 17:37:37.980"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:47.983">@{arglist} = [ ]</msg>
<status starttime="20161110 17:37:47.983" status="PASS" endtime="20161110 17:37:47.983"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:47.984">${args} = {u'data': []}</msg>
<status starttime="20161110 17:37:47.983" status="PASS" endtime="20161110 17:37:47.984"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:47.986">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:37:47.985" status="PASS" endtime="20161110 17:37:47.986"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:47.988">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:37:47.988" status="PASS" endtime="20161110 17:37:47.988"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:47.989">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:37:47.988" status="PASS" endtime="20161110 17:37:47.989"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:37:47.989" status="PASS" endtime="20161110 17:37:47.990"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:47.993">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:37:47.991" status="PASS" endtime="20161110 17:37:47.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:47.994">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:37:47.994" status="PASS" endtime="20161110 17:37:47.994"></status>
</kw>
<status starttime="20161110 17:37:47.993" status="PASS" endtime="20161110 17:37:47.994"></status>
</kw>
<status starttime="20161110 17:37:47.990" status="PASS" endtime="20161110 17:37:47.995"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:47.996">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:37:47.996" status="PASS" endtime="20161110 17:37:47.997"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:47.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:37:47.997" status="PASS" endtime="20161110 17:37:47.997"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:47.998">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:37:47.998" status="PASS" endtime="20161110 17:37:47.998"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:47.999">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:37:47.998" status="PASS" endtime="20161110 17:37:47.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:52.548">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:37:52.549">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:47.999" status="PASS" endtime="20161110 17:37:52.549"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:52.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:37:52.549" status="PASS" endtime="20161110 17:37:52.550"></status>
</kw>
<status starttime="20161110 17:37:47.995" status="PASS" endtime="20161110 17:37:52.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:53.665">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:37:53.665">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:52.551" status="PASS" endtime="20161110 17:37:53.665"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:53.667">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:37:53.666" status="PASS" endtime="20161110 17:37:53.667"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:53.668">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:37:53.668" status="PASS" endtime="20161110 17:37:53.669"></status>
</kw>
<status starttime="20161110 17:37:53.667" status="PASS" endtime="20161110 17:37:53.669"></status>
</kw>
<status starttime="20161110 17:37:53.665" status="PASS" endtime="20161110 17:37:53.669"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:53.669">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:47.986" status="PASS" endtime="20161110 17:37:53.669"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:53.670">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:37:47.984" status="PASS" endtime="20161110 17:37:53.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:37:53.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:37:53.670" status="PASS" endtime="20161110 17:37:53.671"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:37:53.672">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:37:53.672">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:37:53.672">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:37:53.671" status="PASS" endtime="20161110 17:37:53.672"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:37:53.672">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:37:47.982" status="PASS" endtime="20161110 17:37:53.672"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:37:53.673">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:37:53.673" status="FAIL" endtime="20161110 17:37:53.673"></status>
</kw>
<status starttime="20161110 17:37:47.981" status="FAIL" endtime="20161110 17:37:53.674"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:03.677">@{arglist} = [ ]</msg>
<status starttime="20161110 17:38:03.676" status="PASS" endtime="20161110 17:38:03.677"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:03.678">${args} = {u'data': []}</msg>
<status starttime="20161110 17:38:03.677" status="PASS" endtime="20161110 17:38:03.678"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:03.679">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:38:03.679" status="PASS" endtime="20161110 17:38:03.679"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:03.681">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:38:03.681" status="PASS" endtime="20161110 17:38:03.681"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:03.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:03.681" status="PASS" endtime="20161110 17:38:03.682"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:38:03.682" status="PASS" endtime="20161110 17:38:03.683"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:03.685">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:03.684" status="PASS" endtime="20161110 17:38:03.685"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:03.687">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:03.686" status="PASS" endtime="20161110 17:38:03.687"></status>
</kw>
<status starttime="20161110 17:38:03.686" status="PASS" endtime="20161110 17:38:03.687"></status>
</kw>
<status starttime="20161110 17:38:03.683" status="PASS" endtime="20161110 17:38:03.687"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:03.688">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:38:03.688" status="PASS" endtime="20161110 17:38:03.689"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:03.689">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:03.689" status="PASS" endtime="20161110 17:38:03.689"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:03.690">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:38:03.689" status="PASS" endtime="20161110 17:38:03.690"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:03.691">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:38:03.691" status="PASS" endtime="20161110 17:38:03.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:04.025">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:38:04.025">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:03.691" status="PASS" endtime="20161110 17:38:04.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:04.026">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:38:04.025" status="PASS" endtime="20161110 17:38:04.026"></status>
</kw>
<status starttime="20161110 17:38:03.687" status="PASS" endtime="20161110 17:38:04.026"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:04.308">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:38:04.308">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:04.026" status="PASS" endtime="20161110 17:38:04.308"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:04.309">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:38:04.308" status="PASS" endtime="20161110 17:38:04.309"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:04.310">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:38:04.309" status="PASS" endtime="20161110 17:38:04.313"></status>
</kw>
<status starttime="20161110 17:38:04.309" status="PASS" endtime="20161110 17:38:04.313"></status>
</kw>
<status starttime="20161110 17:38:04.308" status="PASS" endtime="20161110 17:38:04.313"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:04.313">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:03.680" status="PASS" endtime="20161110 17:38:04.313"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:04.314">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:03.678" status="PASS" endtime="20161110 17:38:04.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:04.315">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:38:04.314" status="PASS" endtime="20161110 17:38:04.315"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:04.315">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:38:04.315">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:38:04.315">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:38:04.315" status="PASS" endtime="20161110 17:38:04.315"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:04.316">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:38:03.675" status="PASS" endtime="20161110 17:38:04.316"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:38:04.316">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:38:04.316" status="FAIL" endtime="20161110 17:38:04.316"></status>
</kw>
<status starttime="20161110 17:38:03.674" status="FAIL" endtime="20161110 17:38:04.316"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.319">@{arglist} = [ ]</msg>
<status starttime="20161110 17:38:14.318" status="PASS" endtime="20161110 17:38:14.319"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.320">${args} = {u'data': []}</msg>
<status starttime="20161110 17:38:14.319" status="PASS" endtime="20161110 17:38:14.320"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.321">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:38:14.321" status="PASS" endtime="20161110 17:38:14.322"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.323">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:38:14.323" status="PASS" endtime="20161110 17:38:14.323"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.324">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:14.324" status="PASS" endtime="20161110 17:38:14.324"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:38:14.325" status="PASS" endtime="20161110 17:38:14.325"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.327">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:14.326" status="PASS" endtime="20161110 17:38:14.327"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:14.328">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:14.328" status="PASS" endtime="20161110 17:38:14.328"></status>
</kw>
<status starttime="20161110 17:38:14.328" status="PASS" endtime="20161110 17:38:14.329"></status>
</kw>
<status starttime="20161110 17:38:14.325" status="PASS" endtime="20161110 17:38:14.329"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:14.330">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:38:14.329" status="PASS" endtime="20161110 17:38:14.330"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.331">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:14.330" status="PASS" endtime="20161110 17:38:14.331"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.331">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:38:14.331" status="PASS" endtime="20161110 17:38:14.331"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.332">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:38:14.331" status="PASS" endtime="20161110 17:38:14.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.671">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:38:14.671">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:14.332" status="PASS" endtime="20161110 17:38:14.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:14.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:38:14.672" status="PASS" endtime="20161110 17:38:14.672"></status>
</kw>
<status starttime="20161110 17:38:14.329" status="PASS" endtime="20161110 17:38:14.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.958">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:38:14.959">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:14.673" status="PASS" endtime="20161110 17:38:14.959"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.961">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:38:14.960" status="PASS" endtime="20161110 17:38:14.961"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:14.962">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:38:14.962" status="PASS" endtime="20161110 17:38:14.962"></status>
</kw>
<status starttime="20161110 17:38:14.961" status="PASS" endtime="20161110 17:38:14.962"></status>
</kw>
<status starttime="20161110 17:38:14.959" status="PASS" endtime="20161110 17:38:14.963"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:14.963">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:14.322" status="PASS" endtime="20161110 17:38:14.963"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:14.963">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:14.320" status="PASS" endtime="20161110 17:38:14.963"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:14.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:38:14.964" status="PASS" endtime="20161110 17:38:14.964"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:14.965">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:38:14.965">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:38:14.965">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:38:14.965" status="PASS" endtime="20161110 17:38:14.965"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:14.966">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:38:14.318" status="PASS" endtime="20161110 17:38:14.966"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:38:14.967">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:38:14.966" status="FAIL" endtime="20161110 17:38:14.967"></status>
</kw>
<status starttime="20161110 17:38:14.317" status="FAIL" endtime="20161110 17:38:14.967"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:24.970">@{arglist} = [ ]</msg>
<status starttime="20161110 17:38:24.970" status="PASS" endtime="20161110 17:38:24.970"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:24.971">${args} = {u'data': []}</msg>
<status starttime="20161110 17:38:24.970" status="PASS" endtime="20161110 17:38:24.971"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:24.973">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:38:24.972" status="PASS" endtime="20161110 17:38:24.973"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:24.975">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:38:24.974" status="PASS" endtime="20161110 17:38:24.975"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:24.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:24.975" status="PASS" endtime="20161110 17:38:24.976"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:38:24.976" status="PASS" endtime="20161110 17:38:24.976"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:24.979">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:24.978" status="PASS" endtime="20161110 17:38:24.979"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:24.979">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:24.979" status="PASS" endtime="20161110 17:38:24.980"></status>
</kw>
<status starttime="20161110 17:38:24.979" status="PASS" endtime="20161110 17:38:24.980"></status>
</kw>
<status starttime="20161110 17:38:24.977" status="PASS" endtime="20161110 17:38:24.980"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:24.981">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:38:24.981" status="PASS" endtime="20161110 17:38:24.981"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:24.982">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:24.981" status="PASS" endtime="20161110 17:38:24.982"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:24.982">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:38:24.982" status="PASS" endtime="20161110 17:38:24.982"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:24.983">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:38:24.983" status="PASS" endtime="20161110 17:38:24.983"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:25.321">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:38:25.321">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:24.983" status="PASS" endtime="20161110 17:38:25.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:25.322">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:38:25.322" status="PASS" endtime="20161110 17:38:25.322"></status>
</kw>
<status starttime="20161110 17:38:24.980" status="PASS" endtime="20161110 17:38:25.323"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:25.613">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:38:25.613">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:25.323" status="PASS" endtime="20161110 17:38:25.613"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:25.615">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:38:25.614" status="PASS" endtime="20161110 17:38:25.615"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:25.616">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:38:25.616" status="PASS" endtime="20161110 17:38:25.616"></status>
</kw>
<status starttime="20161110 17:38:25.615" status="PASS" endtime="20161110 17:38:25.616"></status>
</kw>
<status starttime="20161110 17:38:25.614" status="PASS" endtime="20161110 17:38:25.616"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:25.616">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:24.973" status="PASS" endtime="20161110 17:38:25.616"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:25.617">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:24.971" status="PASS" endtime="20161110 17:38:25.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:25.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:38:25.617" status="PASS" endtime="20161110 17:38:25.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:25.618">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:38:25.618">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:38:25.618">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:38:25.617" status="PASS" endtime="20161110 17:38:25.618"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:25.618">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:38:24.969" status="PASS" endtime="20161110 17:38:25.618"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:38:25.619">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:38:25.618" status="FAIL" endtime="20161110 17:38:25.619"></status>
</kw>
<status starttime="20161110 17:38:24.968" status="FAIL" endtime="20161110 17:38:25.619"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:35.624">@{arglist} = [ ]</msg>
<status starttime="20161110 17:38:35.623" status="PASS" endtime="20161110 17:38:35.624"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:35.625">${args} = {u'data': []}</msg>
<status starttime="20161110 17:38:35.624" status="PASS" endtime="20161110 17:38:35.625"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:35.627">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:38:35.626" status="PASS" endtime="20161110 17:38:35.627"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:35.629">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:38:35.628" status="PASS" endtime="20161110 17:38:35.629"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:35.629">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:35.629" status="PASS" endtime="20161110 17:38:35.629"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:38:35.629" status="PASS" endtime="20161110 17:38:35.630"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:35.631">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:35.630" status="PASS" endtime="20161110 17:38:35.631"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:35.632">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:35.632" status="PASS" endtime="20161110 17:38:35.632"></status>
</kw>
<status starttime="20161110 17:38:35.631" status="PASS" endtime="20161110 17:38:35.632"></status>
</kw>
<status starttime="20161110 17:38:35.630" status="PASS" endtime="20161110 17:38:35.632"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:35.633">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:38:35.633" status="PASS" endtime="20161110 17:38:35.634"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:35.635">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:35.634" status="PASS" endtime="20161110 17:38:35.635"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:35.635">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:38:35.635" status="PASS" endtime="20161110 17:38:35.635"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:35.636">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:38:35.636" status="PASS" endtime="20161110 17:38:35.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:35.964">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:38:35.964">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:35.636" status="PASS" endtime="20161110 17:38:35.965"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:35.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:38:35.965" status="PASS" endtime="20161110 17:38:35.965"></status>
</kw>
<status starttime="20161110 17:38:35.632" status="PASS" endtime="20161110 17:38:35.965"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:36.259">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:38:36.259">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:35.966" status="PASS" endtime="20161110 17:38:36.259"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:36.260">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:38:36.260" status="PASS" endtime="20161110 17:38:36.261"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:36.262">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:38:36.261" status="PASS" endtime="20161110 17:38:36.262"></status>
</kw>
<status starttime="20161110 17:38:36.261" status="PASS" endtime="20161110 17:38:36.262"></status>
</kw>
<status starttime="20161110 17:38:36.260" status="PASS" endtime="20161110 17:38:36.262"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:36.262">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:35.627" status="PASS" endtime="20161110 17:38:36.262"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:36.262">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:35.625" status="PASS" endtime="20161110 17:38:36.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:36.263">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:38:36.263" status="PASS" endtime="20161110 17:38:36.263"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:36.263">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:38:36.263">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:38:36.264">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:38:36.263" status="PASS" endtime="20161110 17:38:36.264"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:36.264">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:38:35.623" status="PASS" endtime="20161110 17:38:36.264"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:38:36.264">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:38:36.264" status="FAIL" endtime="20161110 17:38:36.264"></status>
</kw>
<status starttime="20161110 17:38:35.620" status="FAIL" endtime="20161110 17:38:36.265"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.267">@{arglist} = [ ]</msg>
<status starttime="20161110 17:38:46.267" status="PASS" endtime="20161110 17:38:46.267"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.269">${args} = {u'data': []}</msg>
<status starttime="20161110 17:38:46.268" status="PASS" endtime="20161110 17:38:46.269"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.270">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:38:46.270" status="PASS" endtime="20161110 17:38:46.270"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.272">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:38:46.272" status="PASS" endtime="20161110 17:38:46.272"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.273">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:46.272" status="PASS" endtime="20161110 17:38:46.273"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:38:46.273" status="PASS" endtime="20161110 17:38:46.274"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.277">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:46.275" status="PASS" endtime="20161110 17:38:46.277"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:46.279">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:46.278" status="PASS" endtime="20161110 17:38:46.279"></status>
</kw>
<status starttime="20161110 17:38:46.278" status="PASS" endtime="20161110 17:38:46.279"></status>
</kw>
<status starttime="20161110 17:38:46.274" status="PASS" endtime="20161110 17:38:46.279"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:46.280">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:38:46.280" status="PASS" endtime="20161110 17:38:46.280"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.281">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:46.280" status="PASS" endtime="20161110 17:38:46.281"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.281">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:38:46.281" status="PASS" endtime="20161110 17:38:46.281"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.282">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:38:46.282" status="PASS" endtime="20161110 17:38:46.282"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.615">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:38:46.615">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:46.282" status="PASS" endtime="20161110 17:38:46.615"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:46.616">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:38:46.616" status="PASS" endtime="20161110 17:38:46.616"></status>
</kw>
<status starttime="20161110 17:38:46.279" status="PASS" endtime="20161110 17:38:46.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.901">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:38:46.901">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:46.617" status="PASS" endtime="20161110 17:38:46.901"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.902">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:38:46.902" status="PASS" endtime="20161110 17:38:46.902"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:46.903">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:38:46.903" status="PASS" endtime="20161110 17:38:46.903"></status>
</kw>
<status starttime="20161110 17:38:46.903" status="PASS" endtime="20161110 17:38:46.903"></status>
</kw>
<status starttime="20161110 17:38:46.901" status="PASS" endtime="20161110 17:38:46.904"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:46.904">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:46.271" status="PASS" endtime="20161110 17:38:46.904"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:46.904">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:46.269" status="PASS" endtime="20161110 17:38:46.904"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:46.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:38:46.904" status="PASS" endtime="20161110 17:38:46.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:46.905">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:38:46.905">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:38:46.905">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:38:46.905" status="PASS" endtime="20161110 17:38:46.905"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:38:46.905">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:38:46.266" status="PASS" endtime="20161110 17:38:46.905"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:38:46.906">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:38:46.906" status="FAIL" endtime="20161110 17:38:46.906"></status>
</kw>
<status starttime="20161110 17:38:46.265" status="FAIL" endtime="20161110 17:38:46.906"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:56.908">@{arglist} = [ ]</msg>
<status starttime="20161110 17:38:56.908" status="PASS" endtime="20161110 17:38:56.908"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:56.909">${args} = {u'data': []}</msg>
<status starttime="20161110 17:38:56.909" status="PASS" endtime="20161110 17:38:56.909"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:56.910">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:38:56.910" status="PASS" endtime="20161110 17:38:56.910"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:56.911">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:38:56.911" status="PASS" endtime="20161110 17:38:56.911"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:56.912">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:56.912" status="PASS" endtime="20161110 17:38:56.912"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:38:56.912" status="PASS" endtime="20161110 17:38:56.912"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:56.914">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:56.913" status="PASS" endtime="20161110 17:38:56.914"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:56.915">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:38:56.915" status="PASS" endtime="20161110 17:38:56.915"></status>
</kw>
<status starttime="20161110 17:38:56.914" status="PASS" endtime="20161110 17:38:56.915"></status>
</kw>
<status starttime="20161110 17:38:56.913" status="PASS" endtime="20161110 17:38:56.915"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:38:56.916">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:38:56.916" status="PASS" endtime="20161110 17:38:56.916"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:56.917">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:38:56.916" status="PASS" endtime="20161110 17:38:56.917"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:56.917">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:38:56.917" status="PASS" endtime="20161110 17:38:56.917"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:38:56.918">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:38:56.918" status="PASS" endtime="20161110 17:38:56.918"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:04.576">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:04.576">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:56.918" status="PASS" endtime="20161110 17:39:04.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:04.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:04.576" status="PASS" endtime="20161110 17:39:04.577"></status>
</kw>
<status starttime="20161110 17:38:56.915" status="PASS" endtime="20161110 17:39:04.578"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:05.192">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:05.192">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:04.578" status="PASS" endtime="20161110 17:39:05.192"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:05.193">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:05.192" status="PASS" endtime="20161110 17:39:05.193"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:05.194">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:05.193" status="PASS" endtime="20161110 17:39:05.194"></status>
</kw>
<status starttime="20161110 17:39:05.193" status="PASS" endtime="20161110 17:39:05.194"></status>
</kw>
<status starttime="20161110 17:39:05.192" status="PASS" endtime="20161110 17:39:05.194"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:05.194">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:56.910" status="PASS" endtime="20161110 17:39:05.194"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:05.194">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:38:56.909" status="PASS" endtime="20161110 17:39:05.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:05.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:05.195" status="PASS" endtime="20161110 17:39:05.195"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:05.195">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:39:05.195">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:39:05.196">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:39:05.195" status="PASS" endtime="20161110 17:39:05.196"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:05.196">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:38:56.907" status="PASS" endtime="20161110 17:39:05.196"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:39:05.196">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:39:05.196" status="FAIL" endtime="20161110 17:39:05.196"></status>
</kw>
<status starttime="20161110 17:38:56.907" status="FAIL" endtime="20161110 17:39:05.197"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.199">@{arglist} = [ ]</msg>
<status starttime="20161110 17:39:15.199" status="PASS" endtime="20161110 17:39:15.199"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.200">${args} = {u'data': []}</msg>
<status starttime="20161110 17:39:15.199" status="PASS" endtime="20161110 17:39:15.200"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.202">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:39:15.201" status="PASS" endtime="20161110 17:39:15.202"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.204">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:39:15.203" status="PASS" endtime="20161110 17:39:15.204"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.205">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:39:15.204" status="PASS" endtime="20161110 17:39:15.205"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:39:15.205" status="PASS" endtime="20161110 17:39:15.205"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.208">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:39:15.207" status="PASS" endtime="20161110 17:39:15.208"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:15.209">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:39:15.209" status="PASS" endtime="20161110 17:39:15.210"></status>
</kw>
<status starttime="20161110 17:39:15.208" status="PASS" endtime="20161110 17:39:15.210"></status>
</kw>
<status starttime="20161110 17:39:15.206" status="PASS" endtime="20161110 17:39:15.210"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:15.211">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:39:15.210" status="PASS" endtime="20161110 17:39:15.211"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.212">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:39:15.211" status="PASS" endtime="20161110 17:39:15.212"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.213">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:39:15.212" status="PASS" endtime="20161110 17:39:15.213"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.214">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:39:15.213" status="PASS" endtime="20161110 17:39:15.214"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.545">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:15.545">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:15.214" status="PASS" endtime="20161110 17:39:15.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:15.546">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:15.546" status="PASS" endtime="20161110 17:39:15.546"></status>
</kw>
<status starttime="20161110 17:39:15.210" status="PASS" endtime="20161110 17:39:15.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.833">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:15.833">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:15.546" status="PASS" endtime="20161110 17:39:15.833"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.835">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:15.834" status="PASS" endtime="20161110 17:39:15.835"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:15.837">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:15.836" status="PASS" endtime="20161110 17:39:15.837"></status>
</kw>
<status starttime="20161110 17:39:15.835" status="PASS" endtime="20161110 17:39:15.837"></status>
</kw>
<status starttime="20161110 17:39:15.834" status="PASS" endtime="20161110 17:39:15.837"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:15.837">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:15.202" status="PASS" endtime="20161110 17:39:15.837"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:15.838">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:15.200" status="PASS" endtime="20161110 17:39:15.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:15.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:15.838" status="PASS" endtime="20161110 17:39:15.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:15.840">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:39:15.840">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:39:15.840">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:39:15.839" status="PASS" endtime="20161110 17:39:15.840"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:15.841">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:39:15.198" status="PASS" endtime="20161110 17:39:15.841"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:39:15.842">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:39:15.841" status="FAIL" endtime="20161110 17:39:15.842"></status>
</kw>
<status starttime="20161110 17:39:15.197" status="FAIL" endtime="20161110 17:39:15.842"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:25.845">@{arglist} = [ ]</msg>
<status starttime="20161110 17:39:25.844" status="PASS" endtime="20161110 17:39:25.845"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:25.846">${args} = {u'data': []}</msg>
<status starttime="20161110 17:39:25.845" status="PASS" endtime="20161110 17:39:25.846"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:25.848">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:39:25.847" status="PASS" endtime="20161110 17:39:25.848"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:25.850">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:39:25.849" status="PASS" endtime="20161110 17:39:25.850"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:25.850">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:39:25.850" status="PASS" endtime="20161110 17:39:25.850"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:39:25.851" status="PASS" endtime="20161110 17:39:25.851"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:25.853">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:39:25.852" status="PASS" endtime="20161110 17:39:25.853"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:25.854">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:39:25.853" status="PASS" endtime="20161110 17:39:25.854"></status>
</kw>
<status starttime="20161110 17:39:25.853" status="PASS" endtime="20161110 17:39:25.854"></status>
</kw>
<status starttime="20161110 17:39:25.851" status="PASS" endtime="20161110 17:39:25.854"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:25.855">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:39:25.855" status="PASS" endtime="20161110 17:39:25.855"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:25.856">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:39:25.856" status="PASS" endtime="20161110 17:39:25.856"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:25.857">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:39:25.856" status="PASS" endtime="20161110 17:39:25.857"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:25.857">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:39:25.857" status="PASS" endtime="20161110 17:39:25.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:26.190">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:26.190">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:25.858" status="PASS" endtime="20161110 17:39:26.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:26.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:26.190" status="PASS" endtime="20161110 17:39:26.191"></status>
</kw>
<status starttime="20161110 17:39:25.854" status="PASS" endtime="20161110 17:39:26.191"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:26.474">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:26.474">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:26.191" status="PASS" endtime="20161110 17:39:26.475"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:26.476">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:26.475" status="PASS" endtime="20161110 17:39:26.476"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:26.476">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:26.476" status="PASS" endtime="20161110 17:39:26.477"></status>
</kw>
<status starttime="20161110 17:39:26.476" status="PASS" endtime="20161110 17:39:26.477"></status>
</kw>
<status starttime="20161110 17:39:26.475" status="PASS" endtime="20161110 17:39:26.477"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:26.477">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:25.848" status="PASS" endtime="20161110 17:39:26.477"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:26.477">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:25.846" status="PASS" endtime="20161110 17:39:26.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:26.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:26.477" status="PASS" endtime="20161110 17:39:26.478"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:26.478">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:39:26.478">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:39:26.478">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:39:26.478" status="PASS" endtime="20161110 17:39:26.478"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:26.479">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:39:25.844" status="PASS" endtime="20161110 17:39:26.479"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:39:26.479">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:39:26.479" status="FAIL" endtime="20161110 17:39:26.479"></status>
</kw>
<status starttime="20161110 17:39:25.843" status="FAIL" endtime="20161110 17:39:26.480"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:36.482">@{arglist} = [ ]</msg>
<status starttime="20161110 17:39:36.482" status="PASS" endtime="20161110 17:39:36.482"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:36.483">${args} = {u'data': []}</msg>
<status starttime="20161110 17:39:36.482" status="PASS" endtime="20161110 17:39:36.483"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:36.485">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:39:36.484" status="PASS" endtime="20161110 17:39:36.485"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:36.487">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:39:36.486" status="PASS" endtime="20161110 17:39:36.487"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:36.488">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:39:36.487" status="PASS" endtime="20161110 17:39:36.488"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:39:36.488" status="PASS" endtime="20161110 17:39:36.489"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:36.491">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:39:36.490" status="PASS" endtime="20161110 17:39:36.491"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:36.493">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:39:36.492" status="PASS" endtime="20161110 17:39:36.493"></status>
</kw>
<status starttime="20161110 17:39:36.492" status="PASS" endtime="20161110 17:39:36.493"></status>
</kw>
<status starttime="20161110 17:39:36.489" status="PASS" endtime="20161110 17:39:36.493"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:36.495">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:39:36.494" status="PASS" endtime="20161110 17:39:36.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:36.497">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:39:36.497" status="PASS" endtime="20161110 17:39:36.498"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:36.499">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:39:36.498" status="PASS" endtime="20161110 17:39:36.499"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:36.500">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:39:36.500" status="PASS" endtime="20161110 17:39:36.500"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:36.837">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:36.837">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:36.500" status="PASS" endtime="20161110 17:39:36.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:36.838">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:36.838" status="PASS" endtime="20161110 17:39:36.838"></status>
</kw>
<status starttime="20161110 17:39:36.494" status="PASS" endtime="20161110 17:39:36.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:37.120">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:37.120">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:36.839" status="PASS" endtime="20161110 17:39:37.120"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:37.122">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:37.121" status="PASS" endtime="20161110 17:39:37.122"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:37.124">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:37.124" status="PASS" endtime="20161110 17:39:37.124"></status>
</kw>
<status starttime="20161110 17:39:37.123" status="PASS" endtime="20161110 17:39:37.124"></status>
</kw>
<status starttime="20161110 17:39:37.121" status="PASS" endtime="20161110 17:39:37.125"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:37.125">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:36.485" status="PASS" endtime="20161110 17:39:37.125"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:37.125">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:36.483" status="PASS" endtime="20161110 17:39:37.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:37.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:37.126" status="PASS" endtime="20161110 17:39:37.126"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:37.127">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:39:37.127">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:39:37.127">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:39:37.127" status="PASS" endtime="20161110 17:39:37.127"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:37.128">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:39:36.481" status="PASS" endtime="20161110 17:39:37.128"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:39:37.129">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:39:37.128" status="FAIL" endtime="20161110 17:39:37.129"></status>
</kw>
<status starttime="20161110 17:39:36.480" status="FAIL" endtime="20161110 17:39:37.129"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.132">@{arglist} = [ ]</msg>
<status starttime="20161110 17:39:47.132" status="PASS" endtime="20161110 17:39:47.132"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.133">${args} = {u'data': []}</msg>
<status starttime="20161110 17:39:47.132" status="PASS" endtime="20161110 17:39:47.133"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.135">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:39:47.134" status="PASS" endtime="20161110 17:39:47.135"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.137">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:39:47.136" status="PASS" endtime="20161110 17:39:47.137"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:39:47.137" status="PASS" endtime="20161110 17:39:47.140"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:39:47.140" status="PASS" endtime="20161110 17:39:47.141"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.142">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:39:47.141" status="PASS" endtime="20161110 17:39:47.142"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:47.143">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:39:47.142" status="PASS" endtime="20161110 17:39:47.143"></status>
</kw>
<status starttime="20161110 17:39:47.142" status="PASS" endtime="20161110 17:39:47.143"></status>
</kw>
<status starttime="20161110 17:39:47.141" status="PASS" endtime="20161110 17:39:47.143"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:47.144">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:39:47.144" status="PASS" endtime="20161110 17:39:47.144"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.145">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:39:47.144" status="PASS" endtime="20161110 17:39:47.145"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.145">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:39:47.145" status="PASS" endtime="20161110 17:39:47.145"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.146">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:39:47.145" status="PASS" endtime="20161110 17:39:47.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.480">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:47.480">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:47.146" status="PASS" endtime="20161110 17:39:47.480"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:47.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:47.480" status="PASS" endtime="20161110 17:39:47.481"></status>
</kw>
<status starttime="20161110 17:39:47.143" status="PASS" endtime="20161110 17:39:47.481"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.764">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:47.764">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:47.481" status="PASS" endtime="20161110 17:39:47.764"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.766">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:47.765" status="PASS" endtime="20161110 17:39:47.766"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:47.768">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:47.767" status="PASS" endtime="20161110 17:39:47.768"></status>
</kw>
<status starttime="20161110 17:39:47.766" status="PASS" endtime="20161110 17:39:47.768"></status>
</kw>
<status starttime="20161110 17:39:47.764" status="PASS" endtime="20161110 17:39:47.768"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:47.768">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:47.135" status="PASS" endtime="20161110 17:39:47.768"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:47.769">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:47.133" status="PASS" endtime="20161110 17:39:47.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:47.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:47.769" status="PASS" endtime="20161110 17:39:47.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:47.771">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:39:47.771">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:39:47.771">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:39:47.770" status="PASS" endtime="20161110 17:39:47.771"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:47.771">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:39:47.131" status="PASS" endtime="20161110 17:39:47.771"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:39:47.772">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:39:47.772" status="FAIL" endtime="20161110 17:39:47.772"></status>
</kw>
<status starttime="20161110 17:39:47.130" status="FAIL" endtime="20161110 17:39:47.773"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:57.776">@{arglist} = [ ]</msg>
<status starttime="20161110 17:39:57.776" status="PASS" endtime="20161110 17:39:57.777"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:57.778">${args} = {u'data': []}</msg>
<status starttime="20161110 17:39:57.777" status="PASS" endtime="20161110 17:39:57.778"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:57.779">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:39:57.779" status="PASS" endtime="20161110 17:39:57.780"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:57.782">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:39:57.781" status="PASS" endtime="20161110 17:39:57.782"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:57.783">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:39:57.782" status="PASS" endtime="20161110 17:39:57.783"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:39:57.783" status="PASS" endtime="20161110 17:39:57.783"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:57.786">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:39:57.785" status="PASS" endtime="20161110 17:39:57.786"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:57.787">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:39:57.787" status="PASS" endtime="20161110 17:39:57.788"></status>
</kw>
<status starttime="20161110 17:39:57.786" status="PASS" endtime="20161110 17:39:57.788"></status>
</kw>
<status starttime="20161110 17:39:57.784" status="PASS" endtime="20161110 17:39:57.788"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:57.790">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:39:57.789" status="PASS" endtime="20161110 17:39:57.790"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:57.791">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:39:57.790" status="PASS" endtime="20161110 17:39:57.791"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:57.791">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:39:57.791" status="PASS" endtime="20161110 17:39:57.791"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:57.792">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:39:57.791" status="PASS" endtime="20161110 17:39:57.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:58.124">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:58.124">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:57.792" status="PASS" endtime="20161110 17:39:58.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:58.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:58.124" status="PASS" endtime="20161110 17:39:58.125"></status>
</kw>
<status starttime="20161110 17:39:57.788" status="PASS" endtime="20161110 17:39:58.125"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:58.532">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:39:58.533">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:58.125" status="PASS" endtime="20161110 17:39:58.533"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:58.534">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:58.533" status="PASS" endtime="20161110 17:39:58.534"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:58.535">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:39:58.534" status="PASS" endtime="20161110 17:39:58.535"></status>
</kw>
<status starttime="20161110 17:39:58.534" status="PASS" endtime="20161110 17:39:58.535"></status>
</kw>
<status starttime="20161110 17:39:58.533" status="PASS" endtime="20161110 17:39:58.535"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:58.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:57.780" status="PASS" endtime="20161110 17:39:58.536"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:58.536">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:39:57.778" status="PASS" endtime="20161110 17:39:58.536"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:39:58.536">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:39:58.536" status="PASS" endtime="20161110 17:39:58.537"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:39:58.537">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:39:58.537">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:39:58.537">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:39:58.537" status="PASS" endtime="20161110 17:39:58.537"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:39:58.538">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:39:57.775" status="PASS" endtime="20161110 17:39:58.538"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:39:58.538">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:39:58.538" status="FAIL" endtime="20161110 17:39:58.539"></status>
</kw>
<status starttime="20161110 17:39:57.773" status="FAIL" endtime="20161110 17:39:58.539"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:08.542">@{arglist} = [ ]</msg>
<status starttime="20161110 17:40:08.541" status="PASS" endtime="20161110 17:40:08.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:08.543">${args} = {u'data': []}</msg>
<status starttime="20161110 17:40:08.542" status="PASS" endtime="20161110 17:40:08.543"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:08.544">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:40:08.544" status="PASS" endtime="20161110 17:40:08.545"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:08.546">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:40:08.546" status="PASS" endtime="20161110 17:40:08.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:08.547">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:40:08.547" status="PASS" endtime="20161110 17:40:08.547"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:40:08.548" status="PASS" endtime="20161110 17:40:08.548"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:08.551">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:40:08.549" status="PASS" endtime="20161110 17:40:08.551"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:08.552">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:40:08.551" status="PASS" endtime="20161110 17:40:08.552"></status>
</kw>
<status starttime="20161110 17:40:08.551" status="PASS" endtime="20161110 17:40:08.552"></status>
</kw>
<status starttime="20161110 17:40:08.548" status="PASS" endtime="20161110 17:40:08.552"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:08.553">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:40:08.553" status="PASS" endtime="20161110 17:40:08.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:08.554">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:40:08.553" status="PASS" endtime="20161110 17:40:08.554"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:08.554">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:40:08.554" status="PASS" endtime="20161110 17:40:08.554"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:08.555">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:40:08.554" status="PASS" endtime="20161110 17:40:08.555"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:13.948">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:40:13.948">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:08.555" status="PASS" endtime="20161110 17:40:13.948"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:13.949">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:40:13.949" status="PASS" endtime="20161110 17:40:13.950"></status>
</kw>
<status starttime="20161110 17:40:08.552" status="PASS" endtime="20161110 17:40:13.950"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:15.008">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:40:15.008">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:13.950" status="PASS" endtime="20161110 17:40:15.008"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:15.011">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:40:15.010" status="PASS" endtime="20161110 17:40:15.011"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:15.012">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:40:15.012" status="PASS" endtime="20161110 17:40:15.012"></status>
</kw>
<status starttime="20161110 17:40:15.011" status="PASS" endtime="20161110 17:40:15.013"></status>
</kw>
<status starttime="20161110 17:40:15.009" status="PASS" endtime="20161110 17:40:15.013"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:15.013">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:08.545" status="PASS" endtime="20161110 17:40:15.013"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:15.014">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:08.543" status="PASS" endtime="20161110 17:40:15.014"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:15.014">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:40:15.014" status="PASS" endtime="20161110 17:40:15.015"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:15.015">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:40:15.015">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:40:15.016">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:40:15.015" status="PASS" endtime="20161110 17:40:15.016"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:15.016">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:40:08.541" status="PASS" endtime="20161110 17:40:15.016"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:40:15.017">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:40:15.017" status="FAIL" endtime="20161110 17:40:15.017"></status>
</kw>
<status starttime="20161110 17:40:08.540" status="FAIL" endtime="20161110 17:40:15.018"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.020">@{arglist} = [ ]</msg>
<status starttime="20161110 17:40:25.020" status="PASS" endtime="20161110 17:40:25.020"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.022">${args} = {u'data': []}</msg>
<status starttime="20161110 17:40:25.021" status="PASS" endtime="20161110 17:40:25.022"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.024">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:40:25.023" status="PASS" endtime="20161110 17:40:25.024"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.026">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:40:25.025" status="PASS" endtime="20161110 17:40:25.026"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:40:25.026" status="PASS" endtime="20161110 17:40:25.026"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:40:25.027" status="PASS" endtime="20161110 17:40:25.027"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.030">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:40:25.028" status="PASS" endtime="20161110 17:40:25.030"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:25.031">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:40:25.031" status="PASS" endtime="20161110 17:40:25.031"></status>
</kw>
<status starttime="20161110 17:40:25.030" status="PASS" endtime="20161110 17:40:25.031"></status>
</kw>
<status starttime="20161110 17:40:25.028" status="PASS" endtime="20161110 17:40:25.031"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:25.032">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:40:25.032" status="PASS" endtime="20161110 17:40:25.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:40:25.033" status="PASS" endtime="20161110 17:40:25.033"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.034">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:40:25.033" status="PASS" endtime="20161110 17:40:25.034"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.034">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:40:25.034" status="PASS" endtime="20161110 17:40:25.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.365">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:40:25.365">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:25.035" status="PASS" endtime="20161110 17:40:25.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:25.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:40:25.366" status="PASS" endtime="20161110 17:40:25.366"></status>
</kw>
<status starttime="20161110 17:40:25.031" status="PASS" endtime="20161110 17:40:25.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.654">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:40:25.654">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:25.367" status="PASS" endtime="20161110 17:40:25.654"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.656">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:40:25.655" status="PASS" endtime="20161110 17:40:25.656"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:25.657">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:40:25.657" status="PASS" endtime="20161110 17:40:25.657"></status>
</kw>
<status starttime="20161110 17:40:25.656" status="PASS" endtime="20161110 17:40:25.657"></status>
</kw>
<status starttime="20161110 17:40:25.654" status="PASS" endtime="20161110 17:40:25.657"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:25.658">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:25.024" status="PASS" endtime="20161110 17:40:25.658"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:25.658">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:25.022" status="PASS" endtime="20161110 17:40:25.658"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:25.659">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:40:25.658" status="PASS" endtime="20161110 17:40:25.659"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:25.660">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:40:25.660">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:40:25.660">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:40:25.659" status="PASS" endtime="20161110 17:40:25.660"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:25.660">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:40:25.019" status="PASS" endtime="20161110 17:40:25.660"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:40:25.661">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:40:25.661" status="FAIL" endtime="20161110 17:40:25.661"></status>
</kw>
<status starttime="20161110 17:40:25.018" status="FAIL" endtime="20161110 17:40:25.661"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:35.664">@{arglist} = [ ]</msg>
<status starttime="20161110 17:40:35.663" status="PASS" endtime="20161110 17:40:35.664"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:35.665">${args} = {u'data': []}</msg>
<status starttime="20161110 17:40:35.664" status="PASS" endtime="20161110 17:40:35.665"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:35.667">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:40:35.666" status="PASS" endtime="20161110 17:40:35.667"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:35.669">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:40:35.668" status="PASS" endtime="20161110 17:40:35.669"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:35.670">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:40:35.669" status="PASS" endtime="20161110 17:40:35.670"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:40:35.670" status="PASS" endtime="20161110 17:40:35.671"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:35.673">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:40:35.672" status="PASS" endtime="20161110 17:40:35.673"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:35.674">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:40:35.674" status="PASS" endtime="20161110 17:40:35.675"></status>
</kw>
<status starttime="20161110 17:40:35.673" status="PASS" endtime="20161110 17:40:35.675"></status>
</kw>
<status starttime="20161110 17:40:35.671" status="PASS" endtime="20161110 17:40:35.675"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:35.676">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:40:35.676" status="PASS" endtime="20161110 17:40:35.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:35.678">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:40:35.678" status="PASS" endtime="20161110 17:40:35.678"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:35.679">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:40:35.679" status="PASS" endtime="20161110 17:40:35.679"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:35.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:40:35.680" status="PASS" endtime="20161110 17:40:35.680"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:36.018">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:40:36.018">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:35.681" status="PASS" endtime="20161110 17:40:36.018"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:36.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:40:36.018" status="PASS" endtime="20161110 17:40:36.018"></status>
</kw>
<status starttime="20161110 17:40:35.675" status="PASS" endtime="20161110 17:40:36.018"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:36.300">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:40:36.300">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:36.019" status="PASS" endtime="20161110 17:40:36.300"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:36.301">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:40:36.301" status="PASS" endtime="20161110 17:40:36.301"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:36.302">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:40:36.302" status="PASS" endtime="20161110 17:40:36.302"></status>
</kw>
<status starttime="20161110 17:40:36.301" status="PASS" endtime="20161110 17:40:36.302"></status>
</kw>
<status starttime="20161110 17:40:36.300" status="PASS" endtime="20161110 17:40:36.302"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:36.303">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:35.667" status="PASS" endtime="20161110 17:40:36.303"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:36.303">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:35.665" status="PASS" endtime="20161110 17:40:36.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:36.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:40:36.303" status="PASS" endtime="20161110 17:40:36.304"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:36.305">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:40:36.305">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:40:36.305">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:40:36.304" status="PASS" endtime="20161110 17:40:36.305"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:36.305">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:40:35.663" status="PASS" endtime="20161110 17:40:36.305"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:40:36.306">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:40:36.305" status="FAIL" endtime="20161110 17:40:36.306"></status>
</kw>
<status starttime="20161110 17:40:35.662" status="FAIL" endtime="20161110 17:40:36.306"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.308">@{arglist} = [ ]</msg>
<status starttime="20161110 17:40:46.308" status="PASS" endtime="20161110 17:40:46.308"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.309">${args} = {u'data': []}</msg>
<status starttime="20161110 17:40:46.309" status="PASS" endtime="20161110 17:40:46.309"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.311">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:40:46.310" status="PASS" endtime="20161110 17:40:46.311"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.313">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:40:46.313" status="PASS" endtime="20161110 17:40:46.313"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.315">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:40:46.314" status="PASS" endtime="20161110 17:40:46.315"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:40:46.315" status="PASS" endtime="20161110 17:40:46.316"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.318">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:40:46.317" status="PASS" endtime="20161110 17:40:46.318"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:46.319">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:40:46.319" status="PASS" endtime="20161110 17:40:46.320"></status>
</kw>
<status starttime="20161110 17:40:46.318" status="PASS" endtime="20161110 17:40:46.320"></status>
</kw>
<status starttime="20161110 17:40:46.316" status="PASS" endtime="20161110 17:40:46.320"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:46.321">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:40:46.321" status="PASS" endtime="20161110 17:40:46.322"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.322">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:40:46.322" status="PASS" endtime="20161110 17:40:46.322"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.323">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:40:46.322" status="PASS" endtime="20161110 17:40:46.323"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.323">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:40:46.323" status="PASS" endtime="20161110 17:40:46.323"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.650">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:40:46.650">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:46.323" status="PASS" endtime="20161110 17:40:46.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:46.651">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:40:46.651" status="PASS" endtime="20161110 17:40:46.652"></status>
</kw>
<status starttime="20161110 17:40:46.320" status="PASS" endtime="20161110 17:40:46.652"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.942">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:40:46.942">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:46.652" status="PASS" endtime="20161110 17:40:46.942"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.944">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:40:46.943" status="PASS" endtime="20161110 17:40:46.944"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:46.945">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:40:46.945" status="PASS" endtime="20161110 17:40:46.946"></status>
</kw>
<status starttime="20161110 17:40:46.944" status="PASS" endtime="20161110 17:40:46.946"></status>
</kw>
<status starttime="20161110 17:40:46.942" status="PASS" endtime="20161110 17:40:46.946"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:46.946">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:46.311" status="PASS" endtime="20161110 17:40:46.946"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:46.947">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:46.310" status="PASS" endtime="20161110 17:40:46.947"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:46.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:40:46.947" status="PASS" endtime="20161110 17:40:46.948"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:46.949">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:40:46.949">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:40:46.949">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:40:46.948" status="PASS" endtime="20161110 17:40:46.949"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:46.949">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:40:46.307" status="PASS" endtime="20161110 17:40:46.949"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:40:46.950">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:40:46.950" status="FAIL" endtime="20161110 17:40:46.951"></status>
</kw>
<status starttime="20161110 17:40:46.306" status="FAIL" endtime="20161110 17:40:46.951"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:56.953">@{arglist} = [ ]</msg>
<status starttime="20161110 17:40:56.953" status="PASS" endtime="20161110 17:40:56.953"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:56.953">${args} = {u'data': []}</msg>
<status starttime="20161110 17:40:56.953" status="PASS" endtime="20161110 17:40:56.954"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:56.955">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:40:56.954" status="PASS" endtime="20161110 17:40:56.955"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:56.956">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:40:56.956" status="PASS" endtime="20161110 17:40:56.956"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:56.957">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:40:56.957" status="PASS" endtime="20161110 17:40:56.957"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:40:56.957" status="PASS" endtime="20161110 17:40:56.958"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:56.960">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:40:56.959" status="PASS" endtime="20161110 17:40:56.960"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:56.961">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:40:56.961" status="PASS" endtime="20161110 17:40:56.961"></status>
</kw>
<status starttime="20161110 17:40:56.960" status="PASS" endtime="20161110 17:40:56.961"></status>
</kw>
<status starttime="20161110 17:40:56.958" status="PASS" endtime="20161110 17:40:56.961"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:56.962">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:40:56.962" status="PASS" endtime="20161110 17:40:56.971"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:56.972">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:40:56.971" status="PASS" endtime="20161110 17:40:56.972"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:56.972">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:40:56.972" status="PASS" endtime="20161110 17:40:56.972"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:56.973">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:40:56.972" status="PASS" endtime="20161110 17:40:56.973"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:57.304">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:40:57.304">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:56.973" status="PASS" endtime="20161110 17:40:57.304"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:57.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:40:57.305" status="PASS" endtime="20161110 17:40:57.305"></status>
</kw>
<status starttime="20161110 17:40:56.961" status="PASS" endtime="20161110 17:40:57.305"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:57.583">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:40:57.583">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:57.306" status="PASS" endtime="20161110 17:40:57.583"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:57.584">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:40:57.584" status="PASS" endtime="20161110 17:40:57.584"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:57.585">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:40:57.585" status="PASS" endtime="20161110 17:40:57.585"></status>
</kw>
<status starttime="20161110 17:40:57.584" status="PASS" endtime="20161110 17:40:57.585"></status>
</kw>
<status starttime="20161110 17:40:57.583" status="PASS" endtime="20161110 17:40:57.585"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:57.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:56.955" status="PASS" endtime="20161110 17:40:57.586"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:57.586">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:40:56.954" status="PASS" endtime="20161110 17:40:57.586"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:40:57.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:40:57.586" status="PASS" endtime="20161110 17:40:57.586"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:40:57.587">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:40:57.587">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:40:57.587">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:40:57.586" status="PASS" endtime="20161110 17:40:57.587"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:40:57.587">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:40:56.952" status="PASS" endtime="20161110 17:40:57.587"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:40:57.588">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:40:57.588" status="FAIL" endtime="20161110 17:40:57.588"></status>
</kw>
<status starttime="20161110 17:40:56.952" status="FAIL" endtime="20161110 17:40:57.588"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:07.590">@{arglist} = [ ]</msg>
<status starttime="20161110 17:41:07.590" status="PASS" endtime="20161110 17:41:07.590"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:07.591">${args} = {u'data': []}</msg>
<status starttime="20161110 17:41:07.590" status="PASS" endtime="20161110 17:41:07.591"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:07.592">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:41:07.591" status="PASS" endtime="20161110 17:41:07.592"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:07.593">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:41:07.593" status="PASS" endtime="20161110 17:41:07.593"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:07.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:41:07.593" status="PASS" endtime="20161110 17:41:07.594"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:41:07.594" status="PASS" endtime="20161110 17:41:07.594"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:07.596">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:41:07.595" status="PASS" endtime="20161110 17:41:07.596"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:07.597">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:41:07.597" status="PASS" endtime="20161110 17:41:07.597"></status>
</kw>
<status starttime="20161110 17:41:07.596" status="PASS" endtime="20161110 17:41:07.597"></status>
</kw>
<status starttime="20161110 17:41:07.594" status="PASS" endtime="20161110 17:41:07.597"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:07.598">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:41:07.598" status="PASS" endtime="20161110 17:41:07.598"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:07.599">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:41:07.599" status="PASS" endtime="20161110 17:41:07.599"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:07.599">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:41:07.599" status="PASS" endtime="20161110 17:41:07.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:07.600">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:41:07.600" status="PASS" endtime="20161110 17:41:07.600"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:07.932">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:41:07.932">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:07.600" status="PASS" endtime="20161110 17:41:07.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:07.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:41:07.932" status="PASS" endtime="20161110 17:41:07.933"></status>
</kw>
<status starttime="20161110 17:41:07.597" status="PASS" endtime="20161110 17:41:07.933"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:08.210">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:41:08.211">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:07.934" status="PASS" endtime="20161110 17:41:08.211"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:08.213">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:41:08.212" status="PASS" endtime="20161110 17:41:08.213"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:08.214">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:41:08.214" status="PASS" endtime="20161110 17:41:08.215"></status>
</kw>
<status starttime="20161110 17:41:08.213" status="PASS" endtime="20161110 17:41:08.215"></status>
</kw>
<status starttime="20161110 17:41:08.211" status="PASS" endtime="20161110 17:41:08.215"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:08.215">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:07.592" status="PASS" endtime="20161110 17:41:08.215"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:08.216">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:07.591" status="PASS" endtime="20161110 17:41:08.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:08.217">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:41:08.216" status="PASS" endtime="20161110 17:41:08.217"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:08.218">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:41:08.218">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:41:08.218">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:41:08.217" status="PASS" endtime="20161110 17:41:08.218"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:08.218">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:41:07.589" status="PASS" endtime="20161110 17:41:08.218"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:41:08.219">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:41:08.219" status="FAIL" endtime="20161110 17:41:08.219"></status>
</kw>
<status starttime="20161110 17:41:07.589" status="FAIL" endtime="20161110 17:41:08.220"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:18.223">@{arglist} = [ ]</msg>
<status starttime="20161110 17:41:18.222" status="PASS" endtime="20161110 17:41:18.223"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:18.224">${args} = {u'data': []}</msg>
<status starttime="20161110 17:41:18.223" status="PASS" endtime="20161110 17:41:18.224"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:18.225">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:41:18.225" status="PASS" endtime="20161110 17:41:18.225"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:18.227">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:41:18.227" status="PASS" endtime="20161110 17:41:18.228"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:18.228">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:41:18.228" status="PASS" endtime="20161110 17:41:18.228"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:41:18.229" status="PASS" endtime="20161110 17:41:18.230"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:18.232">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:41:18.231" status="PASS" endtime="20161110 17:41:18.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:18.233">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:41:18.232" status="PASS" endtime="20161110 17:41:18.233"></status>
</kw>
<status starttime="20161110 17:41:18.232" status="PASS" endtime="20161110 17:41:18.233"></status>
</kw>
<status starttime="20161110 17:41:18.230" status="PASS" endtime="20161110 17:41:18.233"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:18.234">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:41:18.233" status="PASS" endtime="20161110 17:41:18.234"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:18.235">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:41:18.234" status="PASS" endtime="20161110 17:41:18.235"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:18.235">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:41:18.235" status="PASS" endtime="20161110 17:41:18.235"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:18.236">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:41:18.235" status="PASS" endtime="20161110 17:41:18.236"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:22.165">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:41:22.165">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:18.236" status="PASS" endtime="20161110 17:41:22.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:22.166">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:41:22.165" status="PASS" endtime="20161110 17:41:22.166"></status>
</kw>
<status starttime="20161110 17:41:18.233" status="PASS" endtime="20161110 17:41:22.166"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:23.369">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:41:23.369">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:22.167" status="PASS" endtime="20161110 17:41:23.369"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:23.371">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:41:23.370" status="PASS" endtime="20161110 17:41:23.371"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:23.372">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:41:23.372" status="PASS" endtime="20161110 17:41:23.372"></status>
</kw>
<status starttime="20161110 17:41:23.371" status="PASS" endtime="20161110 17:41:23.373"></status>
</kw>
<status starttime="20161110 17:41:23.369" status="PASS" endtime="20161110 17:41:23.373"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:23.373">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:18.226" status="PASS" endtime="20161110 17:41:23.373"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:23.373">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:18.224" status="PASS" endtime="20161110 17:41:23.373"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:23.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:41:23.374" status="PASS" endtime="20161110 17:41:23.374"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:23.375">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:41:23.375">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:41:23.375">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:41:23.374" status="PASS" endtime="20161110 17:41:23.375"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:23.375">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:41:18.221" status="PASS" endtime="20161110 17:41:23.376"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:41:23.376">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:41:23.376" status="FAIL" endtime="20161110 17:41:23.376"></status>
</kw>
<status starttime="20161110 17:41:18.220" status="FAIL" endtime="20161110 17:41:23.376"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:33.379">@{arglist} = [ ]</msg>
<status starttime="20161110 17:41:33.378" status="PASS" endtime="20161110 17:41:33.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:33.380">${args} = {u'data': []}</msg>
<status starttime="20161110 17:41:33.379" status="PASS" endtime="20161110 17:41:33.380"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:33.382">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:41:33.381" status="PASS" endtime="20161110 17:41:33.382"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:33.383">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:41:33.383" status="PASS" endtime="20161110 17:41:33.384"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:33.384">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:41:33.384" status="PASS" endtime="20161110 17:41:33.384"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:41:33.385" status="PASS" endtime="20161110 17:41:33.385"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:33.387">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:41:33.386" status="PASS" endtime="20161110 17:41:33.387"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:33.389">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:41:33.388" status="PASS" endtime="20161110 17:41:33.389"></status>
</kw>
<status starttime="20161110 17:41:33.388" status="PASS" endtime="20161110 17:41:33.389"></status>
</kw>
<status starttime="20161110 17:41:33.385" status="PASS" endtime="20161110 17:41:33.389"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:33.391">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:41:33.390" status="PASS" endtime="20161110 17:41:33.392"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:33.392">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:41:33.392" status="PASS" endtime="20161110 17:41:33.392"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:33.393">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:41:33.392" status="PASS" endtime="20161110 17:41:33.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:33.393">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:41:33.393" status="PASS" endtime="20161110 17:41:33.393"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:33.723">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:41:33.723">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:33.393" status="PASS" endtime="20161110 17:41:33.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:33.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:41:33.724" status="PASS" endtime="20161110 17:41:33.725"></status>
</kw>
<status starttime="20161110 17:41:33.389" status="PASS" endtime="20161110 17:41:33.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:34.007">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:41:34.007">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:33.725" status="PASS" endtime="20161110 17:41:34.007"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:34.009">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:41:34.009" status="PASS" endtime="20161110 17:41:34.009"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:34.011">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:41:34.010" status="PASS" endtime="20161110 17:41:34.011"></status>
</kw>
<status starttime="20161110 17:41:34.010" status="PASS" endtime="20161110 17:41:34.011"></status>
</kw>
<status starttime="20161110 17:41:34.008" status="PASS" endtime="20161110 17:41:34.011"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:34.012">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:33.382" status="PASS" endtime="20161110 17:41:34.012"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:34.012">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:33.380" status="PASS" endtime="20161110 17:41:34.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:34.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:41:34.012" status="PASS" endtime="20161110 17:41:34.013"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:34.014">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:41:34.014">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:41:34.014">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:41:34.014" status="PASS" endtime="20161110 17:41:34.014"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:34.015">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:41:33.378" status="PASS" endtime="20161110 17:41:34.015"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:41:34.016">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:41:34.015" status="FAIL" endtime="20161110 17:41:34.016"></status>
</kw>
<status starttime="20161110 17:41:33.377" status="FAIL" endtime="20161110 17:41:34.016"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.019">@{arglist} = [ ]</msg>
<status starttime="20161110 17:41:44.018" status="PASS" endtime="20161110 17:41:44.019"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.020">${args} = {u'data': []}</msg>
<status starttime="20161110 17:41:44.019" status="PASS" endtime="20161110 17:41:44.020"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.022">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:41:44.021" status="PASS" endtime="20161110 17:41:44.022"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.024">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:41:44.024" status="PASS" endtime="20161110 17:41:44.024"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.025">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:41:44.025" status="PASS" endtime="20161110 17:41:44.025"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:41:44.025" status="PASS" endtime="20161110 17:41:44.026"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.028">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:41:44.027" status="PASS" endtime="20161110 17:41:44.029"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:44.030">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:41:44.029" status="PASS" endtime="20161110 17:41:44.030"></status>
</kw>
<status starttime="20161110 17:41:44.029" status="PASS" endtime="20161110 17:41:44.030"></status>
</kw>
<status starttime="20161110 17:41:44.026" status="PASS" endtime="20161110 17:41:44.030"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:44.032">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:41:44.031" status="PASS" endtime="20161110 17:41:44.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:41:44.032" status="PASS" endtime="20161110 17:41:44.033"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.033">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:41:44.033" status="PASS" endtime="20161110 17:41:44.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.034">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:41:44.033" status="PASS" endtime="20161110 17:41:44.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.366">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:41:44.366">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:44.034" status="PASS" endtime="20161110 17:41:44.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:44.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:41:44.366" status="PASS" endtime="20161110 17:41:44.367"></status>
</kw>
<status starttime="20161110 17:41:44.031" status="PASS" endtime="20161110 17:41:44.367"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.652">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:41:44.652">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:44.368" status="PASS" endtime="20161110 17:41:44.652"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.654">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:41:44.653" status="PASS" endtime="20161110 17:41:44.655"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:44.656">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:41:44.655" status="PASS" endtime="20161110 17:41:44.656"></status>
</kw>
<status starttime="20161110 17:41:44.655" status="PASS" endtime="20161110 17:41:44.656"></status>
</kw>
<status starttime="20161110 17:41:44.652" status="PASS" endtime="20161110 17:41:44.656"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:44.657">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:44.022" status="PASS" endtime="20161110 17:41:44.657"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:44.657">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:44.020" status="PASS" endtime="20161110 17:41:44.657"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:44.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:41:44.658" status="PASS" endtime="20161110 17:41:44.658"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:44.659">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:41:44.659">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:41:44.659">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:41:44.658" status="PASS" endtime="20161110 17:41:44.659"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:44.660">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:41:44.017" status="PASS" endtime="20161110 17:41:44.660"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:41:44.661">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:41:44.660" status="FAIL" endtime="20161110 17:41:44.661"></status>
</kw>
<status starttime="20161110 17:41:44.017" status="FAIL" endtime="20161110 17:41:44.661"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:54.663">@{arglist} = [ ]</msg>
<status starttime="20161110 17:41:54.663" status="PASS" endtime="20161110 17:41:54.663"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:54.664">${args} = {u'data': []}</msg>
<status starttime="20161110 17:41:54.664" status="PASS" endtime="20161110 17:41:54.665"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:54.666">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:41:54.666" status="PASS" endtime="20161110 17:41:54.666"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:54.668">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:41:54.668" status="PASS" endtime="20161110 17:41:54.668"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:54.669">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:41:54.669" status="PASS" endtime="20161110 17:41:54.669"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:41:54.670" status="PASS" endtime="20161110 17:41:54.670"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:54.672">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:41:54.671" status="PASS" endtime="20161110 17:41:54.672"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:54.673">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:41:54.673" status="PASS" endtime="20161110 17:41:54.673"></status>
</kw>
<status starttime="20161110 17:41:54.673" status="PASS" endtime="20161110 17:41:54.674"></status>
</kw>
<status starttime="20161110 17:41:54.670" status="PASS" endtime="20161110 17:41:54.674"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:54.674">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:41:54.674" status="PASS" endtime="20161110 17:41:54.675"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:54.675">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:41:54.675" status="PASS" endtime="20161110 17:41:54.675"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:54.676">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:41:54.675" status="PASS" endtime="20161110 17:41:54.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:54.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:41:54.676" status="PASS" endtime="20161110 17:41:54.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:55.475">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:41:55.475">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:54.677" status="PASS" endtime="20161110 17:41:55.475"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:55.476">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:41:55.476" status="PASS" endtime="20161110 17:41:55.476"></status>
</kw>
<status starttime="20161110 17:41:54.674" status="PASS" endtime="20161110 17:41:55.477"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:55.778">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:41:55.779">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:55.477" status="PASS" endtime="20161110 17:41:55.779"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:55.780">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:41:55.780" status="PASS" endtime="20161110 17:41:55.781"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:55.783">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:41:55.783" status="PASS" endtime="20161110 17:41:55.783"></status>
</kw>
<status starttime="20161110 17:41:55.781" status="PASS" endtime="20161110 17:41:55.783"></status>
</kw>
<status starttime="20161110 17:41:55.779" status="PASS" endtime="20161110 17:41:55.784"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:55.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:54.666" status="PASS" endtime="20161110 17:41:55.784"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:55.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:41:54.665" status="PASS" endtime="20161110 17:41:55.784"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:41:55.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:41:55.785" status="PASS" endtime="20161110 17:41:55.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:41:55.786">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:41:55.786">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:41:55.786">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:41:55.786" status="PASS" endtime="20161110 17:41:55.786"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:41:55.787">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:41:54.662" status="PASS" endtime="20161110 17:41:55.787"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:41:55.788">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:41:55.787" status="FAIL" endtime="20161110 17:41:55.788"></status>
</kw>
<status starttime="20161110 17:41:54.662" status="FAIL" endtime="20161110 17:41:55.788"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:05.790">@{arglist} = [ ]</msg>
<status starttime="20161110 17:42:05.790" status="PASS" endtime="20161110 17:42:05.791"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:05.792">${args} = {u'data': []}</msg>
<status starttime="20161110 17:42:05.791" status="PASS" endtime="20161110 17:42:05.792"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:05.793">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:42:05.793" status="PASS" endtime="20161110 17:42:05.793"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:05.795">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:42:05.795" status="PASS" endtime="20161110 17:42:05.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:05.796">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:42:05.796" status="PASS" endtime="20161110 17:42:05.796"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:42:05.797" status="PASS" endtime="20161110 17:42:05.797"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:05.801">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:42:05.799" status="PASS" endtime="20161110 17:42:05.801"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:05.802">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:42:05.802" status="PASS" endtime="20161110 17:42:05.802"></status>
</kw>
<status starttime="20161110 17:42:05.801" status="PASS" endtime="20161110 17:42:05.802"></status>
</kw>
<status starttime="20161110 17:42:05.797" status="PASS" endtime="20161110 17:42:05.803"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:05.803">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:42:05.803" status="PASS" endtime="20161110 17:42:05.804"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:05.804">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:42:05.804" status="PASS" endtime="20161110 17:42:05.804"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:05.805">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:42:05.805" status="PASS" endtime="20161110 17:42:05.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:05.805">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:42:05.805" status="PASS" endtime="20161110 17:42:05.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:06.134">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:42:06.134">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:05.806" status="PASS" endtime="20161110 17:42:06.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:06.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:06.135" status="PASS" endtime="20161110 17:42:06.135"></status>
</kw>
<status starttime="20161110 17:42:05.803" status="PASS" endtime="20161110 17:42:06.135"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:06.603">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:42:06.604">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:06.136" status="PASS" endtime="20161110 17:42:06.604"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:06.605">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:42:06.604" status="PASS" endtime="20161110 17:42:06.605"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:06.606">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:42:06.606" status="PASS" endtime="20161110 17:42:06.606"></status>
</kw>
<status starttime="20161110 17:42:06.605" status="PASS" endtime="20161110 17:42:06.606"></status>
</kw>
<status starttime="20161110 17:42:06.604" status="PASS" endtime="20161110 17:42:06.606"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:06.606">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:05.794" status="PASS" endtime="20161110 17:42:06.606"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:06.607">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:05.792" status="PASS" endtime="20161110 17:42:06.607"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:06.607">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:06.607" status="PASS" endtime="20161110 17:42:06.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:06.608">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:42:06.608">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:42:06.608">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:42:06.608" status="PASS" endtime="20161110 17:42:06.608"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:06.608">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:42:05.789" status="PASS" endtime="20161110 17:42:06.608"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:06.609">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:42:06.608" status="FAIL" endtime="20161110 17:42:06.609"></status>
</kw>
<status starttime="20161110 17:42:05.789" status="FAIL" endtime="20161110 17:42:06.609"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:16.612">@{arglist} = [ ]</msg>
<status starttime="20161110 17:42:16.611" status="PASS" endtime="20161110 17:42:16.612"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:16.613">${args} = {u'data': []}</msg>
<status starttime="20161110 17:42:16.612" status="PASS" endtime="20161110 17:42:16.613"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:16.615">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161110 17:42:16.614" status="PASS" endtime="20161110 17:42:16.615"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:16.617">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161110 17:42:16.616" status="PASS" endtime="20161110 17:42:16.617"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:16.618">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:42:16.617" status="PASS" endtime="20161110 17:42:16.618"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:42:16.618" status="PASS" endtime="20161110 17:42:16.619"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:16.621">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:42:16.620" status="PASS" endtime="20161110 17:42:16.621"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:16.623">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:42:16.622" status="PASS" endtime="20161110 17:42:16.623"></status>
</kw>
<status starttime="20161110 17:42:16.621" status="PASS" endtime="20161110 17:42:16.623"></status>
</kw>
<status starttime="20161110 17:42:16.619" status="PASS" endtime="20161110 17:42:16.623"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:16.624">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:42:16.624" status="PASS" endtime="20161110 17:42:16.624"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:16.625">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:42:16.624" status="PASS" endtime="20161110 17:42:16.625"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:16.625">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:42:16.625" status="PASS" endtime="20161110 17:42:16.626"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:16.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:42:16.626" status="PASS" endtime="20161110 17:42:16.626"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:16.970">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:42:16.970">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:16.626" status="PASS" endtime="20161110 17:42:16.970"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:16.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:16.970" status="PASS" endtime="20161110 17:42:16.972"></status>
</kw>
<status starttime="20161110 17:42:16.623" status="PASS" endtime="20161110 17:42:16.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.253">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:42:17.254">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:16.972" status="PASS" endtime="20161110 17:42:17.254"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.256">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:42:17.255" status="PASS" endtime="20161110 17:42:17.256"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:17.257">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:42:17.257" status="PASS" endtime="20161110 17:42:17.257"></status>
</kw>
<status starttime="20161110 17:42:17.256" status="PASS" endtime="20161110 17:42:17.257"></status>
</kw>
<status starttime="20161110 17:42:17.254" status="PASS" endtime="20161110 17:42:17.258"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:17.258">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:16.615" status="PASS" endtime="20161110 17:42:17.258"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:17.258">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:16.613" status="PASS" endtime="20161110 17:42:17.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:17.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:17.259" status="PASS" endtime="20161110 17:42:17.259"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.260">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:42:17.261">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:42:17.261">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:42:17.260" status="PASS" endtime="20161110 17:42:17.261"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:17.262">${bmc_state} = HOST_POWERED_ON</msg>
<status starttime="20161110 17:42:16.610" status="PASS" endtime="20161110 17:42:17.262"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:17.263">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:42:17.262" status="FAIL" endtime="20161110 17:42:17.263"></status>
</kw>
<status starttime="20161110 17:42:16.609" status="FAIL" endtime="20161110 17:42:17.263"></status>
</kw>
<msg level="FAIL" timestamp="20161110 17:42:17.263">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status starttime="20161110 17:27:10.236" status="FAIL" endtime="20161110 17:42:17.263"></status>
</kw>
<status starttime="20161110 17:27:10.235" status="FAIL" endtime="20161110 17:42:17.264"></status>
</kw>
<status starttime="20161110 17:27:02.370" status="FAIL" endtime="20161110 17:42:17.264"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Log FFDC if failed and collect SOL</doc>
<kw library="openbmc_ffdc" name="Log FFDC">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<kw library="openbmc_ffdc" name="Log FFDC If Test Case Failed">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.269">${cur_time} = 2016-11-10 17:42:17:268837</msg>
<status starttime="20161110 17:42:17.269" status="PASS" endtime="20161110 17:42:17.269"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.270">${cur_time} = 20161110174217268837</msg>
<status starttime="20161110 17:42:17.270" status="PASS" endtime="20161110 17:42:17.270"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:17.270">${cur_time} = 20161110174217268837</msg>
<status starttime="20161110 17:42:17.268" status="PASS" endtime="20161110 17:42:17.270"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:17.273">${FFDC_TIME} = 20161110174217268837</msg>
<status starttime="20161110 17:42:17.270" status="PASS" endtime="20161110 17:42:17.273"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status starttime="20161110 17:42:17.273" status="PASS" endtime="20161110 17:42:17.274"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.275">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20161110 17:42:17.274" status="PASS" endtime="20161110 17:42:17.275"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.275">${suite_name} = 20161110174217268837_TestsTestBasicPoweron</msg>
<status starttime="20161110 17:42:17.275" status="PASS" endtime="20161110 17:42:17.275"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.276">${test_name} = powerontest</msg>
<status starttime="20161110 17:42:17.275" status="PASS" endtime="20161110 17:42:17.276"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.276">${test_name} = 20161110174217268837_powerontest</msg>
<status starttime="20161110 17:42:17.276" status="PASS" endtime="20161110 17:42:17.276"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:17.276">${suitename} = 20161110174217268837_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161110 17:42:17.276">${testname} = 20161110174217268837_powerontest</msg>
<status starttime="20161110 17:42:17.274" status="PASS" endtime="20161110 17:42:17.276"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:17.280">${FFDC_DIR_PATH} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest</msg>
<status starttime="20161110 17:42:17.277" status="PASS" endtime="20161110 17:42:17.280"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.281">${prefix} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_</msg>
<status starttime="20161110 17:42:17.281" status="PASS" endtime="20161110 17:42:17.281"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:17.284">${LOG_PREFIX} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_</msg>
<status starttime="20161110 17:42:17.281" status="PASS" endtime="20161110 17:42:17.284"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Directory">
<doc>Creates directory and report file</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.292">Created directory '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.284" status="PASS" endtime="20161110 17:42:17.292"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Report File">
<doc>Create a generic file name for ffdc</doc>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:17.295">${FFDC_FILE_PATH} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt</msg>
<status starttime="20161110 17:42:17.293" status="PASS" endtime="20161110 17:42:17.295"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.297">Created file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.296" status="PASS" endtime="20161110 17:42:17.297"></status>
</kw>
<status starttime="20161110 17:42:17.292" status="PASS" endtime="20161110 17:42:17.297"></status>
</kw>
<status starttime="20161110 17:42:17.284" status="PASS" endtime="20161110 17:42:17.297"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.299">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.298" status="PASS" endtime="20161110 17:42:17.299"></status>
</kw>
<status starttime="20161110 17:42:17.298" status="PASS" endtime="20161110 17:42:17.299"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.300">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.300" status="PASS" endtime="20161110 17:42:17.300"></status>
</kw>
<status starttime="20161110 17:42:17.299" status="PASS" endtime="20161110 17:42:17.300"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.301">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.301" status="PASS" endtime="20161110 17:42:17.301"></status>
</kw>
<status starttime="20161110 17:42:17.300" status="PASS" endtime="20161110 17:42:17.301"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.303">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.302" status="PASS" endtime="20161110 17:42:17.303"></status>
</kw>
<status starttime="20161110 17:42:17.302" status="PASS" endtime="20161110 17:42:17.303"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.304">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.303" status="PASS" endtime="20161110 17:42:17.304"></status>
</kw>
<status starttime="20161110 17:42:17.303" status="PASS" endtime="20161110 17:42:17.305"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.306">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.305" status="PASS" endtime="20161110 17:42:17.306"></status>
</kw>
<status starttime="20161110 17:42:17.305" status="PASS" endtime="20161110 17:42:17.306"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.307">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.307" status="PASS" endtime="20161110 17:42:17.307"></status>
</kw>
<status starttime="20161110 17:42:17.306" status="PASS" endtime="20161110 17:42:17.307"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.308">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.308" status="PASS" endtime="20161110 17:42:17.308"></status>
</kw>
<status starttime="20161110 17:42:17.307" status="PASS" endtime="20161110 17:42:17.309"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.309">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.309" status="PASS" endtime="20161110 17:42:17.310"></status>
</kw>
<status starttime="20161110 17:42:17.309" status="PASS" endtime="20161110 17:42:17.310"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.311">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.311" status="PASS" endtime="20161110 17:42:17.311"></status>
</kw>
<status starttime="20161110 17:42:17.310" status="PASS" endtime="20161110 17:42:17.311"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.312">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.312" status="PASS" endtime="20161110 17:42:17.312"></status>
</kw>
<status starttime="20161110 17:42:17.311" status="PASS" endtime="20161110 17:42:17.312"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.313">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.313" status="PASS" endtime="20161110 17:42:17.313"></status>
</kw>
<status starttime="20161110 17:42:17.312" status="PASS" endtime="20161110 17:42:17.313"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.314">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.314" status="PASS" endtime="20161110 17:42:17.314"></status>
</kw>
<status starttime="20161110 17:42:17.314" status="PASS" endtime="20161110 17:42:17.315"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.316">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.316" status="PASS" endtime="20161110 17:42:17.316"></status>
</kw>
<status starttime="20161110 17:42:17.315" status="PASS" endtime="20161110 17:42:17.316"></status>
</kw>
<status starttime="20161110 17:42:17.310" status="PASS" endtime="20161110 17:42:17.317"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.318">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.317" status="PASS" endtime="20161110 17:42:17.318"></status>
</kw>
<status starttime="20161110 17:42:17.317" status="PASS" endtime="20161110 17:42:17.318"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.318">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status starttime="20161110 17:42:17.318" status="PASS" endtime="20161110 17:42:17.318"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.319">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.319" status="PASS" endtime="20161110 17:42:17.319"></status>
</kw>
<status starttime="20161110 17:42:17.319" status="PASS" endtime="20161110 17:42:17.320"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.320">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.320" status="PASS" endtime="20161110 17:42:17.321"></status>
</kw>
<status starttime="20161110 17:42:17.320" status="PASS" endtime="20161110 17:42:17.321"></status>
</kw>
<status starttime="20161110 17:42:17.318" status="PASS" endtime="20161110 17:42:17.321"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.323">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.322" status="PASS" endtime="20161110 17:42:17.323"></status>
</kw>
<status starttime="20161110 17:42:17.321" status="PASS" endtime="20161110 17:42:17.323"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.324">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.323" status="PASS" endtime="20161110 17:42:17.324"></status>
</kw>
<status starttime="20161110 17:42:17.323" status="PASS" endtime="20161110 17:42:17.324"></status>
</kw>
<status starttime="20161110 17:42:17.321" status="PASS" endtime="20161110 17:42:17.324"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.325">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.325" status="PASS" endtime="20161110 17:42:17.325"></status>
</kw>
<status starttime="20161110 17:42:17.324" status="PASS" endtime="20161110 17:42:17.325"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.326">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.326" status="PASS" endtime="20161110 17:42:17.326"></status>
</kw>
<status starttime="20161110 17:42:17.325" status="PASS" endtime="20161110 17:42:17.326"></status>
</kw>
<status starttime="20161110 17:42:17.324" status="PASS" endtime="20161110 17:42:17.326"></status>
</kw>
<status starttime="20161110 17:42:17.318" status="PASS" endtime="20161110 17:42:17.326"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:17.327">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:17.327" status="PASS" endtime="20161110 17:42:17.327"></status>
</kw>
<status starttime="20161110 17:42:17.327" status="PASS" endtime="20161110 17:42:17.328"></status>
</kw>
<status starttime="20161110 17:42:17.298" status="PASS" endtime="20161110 17:42:17.328"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.328">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20161110 17:42:17.328" status="PASS" endtime="20161110 17:42:17.328"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.330">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') ]</msg>
<status starttime="20161110 17:42:17.330" status="PASS" endtime="20161110 17:42:17.330"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:17.335">Returning from the enclosing user keyword.</msg>
<status starttime="20161110 17:42:17.332" status="PASS" endtime="20161110 17:42:17.335"></status>
</kw>
<status starttime="20161110 17:42:17.332" status="PASS" endtime="20161110 17:42:17.335"></status>
</kw>
<status starttime="20161110 17:42:17.332" status="PASS" endtime="20161110 17:42:17.335"></status>
</kw>
<status starttime="20161110 17:42:17.331" status="PASS" endtime="20161110 17:42:17.335"></status>
</kw>
<status starttime="20161110 17:42:17.331" status="PASS" endtime="20161110 17:42:17.335"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:17.338">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 17:42:17.338" status="FAIL" endtime="20161110 17:42:17.338"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:17.338">${has_host} = False</msg>
<status starttime="20161110 17:42:17.338" status="PASS" endtime="20161110 17:42:17.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 17:42:17.342" status="PASS" endtime="20161110 17:42:17.343"></status>
</kw>
<status starttime="20161110 17:42:17.339" status="PASS" endtime="20161110 17:42:17.343"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.347">${port_num} = 22</msg>
<status starttime="20161110 17:42:17.346" status="PASS" endtime="20161110 17:42:17.347"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.347">${SSH_PORT} = 22</msg>
<status starttime="20161110 17:42:17.347" status="PASS" endtime="20161110 17:42:17.347"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:17.348">${https_num} = 443</msg>
<status starttime="20161110 17:42:17.347" status="PASS" endtime="20161110 17:42:17.348"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:17.348">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 17:42:17.348" status="PASS" endtime="20161110 17:42:17.348"></status>
</kw>
<status starttime="20161110 17:42:17.346" status="PASS" endtime="20161110 17:42:17.348"></status>
</kw>
<status starttime="20161110 17:42:17.343" status="PASS" endtime="20161110 17:42:17.349"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:17.350">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 17:42:17.349" status="FAIL" endtime="20161110 17:42:17.350"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:17.350">${has_port} = False</msg>
<status starttime="20161110 17:42:17.349" status="PASS" endtime="20161110 17:42:17.350"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 17:42:17.353" status="PASS" endtime="20161110 17:42:17.354"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 17:42:17.354" status="PASS" endtime="20161110 17:42:17.354"></status>
</kw>
<status starttime="20161110 17:42:17.353" status="PASS" endtime="20161110 17:42:17.354"></status>
</kw>
<status starttime="20161110 17:42:17.350" status="PASS" endtime="20161110 17:42:17.354"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:17.355">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 17:42:19.545">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 17:42:17.354" status="PASS" endtime="20161110 17:42:19.546"></status>
</kw>
<status starttime="20161110 17:42:17.337" status="PASS" endtime="20161110 17:42:19.546"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:19.547">@{entries} = [ BMC FILES ]</msg>
<status starttime="20161110 17:42:19.546" status="PASS" endtime="20161110 17:42:19.547"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:19.549">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status starttime="20161110 17:42:19.548" status="PASS" endtime="20161110 17:42:19.549"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:19.550">${logpath} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_procinfo</msg>
<status starttime="20161110 17:42:19.550" status="PASS" endtime="20161110 17:42:19.550"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 17:42:19.552" status="PASS" endtime="20161110 17:42:19.556"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:19.557">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161110 17:42:19.626">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:19.626">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161110 17:42:19.626">${stderr} = </msg>
<status starttime="20161110 17:42:19.556" status="PASS" endtime="20161110 17:42:19.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:19.635">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_procinfo"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_procinfo&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:19.632" status="PASS" endtime="20161110 17:42:19.635"></status>
</kw>
<status starttime="20161110 17:42:19.631" status="PASS" endtime="20161110 17:42:19.635"></status>
</kw>
<status starttime="20161110 17:42:19.627" status="PASS" endtime="20161110 17:42:19.635"></status>
</kw>
<status starttime="20161110 17:42:19.551" status="PASS" endtime="20161110 17:42:19.636"></status>
</kw>
<status starttime="20161110 17:42:19.549" status="PASS" endtime="20161110 17:42:19.636"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:19.637">${logpath} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_meminfo</msg>
<status starttime="20161110 17:42:19.636" status="PASS" endtime="20161110 17:42:19.637"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 17:42:19.638" status="PASS" endtime="20161110 17:42:19.643"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:19.643">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161110 17:42:19.723">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:19.724">${stdout} = MemTotal:         499020 kB
MemFree:          333380 kB
MemAvailable:     372156 kB
Buffers:           10468 kB
Cached:            70132 kB
SwapCached:            0 kB
Active:           112364 kB
Inac...</msg>
<msg level="INFO" timestamp="20161110 17:42:19.724">${stderr} = </msg>
<status starttime="20161110 17:42:19.643" status="PASS" endtime="20161110 17:42:19.724"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:19.729">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_meminfo"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_meminfo&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:19.727" status="PASS" endtime="20161110 17:42:19.729"></status>
</kw>
<status starttime="20161110 17:42:19.727" status="PASS" endtime="20161110 17:42:19.729"></status>
</kw>
<status starttime="20161110 17:42:19.724" status="PASS" endtime="20161110 17:42:19.729"></status>
</kw>
<status starttime="20161110 17:42:19.637" status="PASS" endtime="20161110 17:42:19.730"></status>
</kw>
<status starttime="20161110 17:42:19.636" status="PASS" endtime="20161110 17:42:19.730"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:19.730">${logpath} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_journalctl</msg>
<status starttime="20161110 17:42:19.730" status="PASS" endtime="20161110 17:42:19.730"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 17:42:19.731" status="PASS" endtime="20161110 17:42:19.734"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:19.734">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161110 17:42:36.833">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:36.840">${stdout} = -- Logs begin at Thu 2016-10-20 19:57:23 UTC, end at Thu 2016-10-20 21:25:59 UTC. --
Oct 20 19:57:23 barreleye systemd-journald[449]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161110 17:42:36.840">${stderr} = </msg>
<status starttime="20161110 17:42:19.734" status="PASS" endtime="20161110 17:42:36.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:36.849">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_journalctl"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_journalctl&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:36.846" status="PASS" endtime="20161110 17:42:36.849"></status>
</kw>
<status starttime="20161110 17:42:36.844" status="PASS" endtime="20161110 17:42:36.849"></status>
</kw>
<status starttime="20161110 17:42:36.841" status="PASS" endtime="20161110 17:42:36.850"></status>
</kw>
<status starttime="20161110 17:42:19.730" status="PASS" endtime="20161110 17:42:36.850"></status>
</kw>
<status starttime="20161110 17:42:19.730" status="PASS" endtime="20161110 17:42:36.850"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:36.850">${logpath} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_dmesg</msg>
<status starttime="20161110 17:42:36.850" status="PASS" endtime="20161110 17:42:36.850"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 17:42:36.851" status="PASS" endtime="20161110 17:42:36.854"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:36.855">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161110 17:42:37.744">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:37.745">${stdout} = PID hash table entries: 2048 (order: 1, 8192 bytes)
Dentry cache hash table entries: 65536 (order: 6, 262144 bytes)
Inode-cache hash table entries: 32768 (order: 5, 131072 bytes)
Memory: 496464K/50790...</msg>
<msg level="INFO" timestamp="20161110 17:42:37.745">${stderr} = </msg>
<status starttime="20161110 17:42:36.854" status="PASS" endtime="20161110 17:42:37.745"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:37.750">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_dmesg"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_dmesg&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:37.749" status="PASS" endtime="20161110 17:42:37.750"></status>
</kw>
<status starttime="20161110 17:42:37.748" status="PASS" endtime="20161110 17:42:37.750"></status>
</kw>
<status starttime="20161110 17:42:37.745" status="PASS" endtime="20161110 17:42:37.750"></status>
</kw>
<status starttime="20161110 17:42:36.851" status="PASS" endtime="20161110 17:42:37.750"></status>
</kw>
<status starttime="20161110 17:42:36.850" status="PASS" endtime="20161110 17:42:37.750"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:37.751">${logpath} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_proc_list</msg>
<status starttime="20161110 17:42:37.750" status="PASS" endtime="20161110 17:42:37.751"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161110 17:42:37.751" status="PASS" endtime="20161110 17:42:37.755"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:37.756">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161110 17:42:38.972">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:38.973">${stdout} = Mem: 169484K used, 329536K free, 36560K shrd, 10468K buff, 70136K cached
CPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 2.48 1.69 2.77 4/115 1802
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20161110 17:42:38.973">${stderr} = </msg>
<status starttime="20161110 17:42:37.755" status="PASS" endtime="20161110 17:42:38.973"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:38.982">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_proc_list"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_proc_list&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:38.979" status="PASS" endtime="20161110 17:42:38.982"></status>
</kw>
<status starttime="20161110 17:42:38.979" status="PASS" endtime="20161110 17:42:38.982"></status>
</kw>
<status starttime="20161110 17:42:38.973" status="PASS" endtime="20161110 17:42:38.982"></status>
</kw>
<status starttime="20161110 17:42:37.751" status="PASS" endtime="20161110 17:42:38.982"></status>
</kw>
<status starttime="20161110 17:42:37.750" status="PASS" endtime="20161110 17:42:38.982"></status>
</kw>
<status starttime="20161110 17:42:19.549" status="PASS" endtime="20161110 17:42:38.982"></status>
</kw>
<status starttime="20161110 17:42:19.548" status="PASS" endtime="20161110 17:42:38.983"></status>
</kw>
<status starttime="20161110 17:42:19.547" status="PASS" endtime="20161110 17:42:38.983"></status>
</kw>
<status starttime="20161110 17:42:19.547" status="PASS" endtime="20161110 17:42:38.983"></status>
</kw>
<status starttime="20161110 17:42:17.336" status="PASS" endtime="20161110 17:42:38.983"></status>
</kw>
<status starttime="20161110 17:42:17.336" status="PASS" endtime="20161110 17:42:38.983"></status>
</kw>
<status starttime="20161110 17:42:17.336" status="PASS" endtime="20161110 17:42:38.983"></status>
</kw>
<status starttime="20161110 17:42:17.335" status="PASS" endtime="20161110 17:42:38.983"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:38.986">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 17:42:38.986" status="FAIL" endtime="20161110 17:42:38.986"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:38.986">${has_host} = False</msg>
<status starttime="20161110 17:42:38.985" status="PASS" endtime="20161110 17:42:38.986"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 17:42:38.989" status="PASS" endtime="20161110 17:42:38.989"></status>
</kw>
<status starttime="20161110 17:42:38.986" status="PASS" endtime="20161110 17:42:38.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:38.994">${port_num} = 22</msg>
<status starttime="20161110 17:42:38.993" status="PASS" endtime="20161110 17:42:38.994"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:38.994">${SSH_PORT} = 22</msg>
<status starttime="20161110 17:42:38.994" status="PASS" endtime="20161110 17:42:38.994"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:38.995">${https_num} = 443</msg>
<status starttime="20161110 17:42:38.994" status="PASS" endtime="20161110 17:42:38.995"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:38.995">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 17:42:38.995" status="PASS" endtime="20161110 17:42:38.995"></status>
</kw>
<status starttime="20161110 17:42:38.993" status="PASS" endtime="20161110 17:42:38.995"></status>
</kw>
<status starttime="20161110 17:42:38.990" status="PASS" endtime="20161110 17:42:38.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:38.996">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 17:42:38.996" status="FAIL" endtime="20161110 17:42:38.996"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:38.997">${has_port} = False</msg>
<status starttime="20161110 17:42:38.996" status="PASS" endtime="20161110 17:42:38.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 17:42:39.000" status="PASS" endtime="20161110 17:42:39.000"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 17:42:39.001" status="PASS" endtime="20161110 17:42:39.001"></status>
</kw>
<status starttime="20161110 17:42:39.000" status="PASS" endtime="20161110 17:42:39.001"></status>
</kw>
<status starttime="20161110 17:42:38.997" status="PASS" endtime="20161110 17:42:39.001"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:39.001">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 17:42:43.491">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 17:42:39.001" status="PASS" endtime="20161110 17:42:43.491"></status>
</kw>
<status starttime="20161110 17:42:38.985" status="PASS" endtime="20161110 17:42:43.491"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:43.492">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20161110 17:42:43.492" status="PASS" endtime="20161110 17:42:43.492"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:43.494">@{cmd_list} = [ ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_led', '/org/openbmc/control/led/enumerate') | ('BMC_record_log', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', '...</msg>
<status starttime="20161110 17:42:43.494" status="PASS" endtime="20161110 17:42:43.494"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:43.495">${logpath} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_inventory</msg>
<status starttime="20161110 17:42:43.495" status="PASS" endtime="20161110 17:42:43.495"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:43.497">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status starttime="20161110 17:42:43.496" status="PASS" endtime="20161110 17:42:43.497"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:43.499">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 17:42:43.498" status="PASS" endtime="20161110 17:42:43.499"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:43.500">URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 17:42:43.500" status="PASS" endtime="20161110 17:42:43.500"></status>
</kw>
<status starttime="20161110 17:42:43.499" status="PASS" endtime="20161110 17:42:43.501"></status>
</kw>
<status starttime="20161110 17:42:43.497" status="PASS" endtime="20161110 17:42:43.501"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:43.502">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:42:43.502" status="PASS" endtime="20161110 17:42:43.503"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:43.504">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:42:43.503" status="PASS" endtime="20161110 17:42:43.504"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:43.504">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:42:43.504" status="PASS" endtime="20161110 17:42:43.504"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:43.505">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:42:43.504" status="PASS" endtime="20161110 17:42:43.505"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:44.429">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:42:44.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:43.505" status="PASS" endtime="20161110 17:42:44.429"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:44.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:44.430" status="PASS" endtime="20161110 17:42:44.430"></status>
</kw>
<status starttime="20161110 17:42:43.501" status="PASS" endtime="20161110 17:42:44.430"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:47.457">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:42:47.457">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:44.430" status="PASS" endtime="20161110 17:42:47.457"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:47.460">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-op...</msg>
<status starttime="20161110 17:42:47.458" status="PASS" endtime="20161110 17:42:47.460"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:47.462">Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g17b02f3-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/273"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/275"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/275"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "ECID:019C0097401407181C1D0000006D0391", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "ECID:019C009740140718141D000000350461", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "ECID:019C0097401407181C1C0000003A03C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "ECID:019C009740140718221D000000300481", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:42:47.461" status="PASS" endtime="20161110 17:42:47.463"></status>
</kw>
<status starttime="20161110 17:42:47.460" status="PASS" endtime="20161110 17:42:47.464"></status>
</kw>
<status starttime="20161110 17:42:47.457" status="PASS" endtime="20161110 17:42:47.464"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:47.464">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:43.495" status="PASS" endtime="20161110 17:42:47.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:47.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:47.465" status="PASS" endtime="20161110 17:42:47.465"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:47.465">${status} = True</msg>
<status starttime="20161110 17:42:47.464" status="PASS" endtime="20161110 17:42:47.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 17:42:47.465" status="PASS" endtime="20161110 17:42:47.468"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:47.473">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g17b02f3-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/273"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/275"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/275"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "ECID:019C0097401407181C1D0000006D0391", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "ECID:019C009740140718141D000000350461", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "ECID:019C0097401407181C1C0000003A03C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "ECID:019C009740140718221D000000300481", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:42:47.473">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 17:42:47.474">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-81b8d98",
            "Custom Field 2": "\tskiboot-5.3.2-opdirty...</msg>
<status starttime="20161110 17:42:47.468" status="PASS" endtime="20161110 17:42:47.474"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:47.476">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_inventory"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_inventory&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:47.475" status="PASS" endtime="20161110 17:42:47.476"></status>
</kw>
<status starttime="20161110 17:42:47.474" status="PASS" endtime="20161110 17:42:47.476"></status>
</kw>
<status starttime="20161110 17:42:43.494" status="PASS" endtime="20161110 17:42:47.476"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:47.477">${logpath} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_led</msg>
<status starttime="20161110 17:42:47.476" status="PASS" endtime="20161110 17:42:47.477"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:47.478">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20161110 17:42:47.478" status="PASS" endtime="20161110 17:42:47.478"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:47.479">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 17:42:47.479" status="PASS" endtime="20161110 17:42:47.479"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:47.480">URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 17:42:47.480" status="PASS" endtime="20161110 17:42:47.480"></status>
</kw>
<status starttime="20161110 17:42:47.479" status="PASS" endtime="20161110 17:42:47.480"></status>
</kw>
<status starttime="20161110 17:42:47.478" status="PASS" endtime="20161110 17:42:47.480"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:47.481">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:42:47.481" status="PASS" endtime="20161110 17:42:47.481"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:47.482">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:42:47.482" status="PASS" endtime="20161110 17:42:47.482"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:47.482">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:42:47.482" status="PASS" endtime="20161110 17:42:47.482"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:47.483">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:42:47.483" status="PASS" endtime="20161110 17:42:47.483"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:47.818">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:42:47.818">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:47.484" status="PASS" endtime="20161110 17:42:47.818"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:47.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:47.818" status="PASS" endtime="20161110 17:42:47.819"></status>
</kw>
<status starttime="20161110 17:42:47.480" status="PASS" endtime="20161110 17:42:47.819"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.008">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:42:48.009">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:47.819" status="PASS" endtime="20161110 17:42:48.009"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.011">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK...</msg>
<status starttime="20161110 17:42:48.010" status="PASS" endtime="20161110 17:42:48.011"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:48.012">Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:42:48.012" status="PASS" endtime="20161110 17:42:48.013"></status>
</kw>
<status starttime="20161110 17:42:48.011" status="PASS" endtime="20161110 17:42:48.013"></status>
</kw>
<status starttime="20161110 17:42:48.009" status="PASS" endtime="20161110 17:42:48.013"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:48.013">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:47.477" status="PASS" endtime="20161110 17:42:48.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:48.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:48.014" status="PASS" endtime="20161110 17:42:48.015"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:48.015">${status} = True</msg>
<status starttime="20161110 17:42:48.014" status="PASS" endtime="20161110 17:42:48.015"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 17:42:48.015" status="PASS" endtime="20161110 17:42:48.020"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.021">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:42:48.021">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 17:42:48.021">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status starttime="20161110 17:42:48.020" status="PASS" endtime="20161110 17:42:48.021"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:48.024">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_led"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_led&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:48.022" status="PASS" endtime="20161110 17:42:48.024"></status>
</kw>
<status starttime="20161110 17:42:48.021" status="PASS" endtime="20161110 17:42:48.024"></status>
</kw>
<status starttime="20161110 17:42:47.476" status="PASS" endtime="20161110 17:42:48.024"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.025">${logpath} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_record_log</msg>
<status starttime="20161110 17:42:48.025" status="PASS" endtime="20161110 17:42:48.025"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.026">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20161110 17:42:48.026" status="PASS" endtime="20161110 17:42:48.026"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.027">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 17:42:48.027" status="PASS" endtime="20161110 17:42:48.027"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:48.028">URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 17:42:48.028" status="PASS" endtime="20161110 17:42:48.028"></status>
</kw>
<status starttime="20161110 17:42:48.027" status="PASS" endtime="20161110 17:42:48.028"></status>
</kw>
<status starttime="20161110 17:42:48.026" status="PASS" endtime="20161110 17:42:48.028"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:48.029">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:42:48.029" status="PASS" endtime="20161110 17:42:48.030"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:42:48.030" status="PASS" endtime="20161110 17:42:48.030"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.031">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:42:48.030" status="PASS" endtime="20161110 17:42:48.031"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.032">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:42:48.031" status="PASS" endtime="20161110 17:42:48.032"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.368">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:42:48.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:48.032" status="PASS" endtime="20161110 17:42:48.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:48.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:48.369" status="PASS" endtime="20161110 17:42:48.369"></status>
</kw>
<status starttime="20161110 17:42:48.028" status="PASS" endtime="20161110 17:42:48.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.587">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:42:48.587">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:48.369" status="PASS" endtime="20161110 17:42:48.587"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.589">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/273": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chass...</msg>
<status starttime="20161110 17:42:48.588" status="PASS" endtime="20161110 17:42:48.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:48.589">Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/273": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 21:10:13"
    }, 
    "/org/openbmc/records/events/273/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/275": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 21:10:16"
    }, 
    "/org/openbmc/records/events/275/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:42:48.589" status="PASS" endtime="20161110 17:42:48.589"></status>
</kw>
<status starttime="20161110 17:42:48.589" status="PASS" endtime="20161110 17:42:48.590"></status>
</kw>
<status starttime="20161110 17:42:48.587" status="PASS" endtime="20161110 17:42:48.590"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:48.590">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:48.025" status="PASS" endtime="20161110 17:42:48.590"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:48.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:48.590" status="PASS" endtime="20161110 17:42:48.591"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:48.591">${status} = True</msg>
<status starttime="20161110 17:42:48.590" status="PASS" endtime="20161110 17:42:48.591"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 17:42:48.591" status="PASS" endtime="20161110 17:42:48.594"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.595">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/273": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 21:10:13"
    }, 
    "/org/openbmc/records/events/273/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/275": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 21:10:16"
    }, 
    "/org/openbmc/records/events/275/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:42:48.595">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 17:42:48.595">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/273": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status starttime="20161110 17:42:48.594" status="PASS" endtime="20161110 17:42:48.595"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:48.597">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_record_log"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_record_log&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:48.596" status="PASS" endtime="20161110 17:42:48.597"></status>
</kw>
<status starttime="20161110 17:42:48.595" status="PASS" endtime="20161110 17:42:48.598"></status>
</kw>
<status starttime="20161110 17:42:48.024" status="PASS" endtime="20161110 17:42:48.598"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.598">${logpath} = /tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_sensor_list</msg>
<status starttime="20161110 17:42:48.598" status="PASS" endtime="20161110 17:42:48.598"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.599">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20161110 17:42:48.599" status="PASS" endtime="20161110 17:42:48.599"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.601">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 17:42:48.600" status="PASS" endtime="20161110 17:42:48.601"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:48.602">URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status starttime="20161110 17:42:48.601" status="PASS" endtime="20161110 17:42:48.602"></status>
</kw>
<status starttime="20161110 17:42:48.601" status="PASS" endtime="20161110 17:42:48.602"></status>
</kw>
<status starttime="20161110 17:42:48.599" status="PASS" endtime="20161110 17:42:48.602"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:48.603">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:42:48.603" status="PASS" endtime="20161110 17:42:48.603"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.604">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:42:48.603" status="PASS" endtime="20161110 17:42:48.604"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.604">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:42:48.604" status="PASS" endtime="20161110 17:42:48.604"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.605">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:42:48.604" status="PASS" endtime="20161110 17:42:48.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:48.956">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:42:48.956">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:48.605" status="PASS" endtime="20161110 17:42:48.956"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:48.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:48.957" status="PASS" endtime="20161110 17:42:48.957"></status>
</kw>
<status starttime="20161110 17:42:48.602" status="PASS" endtime="20161110 17:42:48.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:51.090">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:42:51.091">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:48.957" status="PASS" endtime="20161110 17:42:51.091"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:51.092">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "er...</msg>
<status starttime="20161110 17:42:51.092" status="PASS" endtime="20161110 17:42:51.092"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:51.093">Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 12724, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 10924, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12021, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19285, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19014, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19285, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 28500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 958, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1032, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1300, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:42:51.093" status="PASS" endtime="20161110 17:42:51.094"></status>
</kw>
<status starttime="20161110 17:42:51.093" status="PASS" endtime="20161110 17:42:51.095"></status>
</kw>
<status starttime="20161110 17:42:51.091" status="PASS" endtime="20161110 17:42:51.095"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:51.095">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:42:48.598" status="PASS" endtime="20161110 17:42:51.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:51.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:42:51.096" status="PASS" endtime="20161110 17:42:51.097"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:51.097">${status} = True</msg>
<status starttime="20161110 17:42:51.096" status="PASS" endtime="20161110 17:42:51.097"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161110 17:42:51.098" status="PASS" endtime="20161110 17:42:51.102"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:51.107">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 12724, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 10924, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12021, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19285, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19014, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19285, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 28500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 958, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1032, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1300, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:42:51.107">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 17:42:51.108">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status starttime="20161110 17:42:51.103" status="PASS" endtime="20161110 17:42:51.108"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:51.111">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_sensor_list"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_sensor_list&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:51.109" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<status starttime="20161110 17:42:51.108" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<status starttime="20161110 17:42:48.598" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<status starttime="20161110 17:42:43.494" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<status starttime="20161110 17:42:43.493" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<status starttime="20161110 17:42:43.493" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<status starttime="20161110 17:42:43.492" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<status starttime="20161110 17:42:38.984" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<status starttime="20161110 17:42:38.984" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<status starttime="20161110 17:42:38.984" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<status starttime="20161110 17:42:38.983" status="PASS" endtime="20161110 17:42:51.111"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:51.114">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 17:42:51.114" status="FAIL" endtime="20161110 17:42:51.114"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:51.114">${has_host} = False</msg>
<status starttime="20161110 17:42:51.113" status="PASS" endtime="20161110 17:42:51.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 17:42:51.117" status="PASS" endtime="20161110 17:42:51.117"></status>
</kw>
<status starttime="20161110 17:42:51.114" status="PASS" endtime="20161110 17:42:51.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:51.123">${port_num} = 22</msg>
<status starttime="20161110 17:42:51.123" status="PASS" endtime="20161110 17:42:51.123"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:51.124">${SSH_PORT} = 22</msg>
<status starttime="20161110 17:42:51.123" status="PASS" endtime="20161110 17:42:51.124"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:51.124">${https_num} = 443</msg>
<status starttime="20161110 17:42:51.124" status="PASS" endtime="20161110 17:42:51.124"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:51.125">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 17:42:51.124" status="PASS" endtime="20161110 17:42:51.125"></status>
</kw>
<status starttime="20161110 17:42:51.123" status="PASS" endtime="20161110 17:42:51.125"></status>
</kw>
<status starttime="20161110 17:42:51.118" status="PASS" endtime="20161110 17:42:51.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:51.126">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 17:42:51.126" status="FAIL" endtime="20161110 17:42:51.126"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:51.126">${has_port} = False</msg>
<status starttime="20161110 17:42:51.125" status="PASS" endtime="20161110 17:42:51.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 17:42:51.130" status="PASS" endtime="20161110 17:42:51.130"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 17:42:51.130" status="PASS" endtime="20161110 17:42:51.131"></status>
</kw>
<status starttime="20161110 17:42:51.130" status="PASS" endtime="20161110 17:42:51.131"></status>
</kw>
<status starttime="20161110 17:42:51.126" status="PASS" endtime="20161110 17:42:51.131"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:51.131">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 17:42:54.189">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 17:42:51.131" status="PASS" endtime="20161110 17:42:54.190"></status>
</kw>
<status starttime="20161110 17:42:51.113" status="PASS" endtime="20161110 17:42:54.190"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:54.191">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status starttime="20161110 17:42:54.190" status="PASS" endtime="20161110 17:42:54.191"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:54.193">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20161110 17:42:54.192" status="PASS" endtime="20161110 17:42:54.193"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:54.199">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20161110 17:42:54.194" status="PASS" endtime="20161110 17:42:54.200"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.209">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.207" status="PASS" endtime="20161110 17:42:54.209"></status>
</kw>
<status starttime="20161110 17:42:54.206" status="PASS" endtime="20161110 17:42:54.209"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.210">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.210" status="PASS" endtime="20161110 17:42:54.210"></status>
</kw>
<status starttime="20161110 17:42:54.209" status="PASS" endtime="20161110 17:42:54.211"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.212">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.211" status="PASS" endtime="20161110 17:42:54.212"></status>
</kw>
<status starttime="20161110 17:42:54.211" status="PASS" endtime="20161110 17:42:54.212"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.213">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.212" status="PASS" endtime="20161110 17:42:54.213"></status>
</kw>
<status starttime="20161110 17:42:54.212" status="PASS" endtime="20161110 17:42:54.213"></status>
</kw>
<status starttime="20161110 17:42:54.206" status="PASS" endtime="20161110 17:42:54.213"></status>
</kw>
<status starttime="20161110 17:42:54.202" status="PASS" endtime="20161110 17:42:54.213"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:54.214">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161110 17:42:54.282">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:54.282">${stdout} = 20161109203916</msg>
<msg level="INFO" timestamp="20161110 17:42:54.282">${stderr} = </msg>
<status starttime="20161110 17:42:54.213" status="PASS" endtime="20161110 17:42:54.282"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.286">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.286" status="PASS" endtime="20161110 17:42:54.287"></status>
</kw>
<status starttime="20161110 17:42:54.285" status="PASS" endtime="20161110 17:42:54.287"></status>
</kw>
<status starttime="20161110 17:42:54.282" status="PASS" endtime="20161110 17:42:54.287"></status>
</kw>
<status starttime="20161110 17:42:54.200" status="PASS" endtime="20161110 17:42:54.287"></status>
</kw>
<status starttime="20161110 17:42:54.200" status="PASS" endtime="20161110 17:42:54.287"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.292">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.291" status="PASS" endtime="20161110 17:42:54.292"></status>
</kw>
<status starttime="20161110 17:42:54.291" status="PASS" endtime="20161110 17:42:54.292"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.293">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.293" status="PASS" endtime="20161110 17:42:54.293"></status>
</kw>
<status starttime="20161110 17:42:54.292" status="PASS" endtime="20161110 17:42:54.293"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.294">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.294" status="PASS" endtime="20161110 17:42:54.294"></status>
</kw>
<status starttime="20161110 17:42:54.293" status="PASS" endtime="20161110 17:42:54.294"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.295">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.295" status="PASS" endtime="20161110 17:42:54.295"></status>
</kw>
<status starttime="20161110 17:42:54.295" status="PASS" endtime="20161110 17:42:54.296"></status>
</kw>
<status starttime="20161110 17:42:54.291" status="PASS" endtime="20161110 17:42:54.296"></status>
</kw>
<status starttime="20161110 17:42:54.288" status="PASS" endtime="20161110 17:42:54.296"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:54.296">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161110 17:42:54.412">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:54.412">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-213"
VERSION_ID="v1.99.0-213-g17b02f3-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161110 17:42:54.412">${stderr} = </msg>
<status starttime="20161110 17:42:54.296" status="PASS" endtime="20161110 17:42:54.413"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.417">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.416" status="PASS" endtime="20161110 17:42:54.417"></status>
</kw>
<status starttime="20161110 17:42:54.416" status="PASS" endtime="20161110 17:42:54.417"></status>
</kw>
<status starttime="20161110 17:42:54.413" status="PASS" endtime="20161110 17:42:54.417"></status>
</kw>
<status starttime="20161110 17:42:54.287" status="PASS" endtime="20161110 17:42:54.417"></status>
</kw>
<status starttime="20161110 17:42:54.287" status="PASS" endtime="20161110 17:42:54.417"></status>
</kw>
<status starttime="20161110 17:42:54.200" status="PASS" endtime="20161110 17:42:54.417"></status>
</kw>
<status starttime="20161110 17:42:54.192" status="PASS" endtime="20161110 17:42:54.417"></status>
</kw>
<status starttime="20161110 17:42:54.191" status="PASS" endtime="20161110 17:42:54.417"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:54.418">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20161110 17:42:54.418" status="PASS" endtime="20161110 17:42:54.418"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:54.419">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20161110 17:42:54.418" status="PASS" endtime="20161110 17:42:54.419"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.424">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.424" status="PASS" endtime="20161110 17:42:54.424"></status>
</kw>
<status starttime="20161110 17:42:54.423" status="PASS" endtime="20161110 17:42:54.424"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.425">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.425" status="PASS" endtime="20161110 17:42:54.425"></status>
</kw>
<status starttime="20161110 17:42:54.424" status="PASS" endtime="20161110 17:42:54.426"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.426">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.426" status="PASS" endtime="20161110 17:42:54.427"></status>
</kw>
<status starttime="20161110 17:42:54.426" status="PASS" endtime="20161110 17:42:54.427"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:54.428">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:54.427" status="PASS" endtime="20161110 17:42:54.428"></status>
</kw>
<status starttime="20161110 17:42:54.427" status="PASS" endtime="20161110 17:42:54.428"></status>
</kw>
<status starttime="20161110 17:42:54.423" status="PASS" endtime="20161110 17:42:54.428"></status>
</kw>
<status starttime="20161110 17:42:54.420" status="PASS" endtime="20161110 17:42:54.428"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:54.428">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161110 17:42:56.018">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:56.019">${stdout} =  = HOST_POWERED_ON</msg>
<msg level="INFO" timestamp="20161110 17:42:56.019">${stderr} = </msg>
<status starttime="20161110 17:42:54.428" status="PASS" endtime="20161110 17:42:56.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.026">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.025" status="PASS" endtime="20161110 17:42:56.026"></status>
</kw>
<status starttime="20161110 17:42:56.024" status="PASS" endtime="20161110 17:42:56.026"></status>
</kw>
<status starttime="20161110 17:42:56.019" status="PASS" endtime="20161110 17:42:56.026"></status>
</kw>
<status starttime="20161110 17:42:54.419" status="PASS" endtime="20161110 17:42:56.026"></status>
</kw>
<status starttime="20161110 17:42:54.419" status="PASS" endtime="20161110 17:42:56.027"></status>
</kw>
<status starttime="20161110 17:42:54.419" status="PASS" endtime="20161110 17:42:56.027"></status>
</kw>
<status starttime="20161110 17:42:54.417" status="PASS" endtime="20161110 17:42:56.027"></status>
</kw>
<status starttime="20161110 17:42:54.417" status="PASS" endtime="20161110 17:42:56.027"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.028">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status starttime="20161110 17:42:56.028" status="PASS" endtime="20161110 17:42:56.029"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:56.030">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20161110 17:42:56.029" status="PASS" endtime="20161110 17:42:56.030"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.036">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.036" status="PASS" endtime="20161110 17:42:56.036"></status>
</kw>
<status starttime="20161110 17:42:56.035" status="PASS" endtime="20161110 17:42:56.036"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.037">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.037" status="PASS" endtime="20161110 17:42:56.037"></status>
</kw>
<status starttime="20161110 17:42:56.036" status="PASS" endtime="20161110 17:42:56.038"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.039">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.038" status="PASS" endtime="20161110 17:42:56.039"></status>
</kw>
<status starttime="20161110 17:42:56.038" status="PASS" endtime="20161110 17:42:56.039"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.041">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.041" status="PASS" endtime="20161110 17:42:56.041"></status>
</kw>
<status starttime="20161110 17:42:56.039" status="PASS" endtime="20161110 17:42:56.041"></status>
</kw>
<status starttime="20161110 17:42:56.035" status="PASS" endtime="20161110 17:42:56.041"></status>
</kw>
<status starttime="20161110 17:42:56.031" status="PASS" endtime="20161110 17:42:56.041"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.042">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161110 17:42:56.114">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:56.114">${stdout} =  21:26:36 up  1:29,  load average: 2.37, 1.70, 2.75</msg>
<msg level="INFO" timestamp="20161110 17:42:56.114">${stderr} = </msg>
<status starttime="20161110 17:42:56.042" status="PASS" endtime="20161110 17:42:56.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.118">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.118" status="PASS" endtime="20161110 17:42:56.118"></status>
</kw>
<status starttime="20161110 17:42:56.117" status="PASS" endtime="20161110 17:42:56.118"></status>
</kw>
<status starttime="20161110 17:42:56.114" status="PASS" endtime="20161110 17:42:56.118"></status>
</kw>
<status starttime="20161110 17:42:56.030" status="PASS" endtime="20161110 17:42:56.119"></status>
</kw>
<status starttime="20161110 17:42:56.030" status="PASS" endtime="20161110 17:42:56.119"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.124">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.123" status="PASS" endtime="20161110 17:42:56.124"></status>
</kw>
<status starttime="20161110 17:42:56.123" status="PASS" endtime="20161110 17:42:56.124"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.125">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.124" status="PASS" endtime="20161110 17:42:56.125"></status>
</kw>
<status starttime="20161110 17:42:56.124" status="PASS" endtime="20161110 17:42:56.125"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.126">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.126" status="PASS" endtime="20161110 17:42:56.126"></status>
</kw>
<status starttime="20161110 17:42:56.125" status="PASS" endtime="20161110 17:42:56.126"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.127">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.127" status="PASS" endtime="20161110 17:42:56.127"></status>
</kw>
<status starttime="20161110 17:42:56.126" status="PASS" endtime="20161110 17:42:56.127"></status>
</kw>
<status starttime="20161110 17:42:56.122" status="PASS" endtime="20161110 17:42:56.127"></status>
</kw>
<status starttime="20161110 17:42:56.120" status="PASS" endtime="20161110 17:42:56.127"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.128">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161110 17:42:56.224">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:56.224">${stdout} = Linux barreleye 4.7.10-c5682cbc3542add705e35152329436067bb1f94a #1 Tue Nov 1 05:44:54 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161110 17:42:56.224">${stderr} = </msg>
<status starttime="20161110 17:42:56.128" status="PASS" endtime="20161110 17:42:56.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.228">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.228" status="PASS" endtime="20161110 17:42:56.228"></status>
</kw>
<status starttime="20161110 17:42:56.227" status="PASS" endtime="20161110 17:42:56.228"></status>
</kw>
<status starttime="20161110 17:42:56.224" status="PASS" endtime="20161110 17:42:56.228"></status>
</kw>
<status starttime="20161110 17:42:56.119" status="PASS" endtime="20161110 17:42:56.228"></status>
</kw>
<status starttime="20161110 17:42:56.119" status="PASS" endtime="20161110 17:42:56.228"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.234">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.233" status="PASS" endtime="20161110 17:42:56.234"></status>
</kw>
<status starttime="20161110 17:42:56.232" status="PASS" endtime="20161110 17:42:56.234"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.235">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.234" status="PASS" endtime="20161110 17:42:56.235"></status>
</kw>
<status starttime="20161110 17:42:56.234" status="PASS" endtime="20161110 17:42:56.235"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.236">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.236" status="PASS" endtime="20161110 17:42:56.236"></status>
</kw>
<status starttime="20161110 17:42:56.235" status="PASS" endtime="20161110 17:42:56.236"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.237">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.237" status="PASS" endtime="20161110 17:42:56.237"></status>
</kw>
<status starttime="20161110 17:42:56.236" status="PASS" endtime="20161110 17:42:56.237"></status>
</kw>
<status starttime="20161110 17:42:56.232" status="PASS" endtime="20161110 17:42:56.237"></status>
</kw>
<status starttime="20161110 17:42:56.229" status="PASS" endtime="20161110 17:42:56.237"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.238">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161110 17:42:56.344">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:56.344">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M     35.6...</msg>
<msg level="INFO" timestamp="20161110 17:42:56.344">${stderr} = </msg>
<status starttime="20161110 17:42:56.238" status="PASS" endtime="20161110 17:42:56.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.350">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt"&gt;/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest/20161110174217268837_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.349" status="PASS" endtime="20161110 17:42:56.350"></status>
</kw>
<status starttime="20161110 17:42:56.349" status="PASS" endtime="20161110 17:42:56.350"></status>
</kw>
<status starttime="20161110 17:42:56.345" status="PASS" endtime="20161110 17:42:56.350"></status>
</kw>
<status starttime="20161110 17:42:56.229" status="PASS" endtime="20161110 17:42:56.350"></status>
</kw>
<status starttime="20161110 17:42:56.228" status="PASS" endtime="20161110 17:42:56.350"></status>
</kw>
<status starttime="20161110 17:42:56.030" status="PASS" endtime="20161110 17:42:56.350"></status>
</kw>
<status starttime="20161110 17:42:56.027" status="PASS" endtime="20161110 17:42:56.350"></status>
</kw>
<status starttime="20161110 17:42:56.027" status="PASS" endtime="20161110 17:42:56.350"></status>
</kw>
<status starttime="20161110 17:42:54.191" status="PASS" endtime="20161110 17:42:56.350"></status>
</kw>
<status starttime="20161110 17:42:51.112" status="PASS" endtime="20161110 17:42:56.351"></status>
</kw>
<status starttime="20161110 17:42:51.112" status="PASS" endtime="20161110 17:42:56.351"></status>
</kw>
<status starttime="20161110 17:42:51.112" status="PASS" endtime="20161110 17:42:56.351"></status>
</kw>
<status starttime="20161110 17:42:51.111" status="PASS" endtime="20161110 17:42:56.351"></status>
</kw>
<status starttime="20161110 17:42:17.330" status="PASS" endtime="20161110 17:42:56.351"></status>
</kw>
<status starttime="20161110 17:42:17.330" status="PASS" endtime="20161110 17:42:56.351"></status>
</kw>
<status starttime="20161110 17:42:17.330" status="PASS" endtime="20161110 17:42:56.351"></status>
</kw>
<status starttime="20161110 17:42:17.328" status="PASS" endtime="20161110 17:42:56.351"></status>
</kw>
<status starttime="20161110 17:42:17.328" status="PASS" endtime="20161110 17:42:56.351"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.352">${cur_time} = 2016-11-10 17:42:56:351814</msg>
<status starttime="20161110 17:42:56.352" status="PASS" endtime="20161110 17:42:56.352"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.352">${cur_time} = 20161110174256351814</msg>
<status starttime="20161110 17:42:56.352" status="PASS" endtime="20161110 17:42:56.352"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:56.353">${cur_time} = 20161110174256351814</msg>
<status starttime="20161110 17:42:56.351" status="PASS" endtime="20161110 17:42:56.353"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status starttime="20161110 17:42:56.353" status="PASS" endtime="20161110 17:42:56.353"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:56.354">
/tmp/root/30449/obmc-robot/logs/20161110174217268837_TestsTestBasicPoweron/20161110174217268837_powerontest</msg>
<status starttime="20161110 17:42:56.353" status="PASS" endtime="20161110 17:42:56.354"></status>
</kw>
<status starttime="20161110 17:42:17.268" status="PASS" endtime="20161110 17:42:56.354"></status>
</kw>
<status starttime="20161110 17:42:17.265" status="PASS" endtime="20161110 17:42:56.354"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.355">Directory '&lt;a href="file:///tmp/root/30449/obmc-robot/logs"&gt;/tmp/root/30449/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 17:42:56.354" status="PASS" endtime="20161110 17:42:56.355"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.356">File '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 17:42:56.355" status="PASS" endtime="20161110 17:42:56.356"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:56.356">${exist} = True</msg>
<status starttime="20161110 17:42:56.355" status="PASS" endtime="20161110 17:42:56.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 17:42:56.356" status="PASS" endtime="20161110 17:42:56.358"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.359">${cur_time} = 2016-11-10 17:42:56:359080</msg>
<status starttime="20161110 17:42:56.359" status="PASS" endtime="20161110 17:42:56.359"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.360">${cur_time} = 20161110174256359080</msg>
<status starttime="20161110 17:42:56.359" status="PASS" endtime="20161110 17:42:56.360"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:56.360">${cur_time} = 20161110174256359080</msg>
<status starttime="20161110 17:42:56.359" status="PASS" endtime="20161110 17:42:56.360"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:42:56.361">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:42:56.360" status="PASS" endtime="20161110 17:42:56.361"></status>
</kw>
<status starttime="20161110 17:42:56.354" status="PASS" endtime="20161110 17:42:56.361"></status>
</kw>
<status starttime="20161110 17:42:17.264" status="PASS" endtime="20161110 17:42:56.361"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:56.363">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 17:42:56.362" status="FAIL" endtime="20161110 17:42:56.363"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:56.363">${has_host} = False</msg>
<status starttime="20161110 17:42:56.362" status="PASS" endtime="20161110 17:42:56.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 17:42:56.366" status="PASS" endtime="20161110 17:42:56.366"></status>
</kw>
<status starttime="20161110 17:42:56.363" status="PASS" endtime="20161110 17:42:56.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.370">${port_num} = 22</msg>
<status starttime="20161110 17:42:56.370" status="PASS" endtime="20161110 17:42:56.370"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.370">${SSH_PORT} = 22</msg>
<status starttime="20161110 17:42:56.370" status="PASS" endtime="20161110 17:42:56.370"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:56.371">${https_num} = 443</msg>
<status starttime="20161110 17:42:56.370" status="PASS" endtime="20161110 17:42:56.371"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:56.371">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 17:42:56.371" status="PASS" endtime="20161110 17:42:56.371"></status>
</kw>
<status starttime="20161110 17:42:56.369" status="PASS" endtime="20161110 17:42:56.372"></status>
</kw>
<status starttime="20161110 17:42:56.366" status="PASS" endtime="20161110 17:42:56.372"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:56.372">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 17:42:56.372" status="FAIL" endtime="20161110 17:42:56.373"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:56.373">${has_port} = False</msg>
<status starttime="20161110 17:42:56.372" status="PASS" endtime="20161110 17:42:56.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 17:42:56.377" status="PASS" endtime="20161110 17:42:56.377"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 17:42:56.377" status="PASS" endtime="20161110 17:42:56.378"></status>
</kw>
<status starttime="20161110 17:42:56.376" status="PASS" endtime="20161110 17:42:56.378"></status>
</kw>
<status starttime="20161110 17:42:56.373" status="PASS" endtime="20161110 17:42:56.378"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:56.378">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 17:42:58.560">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 17:42:56.378" status="PASS" endtime="20161110 17:42:58.560"></status>
</kw>
<status starttime="20161110 17:42:56.361" status="PASS" endtime="20161110 17:42:58.561"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:58.562">Executing command 'ls /tmp/obmc-console.log-20161110172639992617_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161110 17:42:58.660">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:58.660">${pid} = 1273</msg>
<msg level="INFO" timestamp="20161110 17:42:58.661">${stderr} = </msg>
<status starttime="20161110 17:42:58.561" status="PASS" endtime="20161110 17:42:58.661"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:58.661">Length is 0</msg>
<status starttime="20161110 17:42:58.661" status="PASS" endtime="20161110 17:42:58.661"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:58.662">Executing command 'ps ax | grep 1273 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161110 17:42:58.969">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:58.969">${rc} = 0</msg>
<status starttime="20161110 17:42:58.662" status="PASS" endtime="20161110 17:42:58.969"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status starttime="20161110 17:42:58.969" status="PASS" endtime="20161110 17:42:58.974"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:58.975">Executing command 'kill -s KILL 1273'.</msg>
<msg level="INFO" timestamp="20161110 17:42:59.084">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:59.084">${console} = </msg>
<msg level="INFO" timestamp="20161110 17:42:59.084">${stderr} = </msg>
<status starttime="20161110 17:42:58.975" status="PASS" endtime="20161110 17:42:59.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:59.085">Length is 0</msg>
<status starttime="20161110 17:42:59.085" status="PASS" endtime="20161110 17:42:59.086"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:59.087">Current Client PID:1273</msg>
<status starttime="20161110 17:42:59.086" status="PASS" endtime="20161110 17:42:59.087"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:59.088">Executing command 'cat /tmp/obmc-console.log-20161110172639992617_1273'.</msg>
<msg level="INFO" timestamp="20161110 17:42:59.199">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 17:42:59.200">${console} = </msg>
<msg level="INFO" timestamp="20161110 17:42:59.200">${stderr} = </msg>
<status starttime="20161110 17:42:59.088" status="PASS" endtime="20161110 17:42:59.200"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:59.200">Length is 0</msg>
<status starttime="20161110 17:42:59.200" status="PASS" endtime="20161110 17:42:59.200"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:59.201">${sol_log} = </msg>
<status starttime="20161110 17:42:56.361" status="PASS" endtime="20161110 17:42:59.201"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:59.202"></msg>
<status starttime="20161110 17:42:59.201" status="PASS" endtime="20161110 17:42:59.202"></status>
</kw>
<status starttime="20161110 17:42:17.264" status="PASS" endtime="20161110 17:42:59.202"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status starttime="20161110 17:26:37.922" critical="yes" status="FAIL" endtime="20161110 17:42:59.202">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status starttime="20161110 17:26:37.899" status="FAIL" endtime="20161110 17:42:59.203"></status>
</suite>
<suite name="Test Eventlog" id="s1-s4" source="/tmp/root/30449/obmc-robot/tests/test_eventlog.robot">
<kw library="connection_client" name="Open Connection And Log In" type="setup">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:59.233">Dictionary does not contain key 'host'.</msg>
<status starttime="20161110 17:42:59.233" status="FAIL" endtime="20161110 17:42:59.233"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:59.233">${has_host} = False</msg>
<status starttime="20161110 17:42:59.232" status="PASS" endtime="20161110 17:42:59.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161110 17:42:59.236" status="PASS" endtime="20161110 17:42:59.236"></status>
</kw>
<status starttime="20161110 17:42:59.233" status="PASS" endtime="20161110 17:42:59.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:59.240">${port_num} = 22</msg>
<status starttime="20161110 17:42:59.239" status="PASS" endtime="20161110 17:42:59.240"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:59.240">${SSH_PORT} = 22</msg>
<status starttime="20161110 17:42:59.240" status="PASS" endtime="20161110 17:42:59.240"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:42:59.241">${https_num} = 443</msg>
<status starttime="20161110 17:42:59.240" status="PASS" endtime="20161110 17:42:59.241"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:59.241">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161110 17:42:59.241" status="PASS" endtime="20161110 17:42:59.241"></status>
</kw>
<status starttime="20161110 17:42:59.239" status="PASS" endtime="20161110 17:42:59.241"></status>
</kw>
<status starttime="20161110 17:42:59.237" status="PASS" endtime="20161110 17:42:59.242"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 17:42:59.243">Dictionary does not contain key 'port'.</msg>
<status starttime="20161110 17:42:59.242" status="FAIL" endtime="20161110 17:42:59.243"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:42:59.243">${has_port} = False</msg>
<status starttime="20161110 17:42:59.242" status="PASS" endtime="20161110 17:42:59.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161110 17:42:59.247" status="PASS" endtime="20161110 17:42:59.247"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161110 17:42:59.247" status="PASS" endtime="20161110 17:42:59.248"></status>
</kw>
<status starttime="20161110 17:42:59.246" status="PASS" endtime="20161110 17:42:59.248"></status>
</kw>
<status starttime="20161110 17:42:59.243" status="PASS" endtime="20161110 17:42:59.248"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:42:59.249">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 17:43:01.443">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161110 17:42:59.248" status="PASS" endtime="20161110 17:43:01.444"></status>
</kw>
<status starttime="20161110 17:42:59.232" status="PASS" endtime="20161110 17:43:01.444"></status>
</kw>
<test name="clear any logs" id="s1-s4-t1">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:01.446">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161110 17:43:01.446" status="PASS" endtime="20161110 17:43:01.447"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:01.447">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:43:01.447" status="PASS" endtime="20161110 17:43:01.448"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:43:01.448" status="PASS" endtime="20161110 17:43:01.448"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:01.451">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:43:01.450" status="PASS" endtime="20161110 17:43:01.451"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:01.452">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:43:01.452" status="PASS" endtime="20161110 17:43:01.452"></status>
</kw>
<status starttime="20161110 17:43:01.451" status="PASS" endtime="20161110 17:43:01.452"></status>
</kw>
<status starttime="20161110 17:43:01.449" status="PASS" endtime="20161110 17:43:01.453"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:01.454">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:43:01.454" status="PASS" endtime="20161110 17:43:01.455"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:01.455">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:43:01.455" status="PASS" endtime="20161110 17:43:01.455"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:01.456">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:43:01.456" status="PASS" endtime="20161110 17:43:01.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:01.457">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:43:01.457" status="PASS" endtime="20161110 17:43:01.458"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:02.125">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:43:02.125">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:01.458" status="PASS" endtime="20161110 17:43:02.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:02.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:43:02.125" status="PASS" endtime="20161110 17:43:02.126"></status>
</kw>
<status starttime="20161110 17:43:01.453" status="PASS" endtime="20161110 17:43:02.126"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:02.458">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:43:02.458">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:02.127" status="PASS" endtime="20161110 17:43:02.459"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:02.461">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:43:02.460" status="PASS" endtime="20161110 17:43:02.461"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:02.462">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:43:02.462" status="PASS" endtime="20161110 17:43:02.463"></status>
</kw>
<status starttime="20161110 17:43:02.461" status="PASS" endtime="20161110 17:43:02.463"></status>
</kw>
<status starttime="20161110 17:43:02.459" status="PASS" endtime="20161110 17:43:02.463"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:02.463">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:01.445" status="PASS" endtime="20161110 17:43:02.464"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:02.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:43:02.464" status="PASS" endtime="20161110 17:43:02.465"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:02.467">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161110 17:43:02.467" status="PASS" endtime="20161110 17:43:02.468"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:02.471">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 17:43:02.469" status="PASS" endtime="20161110 17:43:02.471"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:02.473">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161110 17:43:02.472" status="PASS" endtime="20161110 17:43:02.473"></status>
</kw>
<status starttime="20161110 17:43:02.471" status="PASS" endtime="20161110 17:43:02.473"></status>
</kw>
<status starttime="20161110 17:43:02.468" status="PASS" endtime="20161110 17:43:02.473"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:02.475">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:43:02.474" status="PASS" endtime="20161110 17:43:02.475"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:02.476">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:43:02.476" status="PASS" endtime="20161110 17:43:02.476"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:02.477">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:43:02.476" status="PASS" endtime="20161110 17:43:02.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:02.478">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:43:02.477" status="PASS" endtime="20161110 17:43:02.478"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.014">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:43:03.014">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:02.479" status="PASS" endtime="20161110 17:43:03.014"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:03.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:43:03.015" status="PASS" endtime="20161110 17:43:03.016"></status>
</kw>
<status starttime="20161110 17:43:02.473" status="PASS" endtime="20161110 17:43:03.016"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.072">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:43:03.073">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:03.016" status="PASS" endtime="20161110 17:43:03.073"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.075">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:43:03.074" status="PASS" endtime="20161110 17:43:03.075"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:03.076">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:43:03.076" status="PASS" endtime="20161110 17:43:03.077"></status>
</kw>
<status starttime="20161110 17:43:03.075" status="PASS" endtime="20161110 17:43:03.077"></status>
</kw>
<status starttime="20161110 17:43:03.073" status="PASS" endtime="20161110 17:43:03.077"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:03.077">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:02.466" status="PASS" endtime="20161110 17:43:03.077"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.078">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:43:03.078">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:43:03.078">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:43:03.078" status="PASS" endtime="20161110 17:43:03.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:03.079">Length is 0</msg>
<status starttime="20161110 17:43:03.079" status="PASS" endtime="20161110 17:43:03.079"></status>
</kw>
<kw library="openbmc_ffdc" name="Log FFDC" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 17:43:03.080" status="PASS" endtime="20161110 17:43:03.085"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:03.086">Directory '&lt;a href="file:///tmp/root/30449/obmc-robot/logs"&gt;/tmp/root/30449/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 17:43:03.085" status="PASS" endtime="20161110 17:43:03.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:03.087">File '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 17:43:03.087" status="PASS" endtime="20161110 17:43:03.087"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:03.087">${exist} = True</msg>
<status starttime="20161110 17:43:03.086" status="PASS" endtime="20161110 17:43:03.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 17:43:03.087" status="PASS" endtime="20161110 17:43:03.091"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.092">${cur_time} = 2016-11-10 17:43:03:091783</msg>
<status starttime="20161110 17:43:03.092" status="PASS" endtime="20161110 17:43:03.092"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.093">${cur_time} = 20161110174303091783</msg>
<status starttime="20161110 17:43:03.092" status="PASS" endtime="20161110 17:43:03.093"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:03.093">${cur_time} = 20161110174303091783</msg>
<status starttime="20161110 17:43:03.091" status="PASS" endtime="20161110 17:43:03.093"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:03.094">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:43:03.093" status="PASS" endtime="20161110 17:43:03.094"></status>
</kw>
<status starttime="20161110 17:43:03.085" status="PASS" endtime="20161110 17:43:03.094"></status>
</kw>
<status starttime="20161110 17:43:03.080" status="PASS" endtime="20161110 17:43:03.094"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status starttime="20161110 17:43:01.444" critical="yes" status="PASS" endtime="20161110 17:43:03.094"></status>
</test>
<test name="write a log" id="s1-s4-t2">
<kw name="create a test log">
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.096">${data} = {u'data': []}</msg>
<status starttime="20161110 17:43:03.095" status="PASS" endtime="20161110 17:43:03.096"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.097">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161110 17:43:03.096" status="PASS" endtime="20161110 17:43:03.097"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.097">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:43:03.097" status="PASS" endtime="20161110 17:43:03.097"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161110 17:43:03.097" status="PASS" endtime="20161110 17:43:03.098"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.099">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:43:03.098" status="PASS" endtime="20161110 17:43:03.099"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:03.100">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161110 17:43:03.100" status="PASS" endtime="20161110 17:43:03.100"></status>
</kw>
<status starttime="20161110 17:43:03.099" status="PASS" endtime="20161110 17:43:03.100"></status>
</kw>
<status starttime="20161110 17:43:03.098" status="PASS" endtime="20161110 17:43:03.100"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:03.101">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:43:03.101" status="PASS" endtime="20161110 17:43:03.101"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.102">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:43:03.102" status="PASS" endtime="20161110 17:43:03.102"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.102">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:43:03.102" status="PASS" endtime="20161110 17:43:03.102"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:43:03.103" status="PASS" endtime="20161110 17:43:03.103"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.433">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:43:03.433">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:03.103" status="PASS" endtime="20161110 17:43:03.433"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:03.434">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:43:03.433" status="PASS" endtime="20161110 17:43:03.434"></status>
</kw>
<status starttime="20161110 17:43:03.100" status="PASS" endtime="20161110 17:43:03.434"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.730">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:43:03.730">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:03.434" status="PASS" endtime="20161110 17:43:03.730"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.731">${msg} = Response code:200, Content:{
  "data": 276, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:43:03.731" status="PASS" endtime="20161110 17:43:03.731"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:03.732">Response code:200, Content:{
  "data": 276, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:43:03.732" status="PASS" endtime="20161110 17:43:03.732"></status>
</kw>
<status starttime="20161110 17:43:03.731" status="PASS" endtime="20161110 17:43:03.732"></status>
</kw>
<status starttime="20161110 17:43:03.730" status="PASS" endtime="20161110 17:43:03.732"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:03.732">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:03.096" status="PASS" endtime="20161110 17:43:03.732"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:03.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:43:03.733" status="PASS" endtime="20161110 17:43:03.733"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.734">To JSON using : content={
  "data": 276, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:43:03.734">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:43:03.734">${json} = {u'data': 276, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:43:03.733" status="PASS" endtime="20161110 17:43:03.734"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.735">${LOGID} = 276</msg>
<status starttime="20161110 17:43:03.734" status="PASS" endtime="20161110 17:43:03.735"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.735">${uri} = /org/openbmc/records/events/276</msg>
<status starttime="20161110 17:43:03.735" status="PASS" endtime="20161110 17:43:03.736"></status>
</kw>
<status starttime="20161110 17:43:03.095" status="PASS" endtime="20161110 17:43:03.736"></status>
</kw>
<kw library="openbmc_ffdc" name="Log FFDC" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 17:43:03.737" status="PASS" endtime="20161110 17:43:03.741"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:03.743">Directory '&lt;a href="file:///tmp/root/30449/obmc-robot/logs"&gt;/tmp/root/30449/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 17:43:03.742" status="PASS" endtime="20161110 17:43:03.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:03.744">File '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 17:43:03.744" status="PASS" endtime="20161110 17:43:03.744"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:03.744">${exist} = True</msg>
<status starttime="20161110 17:43:03.744" status="PASS" endtime="20161110 17:43:03.744"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 17:43:03.745" status="PASS" endtime="20161110 17:43:03.747"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.748">${cur_time} = 2016-11-10 17:43:03:747733</msg>
<status starttime="20161110 17:43:03.748" status="PASS" endtime="20161110 17:43:03.748"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:03.748">${cur_time} = 20161110174303747733</msg>
<status starttime="20161110 17:43:03.748" status="PASS" endtime="20161110 17:43:03.748"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:03.749">${cur_time} = 20161110174303747733</msg>
<status starttime="20161110 17:43:03.747" status="PASS" endtime="20161110 17:43:03.749"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:03.749">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:43:03.749" status="PASS" endtime="20161110 17:43:03.749"></status>
</kw>
<status starttime="20161110 17:43:03.742" status="PASS" endtime="20161110 17:43:03.750"></status>
</kw>
<status starttime="20161110 17:43:03.736" status="PASS" endtime="20161110 17:43:03.750"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status starttime="20161110 17:43:03.095" critical="yes" status="PASS" endtime="20161110 17:43:03.750"></status>
</test>
<kw library="SSHLibrary" name="Close All Connections" type="teardown">
<doc>Closes all open connections.</doc>
<status starttime="20161110 17:43:03.750" status="PASS" endtime="20161110 17:43:04.096"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status starttime="20161110 17:42:59.206" status="PASS" endtime="20161110 17:43:04.096"></status>
</suite>
<suite name="Test Obmcrest" id="s1-s5" source="/tmp/root/30449/obmc-robot/tests/test_obmcrest.robot">
<test name="Good connection for testing" id="s1-s5-t1">
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:04.117">${base_uri} = /</msg>
<status starttime="20161110 17:43:04.117" status="PASS" endtime="20161110 17:43:04.118"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:04.119">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 17:43:04.118" status="PASS" endtime="20161110 17:43:04.119"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:04.120">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 17:43:04.120" status="PASS" endtime="20161110 17:43:04.120"></status>
</kw>
<status starttime="20161110 17:43:04.119" status="PASS" endtime="20161110 17:43:04.120"></status>
</kw>
<status starttime="20161110 17:43:04.118" status="PASS" endtime="20161110 17:43:04.120"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:04.121">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:43:04.121" status="PASS" endtime="20161110 17:43:04.121"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:04.122">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:43:04.121" status="PASS" endtime="20161110 17:43:04.122"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:04.122">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:43:04.122" status="PASS" endtime="20161110 17:43:04.122"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:04.123">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:43:04.122" status="PASS" endtime="20161110 17:43:04.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.012">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:43:05.013">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:04.123" status="PASS" endtime="20161110 17:43:05.013"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:05.014">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:43:05.013" status="PASS" endtime="20161110 17:43:05.014"></status>
</kw>
<status starttime="20161110 17:43:04.120" status="PASS" endtime="20161110 17:43:05.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.210">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:43:05.211">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:05.014" status="PASS" endtime="20161110 17:43:05.211"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.212">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:43:05.212" status="PASS" endtime="20161110 17:43:05.212"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:05.214">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:43:05.213" status="PASS" endtime="20161110 17:43:05.214"></status>
</kw>
<status starttime="20161110 17:43:05.213" status="PASS" endtime="20161110 17:43:05.214"></status>
</kw>
<status starttime="20161110 17:43:05.211" status="PASS" endtime="20161110 17:43:05.214"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:05.214">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:04.117" status="PASS" endtime="20161110 17:43:05.214"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:05.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:43:05.215" status="PASS" endtime="20161110 17:43:05.215"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.216">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:43:05.216">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:43:05.216">${content} = {u'data': [u'/org'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:43:05.215" status="PASS" endtime="20161110 17:43:05.216"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:05.216">${content} = [u'/org']</msg>
<status starttime="20161110 17:43:04.116" status="PASS" endtime="20161110 17:43:05.217"></status>
</kw>
<kw library="Collections" name="Get From List">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${content}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${c}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.217">${c} = /org</msg>
<status starttime="20161110 17:43:05.217" status="PASS" endtime="20161110 17:43:05.217"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${c}</arg>
<arg>/org</arg>
</arguments>
<status starttime="20161110 17:43:05.217" status="PASS" endtime="20161110 17:43:05.218"></status>
</kw>
<kw library="openbmc_ffdc" name="Log FFDC" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 17:43:05.220" status="PASS" endtime="20161110 17:43:05.223"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:05.224">Directory '&lt;a href="file:///tmp/root/30449/obmc-robot/logs"&gt;/tmp/root/30449/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 17:43:05.224" status="PASS" endtime="20161110 17:43:05.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:05.225">File '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 17:43:05.224" status="PASS" endtime="20161110 17:43:05.225"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:05.225">${exist} = True</msg>
<status starttime="20161110 17:43:05.224" status="PASS" endtime="20161110 17:43:05.225"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 17:43:05.225" status="PASS" endtime="20161110 17:43:05.228"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.229">${cur_time} = 2016-11-10 17:43:05:228182</msg>
<status starttime="20161110 17:43:05.228" status="PASS" endtime="20161110 17:43:05.229"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.229">${cur_time} = 20161110174305228182</msg>
<status starttime="20161110 17:43:05.229" status="PASS" endtime="20161110 17:43:05.230"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:05.230">${cur_time} = 20161110174305228182</msg>
<status starttime="20161110 17:43:05.228" status="PASS" endtime="20161110 17:43:05.230"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:05.230">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:43:05.230" status="PASS" endtime="20161110 17:43:05.230"></status>
</kw>
<status starttime="20161110 17:43:05.223" status="PASS" endtime="20161110 17:43:05.231"></status>
</kw>
<status starttime="20161110 17:43:05.219" status="PASS" endtime="20161110 17:43:05.231"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>Good_connection_for_testing</tag>
</tags>
<status starttime="20161110 17:43:04.116" critical="yes" status="PASS" endtime="20161110 17:43:05.231"></status>
</test>
<test name="get directory listing /" id="s1-s5-t2">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.232">${base_uri} = /</msg>
<status starttime="20161110 17:43:05.232" status="PASS" endtime="20161110 17:43:05.232"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.234">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 17:43:05.233" status="PASS" endtime="20161110 17:43:05.234"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:05.235">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status starttime="20161110 17:43:05.234" status="PASS" endtime="20161110 17:43:05.235"></status>
</kw>
<status starttime="20161110 17:43:05.234" status="PASS" endtime="20161110 17:43:05.235"></status>
</kw>
<status starttime="20161110 17:43:05.232" status="PASS" endtime="20161110 17:43:05.235"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:05.236">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161110 17:43:05.235" status="PASS" endtime="20161110 17:43:05.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161110 17:43:05.236" status="PASS" endtime="20161110 17:43:05.237"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.237">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161110 17:43:05.237" status="PASS" endtime="20161110 17:43:05.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.238">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161110 17:43:05.237" status="PASS" endtime="20161110 17:43:05.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.655">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 17:43:05.655">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:05.238" status="PASS" endtime="20161110 17:43:05.655"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:05.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:43:05.655" status="PASS" endtime="20161110 17:43:05.656"></status>
</kw>
<status starttime="20161110 17:43:05.235" status="PASS" endtime="20161110 17:43:05.656"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.714">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161110 17:43:05.714">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:05.656" status="PASS" endtime="20161110 17:43:05.714"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.715">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:43:05.715" status="PASS" endtime="20161110 17:43:05.715"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:05.716">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161110 17:43:05.716" status="PASS" endtime="20161110 17:43:05.716"></status>
</kw>
<status starttime="20161110 17:43:05.715" status="PASS" endtime="20161110 17:43:05.716"></status>
</kw>
<status starttime="20161110 17:43:05.714" status="PASS" endtime="20161110 17:43:05.716"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:05.717">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161110 17:43:05.231" status="PASS" endtime="20161110 17:43:05.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 17:43:05.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161110 17:43:05.717" status="PASS" endtime="20161110 17:43:05.717"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.718">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 17:43:05.718">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 17:43:05.718">${json} = {u'data': [u'/org'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161110 17:43:05.717" status="PASS" endtime="20161110 17:43:05.718"></status>
</kw>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${json['data']}</arg>
<arg>/org</arg>
</arguments>
<status starttime="20161110 17:43:05.718" status="PASS" endtime="20161110 17:43:05.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json['status']}</arg>
<arg>ok</arg>
</arguments>
<status starttime="20161110 17:43:05.718" status="PASS" endtime="20161110 17:43:05.719"></status>
</kw>
<kw library="openbmc_ffdc" name="Log FFDC" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status starttime="20161110 17:43:05.719" status="PASS" endtime="20161110 17:43:05.723"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:05.725">Directory '&lt;a href="file:///tmp/root/30449/obmc-robot/logs"&gt;/tmp/root/30449/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161110 17:43:05.724" status="PASS" endtime="20161110 17:43:05.725"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:05.726">File '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161110 17:43:05.726" status="PASS" endtime="20161110 17:43:05.726"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:05.726">${exist} = True</msg>
<status starttime="20161110 17:43:05.725" status="PASS" endtime="20161110 17:43:05.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161110 17:43:05.727" status="PASS" endtime="20161110 17:43:05.731"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.732">${cur_time} = 2016-11-10 17:43:05:732056</msg>
<status starttime="20161110 17:43:05.732" status="PASS" endtime="20161110 17:43:05.732"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 17:43:05.733">${cur_time} = 20161110174305732056</msg>
<status starttime="20161110 17:43:05.733" status="PASS" endtime="20161110 17:43:05.733"></status>
</kw>
<msg level="INFO" timestamp="20161110 17:43:05.734">${cur_time} = 20161110174305732056</msg>
<status starttime="20161110 17:43:05.731" status="PASS" endtime="20161110 17:43:05.734"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161110 17:43:05.734">Appended to file '&lt;a href="file:///tmp/root/30449/obmc-robot/logs/test_history.txt"&gt;/tmp/root/30449/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161110 17:43:05.734" status="PASS" endtime="20161110 17:43:05.734"></status>
</kw>
<status starttime="20161110 17:43:05.723" status="PASS" endtime="20161110 17:43:05.734"></status>
</kw>
<status starttime="20161110 17:43:05.719" status="PASS" endtime="20161110 17:43:05.735"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>get_directory_listing</tag>
</tags>
<status starttime="20161110 17:43:05.231" critical="yes" status="PASS" endtime="20161110 17:43:05.735"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status starttime="20161110 17:43:04.098" status="PASS" endtime="20161110 17:43:05.735"></status>
</suite>
<status starttime="20161110 17:26:16.959" status="FAIL" endtime="20161110 17:43:05.738"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="1">Critical Tests</stat>
<stat pass="7" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="4" fail="0">CI</stat>
<stat pass="1" fail="0">clear_any_logs</stat>
<stat pass="1" fail="0">Create_error_log_on_single_FRU</stat>
<stat pass="1" fail="0">Delete_error_log</stat>
<stat pass="1" fail="0">get_directory_listing</stat>
<stat pass="1" fail="0">Good_connection_for_testing</stat>
<stat pass="0" fail="1">power_on_test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
<stat pass="1" fail="0">write_a_log</stat>
</tag>
<suite>
<stat name="Tests" pass="7" fail="1" id="s1">Tests</stat>
<stat name="Security" pass="1" fail="0" id="s1-s1">Tests.Security</stat>
<stat name="Test Ssl" pass="1" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat name="Test Association" pass="2" fail="0" id="s1-s2">Tests.Test Association</stat>
<stat name="Test Basic Poweron" pass="0" fail="1" id="s1-s3">Tests.Test Basic Poweron</stat>
<stat name="Test Eventlog" pass="2" fail="0" id="s1-s4">Tests.Test Eventlog</stat>
<stat name="Test Obmcrest" pass="2" fail="0" id="s1-s5">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
