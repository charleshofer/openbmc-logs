<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0 (Python 2.7.12 on linux2)" generated="20161109 21:02:58.215">
<suite name="Tests" source="/tmp/root/12496/obmc-robot/tests" id="s1">
<suite name="Security" source="/tmp/root/12496/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/root/12496/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>https://${OPENBMC_HOST}/</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:02:58.749">Creating Session using : alias=openbmc, url=https://9.3.23.30/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:02:58.750" status="PASS" starttime="20161109 21:02:58.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:58.750">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:02:58.750" status="PASS" starttime="20161109 21:02:58.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:58.751">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:02:58.751" status="PASS" starttime="20161109 21:02:58.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:58.752">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:02:58.752" status="PASS" starttime="20161109 21:02:58.751"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:59.115">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:02:59.116">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:02:59.116" status="PASS" starttime="20161109 21:02:58.752"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:59.688">Get Request using : alias=openbmc, uri=/list, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:02:59.688">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:02:59.688" status="PASS" starttime="20161109 21:02:59.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:02:59.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:02:59.689" status="PASS" starttime="20161109 21:02:59.689"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:59.691">To JSON using : content={
  "data": [
    "/org/openbmc/control", 
    "/org/openbmc/sensors/host/powercap", 
    "/org/openbmc/UserManager/Group", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28", 
    "/org/openbmc/control/power0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25", 
    "/org/openbmc/settings/host0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event", 
    "/org/openbmc/inventory/system/systemevent", 
    "/org/openbmc/sensors/host/cpu0/OccStatus", 
    "/org/openbmc/sensors/host/cpu1/OccStatus", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
    "/org/openbmc/control/checkstop0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7", 
    "/org/openbmc/sensors/tach/fan0L", 
    "/org/openbmc/inventory/system/chassis/sas_expander", 
    "/org/openbmc/sensors/tach/fan0H", 
    "/org/openbmc/watchdog", 
    "/org/openbmc/inventory/system/misc", 
    "/org/openbmc/UserManager/Users", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10", 
    "/org/openbmc/records/events", 
    "/org/openbmc/sensors/tach/fan1H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29", 
    "/org/openbmc/sensors/tach/fan1L", 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4", 
    "/org/openbmc/sensors/speed/fan1", 
    "/org/openbmc/sensors/speed/fan0", 
    "/org/openbmc/sensors/speed/fan3", 
    "/org/openbmc/sensors/speed/fan2", 
    "/org/openbmc/sensors/speed/fan5", 
    "/org/openbmc/sensors/speed/fan4", 
    "/org/openbmc/managers/Download", 
    "/org/openbmc/sensors/HSCA/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14", 
    "/org/openbmc/control/flash/bmc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11", 
    "/org/openbmc/managers/System", 
    "/org/openbmc/control/led/identify", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9", 
    "/org/openbmc/control/bmc0", 
    "/org/openbmc/control/flash/bios", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3", 
    "/org/openbmc/control/fans", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2", 
    "/org/openbmc/watchdog/host0", 
    "/org/openbmc/inventory/system/chassis", 
    "/org/openbmc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1", 
    "/org/openbmc/HostServices", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5", 
    "/org/openbmc/buttons", 
    "/org/openbmc/control/host0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM1", 
    "/org/openbmc/sensors/voltage/P0V97_CPU0", 
    "/org/openbmc/sensors/voltage/P0V97_CPU1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12", 
    "/org/openbmc/inventory", 
    "/org/openbmc/sensors/tach/fan4H", 
    "/org/openbmc/sensors/tach/fan4L", 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock", 
    "/org/openbmc/control/led/heartbeat", 
    "/org/openbmc/control/flash", 
    "/org/openbmc/sensors/HSCB/Iout", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1", 
    "/org/openbmc/buttons/reset0", 
    "/org/openbmc/HostIpmi/1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1", 
    "/org/openbmc/control/led", 
    "/org/openbmc/records/events/226", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0", 
    "/org/openbmc/sensors/host/BootCount", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4", 
    "/org/openbmc/sensors/tach/fan5L", 
    "/org/openbmc/sensors/host/BootProgress", 
    "/org/openbmc/sensors/tach/fan5H", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3", 
    "/org/openbmc/control/chassis0", 
    "/org/openbmc/inventory/system/chassis/hdd_backplane", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7", 
    "/org/openbmc/buttons/power0", 
    "/org/openbmc/UserManager/Groups", 
    "/org/openbmc/sensors/HSCA/Iout", 
    "/org/openbmc/inventory/system", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8", 
    "/org/openbmc/inventory/system/bios", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser", 
    "/org/openbmc/sensors/host/OperatingSystemStatus", 
    "/org/openbmc/sensors/tach/fan2L", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2", 
    "/org/openbmc/control/led/beep", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0", 
    "/org/openbmc/sensors/tach/fan2H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4", 
    "/org/openbmc/inventory/system/chassis/fan4", 
    "/org/openbmc/inventory/system/chassis/fan5", 
    "/org/openbmc/inventory/system/chassis/fan2", 
    "/org/openbmc/inventory/system/chassis/fan3", 
    "/org/openbmc/inventory/system/chassis/fan0", 
    "/org/openbmc/inventory/system/chassis/fan1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15", 
    "/org/openbmc/sensors/temperature/rtc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11", 
    "/org/openbmc/NetworkManager/Interface", 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10", 
    "/org/openbmc/inventory/system/chassis/motherboard/apss", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18", 
    "/org/openbmc/records/events/226/fru", 
    "/org/openbmc/inventory/system/chassis/io_board", 
    "/org/openbmc/UserManager/User", 
    "/org/openbmc/sensors", 
    "/org/openbmc/sensors/temperature/ambient", 
    "/org/openbmc/sensors/HSCB/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1", 
    "/org/openbmc/inventory/system/chassis/motherboard", 
    "/org/openbmc/sensors/tach/fan3L", 
    "/org/openbmc/sensors/tach/fan3H"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:02:59.691">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:02:59.692">${jsondata} = {u'data': [u'/org/openbmc/control', u'/org/openbmc/sensors/host/powercap', u'/org/openbmc/UserManager/Group', u'/org/openbmc/inventory/system/chassis/io_board/pcie_slot2', u'/org/openbmc/inventory/sys...</msg>
<status endtime="20161109 21:02:59.692" status="PASS" starttime="20161109 21:02:59.690"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${jsondata}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:02:59.692">Length is 3</msg>
<status endtime="20161109 21:02:59.693" status="PASS" starttime="20161109 21:02:59.692"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161109 21:02:59.697" status="PASS" starttime="20161109 21:02:59.694"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:02:59.698">Created directory '&lt;a href="file:///tmp/root/12496/obmc-robot/logs"&gt;/tmp/root/12496/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20161109 21:02:59.698" status="PASS" starttime="20161109 21:02:59.698"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:02:59.700">File '/tmp/root/12496/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20161109 21:02:59.700" status="FAIL" starttime="20161109 21:02:59.699"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:02:59.700">${exist} = False</msg>
<status endtime="20161109 21:02:59.700" status="PASS" starttime="20161109 21:02:59.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:02:59.704">Created file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:02:59.704" status="PASS" starttime="20161109 21:02:59.703"></status>
</kw>
<status endtime="20161109 21:02:59.704" status="PASS" starttime="20161109 21:02:59.700"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:59.705">${cur_time} = 2016-11-09 21:02:59:704603</msg>
<status endtime="20161109 21:02:59.705" status="PASS" starttime="20161109 21:02:59.704"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:59.705">${cur_time} = 20161109210259704603</msg>
<status endtime="20161109 21:02:59.705" status="PASS" starttime="20161109 21:02:59.705"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:02:59.705">${cur_time} = 20161109210259704603</msg>
<status endtime="20161109 21:02:59.706" status="PASS" starttime="20161109 21:02:59.704"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:02:59.706">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:02:59.706" status="PASS" starttime="20161109 21:02:59.706"></status>
</kw>
<status endtime="20161109 21:02:59.706" status="PASS" starttime="20161109 21:02:59.698"></status>
</kw>
<status endtime="20161109 21:02:59.707" status="PASS" starttime="20161109 21:02:59.693"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20161109 21:02:59.707" critical="yes" status="PASS" starttime="20161109 21:02:58.748"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161109 21:02:59.708">Delete All Sessions</msg>
<status endtime="20161109 21:02:59.708" status="PASS" starttime="20161109 21:02:59.708"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20161109 21:02:59.708" status="PASS" starttime="20161109 21:02:58.241"></status>
</suite>
<status endtime="20161109 21:02:59.710" status="PASS" starttime="20161109 21:02:58.239"></status>
</suite>
<suite name="Test Association" source="/tmp/root/12496/obmc-robot/tests/test_association.robot" id="s1-s2">
<kw name="Suite Initialization Setup" type="setup">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:02:59.735">Dictionary does not contain key 'host'.</msg>
<status endtime="20161109 21:02:59.735" status="FAIL" starttime="20161109 21:02:59.735"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:02:59.736">${has_host} = False</msg>
<status endtime="20161109 21:02:59.736" status="PASS" starttime="20161109 21:02:59.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161109 21:02:59.739" status="PASS" starttime="20161109 21:02:59.738"></status>
</kw>
<status endtime="20161109 21:02:59.739" status="PASS" starttime="20161109 21:02:59.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:59.742">${port_num} = 22</msg>
<status endtime="20161109 21:02:59.742" status="PASS" starttime="20161109 21:02:59.742"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:59.743">${SSH_PORT} = 22</msg>
<status endtime="20161109 21:02:59.743" status="PASS" starttime="20161109 21:02:59.743"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:02:59.743">${https_num} = 443</msg>
<status endtime="20161109 21:02:59.744" status="PASS" starttime="20161109 21:02:59.743"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:02:59.744">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161109 21:02:59.744" status="PASS" starttime="20161109 21:02:59.744"></status>
</kw>
<status endtime="20161109 21:02:59.744" status="PASS" starttime="20161109 21:02:59.742"></status>
</kw>
<status endtime="20161109 21:02:59.744" status="PASS" starttime="20161109 21:02:59.739"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:02:59.745">Dictionary does not contain key 'port'.</msg>
<status endtime="20161109 21:02:59.745" status="FAIL" starttime="20161109 21:02:59.745"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:02:59.745">${has_port} = False</msg>
<status endtime="20161109 21:02:59.745" status="PASS" starttime="20161109 21:02:59.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161109 21:02:59.751" status="PASS" starttime="20161109 21:02:59.750"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161109 21:02:59.751" status="PASS" starttime="20161109 21:02:59.751"></status>
</kw>
<status endtime="20161109 21:02:59.751" status="PASS" starttime="20161109 21:02:59.749"></status>
</kw>
<status endtime="20161109 21:02:59.751" status="PASS" starttime="20161109 21:02:59.745"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:02:59.752">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 21:03:02.188">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161109 21:03:02.188" status="PASS" starttime="20161109 21:02:59.752"></status>
</kw>
<status endtime="20161109 21:03:02.189" status="PASS" starttime="20161109 21:02:59.734"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:02.191">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161109 21:03:02.191" status="PASS" starttime="20161109 21:03:02.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:02.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:02.192" status="PASS" starttime="20161109 21:03:02.192"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:02.193" status="PASS" starttime="20161109 21:03:02.193"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:02.195">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:02.195" status="PASS" starttime="20161109 21:03:02.194"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:02.196">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:02.197" status="PASS" starttime="20161109 21:03:02.196"></status>
</kw>
<status endtime="20161109 21:03:02.197" status="PASS" starttime="20161109 21:03:02.195"></status>
</kw>
<status endtime="20161109 21:03:02.197" status="PASS" starttime="20161109 21:03:02.193"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:02.198">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:02.199" status="PASS" starttime="20161109 21:03:02.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:02.199">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:02.200" status="PASS" starttime="20161109 21:03:02.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:02.200">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:02.200" status="PASS" starttime="20161109 21:03:02.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:02.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:02.201" status="PASS" starttime="20161109 21:03:02.201"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:02.691">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:02.691">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:02.691" status="PASS" starttime="20161109 21:03:02.202"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:02.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:02.692" status="PASS" starttime="20161109 21:03:02.691"></status>
</kw>
<status endtime="20161109 21:03:02.692" status="PASS" starttime="20161109 21:03:02.197"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.101">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:03.101">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:03.101" status="PASS" starttime="20161109 21:03:02.693"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.103">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:03.103" status="PASS" starttime="20161109 21:03:03.102"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:03.105">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:03.105" status="PASS" starttime="20161109 21:03:03.104"></status>
</kw>
<status endtime="20161109 21:03:03.105" status="PASS" starttime="20161109 21:03:03.104"></status>
</kw>
<status endtime="20161109 21:03:03.105" status="PASS" starttime="20161109 21:03:03.102"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:03.105">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:03.106" status="PASS" starttime="20161109 21:03:02.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:03.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:03.106" status="PASS" starttime="20161109 21:03:03.106"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.108">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161109 21:03:03.108" status="PASS" starttime="20161109 21:03:03.107"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.110">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161109 21:03:03.110" status="PASS" starttime="20161109 21:03:03.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:03.112">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161109 21:03:03.112" status="PASS" starttime="20161109 21:03:03.111"></status>
</kw>
<status endtime="20161109 21:03:03.112" status="PASS" starttime="20161109 21:03:03.111"></status>
</kw>
<status endtime="20161109 21:03:03.112" status="PASS" starttime="20161109 21:03:03.108"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:03.114">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:03.114" status="PASS" starttime="20161109 21:03:03.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.115">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:03.115" status="PASS" starttime="20161109 21:03:03.114"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.115">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:03.115" status="PASS" starttime="20161109 21:03:03.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.116">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:03.116" status="PASS" starttime="20161109 21:03:03.116"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.590">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:03.590">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:03.590" status="PASS" starttime="20161109 21:03:03.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:03.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:03.591" status="PASS" starttime="20161109 21:03:03.591"></status>
</kw>
<status endtime="20161109 21:03:03.591" status="PASS" starttime="20161109 21:03:03.112"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.655">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:03:03.655">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:03.655" status="PASS" starttime="20161109 21:03:03.592"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.656">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:03.657" status="PASS" starttime="20161109 21:03:03.656"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:03.658">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:03.658" status="PASS" starttime="20161109 21:03:03.657"></status>
</kw>
<status endtime="20161109 21:03:03.658" status="PASS" starttime="20161109 21:03:03.657"></status>
</kw>
<status endtime="20161109 21:03:03.658" status="PASS" starttime="20161109 21:03:03.655"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:03.661">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:03.661" status="PASS" starttime="20161109 21:03:03.107"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.662">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:03.662">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:03.662">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:03.662" status="PASS" starttime="20161109 21:03:03.661"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:03.663">Length is 0</msg>
<status endtime="20161109 21:03:03.663" status="PASS" starttime="20161109 21:03:03.663"></status>
</kw>
<status endtime="20161109 21:03:03.663" status="PASS" starttime="20161109 21:03:02.189"></status>
</kw>
<status endtime="20161109 21:03:03.663" status="PASS" starttime="20161109 21:03:02.189"></status>
</kw>
<status endtime="20161109 21:03:03.664" status="PASS" starttime="20161109 21:02:59.734"></status>
</kw>
<test name="Create error log on single FRU" id="s1-s2-t1">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.667">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161109 21:03:03.667" status="PASS" starttime="20161109 21:03:03.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.668">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:03.668" status="PASS" starttime="20161109 21:03:03.667"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:03.669" status="PASS" starttime="20161109 21:03:03.668"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.671">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:03.671" status="PASS" starttime="20161109 21:03:03.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:03.672">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:03.673" status="PASS" starttime="20161109 21:03:03.672"></status>
</kw>
<status endtime="20161109 21:03:03.673" status="PASS" starttime="20161109 21:03:03.671"></status>
</kw>
<status endtime="20161109 21:03:03.673" status="PASS" starttime="20161109 21:03:03.669"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:03.674">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:03.674" status="PASS" starttime="20161109 21:03:03.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.675">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:03.675" status="PASS" starttime="20161109 21:03:03.675"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.676">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:03.676" status="PASS" starttime="20161109 21:03:03.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:03.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:03.676" status="PASS" starttime="20161109 21:03:03.676"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.017">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:04.017">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:04.017" status="PASS" starttime="20161109 21:03:03.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:04.018" status="PASS" starttime="20161109 21:03:04.017"></status>
</kw>
<status endtime="20161109 21:03:04.018" status="PASS" starttime="20161109 21:03:03.673"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.242">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:04.242">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:04.242" status="PASS" starttime="20161109 21:03:04.018"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.244">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:04.244" status="PASS" starttime="20161109 21:03:04.243"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.245">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:04.245" status="PASS" starttime="20161109 21:03:04.245"></status>
</kw>
<status endtime="20161109 21:03:04.245" status="PASS" starttime="20161109 21:03:04.244"></status>
</kw>
<status endtime="20161109 21:03:04.245" status="PASS" starttime="20161109 21:03:04.242"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:04.246">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:04.246" status="PASS" starttime="20161109 21:03:03.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:04.247" status="PASS" starttime="20161109 21:03:04.246"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.248">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161109 21:03:04.248" status="PASS" starttime="20161109 21:03:04.247"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.250">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161109 21:03:04.250" status="PASS" starttime="20161109 21:03:04.249"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.251">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161109 21:03:04.251" status="PASS" starttime="20161109 21:03:04.251"></status>
</kw>
<status endtime="20161109 21:03:04.252" status="PASS" starttime="20161109 21:03:04.250"></status>
</kw>
<status endtime="20161109 21:03:04.252" status="PASS" starttime="20161109 21:03:04.248"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.253">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:04.253" status="PASS" starttime="20161109 21:03:04.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.254">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:04.254" status="PASS" starttime="20161109 21:03:04.254"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.255">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:04.255" status="PASS" starttime="20161109 21:03:04.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.255">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:04.255" status="PASS" starttime="20161109 21:03:04.255"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.605">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:04.605">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:04.605" status="PASS" starttime="20161109 21:03:04.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:04.606" status="PASS" starttime="20161109 21:03:04.605"></status>
</kw>
<status endtime="20161109 21:03:04.606" status="PASS" starttime="20161109 21:03:04.252"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.663">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:03:04.663">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:04.663" status="PASS" starttime="20161109 21:03:04.606"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.664">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:04.664" status="PASS" starttime="20161109 21:03:04.664"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.665">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:04.665" status="PASS" starttime="20161109 21:03:04.665"></status>
</kw>
<status endtime="20161109 21:03:04.665" status="PASS" starttime="20161109 21:03:04.664"></status>
</kw>
<status endtime="20161109 21:03:04.665" status="PASS" starttime="20161109 21:03:04.663"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:04.666">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:04.666" status="PASS" starttime="20161109 21:03:04.247"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.666">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:04.666">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:04.666">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:04.666" status="PASS" starttime="20161109 21:03:04.666"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.667">Length is 0</msg>
<status endtime="20161109 21:03:04.667" status="PASS" starttime="20161109 21:03:04.666"></status>
</kw>
<status endtime="20161109 21:03:04.667" status="PASS" starttime="20161109 21:03:03.665"></status>
</kw>
<status endtime="20161109 21:03:04.667" status="PASS" starttime="20161109 21:03:03.665"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.667">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161109 21:03:04.826">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:03:04.826">${elog} = q 227</msg>
<msg level="INFO" timestamp="20161109 21:03:04.827">${stderr} = </msg>
<status endtime="20161109 21:03:04.827" status="PASS" starttime="20161109 21:03:04.667"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.827">Length is 0</msg>
<status endtime="20161109 21:03:04.827" status="PASS" starttime="20161109 21:03:04.827"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.829">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161109 21:03:04.829" status="PASS" starttime="20161109 21:03:04.828"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.830">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161109 21:03:04.830" status="PASS" starttime="20161109 21:03:04.829"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.831">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161109 21:03:04.831" status="PASS" starttime="20161109 21:03:04.830"></status>
</kw>
<status endtime="20161109 21:03:04.831" status="PASS" starttime="20161109 21:03:04.830"></status>
</kw>
<status endtime="20161109 21:03:04.831" status="PASS" starttime="20161109 21:03:04.829"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:04.832">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:04.832" status="PASS" starttime="20161109 21:03:04.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.833">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:04.833" status="PASS" starttime="20161109 21:03:04.832"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.833">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:04.833" status="PASS" starttime="20161109 21:03:04.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:04.834">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:04.834" status="PASS" starttime="20161109 21:03:04.833"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.223">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:05.223">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:05.223" status="PASS" starttime="20161109 21:03:04.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:05.224">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:05.224" status="PASS" starttime="20161109 21:03:05.224"></status>
</kw>
<status endtime="20161109 21:03:05.224" status="PASS" starttime="20161109 21:03:04.831"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.321">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:03:05.322">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:05.322" status="PASS" starttime="20161109 21:03:05.225"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.324">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:05.324" status="PASS" starttime="20161109 21:03:05.323"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:05.326">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:05.326" status="PASS" starttime="20161109 21:03:05.326"></status>
</kw>
<status endtime="20161109 21:03:05.327" status="PASS" starttime="20161109 21:03:05.325"></status>
</kw>
<status endtime="20161109 21:03:05.327" status="PASS" starttime="20161109 21:03:05.322"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:05.327">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:05.327" status="PASS" starttime="20161109 21:03:04.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:05.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:05.329" status="PASS" starttime="20161109 21:03:05.328"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.330">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:05.330">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:05.330">${jsondata} = {u'data': [u'/org/openbmc/records/events/227'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:05.330" status="PASS" starttime="20161109 21:03:05.329"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:05.331">${log_list} = [u'/org/openbmc/records/events/227']</msg>
<status endtime="20161109 21:03:05.331" status="PASS" starttime="20161109 21:03:04.827"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status endtime="20161109 21:03:05.332" status="PASS" starttime="20161109 21:03:05.331"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.333">${association_uri} = /org/openbmc/records/events/227/fru</msg>
<status endtime="20161109 21:03:05.334" status="PASS" starttime="20161109 21:03:05.332"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.336">${base_uri} = /org/openbmc/records/events/227/fru/attr/endpoints</msg>
<status endtime="20161109 21:03:05.336" status="PASS" starttime="20161109 21:03:05.335"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.337">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/227/fru/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161109 21:03:05.337" status="PASS" starttime="20161109 21:03:05.337"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:05.338">URI:https://9.3.23.30:443/org/openbmc/records/events/227/fru/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161109 21:03:05.339" status="PASS" starttime="20161109 21:03:05.338"></status>
</kw>
<status endtime="20161109 21:03:05.339" status="PASS" starttime="20161109 21:03:05.338"></status>
</kw>
<status endtime="20161109 21:03:05.339" status="PASS" starttime="20161109 21:03:05.336"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:05.340">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:05.340" status="PASS" starttime="20161109 21:03:05.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.340">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:05.340" status="PASS" starttime="20161109 21:03:05.340"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.341">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:05.341" status="PASS" starttime="20161109 21:03:05.341"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.341">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:05.341" status="PASS" starttime="20161109 21:03:05.341"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.760">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:05.761">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:05.761" status="PASS" starttime="20161109 21:03:05.342"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:05.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:05.762" status="PASS" starttime="20161109 21:03:05.761"></status>
</kw>
<status endtime="20161109 21:03:05.762" status="PASS" starttime="20161109 21:03:05.339"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.847">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/227/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:03:05.847">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:05.847" status="PASS" starttime="20161109 21:03:05.762"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.848">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:05.848" status="PASS" starttime="20161109 21:03:05.848"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:05.849">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:05.849" status="PASS" starttime="20161109 21:03:05.849"></status>
</kw>
<status endtime="20161109 21:03:05.849" status="PASS" starttime="20161109 21:03:05.848"></status>
</kw>
<status endtime="20161109 21:03:05.849" status="PASS" starttime="20161109 21:03:05.847"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:05.850">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:05.850" status="PASS" starttime="20161109 21:03:05.334"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.850">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:05.850">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:05.850">${content} = {u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:05.850" status="PASS" starttime="20161109 21:03:05.850"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:05.851">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status endtime="20161109 21:03:05.851" status="PASS" starttime="20161109 21:03:05.334"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status endtime="20161109 21:03:05.851" status="PASS" starttime="20161109 21:03:05.851"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.852">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status endtime="20161109 21:03:05.852" status="PASS" starttime="20161109 21:03:05.852"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.854">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161109 21:03:05.854" status="PASS" starttime="20161109 21:03:05.853"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:05.855">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161109 21:03:05.855" status="PASS" starttime="20161109 21:03:05.854"></status>
</kw>
<status endtime="20161109 21:03:05.855" status="PASS" starttime="20161109 21:03:05.854"></status>
</kw>
<status endtime="20161109 21:03:05.855" status="PASS" starttime="20161109 21:03:05.853"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:05.856">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:05.856" status="PASS" starttime="20161109 21:03:05.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.856">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:05.856" status="PASS" starttime="20161109 21:03:05.856"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.857">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:05.857" status="PASS" starttime="20161109 21:03:05.857"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:05.858">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:05.858" status="PASS" starttime="20161109 21:03:05.857"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.201">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:06.201">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:06.201" status="PASS" starttime="20161109 21:03:05.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:06.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:06.202" status="PASS" starttime="20161109 21:03:06.201"></status>
</kw>
<status endtime="20161109 21:03:06.202" status="PASS" starttime="20161109 21:03:05.855"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.291">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:03:06.291">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:06.291" status="PASS" starttime="20161109 21:03:06.202"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.293">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:06.293" status="PASS" starttime="20161109 21:03:06.292"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:06.294">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:06.295" status="PASS" starttime="20161109 21:03:06.294"></status>
</kw>
<status endtime="20161109 21:03:06.295" status="PASS" starttime="20161109 21:03:06.293"></status>
</kw>
<status endtime="20161109 21:03:06.295" status="PASS" starttime="20161109 21:03:06.292"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:06.295">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:06.295" status="PASS" starttime="20161109 21:03:05.852"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.296">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/227"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:06.296">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:06.296">${content} = {u'data': [u'/org/openbmc/records/events/227'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:06.296" status="PASS" starttime="20161109 21:03:06.295"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:06.296">${dimm1_event} = [u'/org/openbmc/records/events/227']</msg>
<status endtime="20161109 21:03:06.296" status="PASS" starttime="20161109 21:03:05.851"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status endtime="20161109 21:03:06.297" status="PASS" starttime="20161109 21:03:06.296"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161109 21:03:06.301" status="PASS" starttime="20161109 21:03:06.298"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:03:06.302">Directory '&lt;a href="file:///tmp/root/12496/obmc-robot/logs"&gt;/tmp/root/12496/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161109 21:03:06.303" status="PASS" starttime="20161109 21:03:06.302"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:03:06.304">File '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161109 21:03:06.304" status="PASS" starttime="20161109 21:03:06.303"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:06.304">${exist} = True</msg>
<status endtime="20161109 21:03:06.304" status="PASS" starttime="20161109 21:03:06.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161109 21:03:06.307" status="PASS" starttime="20161109 21:03:06.304"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.307">${cur_time} = 2016-11-09 21:03:06:307210</msg>
<status endtime="20161109 21:03:06.308" status="PASS" starttime="20161109 21:03:06.307"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.308">${cur_time} = 20161109210306307210</msg>
<status endtime="20161109 21:03:06.308" status="PASS" starttime="20161109 21:03:06.308"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:06.308">${cur_time} = 20161109210306307210</msg>
<status endtime="20161109 21:03:06.308" status="PASS" starttime="20161109 21:03:06.307"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:03:06.309">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:03:06.309" status="PASS" starttime="20161109 21:03:06.309"></status>
</kw>
<status endtime="20161109 21:03:06.309" status="PASS" starttime="20161109 21:03:06.301"></status>
</kw>
<status endtime="20161109 21:03:06.309" status="PASS" starttime="20161109 21:03:06.297"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status endtime="20161109 21:03:06.309" critical="yes" status="PASS" starttime="20161109 21:03:03.664"></status>
</test>
<test name="Delete error log" id="s1-s2-t2">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.311">${data} = {u'data': []}</msg>
<status endtime="20161109 21:03:06.311" status="PASS" starttime="20161109 21:03:06.311"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.312">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161109 21:03:06.312" status="PASS" starttime="20161109 21:03:06.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.312">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:06.312" status="PASS" starttime="20161109 21:03:06.312"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:06.313" status="PASS" starttime="20161109 21:03:06.313"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.314">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:06.314" status="PASS" starttime="20161109 21:03:06.314"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:06.315">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:06.315" status="PASS" starttime="20161109 21:03:06.315"></status>
</kw>
<status endtime="20161109 21:03:06.315" status="PASS" starttime="20161109 21:03:06.314"></status>
</kw>
<status endtime="20161109 21:03:06.315" status="PASS" starttime="20161109 21:03:06.313"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:06.316">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:06.316" status="PASS" starttime="20161109 21:03:06.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:06.317" status="PASS" starttime="20161109 21:03:06.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.318">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:06.318" status="PASS" starttime="20161109 21:03:06.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.318">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:06.318" status="PASS" starttime="20161109 21:03:06.318"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.659">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:06.659">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:06.659" status="PASS" starttime="20161109 21:03:06.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:06.660">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:06.660" status="PASS" starttime="20161109 21:03:06.659"></status>
</kw>
<status endtime="20161109 21:03:06.660" status="PASS" starttime="20161109 21:03:06.315"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.960">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:06.960">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:06.960" status="PASS" starttime="20161109 21:03:06.660"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.961">${msg} = Response code:200, Content:{
  "data": 228, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:06.961" status="PASS" starttime="20161109 21:03:06.961"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:06.962">Response code:200, Content:{
  "data": 228, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:06.962" status="PASS" starttime="20161109 21:03:06.962"></status>
</kw>
<status endtime="20161109 21:03:06.962" status="PASS" starttime="20161109 21:03:06.962"></status>
</kw>
<status endtime="20161109 21:03:06.963" status="PASS" starttime="20161109 21:03:06.960"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:06.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:06.963" status="PASS" starttime="20161109 21:03:06.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:06.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:06.963" status="PASS" starttime="20161109 21:03:06.963"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.964">To JSON using : content={
  "data": 228, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:06.964">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:06.964">${json} = {u'data': 228, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:06.964" status="PASS" starttime="20161109 21:03:06.963"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.964">${LOGID} = 228</msg>
<status endtime="20161109 21:03:06.965" status="PASS" starttime="20161109 21:03:06.964"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.965">${uri} = /org/openbmc/records/events/228</msg>
<status endtime="20161109 21:03:06.965" status="PASS" starttime="20161109 21:03:06.965"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:06.965">${log_uri1} = /org/openbmc/records/events/228</msg>
<status endtime="20161109 21:03:06.965" status="PASS" starttime="20161109 21:03:06.310"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.966">${association_uri1} = /org/openbmc/records/events/228/fru</msg>
<status endtime="20161109 21:03:06.966" status="PASS" starttime="20161109 21:03:06.965"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.966">${data} = {u'data': []}</msg>
<status endtime="20161109 21:03:06.966" status="PASS" starttime="20161109 21:03:06.966"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.967">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161109 21:03:06.967" status="PASS" starttime="20161109 21:03:06.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:06.968" status="PASS" starttime="20161109 21:03:06.968"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:06.968" status="PASS" starttime="20161109 21:03:06.968"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.970">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:06.970" status="PASS" starttime="20161109 21:03:06.969"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:06.970">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:06.971" status="PASS" starttime="20161109 21:03:06.970"></status>
</kw>
<status endtime="20161109 21:03:06.971" status="PASS" starttime="20161109 21:03:06.970"></status>
</kw>
<status endtime="20161109 21:03:06.971" status="PASS" starttime="20161109 21:03:06.968"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:06.972">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:06.972" status="PASS" starttime="20161109 21:03:06.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.973">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:06.973" status="PASS" starttime="20161109 21:03:06.972"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.973">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:06.973" status="PASS" starttime="20161109 21:03:06.973"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:06.974">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:06.974" status="PASS" starttime="20161109 21:03:06.973"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.432">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:07.432">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:07.432" status="PASS" starttime="20161109 21:03:06.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:07.433">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:07.434" status="PASS" starttime="20161109 21:03:07.433"></status>
</kw>
<status endtime="20161109 21:03:07.434" status="PASS" starttime="20161109 21:03:06.971"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.955">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:07.955">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:07.955" status="PASS" starttime="20161109 21:03:07.434"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.957">${msg} = Response code:200, Content:{
  "data": 229, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:07.957" status="PASS" starttime="20161109 21:03:07.956"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:07.958">Response code:200, Content:{
  "data": 229, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:07.958" status="PASS" starttime="20161109 21:03:07.958"></status>
</kw>
<status endtime="20161109 21:03:07.959" status="PASS" starttime="20161109 21:03:07.957"></status>
</kw>
<status endtime="20161109 21:03:07.959" status="PASS" starttime="20161109 21:03:07.956"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:07.959">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:07.959" status="PASS" starttime="20161109 21:03:06.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:07.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:07.960" status="PASS" starttime="20161109 21:03:07.959"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.961">To JSON using : content={
  "data": 229, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:07.961">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:07.961">${json} = {u'data': 229, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:07.961" status="PASS" starttime="20161109 21:03:07.960"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.962">${LOGID} = 229</msg>
<status endtime="20161109 21:03:07.962" status="PASS" starttime="20161109 21:03:07.961"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.963">${uri} = /org/openbmc/records/events/229</msg>
<status endtime="20161109 21:03:07.963" status="PASS" starttime="20161109 21:03:07.962"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:07.963">${log_uri2} = /org/openbmc/records/events/229</msg>
<status endtime="20161109 21:03:07.963" status="PASS" starttime="20161109 21:03:06.966"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.964">${del_uri} = /org/openbmc/records/events/228/action/delete</msg>
<status endtime="20161109 21:03:07.964" status="PASS" starttime="20161109 21:03:07.963"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.965">${base_uri} = /org/openbmc/records/events/228/action/delete</msg>
<status endtime="20161109 21:03:07.965" status="PASS" starttime="20161109 21:03:07.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.966">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:07.966" status="PASS" starttime="20161109 21:03:07.966"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:07.967" status="PASS" starttime="20161109 21:03:07.967"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.969">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/228/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:07.969" status="PASS" starttime="20161109 21:03:07.968"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:07.971">URI:https://9.3.23.30:443/org/openbmc/records/events/228/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:07.971" status="PASS" starttime="20161109 21:03:07.970"></status>
</kw>
<status endtime="20161109 21:03:07.971" status="PASS" starttime="20161109 21:03:07.969"></status>
</kw>
<status endtime="20161109 21:03:07.971" status="PASS" starttime="20161109 21:03:07.967"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:07.973">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:07.973" status="PASS" starttime="20161109 21:03:07.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:07.974" status="PASS" starttime="20161109 21:03:07.973"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.974">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:07.974" status="PASS" starttime="20161109 21:03:07.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:07.975">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:07.975" status="PASS" starttime="20161109 21:03:07.975"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:08.514">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:08.515">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:08.515" status="PASS" starttime="20161109 21:03:07.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:08.516">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:08.516" status="PASS" starttime="20161109 21:03:08.515"></status>
</kw>
<status endtime="20161109 21:03:08.516" status="PASS" starttime="20161109 21:03:07.972"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:08.735">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/228/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:08.735">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:08.735" status="PASS" starttime="20161109 21:03:08.516"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:08.737">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:08.737" status="PASS" starttime="20161109 21:03:08.736"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:08.738">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:08.738" status="PASS" starttime="20161109 21:03:08.738"></status>
</kw>
<status endtime="20161109 21:03:08.739" status="PASS" starttime="20161109 21:03:08.737"></status>
</kw>
<status endtime="20161109 21:03:08.739" status="PASS" starttime="20161109 21:03:08.735"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:08.739">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:08.739" status="PASS" starttime="20161109 21:03:07.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:08.740">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:08.740" status="PASS" starttime="20161109 21:03:08.740"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:08.742">${base_uri} = /org/openbmc/records/events/228/fru</msg>
<status endtime="20161109 21:03:08.742" status="PASS" starttime="20161109 21:03:08.741"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:08.746">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/228/fru, method:Get, args:{}</msg>
<status endtime="20161109 21:03:08.747" status="PASS" starttime="20161109 21:03:08.743"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:08.748">URI:https://9.3.23.30:443/org/openbmc/records/events/228/fru, method:Get, args:{}</msg>
<status endtime="20161109 21:03:08.749" status="PASS" starttime="20161109 21:03:08.748"></status>
</kw>
<status endtime="20161109 21:03:08.749" status="PASS" starttime="20161109 21:03:08.747"></status>
</kw>
<status endtime="20161109 21:03:08.749" status="PASS" starttime="20161109 21:03:08.742"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:08.750">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:08.751" status="PASS" starttime="20161109 21:03:08.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:08.752">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:08.752" status="PASS" starttime="20161109 21:03:08.751"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:08.752">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:08.753" status="PASS" starttime="20161109 21:03:08.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:08.753">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:08.753" status="PASS" starttime="20161109 21:03:08.753"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.168">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:09.168">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:09.168" status="PASS" starttime="20161109 21:03:08.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:09.169">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:09.169" status="PASS" starttime="20161109 21:03:09.168"></status>
</kw>
<status endtime="20161109 21:03:09.169" status="PASS" starttime="20161109 21:03:08.749"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.225">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/228/fru, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:03:09.225">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20161109 21:03:09.226" status="PASS" starttime="20161109 21:03:09.169"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.227">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/228/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status endtime="20161109 21:03:09.228" status="PASS" starttime="20161109 21:03:09.226"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:09.229">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/228/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status endtime="20161109 21:03:09.229" status="PASS" starttime="20161109 21:03:09.228"></status>
</kw>
<status endtime="20161109 21:03:09.229" status="PASS" starttime="20161109 21:03:09.228"></status>
</kw>
<status endtime="20161109 21:03:09.229" status="PASS" starttime="20161109 21:03:09.226"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:09.230">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20161109 21:03:09.230" status="PASS" starttime="20161109 21:03:08.740"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.230">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/228/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:09.231">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:09.231">${jsondata} = {u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/228/fru'}, u'message': u'404 Not Found', u'status': u'error'}</msg>
<status endtime="20161109 21:03:09.231" status="PASS" starttime="20161109 21:03:09.230"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status endtime="20161109 21:03:09.232" status="PASS" starttime="20161109 21:03:09.231"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.234">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status endtime="20161109 21:03:09.234" status="PASS" starttime="20161109 21:03:09.234"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.236">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161109 21:03:09.236" status="PASS" starttime="20161109 21:03:09.235"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:09.236">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161109 21:03:09.237" status="PASS" starttime="20161109 21:03:09.236"></status>
</kw>
<status endtime="20161109 21:03:09.237" status="PASS" starttime="20161109 21:03:09.236"></status>
</kw>
<status endtime="20161109 21:03:09.237" status="PASS" starttime="20161109 21:03:09.234"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:09.238">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:09.238" status="PASS" starttime="20161109 21:03:09.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.238">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:09.238" status="PASS" starttime="20161109 21:03:09.238"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.239">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:09.239" status="PASS" starttime="20161109 21:03:09.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.240">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:09.240" status="PASS" starttime="20161109 21:03:09.239"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.571">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:09.572">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:09.572" status="PASS" starttime="20161109 21:03:09.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:09.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:09.572" status="PASS" starttime="20161109 21:03:09.572"></status>
</kw>
<status endtime="20161109 21:03:09.572" status="PASS" starttime="20161109 21:03:09.237"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.651">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:03:09.651">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:09.651" status="PASS" starttime="20161109 21:03:09.573"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.652">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:09.652" status="PASS" starttime="20161109 21:03:09.651"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:09.653">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:09.653" status="PASS" starttime="20161109 21:03:09.653"></status>
</kw>
<status endtime="20161109 21:03:09.653" status="PASS" starttime="20161109 21:03:09.652"></status>
</kw>
<status endtime="20161109 21:03:09.653" status="PASS" starttime="20161109 21:03:09.651"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:09.653">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:09.653" status="PASS" starttime="20161109 21:03:09.233"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.654">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:09.654">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:09.654">${content} = {u'data': [u'/org/openbmc/records/events/229'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:09.654" status="PASS" starttime="20161109 21:03:09.653"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:09.654">${dimm3_event} = [u'/org/openbmc/records/events/229']</msg>
<status endtime="20161109 21:03:09.654" status="PASS" starttime="20161109 21:03:09.232"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status endtime="20161109 21:03:09.655" status="PASS" starttime="20161109 21:03:09.654"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.656">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status endtime="20161109 21:03:09.656" status="PASS" starttime="20161109 21:03:09.656"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.658">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161109 21:03:09.658" status="PASS" starttime="20161109 21:03:09.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:09.658">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161109 21:03:09.658" status="PASS" starttime="20161109 21:03:09.658"></status>
</kw>
<status endtime="20161109 21:03:09.659" status="PASS" starttime="20161109 21:03:09.658"></status>
</kw>
<status endtime="20161109 21:03:09.659" status="PASS" starttime="20161109 21:03:09.656"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:09.659">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:09.660" status="PASS" starttime="20161109 21:03:09.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.660">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:09.660" status="PASS" starttime="20161109 21:03:09.660"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.661">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:09.661" status="PASS" starttime="20161109 21:03:09.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.661">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:09.661" status="PASS" starttime="20161109 21:03:09.661"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:09.995">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:09.995">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:09.995" status="PASS" starttime="20161109 21:03:09.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:09.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:09.996" status="PASS" starttime="20161109 21:03:09.995"></status>
</kw>
<status endtime="20161109 21:03:09.996" status="PASS" starttime="20161109 21:03:09.659"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:10.074">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:03:10.074">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:10.074" status="PASS" starttime="20161109 21:03:09.996"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:10.075">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:10.075" status="PASS" starttime="20161109 21:03:10.075"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:10.076">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:10.076" status="PASS" starttime="20161109 21:03:10.076"></status>
</kw>
<status endtime="20161109 21:03:10.077" status="PASS" starttime="20161109 21:03:10.075"></status>
</kw>
<status endtime="20161109 21:03:10.077" status="PASS" starttime="20161109 21:03:10.074"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:10.077">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:10.077" status="PASS" starttime="20161109 21:03:09.655"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:10.077">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/229"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:10.077">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:10.077">${content} = {u'data': [u'/org/openbmc/records/events/229'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:10.077" status="PASS" starttime="20161109 21:03:10.077"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:10.078">${dimm2_event} = [u'/org/openbmc/records/events/229']</msg>
<status endtime="20161109 21:03:10.078" status="PASS" starttime="20161109 21:03:09.655"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status endtime="20161109 21:03:10.078" status="PASS" starttime="20161109 21:03:10.078"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161109 21:03:10.081" status="PASS" starttime="20161109 21:03:10.079"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:03:10.082">Directory '&lt;a href="file:///tmp/root/12496/obmc-robot/logs"&gt;/tmp/root/12496/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161109 21:03:10.082" status="PASS" starttime="20161109 21:03:10.082"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:03:10.083">File '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161109 21:03:10.083" status="PASS" starttime="20161109 21:03:10.083"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:10.083">${exist} = True</msg>
<status endtime="20161109 21:03:10.083" status="PASS" starttime="20161109 21:03:10.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161109 21:03:10.086" status="PASS" starttime="20161109 21:03:10.083"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:10.087">${cur_time} = 2016-11-09 21:03:10:087152</msg>
<status endtime="20161109 21:03:10.087" status="PASS" starttime="20161109 21:03:10.087"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:10.088">${cur_time} = 20161109210310087152</msg>
<status endtime="20161109 21:03:10.088" status="PASS" starttime="20161109 21:03:10.088"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:10.088">${cur_time} = 20161109210310087152</msg>
<status endtime="20161109 21:03:10.088" status="PASS" starttime="20161109 21:03:10.087"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:03:10.089">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:03:10.089" status="PASS" starttime="20161109 21:03:10.088"></status>
</kw>
<status endtime="20161109 21:03:10.089" status="PASS" starttime="20161109 21:03:10.082"></status>
</kw>
<status endtime="20161109 21:03:10.089" status="PASS" starttime="20161109 21:03:10.078"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status endtime="20161109 21:03:10.089" critical="yes" status="PASS" starttime="20161109 21:03:06.310"></status>
</test>
<kw name="Close All Connections" library="SSHLibrary" type="teardown">
<doc>Closes all open connections.</doc>
<status endtime="20161109 21:03:10.098" status="PASS" starttime="20161109 21:03:10.091"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status endtime="20161109 21:03:10.098" status="PASS" starttime="20161109 21:02:59.711"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/root/12496/obmc-robot/tests/test_basic_poweron.robot" id="s1-s3">
<test name="power on test" id="s1-s3-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:03:10.131">Dictionary does not contain key 'host'.</msg>
<status endtime="20161109 21:03:10.131" status="FAIL" starttime="20161109 21:03:10.130"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:10.131">${has_host} = False</msg>
<status endtime="20161109 21:03:10.131" status="PASS" starttime="20161109 21:03:10.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161109 21:03:10.134" status="PASS" starttime="20161109 21:03:10.134"></status>
</kw>
<status endtime="20161109 21:03:10.134" status="PASS" starttime="20161109 21:03:10.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:10.138">${port_num} = 22</msg>
<status endtime="20161109 21:03:10.138" status="PASS" starttime="20161109 21:03:10.138"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:10.139">${SSH_PORT} = 22</msg>
<status endtime="20161109 21:03:10.139" status="PASS" starttime="20161109 21:03:10.139"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:10.140">${https_num} = 443</msg>
<status endtime="20161109 21:03:10.140" status="PASS" starttime="20161109 21:03:10.139"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:10.141">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161109 21:03:10.141" status="PASS" starttime="20161109 21:03:10.141"></status>
</kw>
<status endtime="20161109 21:03:10.142" status="PASS" starttime="20161109 21:03:10.137"></status>
</kw>
<status endtime="20161109 21:03:10.142" status="PASS" starttime="20161109 21:03:10.134"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:03:10.142">Dictionary does not contain key 'port'.</msg>
<status endtime="20161109 21:03:10.143" status="FAIL" starttime="20161109 21:03:10.142"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:10.143">${has_port} = False</msg>
<status endtime="20161109 21:03:10.143" status="PASS" starttime="20161109 21:03:10.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161109 21:03:10.147" status="PASS" starttime="20161109 21:03:10.146"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161109 21:03:10.147" status="PASS" starttime="20161109 21:03:10.147"></status>
</kw>
<status endtime="20161109 21:03:10.147" status="PASS" starttime="20161109 21:03:10.146"></status>
</kw>
<status endtime="20161109 21:03:10.147" status="PASS" starttime="20161109 21:03:10.143"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:10.148">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 21:03:12.806">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161109 21:03:12.806" status="PASS" starttime="20161109 21:03:10.147"></status>
</kw>
<status endtime="20161109 21:03:12.807" status="PASS" starttime="20161109 21:03:10.130"></status>
</kw>
<kw name="Get Time Stamp" library="utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:12.808">${cur_time} = 20161109210312807966</msg>
<status endtime="20161109 21:03:12.808" status="PASS" starttime="20161109 21:03:12.808"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:12.809">${cur_time} = 20161109210312807966</msg>
<status endtime="20161109 21:03:12.809" status="PASS" starttime="20161109 21:03:12.807"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:12.814">${LOG_TIME} = 20161109210312807966</msg>
<status endtime="20161109 21:03:12.814" status="PASS" starttime="20161109 21:03:12.809"></status>
</kw>
<kw name="Start Command" library="SSHLibrary">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:12.815">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161109210312807966_$$'.</msg>
<status endtime="20161109 21:03:12.823" status="PASS" starttime="20161109 21:03:12.814"></status>
</kw>
<status endtime="20161109 21:03:12.823" status="PASS" starttime="20161109 21:03:10.129"></status>
</kw>
<kw name="BMC Power Off" library="poweroffs">
<doc>Powers off the system and makes sure that all states are</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:03:12.826">Dictionary does not contain key 'host'.</msg>
<status endtime="20161109 21:03:12.827" status="FAIL" starttime="20161109 21:03:12.826"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:12.827">${has_host} = False</msg>
<status endtime="20161109 21:03:12.827" status="PASS" starttime="20161109 21:03:12.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161109 21:03:12.832" status="PASS" starttime="20161109 21:03:12.832"></status>
</kw>
<status endtime="20161109 21:03:12.832" status="PASS" starttime="20161109 21:03:12.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:12.837">${port_num} = 22</msg>
<status endtime="20161109 21:03:12.837" status="PASS" starttime="20161109 21:03:12.836"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:12.837">${SSH_PORT} = 22</msg>
<status endtime="20161109 21:03:12.837" status="PASS" starttime="20161109 21:03:12.837"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:12.838">${https_num} = 443</msg>
<status endtime="20161109 21:03:12.838" status="PASS" starttime="20161109 21:03:12.837"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:12.838">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161109 21:03:12.838" status="PASS" starttime="20161109 21:03:12.838"></status>
</kw>
<status endtime="20161109 21:03:12.838" status="PASS" starttime="20161109 21:03:12.836"></status>
</kw>
<status endtime="20161109 21:03:12.838" status="PASS" starttime="20161109 21:03:12.833"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:03:12.839">Dictionary does not contain key 'port'.</msg>
<status endtime="20161109 21:03:12.839" status="FAIL" starttime="20161109 21:03:12.839"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:12.839">${has_port} = False</msg>
<status endtime="20161109 21:03:12.839" status="PASS" starttime="20161109 21:03:12.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161109 21:03:12.843" status="PASS" starttime="20161109 21:03:12.843"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161109 21:03:12.844" status="PASS" starttime="20161109 21:03:12.843"></status>
</kw>
<status endtime="20161109 21:03:12.844" status="PASS" starttime="20161109 21:03:12.842"></status>
</kw>
<status endtime="20161109 21:03:12.844" status="PASS" starttime="20161109 21:03:12.840"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:12.844">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 21:03:15.230">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161109 21:03:15.231" status="PASS" starttime="20161109 21:03:12.844"></status>
</kw>
<status endtime="20161109 21:03:15.231" status="PASS" starttime="20161109 21:03:12.824"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:15.233">@{arglist} = [ ]</msg>
<status endtime="20161109 21:03:15.233" status="PASS" starttime="20161109 21:03:15.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:15.234">${args} = {u'data': []}</msg>
<status endtime="20161109 21:03:15.234" status="PASS" starttime="20161109 21:03:15.233"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:15.235">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161109 21:03:15.235" status="PASS" starttime="20161109 21:03:15.235"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:15.238">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status endtime="20161109 21:03:15.238" status="PASS" starttime="20161109 21:03:15.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:15.239">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:15.239" status="PASS" starttime="20161109 21:03:15.238"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:15.239" status="PASS" starttime="20161109 21:03:15.239"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:15.242">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:15.242" status="PASS" starttime="20161109 21:03:15.241"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:15.243">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:15.243" status="PASS" starttime="20161109 21:03:15.243"></status>
</kw>
<status endtime="20161109 21:03:15.243" status="PASS" starttime="20161109 21:03:15.242"></status>
</kw>
<status endtime="20161109 21:03:15.244" status="PASS" starttime="20161109 21:03:15.240"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:15.254">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:15.255" status="PASS" starttime="20161109 21:03:15.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:15.256">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:15.256" status="PASS" starttime="20161109 21:03:15.256"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:15.257">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:15.257" status="PASS" starttime="20161109 21:03:15.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:15.258">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:15.258" status="PASS" starttime="20161109 21:03:15.258"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:15.725">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:15.725">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:15.725" status="PASS" starttime="20161109 21:03:15.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:15.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:15.726" status="PASS" starttime="20161109 21:03:15.725"></status>
</kw>
<status endtime="20161109 21:03:15.726" status="PASS" starttime="20161109 21:03:15.244"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.018">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:16.018">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:16.018" status="PASS" starttime="20161109 21:03:15.726"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.019">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:16.019" status="PASS" starttime="20161109 21:03:16.019"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:16.020">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:16.020" status="PASS" starttime="20161109 21:03:16.020"></status>
</kw>
<status endtime="20161109 21:03:16.020" status="PASS" starttime="20161109 21:03:16.019"></status>
</kw>
<status endtime="20161109 21:03:16.021" status="PASS" starttime="20161109 21:03:16.018"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:16.021">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:16.021" status="PASS" starttime="20161109 21:03:15.236"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:16.021">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:16.021" status="PASS" starttime="20161109 21:03:15.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:16.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:16.022" status="PASS" starttime="20161109 21:03:16.021"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.023">@{arglist} = [ ]</msg>
<status endtime="20161109 21:03:16.023" status="PASS" starttime="20161109 21:03:16.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.024">${args} = {u'data': []}</msg>
<status endtime="20161109 21:03:16.024" status="PASS" starttime="20161109 21:03:16.023"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.025">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161109 21:03:16.025" status="PASS" starttime="20161109 21:03:16.024"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.026">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161109 21:03:16.026" status="PASS" starttime="20161109 21:03:16.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:16.026" status="PASS" starttime="20161109 21:03:16.026"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:16.027" status="PASS" starttime="20161109 21:03:16.027"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.028">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:16.028" status="PASS" starttime="20161109 21:03:16.028"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:16.029">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:16.029" status="PASS" starttime="20161109 21:03:16.029"></status>
</kw>
<status endtime="20161109 21:03:16.029" status="PASS" starttime="20161109 21:03:16.029"></status>
</kw>
<status endtime="20161109 21:03:16.030" status="PASS" starttime="20161109 21:03:16.027"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:16.030">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:16.031" status="PASS" starttime="20161109 21:03:16.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.031">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:16.031" status="PASS" starttime="20161109 21:03:16.031"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.032">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:16.032" status="PASS" starttime="20161109 21:03:16.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.032">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:16.033" status="PASS" starttime="20161109 21:03:16.032"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:16.699">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:16.699">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:16.699" status="PASS" starttime="20161109 21:03:16.033"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:16.700">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:16.700" status="PASS" starttime="20161109 21:03:16.700"></status>
</kw>
<status endtime="20161109 21:03:16.701" status="PASS" starttime="20161109 21:03:16.030"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.598">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:18.598">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:18.599" status="PASS" starttime="20161109 21:03:16.701"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.600">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:18.601" status="PASS" starttime="20161109 21:03:18.600"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:18.602">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:18.602" status="PASS" starttime="20161109 21:03:18.602"></status>
</kw>
<status endtime="20161109 21:03:18.602" status="PASS" starttime="20161109 21:03:18.601"></status>
</kw>
<status endtime="20161109 21:03:18.602" status="PASS" starttime="20161109 21:03:18.599"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:18.603">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:18.603" status="PASS" starttime="20161109 21:03:16.025"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:18.603">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:18.603" status="PASS" starttime="20161109 21:03:16.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:18.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:18.605" status="PASS" starttime="20161109 21:03:18.604"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.606">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:18.606">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:18.606">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:18.606" status="PASS" starttime="20161109 21:03:18.605"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:18.606">${state} = 0</msg>
<status endtime="20161109 21:03:18.606" status="PASS" starttime="20161109 21:03:16.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20161109 21:03:18.607" status="PASS" starttime="20161109 21:03:18.607"></status>
</kw>
<status endtime="20161109 21:03:18.607" status="PASS" starttime="20161109 21:03:16.022"></status>
</kw>
<status endtime="20161109 21:03:18.608" status="PASS" starttime="20161109 21:03:16.022"></status>
</kw>
<status endtime="20161109 21:03:18.608" status="PASS" starttime="20161109 21:03:15.231"></status>
</kw>
<kw name="Check Power Off States" library="poweroffs">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.610">@{arglist} = [ ]</msg>
<status endtime="20161109 21:03:18.610" status="PASS" starttime="20161109 21:03:18.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.611">${args} = {u'data': []}</msg>
<status endtime="20161109 21:03:18.611" status="PASS" starttime="20161109 21:03:18.610"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.613">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161109 21:03:18.613" status="PASS" starttime="20161109 21:03:18.612"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.615">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161109 21:03:18.615" status="PASS" starttime="20161109 21:03:18.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.616">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:18.616" status="PASS" starttime="20161109 21:03:18.615"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:18.617" status="PASS" starttime="20161109 21:03:18.616"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.621">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:18.621" status="PASS" starttime="20161109 21:03:18.620"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:18.623">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:18.623" status="PASS" starttime="20161109 21:03:18.622"></status>
</kw>
<status endtime="20161109 21:03:18.623" status="PASS" starttime="20161109 21:03:18.622"></status>
</kw>
<status endtime="20161109 21:03:18.623" status="PASS" starttime="20161109 21:03:18.617"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:18.624">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:18.625" status="PASS" starttime="20161109 21:03:18.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.625">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:18.625" status="PASS" starttime="20161109 21:03:18.625"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.626">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:18.626" status="PASS" starttime="20161109 21:03:18.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:18.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:18.626" status="PASS" starttime="20161109 21:03:18.626"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:19.322">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:19.323">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:19.323" status="PASS" starttime="20161109 21:03:18.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:19.323">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:19.323" status="PASS" starttime="20161109 21:03:19.323"></status>
</kw>
<status endtime="20161109 21:03:19.323" status="PASS" starttime="20161109 21:03:18.623"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:19.714">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:19.714">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:19.714" status="PASS" starttime="20161109 21:03:19.324"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:19.716">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:19.716" status="PASS" starttime="20161109 21:03:19.715"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:19.717">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:19.717" status="PASS" starttime="20161109 21:03:19.716"></status>
</kw>
<status endtime="20161109 21:03:19.717" status="PASS" starttime="20161109 21:03:19.716"></status>
</kw>
<status endtime="20161109 21:03:19.717" status="PASS" starttime="20161109 21:03:19.715"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:19.717">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:19.717" status="PASS" starttime="20161109 21:03:18.613"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:19.717">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:19.717" status="PASS" starttime="20161109 21:03:18.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:19.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:19.718" status="PASS" starttime="20161109 21:03:19.718"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:19.718">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:19.718">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:19.719">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:19.719" status="PASS" starttime="20161109 21:03:19.718"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:19.719">${power_state} = 0</msg>
<status endtime="20161109 21:03:19.719" status="PASS" starttime="20161109 21:03:18.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20161109 21:03:19.719" status="PASS" starttime="20161109 21:03:19.719"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status endtime="20161109 21:03:19.720" status="PASS" starttime="20161109 21:03:19.719"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/org/openbmc/sensors/host/BootProgress</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:19.722">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20161109 21:03:19.722" status="PASS" starttime="20161109 21:03:19.721"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:19.723">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161109 21:03:19.723" status="PASS" starttime="20161109 21:03:19.722"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:19.724">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161109 21:03:19.724" status="PASS" starttime="20161109 21:03:19.724"></status>
</kw>
<status endtime="20161109 21:03:19.724" status="PASS" starttime="20161109 21:03:19.723"></status>
</kw>
<status endtime="20161109 21:03:19.724" status="PASS" starttime="20161109 21:03:19.722"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:19.725">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:19.725" status="PASS" starttime="20161109 21:03:19.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:19.726">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:19.726" status="PASS" starttime="20161109 21:03:19.725"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:19.726">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:19.726" status="PASS" starttime="20161109 21:03:19.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:19.727">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:19.727" status="PASS" starttime="20161109 21:03:19.727"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.066">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:20.066">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:20.066" status="PASS" starttime="20161109 21:03:19.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:20.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:20.067" status="PASS" starttime="20161109 21:03:20.067"></status>
</kw>
<status endtime="20161109 21:03:20.067" status="PASS" starttime="20161109 21:03:19.724"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.144">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:03:20.144">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:20.144" status="PASS" starttime="20161109 21:03:20.067"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.146">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:20.146" status="PASS" starttime="20161109 21:03:20.145"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:20.147">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:20.147" status="PASS" starttime="20161109 21:03:20.146"></status>
</kw>
<status endtime="20161109 21:03:20.147" status="PASS" starttime="20161109 21:03:20.146"></status>
</kw>
<status endtime="20161109 21:03:20.147" status="PASS" starttime="20161109 21:03:20.144"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:20.147">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:20.147" status="PASS" starttime="20161109 21:03:19.721"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.148">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:20.148">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:20.148">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:20.148" status="PASS" starttime="20161109 21:03:20.147"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:20.148">${state} = Off</msg>
<status endtime="20161109 21:03:20.148" status="PASS" starttime="20161109 21:03:19.720"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:20.148">${boot_progress} = Off</msg>
<status endtime="20161109 21:03:20.148" status="PASS" starttime="20161109 21:03:19.720"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status endtime="20161109 21:03:20.149" status="PASS" starttime="20161109 21:03:20.149"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status endtime="20161109 21:03:20.149" status="PASS" starttime="20161109 21:03:20.149"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.150">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status endtime="20161109 21:03:20.150" status="PASS" starttime="20161109 21:03:20.149"></status>
</kw>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.150">@{arglist} = [ ]</msg>
<status endtime="20161109 21:03:20.150" status="PASS" starttime="20161109 21:03:20.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.151">${args} = {u'data': []}</msg>
<status endtime="20161109 21:03:20.151" status="PASS" starttime="20161109 21:03:20.151"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.152">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:03:20.152" status="PASS" starttime="20161109 21:03:20.152"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.153">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:03:20.153" status="PASS" starttime="20161109 21:03:20.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.154">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:20.154" status="PASS" starttime="20161109 21:03:20.153"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:20.154" status="PASS" starttime="20161109 21:03:20.154"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.155">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:20.156" status="PASS" starttime="20161109 21:03:20.155"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:20.156">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:20.156" status="PASS" starttime="20161109 21:03:20.156"></status>
</kw>
<status endtime="20161109 21:03:20.156" status="PASS" starttime="20161109 21:03:20.156"></status>
</kw>
<status endtime="20161109 21:03:20.157" status="PASS" starttime="20161109 21:03:20.154"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:20.157">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:20.158" status="PASS" starttime="20161109 21:03:20.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.158">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:20.158" status="PASS" starttime="20161109 21:03:20.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.159">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:20.159" status="PASS" starttime="20161109 21:03:20.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.159">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:20.159" status="PASS" starttime="20161109 21:03:20.159"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.493">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:20.493">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:20.493" status="PASS" starttime="20161109 21:03:20.160"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:20.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:20.494" status="PASS" starttime="20161109 21:03:20.493"></status>
</kw>
<status endtime="20161109 21:03:20.495" status="PASS" starttime="20161109 21:03:20.157"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.768">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:20.768">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:20.768" status="PASS" starttime="20161109 21:03:20.495"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.770">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:20.770" status="PASS" starttime="20161109 21:03:20.769"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:20.771">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:20.771" status="PASS" starttime="20161109 21:03:20.771"></status>
</kw>
<status endtime="20161109 21:03:20.771" status="PASS" starttime="20161109 21:03:20.770"></status>
</kw>
<status endtime="20161109 21:03:20.772" status="PASS" starttime="20161109 21:03:20.769"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:20.772">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:20.772" status="PASS" starttime="20161109 21:03:20.152"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:20.772">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:20.772" status="PASS" starttime="20161109 21:03:20.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:20.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:20.773" status="PASS" starttime="20161109 21:03:20.772"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.774">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:20.774">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:20.774">${content} = {u'data': u'BMC_READY', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:20.774" status="PASS" starttime="20161109 21:03:20.773"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:20.775">${bmc_state} = BMC_READY</msg>
<status endtime="20161109 21:03:20.775" status="PASS" starttime="20161109 21:03:20.150"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status endtime="20161109 21:03:20.776" status="PASS" starttime="20161109 21:03:20.775"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status endtime="20161109 21:03:20.776" status="PASS" starttime="20161109 21:03:20.776"></status>
</kw>
<status endtime="20161109 21:03:20.776" status="PASS" starttime="20161109 21:03:18.608"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status endtime="20161109 21:03:20.891" status="PASS" starttime="20161109 21:03:20.777"></status>
</kw>
<status endtime="20161109 21:03:20.891" status="PASS" starttime="20161109 21:03:12.824"></status>
</kw>
<kw name="BMC Power On" library="powerons">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.893">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status endtime="20161109 21:03:20.893" status="PASS" starttime="20161109 21:03:20.892"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:03:20.896">Dictionary does not contain key 'host'.</msg>
<status endtime="20161109 21:03:20.896" status="FAIL" starttime="20161109 21:03:20.896"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:20.897">${has_host} = False</msg>
<status endtime="20161109 21:03:20.897" status="PASS" starttime="20161109 21:03:20.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161109 21:03:20.903" status="PASS" starttime="20161109 21:03:20.902"></status>
</kw>
<status endtime="20161109 21:03:20.903" status="PASS" starttime="20161109 21:03:20.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.909">${port_num} = 22</msg>
<status endtime="20161109 21:03:20.909" status="PASS" starttime="20161109 21:03:20.908"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.909">${SSH_PORT} = 22</msg>
<status endtime="20161109 21:03:20.909" status="PASS" starttime="20161109 21:03:20.909"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:20.910">${https_num} = 443</msg>
<status endtime="20161109 21:03:20.910" status="PASS" starttime="20161109 21:03:20.910"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:20.911">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161109 21:03:20.911" status="PASS" starttime="20161109 21:03:20.910"></status>
</kw>
<status endtime="20161109 21:03:20.911" status="PASS" starttime="20161109 21:03:20.908"></status>
</kw>
<status endtime="20161109 21:03:20.911" status="PASS" starttime="20161109 21:03:20.904"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:03:20.913">Dictionary does not contain key 'port'.</msg>
<status endtime="20161109 21:03:20.913" status="FAIL" starttime="20161109 21:03:20.912"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:20.913">${has_port} = False</msg>
<status endtime="20161109 21:03:20.913" status="PASS" starttime="20161109 21:03:20.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161109 21:03:20.918" status="PASS" starttime="20161109 21:03:20.918"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161109 21:03:20.919" status="PASS" starttime="20161109 21:03:20.918"></status>
</kw>
<status endtime="20161109 21:03:20.919" status="PASS" starttime="20161109 21:03:20.917"></status>
</kw>
<status endtime="20161109 21:03:20.919" status="PASS" starttime="20161109 21:03:20.913"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:20.919">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 21:03:23.759">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161109 21:03:23.759" status="PASS" starttime="20161109 21:03:20.919"></status>
</kw>
<status endtime="20161109 21:03:23.760" status="PASS" starttime="20161109 21:03:20.894"></status>
</kw>
<kw name="Initiate Power On" library="utils">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:23.760">@{arglist} = [ ]</msg>
<status endtime="20161109 21:03:23.761" status="PASS" starttime="20161109 21:03:23.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:23.761">${args} = {u'data': []}</msg>
<status endtime="20161109 21:03:23.761" status="PASS" starttime="20161109 21:03:23.761"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:23.762">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161109 21:03:23.762" status="PASS" starttime="20161109 21:03:23.762"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:23.763">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status endtime="20161109 21:03:23.763" status="PASS" starttime="20161109 21:03:23.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:23.764">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:23.764" status="PASS" starttime="20161109 21:03:23.763"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:23.764" status="PASS" starttime="20161109 21:03:23.764"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:23.767">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:23.767" status="PASS" starttime="20161109 21:03:23.765"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:23.768">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:23.768" status="PASS" starttime="20161109 21:03:23.768"></status>
</kw>
<status endtime="20161109 21:03:23.768" status="PASS" starttime="20161109 21:03:23.767"></status>
</kw>
<status endtime="20161109 21:03:23.768" status="PASS" starttime="20161109 21:03:23.765"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:23.770">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:23.770" status="PASS" starttime="20161109 21:03:23.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:23.771">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:23.771" status="PASS" starttime="20161109 21:03:23.770"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:23.772">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:23.772" status="PASS" starttime="20161109 21:03:23.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:23.772">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:23.772" status="PASS" starttime="20161109 21:03:23.772"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.103">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:24.104">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:24.104" status="PASS" starttime="20161109 21:03:23.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:24.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:24.104" status="PASS" starttime="20161109 21:03:24.104"></status>
</kw>
<status endtime="20161109 21:03:24.104" status="PASS" starttime="20161109 21:03:23.769"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.388">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:24.388">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:24.388" status="PASS" starttime="20161109 21:03:24.105"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.390">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:24.390" status="PASS" starttime="20161109 21:03:24.389"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:24.392">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:24.392" status="PASS" starttime="20161109 21:03:24.391"></status>
</kw>
<status endtime="20161109 21:03:24.392" status="PASS" starttime="20161109 21:03:24.391"></status>
</kw>
<status endtime="20161109 21:03:24.392" status="PASS" starttime="20161109 21:03:24.388"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:24.392">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:24.393" status="PASS" starttime="20161109 21:03:23.762"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:24.393">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:24.393" status="PASS" starttime="20161109 21:03:23.761"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:24.394">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:24.394" status="PASS" starttime="20161109 21:03:24.393"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.398">@{arglist} = [ ]</msg>
<status endtime="20161109 21:03:24.398" status="PASS" starttime="20161109 21:03:24.397"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.400">${args} = {u'data': []}</msg>
<status endtime="20161109 21:03:24.400" status="PASS" starttime="20161109 21:03:24.399"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.401">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161109 21:03:24.401" status="PASS" starttime="20161109 21:03:24.401"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.403">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161109 21:03:24.403" status="PASS" starttime="20161109 21:03:24.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.404">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:24.404" status="PASS" starttime="20161109 21:03:24.404"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:24.405" status="PASS" starttime="20161109 21:03:24.404"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.406">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:24.406" status="PASS" starttime="20161109 21:03:24.405"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:24.407">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:24.407" status="PASS" starttime="20161109 21:03:24.407"></status>
</kw>
<status endtime="20161109 21:03:24.407" status="PASS" starttime="20161109 21:03:24.406"></status>
</kw>
<status endtime="20161109 21:03:24.407" status="PASS" starttime="20161109 21:03:24.405"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:24.408">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:24.408" status="PASS" starttime="20161109 21:03:24.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.409">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:24.409" status="PASS" starttime="20161109 21:03:24.409"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.409">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:24.409" status="PASS" starttime="20161109 21:03:24.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:24.410">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:24.410" status="PASS" starttime="20161109 21:03:24.410"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:28.428">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:28.429">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:28.429" status="PASS" starttime="20161109 21:03:24.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:28.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:28.430" status="PASS" starttime="20161109 21:03:28.429"></status>
</kw>
<status endtime="20161109 21:03:28.430" status="PASS" starttime="20161109 21:03:24.407"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.359">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:29.359">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:29.359" status="PASS" starttime="20161109 21:03:28.431"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.361">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:29.361" status="PASS" starttime="20161109 21:03:29.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:29.362">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:29.362" status="PASS" starttime="20161109 21:03:29.362"></status>
</kw>
<status endtime="20161109 21:03:29.363" status="PASS" starttime="20161109 21:03:29.361"></status>
</kw>
<status endtime="20161109 21:03:29.363" status="PASS" starttime="20161109 21:03:29.359"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:29.363">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:29.363" status="PASS" starttime="20161109 21:03:24.402"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:29.363">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:29.364" status="PASS" starttime="20161109 21:03:24.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:29.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:29.365" status="PASS" starttime="20161109 21:03:29.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.365">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:29.366">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:29.366">${content} = {u'data': 1, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:29.366" status="PASS" starttime="20161109 21:03:29.365"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:29.366">${state} = 1</msg>
<status endtime="20161109 21:03:29.366" status="PASS" starttime="20161109 21:03:24.397"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<status endtime="20161109 21:03:29.367" status="PASS" starttime="20161109 21:03:29.367"></status>
</kw>
<status endtime="20161109 21:03:29.367" status="PASS" starttime="20161109 21:03:24.396"></status>
</kw>
<status endtime="20161109 21:03:29.367" status="PASS" starttime="20161109 21:03:24.395"></status>
</kw>
<status endtime="20161109 21:03:29.368" status="PASS" starttime="20161109 21:03:23.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' != '${EMPTY}'</arg>
<arg>Wait For OS</arg>
</arguments>
<status endtime="20161109 21:03:29.372" status="PASS" starttime="20161109 21:03:29.368"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>bmc_connection</arg>
</arguments>
<status endtime="20161109 21:03:29.373" status="PASS" starttime="20161109 21:03:29.373"></status>
</kw>
<kw name="Check Power On States" library="powerons">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${OS_WAIT_TIMEOUT}</arg>
<arg>10sec</arg>
<arg>Is Host Booted</arg>
</arguments>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.375">@{arglist} = [ ]</msg>
<status endtime="20161109 21:03:29.375" status="PASS" starttime="20161109 21:03:29.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.376">${args} = {u'data': []}</msg>
<status endtime="20161109 21:03:29.376" status="PASS" starttime="20161109 21:03:29.376"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.377">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:03:29.377" status="PASS" starttime="20161109 21:03:29.377"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.378">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:03:29.378" status="PASS" starttime="20161109 21:03:29.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.378">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:29.379" status="PASS" starttime="20161109 21:03:29.378"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:29.379" status="PASS" starttime="20161109 21:03:29.379"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.381">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:29.381" status="PASS" starttime="20161109 21:03:29.380"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:29.381">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:29.381" status="PASS" starttime="20161109 21:03:29.381"></status>
</kw>
<status endtime="20161109 21:03:29.382" status="PASS" starttime="20161109 21:03:29.381"></status>
</kw>
<status endtime="20161109 21:03:29.382" status="PASS" starttime="20161109 21:03:29.379"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:29.383">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:29.383" status="PASS" starttime="20161109 21:03:29.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.383">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:29.383" status="PASS" starttime="20161109 21:03:29.383"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.384">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:29.384" status="PASS" starttime="20161109 21:03:29.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:29.384">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:29.385" status="PASS" starttime="20161109 21:03:29.384"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:30.232">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:30.232">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:30.232" status="PASS" starttime="20161109 21:03:29.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:30.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:30.234" status="PASS" starttime="20161109 21:03:30.233"></status>
</kw>
<status endtime="20161109 21:03:30.234" status="PASS" starttime="20161109 21:03:29.382"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:30.995">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:30.995">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:30.996" status="PASS" starttime="20161109 21:03:30.235"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:30.997">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:30.997" status="PASS" starttime="20161109 21:03:30.997"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:30.999">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:30.999" status="PASS" starttime="20161109 21:03:30.998"></status>
</kw>
<status endtime="20161109 21:03:30.999" status="PASS" starttime="20161109 21:03:30.998"></status>
</kw>
<status endtime="20161109 21:03:30.999" status="PASS" starttime="20161109 21:03:30.996"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:31.000">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:31.000" status="PASS" starttime="20161109 21:03:29.377"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:31.000">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:31.000" status="PASS" starttime="20161109 21:03:29.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:31.001">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:31.001" status="PASS" starttime="20161109 21:03:31.001"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:31.002">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:31.002">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:31.003">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:31.003" status="PASS" starttime="20161109 21:03:31.002"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:31.003">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:03:31.003" status="PASS" starttime="20161109 21:03:29.375"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:03:31.005">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:03:31.005" status="FAIL" starttime="20161109 21:03:31.004"></status>
</kw>
<status endtime="20161109 21:03:31.006" status="FAIL" starttime="20161109 21:03:29.375"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:41.008">@{arglist} = [ ]</msg>
<status endtime="20161109 21:03:41.009" status="PASS" starttime="20161109 21:03:41.008"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:41.010">${args} = {u'data': []}</msg>
<status endtime="20161109 21:03:41.010" status="PASS" starttime="20161109 21:03:41.009"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:41.011">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:03:41.011" status="PASS" starttime="20161109 21:03:41.011"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:41.013">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:03:41.013" status="PASS" starttime="20161109 21:03:41.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:41.014">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:41.014" status="PASS" starttime="20161109 21:03:41.014"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:41.015" status="PASS" starttime="20161109 21:03:41.015"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:41.018">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:41.018" status="PASS" starttime="20161109 21:03:41.016"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:41.019">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:41.019" status="PASS" starttime="20161109 21:03:41.019"></status>
</kw>
<status endtime="20161109 21:03:41.020" status="PASS" starttime="20161109 21:03:41.018"></status>
</kw>
<status endtime="20161109 21:03:41.020" status="PASS" starttime="20161109 21:03:41.016"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:41.021">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:41.022" status="PASS" starttime="20161109 21:03:41.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:41.023">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:41.023" status="PASS" starttime="20161109 21:03:41.022"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:41.024">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:41.024" status="PASS" starttime="20161109 21:03:41.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:41.025">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:41.025" status="PASS" starttime="20161109 21:03:41.024"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:41.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:41.622">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:41.622" status="PASS" starttime="20161109 21:03:41.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:41.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:41.623" status="PASS" starttime="20161109 21:03:41.622"></status>
</kw>
<status endtime="20161109 21:03:41.623" status="PASS" starttime="20161109 21:03:41.020"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:42.105">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:42.105">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:42.105" status="PASS" starttime="20161109 21:03:41.623"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:42.107">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:42.107" status="PASS" starttime="20161109 21:03:42.106"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:42.107">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:42.108" status="PASS" starttime="20161109 21:03:42.107"></status>
</kw>
<status endtime="20161109 21:03:42.108" status="PASS" starttime="20161109 21:03:42.107"></status>
</kw>
<status endtime="20161109 21:03:42.108" status="PASS" starttime="20161109 21:03:42.106"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:42.108">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:42.108" status="PASS" starttime="20161109 21:03:41.012"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:42.108">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:42.108" status="PASS" starttime="20161109 21:03:41.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:42.109">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:42.109" status="PASS" starttime="20161109 21:03:42.108"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:42.109">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:42.109">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:42.109">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:42.109" status="PASS" starttime="20161109 21:03:42.109"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:42.110">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:03:42.110" status="PASS" starttime="20161109 21:03:41.007"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:03:42.110">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:03:42.110" status="FAIL" starttime="20161109 21:03:42.110"></status>
</kw>
<status endtime="20161109 21:03:42.110" status="FAIL" starttime="20161109 21:03:41.006"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:52.113">@{arglist} = [ ]</msg>
<status endtime="20161109 21:03:52.114" status="PASS" starttime="20161109 21:03:52.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:52.115">${args} = {u'data': []}</msg>
<status endtime="20161109 21:03:52.115" status="PASS" starttime="20161109 21:03:52.114"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:52.117">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:03:52.117" status="PASS" starttime="20161109 21:03:52.116"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:52.119">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:03:52.119" status="PASS" starttime="20161109 21:03:52.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:52.120">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:52.120" status="PASS" starttime="20161109 21:03:52.119"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:03:52.120" status="PASS" starttime="20161109 21:03:52.120"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:52.124">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:52.124" status="PASS" starttime="20161109 21:03:52.122"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:52.125">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:03:52.125" status="PASS" starttime="20161109 21:03:52.125"></status>
</kw>
<status endtime="20161109 21:03:52.125" status="PASS" starttime="20161109 21:03:52.124"></status>
</kw>
<status endtime="20161109 21:03:52.125" status="PASS" starttime="20161109 21:03:52.121"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:52.126">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:03:52.127" status="PASS" starttime="20161109 21:03:52.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:52.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:03:52.127" status="PASS" starttime="20161109 21:03:52.127"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:52.128">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:03:52.128" status="PASS" starttime="20161109 21:03:52.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:52.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:03:52.128" status="PASS" starttime="20161109 21:03:52.128"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:52.785">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:52.785">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:52.786" status="PASS" starttime="20161109 21:03:52.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:52.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:52.787" status="PASS" starttime="20161109 21:03:52.786"></status>
</kw>
<status endtime="20161109 21:03:52.787" status="PASS" starttime="20161109 21:03:52.126"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:53.279">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:03:53.279">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:53.279" status="PASS" starttime="20161109 21:03:52.787"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:53.280">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:53.281" status="PASS" starttime="20161109 21:03:53.280"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:53.281">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:03:53.281" status="PASS" starttime="20161109 21:03:53.281"></status>
</kw>
<status endtime="20161109 21:03:53.282" status="PASS" starttime="20161109 21:03:53.281"></status>
</kw>
<status endtime="20161109 21:03:53.282" status="PASS" starttime="20161109 21:03:53.280"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:53.282">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:53.282" status="PASS" starttime="20161109 21:03:52.117"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:53.282">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:03:53.282" status="PASS" starttime="20161109 21:03:52.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:03:53.283">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:03:53.283" status="PASS" starttime="20161109 21:03:53.282"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:03:53.283">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:03:53.283">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:03:53.283">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:03:53.283" status="PASS" starttime="20161109 21:03:53.283"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:03:53.283">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:03:53.284" status="PASS" starttime="20161109 21:03:52.112"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:03:53.284">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:03:53.284" status="FAIL" starttime="20161109 21:03:53.284"></status>
</kw>
<status endtime="20161109 21:03:53.285" status="FAIL" starttime="20161109 21:03:52.111"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.287">@{arglist} = [ ]</msg>
<status endtime="20161109 21:04:03.287" status="PASS" starttime="20161109 21:04:03.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.289">${args} = {u'data': []}</msg>
<status endtime="20161109 21:04:03.289" status="PASS" starttime="20161109 21:04:03.288"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.293">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:04:03.293" status="PASS" starttime="20161109 21:04:03.292"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.295">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:04:03.295" status="PASS" starttime="20161109 21:04:03.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.295">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:04:03.296" status="PASS" starttime="20161109 21:04:03.295"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:04:03.296" status="PASS" starttime="20161109 21:04:03.296"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.299">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:04:03.299" status="PASS" starttime="20161109 21:04:03.298"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:03.300">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:04:03.300" status="PASS" starttime="20161109 21:04:03.300"></status>
</kw>
<status endtime="20161109 21:04:03.301" status="PASS" starttime="20161109 21:04:03.299"></status>
</kw>
<status endtime="20161109 21:04:03.301" status="PASS" starttime="20161109 21:04:03.297"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:03.302">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:04:03.303" status="PASS" starttime="20161109 21:04:03.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.303">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:04:03.304" status="PASS" starttime="20161109 21:04:03.303"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.304">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:04:03.305" status="PASS" starttime="20161109 21:04:03.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.305">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:04:03.305" status="PASS" starttime="20161109 21:04:03.305"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.639">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:04:03.639">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:03.639" status="PASS" starttime="20161109 21:04:03.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:03.640">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:04:03.640" status="PASS" starttime="20161109 21:04:03.640"></status>
</kw>
<status endtime="20161109 21:04:03.640" status="PASS" starttime="20161109 21:04:03.301"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.922">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:04:03.922">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:03.923" status="PASS" starttime="20161109 21:04:03.640"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.924">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:04:03.924" status="PASS" starttime="20161109 21:04:03.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:03.925">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:04:03.925" status="PASS" starttime="20161109 21:04:03.924"></status>
</kw>
<status endtime="20161109 21:04:03.925" status="PASS" starttime="20161109 21:04:03.924"></status>
</kw>
<status endtime="20161109 21:04:03.925" status="PASS" starttime="20161109 21:04:03.923"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:03.925">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:03.925" status="PASS" starttime="20161109 21:04:03.293"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:03.925">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:03.925" status="PASS" starttime="20161109 21:04:03.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:03.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:04:03.926" status="PASS" starttime="20161109 21:04:03.925"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:03.926">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:04:03.926">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:04:03.926">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:04:03.926" status="PASS" starttime="20161109 21:04:03.926"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:03.927">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:04:03.927" status="PASS" starttime="20161109 21:04:03.286"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:04:03.927">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:04:03.927" status="FAIL" starttime="20161109 21:04:03.927"></status>
</kw>
<status endtime="20161109 21:04:03.928" status="FAIL" starttime="20161109 21:04:03.285"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:13.930">@{arglist} = [ ]</msg>
<status endtime="20161109 21:04:13.930" status="PASS" starttime="20161109 21:04:13.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:13.931">${args} = {u'data': []}</msg>
<status endtime="20161109 21:04:13.931" status="PASS" starttime="20161109 21:04:13.930"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:13.933">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:04:13.933" status="PASS" starttime="20161109 21:04:13.932"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:13.935">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:04:13.935" status="PASS" starttime="20161109 21:04:13.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:13.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:04:13.936" status="PASS" starttime="20161109 21:04:13.935"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:04:13.937" status="PASS" starttime="20161109 21:04:13.936"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:13.939">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:04:13.939" status="PASS" starttime="20161109 21:04:13.938"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:13.940">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:04:13.940" status="PASS" starttime="20161109 21:04:13.940"></status>
</kw>
<status endtime="20161109 21:04:13.941" status="PASS" starttime="20161109 21:04:13.939"></status>
</kw>
<status endtime="20161109 21:04:13.941" status="PASS" starttime="20161109 21:04:13.937"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:13.942">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:04:13.943" status="PASS" starttime="20161109 21:04:13.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:13.944">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:04:13.944" status="PASS" starttime="20161109 21:04:13.944"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:13.945">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:04:13.945" status="PASS" starttime="20161109 21:04:13.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:13.946">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:04:13.946" status="PASS" starttime="20161109 21:04:13.945"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:14.277">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:04:14.278">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:14.278" status="PASS" starttime="20161109 21:04:13.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:14.279">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:04:14.279" status="PASS" starttime="20161109 21:04:14.278"></status>
</kw>
<status endtime="20161109 21:04:14.279" status="PASS" starttime="20161109 21:04:13.941"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:14.699">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:04:14.699">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:14.699" status="PASS" starttime="20161109 21:04:14.280"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:14.701">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:04:14.701" status="PASS" starttime="20161109 21:04:14.701"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:14.703">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:04:14.703" status="PASS" starttime="20161109 21:04:14.702"></status>
</kw>
<status endtime="20161109 21:04:14.703" status="PASS" starttime="20161109 21:04:14.702"></status>
</kw>
<status endtime="20161109 21:04:14.703" status="PASS" starttime="20161109 21:04:14.700"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:14.704">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:14.704" status="PASS" starttime="20161109 21:04:13.933"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:14.704">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:14.704" status="PASS" starttime="20161109 21:04:13.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:14.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:04:14.706" status="PASS" starttime="20161109 21:04:14.705"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:14.706">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:04:14.706">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:04:14.707">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:04:14.707" status="PASS" starttime="20161109 21:04:14.706"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:14.707">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:04:14.707" status="PASS" starttime="20161109 21:04:13.929"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:04:14.708">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:04:14.708" status="FAIL" starttime="20161109 21:04:14.708"></status>
</kw>
<status endtime="20161109 21:04:14.708" status="FAIL" starttime="20161109 21:04:13.928"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:24.711">@{arglist} = [ ]</msg>
<status endtime="20161109 21:04:24.711" status="PASS" starttime="20161109 21:04:24.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:24.712">${args} = {u'data': []}</msg>
<status endtime="20161109 21:04:24.712" status="PASS" starttime="20161109 21:04:24.711"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:24.714">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:04:24.714" status="PASS" starttime="20161109 21:04:24.713"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:24.716">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:04:24.716" status="PASS" starttime="20161109 21:04:24.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:24.717">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:04:24.717" status="PASS" starttime="20161109 21:04:24.716"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:04:24.718" status="PASS" starttime="20161109 21:04:24.717"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:24.721">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:04:24.721" status="PASS" starttime="20161109 21:04:24.719"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:24.722">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:04:24.722" status="PASS" starttime="20161109 21:04:24.722"></status>
</kw>
<status endtime="20161109 21:04:24.723" status="PASS" starttime="20161109 21:04:24.721"></status>
</kw>
<status endtime="20161109 21:04:24.723" status="PASS" starttime="20161109 21:04:24.718"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:24.724">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:04:24.725" status="PASS" starttime="20161109 21:04:24.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:24.726">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:04:24.726" status="PASS" starttime="20161109 21:04:24.726"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:24.727">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:04:24.727" status="PASS" starttime="20161109 21:04:24.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:24.728">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:04:24.728" status="PASS" starttime="20161109 21:04:24.727"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:25.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:04:25.059">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:25.059" status="PASS" starttime="20161109 21:04:24.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:25.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:04:25.060" status="PASS" starttime="20161109 21:04:25.059"></status>
</kw>
<status endtime="20161109 21:04:25.060" status="PASS" starttime="20161109 21:04:24.723"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:25.343">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:04:25.344">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:25.344" status="PASS" starttime="20161109 21:04:25.060"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:25.346">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:04:25.346" status="PASS" starttime="20161109 21:04:25.345"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:25.347">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:04:25.348" status="PASS" starttime="20161109 21:04:25.347"></status>
</kw>
<status endtime="20161109 21:04:25.348" status="PASS" starttime="20161109 21:04:25.346"></status>
</kw>
<status endtime="20161109 21:04:25.348" status="PASS" starttime="20161109 21:04:25.344"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:25.348">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:25.348" status="PASS" starttime="20161109 21:04:24.714"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:25.349">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:25.349" status="PASS" starttime="20161109 21:04:24.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:25.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:04:25.350" status="PASS" starttime="20161109 21:04:25.349"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:25.350">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:04:25.351">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:04:25.351">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:04:25.351" status="PASS" starttime="20161109 21:04:25.350"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:25.351">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:04:25.351" status="PASS" starttime="20161109 21:04:24.710"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:04:25.352">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:04:25.353" status="FAIL" starttime="20161109 21:04:25.352"></status>
</kw>
<status endtime="20161109 21:04:25.353" status="FAIL" starttime="20161109 21:04:24.709"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:35.356">@{arglist} = [ ]</msg>
<status endtime="20161109 21:04:35.356" status="PASS" starttime="20161109 21:04:35.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:35.357">${args} = {u'data': []}</msg>
<status endtime="20161109 21:04:35.357" status="PASS" starttime="20161109 21:04:35.356"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:35.358">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:04:35.359" status="PASS" starttime="20161109 21:04:35.358"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:35.360">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:04:35.360" status="PASS" starttime="20161109 21:04:35.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:35.361">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:04:35.361" status="PASS" starttime="20161109 21:04:35.361"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:04:35.362" status="PASS" starttime="20161109 21:04:35.362"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:35.364">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:04:35.364" status="PASS" starttime="20161109 21:04:35.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:35.366">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:04:35.366" status="PASS" starttime="20161109 21:04:35.365"></status>
</kw>
<status endtime="20161109 21:04:35.366" status="PASS" starttime="20161109 21:04:35.365"></status>
</kw>
<status endtime="20161109 21:04:35.366" status="PASS" starttime="20161109 21:04:35.362"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:35.367">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:04:35.367" status="PASS" starttime="20161109 21:04:35.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:35.368">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:04:35.368" status="PASS" starttime="20161109 21:04:35.367"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:35.368">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:04:35.368" status="PASS" starttime="20161109 21:04:35.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:35.369">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:04:35.369" status="PASS" starttime="20161109 21:04:35.368"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:38.247">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:04:38.247">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:38.247" status="PASS" starttime="20161109 21:04:35.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:38.249">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:04:38.249" status="PASS" starttime="20161109 21:04:38.248"></status>
</kw>
<status endtime="20161109 21:04:38.249" status="PASS" starttime="20161109 21:04:35.366"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:38.521">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:04:38.521">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:38.521" status="PASS" starttime="20161109 21:04:38.249"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:38.523">${msg} = Response code:200, Content:{
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:04:38.523" status="PASS" starttime="20161109 21:04:38.522"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:38.525">Response code:200, Content:{
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:04:38.525" status="PASS" starttime="20161109 21:04:38.524"></status>
</kw>
<status endtime="20161109 21:04:38.525" status="PASS" starttime="20161109 21:04:38.524"></status>
</kw>
<status endtime="20161109 21:04:38.525" status="PASS" starttime="20161109 21:04:38.522"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:38.526">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:38.526" status="PASS" starttime="20161109 21:04:35.359"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:38.526">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:38.526" status="PASS" starttime="20161109 21:04:35.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:38.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:04:38.527" status="PASS" starttime="20161109 21:04:38.527"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:38.528">To JSON using : content={
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:04:38.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:04:38.528">${content} = {u'data': u'HOST_POWERING_OFF', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:04:38.528" status="PASS" starttime="20161109 21:04:38.528"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:38.529">${bmc_state} = HOST_POWERING_OFF</msg>
<status endtime="20161109 21:04:38.529" status="PASS" starttime="20161109 21:04:35.355"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:04:38.530">'HOST_POWERING_OFF' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:04:38.530" status="FAIL" starttime="20161109 21:04:38.529"></status>
</kw>
<status endtime="20161109 21:04:38.530" status="FAIL" starttime="20161109 21:04:35.354"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:48.532">@{arglist} = [ ]</msg>
<status endtime="20161109 21:04:48.533" status="PASS" starttime="20161109 21:04:48.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:48.533">${args} = {u'data': []}</msg>
<status endtime="20161109 21:04:48.534" status="PASS" starttime="20161109 21:04:48.533"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:48.535">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:04:48.535" status="PASS" starttime="20161109 21:04:48.535"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:48.538">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:04:48.538" status="PASS" starttime="20161109 21:04:48.537"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:48.539">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:04:48.539" status="PASS" starttime="20161109 21:04:48.538"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:04:48.540" status="PASS" starttime="20161109 21:04:48.539"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:48.542">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:04:48.542" status="PASS" starttime="20161109 21:04:48.541"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:48.544">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:04:48.544" status="PASS" starttime="20161109 21:04:48.544"></status>
</kw>
<status endtime="20161109 21:04:48.544" status="PASS" starttime="20161109 21:04:48.542"></status>
</kw>
<status endtime="20161109 21:04:48.545" status="PASS" starttime="20161109 21:04:48.540"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:48.546">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:04:48.546" status="PASS" starttime="20161109 21:04:48.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:48.547">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:04:48.547" status="PASS" starttime="20161109 21:04:48.546"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:48.547">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:04:48.547" status="PASS" starttime="20161109 21:04:48.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:48.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:04:48.548" status="PASS" starttime="20161109 21:04:48.548"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:49.198">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:04:49.199">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:49.199" status="PASS" starttime="20161109 21:04:48.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:49.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:04:49.199" status="PASS" starttime="20161109 21:04:49.199"></status>
</kw>
<status endtime="20161109 21:04:49.200" status="PASS" starttime="20161109 21:04:48.545"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:49.992">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:04:49.993">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:49.993" status="PASS" starttime="20161109 21:04:49.200"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:49.995">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:04:49.995" status="PASS" starttime="20161109 21:04:49.994"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:49.996">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:04:49.997" status="PASS" starttime="20161109 21:04:49.996"></status>
</kw>
<status endtime="20161109 21:04:49.997" status="PASS" starttime="20161109 21:04:49.995"></status>
</kw>
<status endtime="20161109 21:04:49.997" status="PASS" starttime="20161109 21:04:49.993"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:49.997">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:49.997" status="PASS" starttime="20161109 21:04:48.536"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:49.998">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:04:49.998" status="PASS" starttime="20161109 21:04:48.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:04:49.999">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:04:49.999" status="PASS" starttime="20161109 21:04:49.998"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:04:50.000">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:04:50.000">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:04:50.000">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:04:50.000" status="PASS" starttime="20161109 21:04:49.999"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:04:50.001">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:04:50.001" status="PASS" starttime="20161109 21:04:48.531"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:04:50.001">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:04:50.002" status="FAIL" starttime="20161109 21:04:50.001"></status>
</kw>
<status endtime="20161109 21:04:50.002" status="FAIL" starttime="20161109 21:04:48.530"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.004">@{arglist} = [ ]</msg>
<status endtime="20161109 21:05:00.004" status="PASS" starttime="20161109 21:05:00.004"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.006">${args} = {u'data': []}</msg>
<status endtime="20161109 21:05:00.006" status="PASS" starttime="20161109 21:05:00.005"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.008">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:05:00.008" status="PASS" starttime="20161109 21:05:00.007"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.010">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:05:00.010" status="PASS" starttime="20161109 21:05:00.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.011">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:00.011" status="PASS" starttime="20161109 21:05:00.010"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:05:00.012" status="PASS" starttime="20161109 21:05:00.011"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.014">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:00.014" status="PASS" starttime="20161109 21:05:00.013"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:00.015">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:00.015" status="PASS" starttime="20161109 21:05:00.015"></status>
</kw>
<status endtime="20161109 21:05:00.016" status="PASS" starttime="20161109 21:05:00.014"></status>
</kw>
<status endtime="20161109 21:05:00.016" status="PASS" starttime="20161109 21:05:00.012"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:00.017">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:05:00.017" status="PASS" starttime="20161109 21:05:00.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.018">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:00.018" status="PASS" starttime="20161109 21:05:00.017"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.018">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:05:00.018" status="PASS" starttime="20161109 21:05:00.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.019">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:05:00.019" status="PASS" starttime="20161109 21:05:00.019"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.355">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:00.355">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:00.356" status="PASS" starttime="20161109 21:05:00.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:00.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:00.356" status="PASS" starttime="20161109 21:05:00.356"></status>
</kw>
<status endtime="20161109 21:05:00.356" status="PASS" starttime="20161109 21:05:00.016"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.633">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:00.633">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:00.633" status="PASS" starttime="20161109 21:05:00.357"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.635">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:00.635" status="PASS" starttime="20161109 21:05:00.634"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:00.636">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:00.636" status="PASS" starttime="20161109 21:05:00.636"></status>
</kw>
<status endtime="20161109 21:05:00.637" status="PASS" starttime="20161109 21:05:00.635"></status>
</kw>
<status endtime="20161109 21:05:00.637" status="PASS" starttime="20161109 21:05:00.633"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:00.637">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:00.637" status="PASS" starttime="20161109 21:05:00.008"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:00.638">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:00.638" status="PASS" starttime="20161109 21:05:00.006"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:00.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:00.639" status="PASS" starttime="20161109 21:05:00.638"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:00.639">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:05:00.640">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:05:00.640">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:05:00.640" status="PASS" starttime="20161109 21:05:00.639"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:00.640">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:05:00.640" status="PASS" starttime="20161109 21:05:00.003"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:05:00.641">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:05:00.641" status="FAIL" starttime="20161109 21:05:00.641"></status>
</kw>
<status endtime="20161109 21:05:00.641" status="FAIL" starttime="20161109 21:05:00.002"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:10.644">@{arglist} = [ ]</msg>
<status endtime="20161109 21:05:10.644" status="PASS" starttime="20161109 21:05:10.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:10.645">${args} = {u'data': []}</msg>
<status endtime="20161109 21:05:10.645" status="PASS" starttime="20161109 21:05:10.644"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:10.646">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:05:10.647" status="PASS" starttime="20161109 21:05:10.646"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:10.648">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:05:10.648" status="PASS" starttime="20161109 21:05:10.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:10.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:10.649" status="PASS" starttime="20161109 21:05:10.648"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:05:10.649" status="PASS" starttime="20161109 21:05:10.649"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:10.651">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:10.651" status="PASS" starttime="20161109 21:05:10.650"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:10.652">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:10.653" status="PASS" starttime="20161109 21:05:10.652"></status>
</kw>
<status endtime="20161109 21:05:10.653" status="PASS" starttime="20161109 21:05:10.652"></status>
</kw>
<status endtime="20161109 21:05:10.653" status="PASS" starttime="20161109 21:05:10.650"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:10.654">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:05:10.655" status="PASS" starttime="20161109 21:05:10.654"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:10.656">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:10.656" status="PASS" starttime="20161109 21:05:10.655"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:10.657">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:05:10.657" status="PASS" starttime="20161109 21:05:10.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:10.657">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:05:10.657" status="PASS" starttime="20161109 21:05:10.657"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:10.993">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:10.993">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:10.993" status="PASS" starttime="20161109 21:05:10.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:10.994">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:10.994" status="PASS" starttime="20161109 21:05:10.994"></status>
</kw>
<status endtime="20161109 21:05:10.994" status="PASS" starttime="20161109 21:05:10.653"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:11.271">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:11.271">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:11.271" status="PASS" starttime="20161109 21:05:10.994"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:11.272">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:11.272" status="PASS" starttime="20161109 21:05:11.271"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:11.273">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:11.273" status="PASS" starttime="20161109 21:05:11.272"></status>
</kw>
<status endtime="20161109 21:05:11.273" status="PASS" starttime="20161109 21:05:11.272"></status>
</kw>
<status endtime="20161109 21:05:11.273" status="PASS" starttime="20161109 21:05:11.271"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:11.273">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:11.273" status="PASS" starttime="20161109 21:05:10.647"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:11.273">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:11.273" status="PASS" starttime="20161109 21:05:10.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:11.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:11.274" status="PASS" starttime="20161109 21:05:11.274"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:11.274">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:05:11.274">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:05:11.275">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:05:11.275" status="PASS" starttime="20161109 21:05:11.274"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:11.275">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:05:11.275" status="PASS" starttime="20161109 21:05:10.643"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:05:11.276">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:05:11.276" status="FAIL" starttime="20161109 21:05:11.275"></status>
</kw>
<status endtime="20161109 21:05:11.276" status="FAIL" starttime="20161109 21:05:10.642"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:21.278">@{arglist} = [ ]</msg>
<status endtime="20161109 21:05:21.278" status="PASS" starttime="20161109 21:05:21.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:21.279">${args} = {u'data': []}</msg>
<status endtime="20161109 21:05:21.279" status="PASS" starttime="20161109 21:05:21.279"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:21.282">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:05:21.282" status="PASS" starttime="20161109 21:05:21.281"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:21.285">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:05:21.285" status="PASS" starttime="20161109 21:05:21.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:21.287">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:21.287" status="PASS" starttime="20161109 21:05:21.286"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:05:21.288" status="PASS" starttime="20161109 21:05:21.287"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:21.292">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:21.292" status="PASS" starttime="20161109 21:05:21.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:21.294">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:21.294" status="PASS" starttime="20161109 21:05:21.293"></status>
</kw>
<status endtime="20161109 21:05:21.294" status="PASS" starttime="20161109 21:05:21.292"></status>
</kw>
<status endtime="20161109 21:05:21.294" status="PASS" starttime="20161109 21:05:21.289"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:21.296">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:05:21.296" status="PASS" starttime="20161109 21:05:21.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:21.297">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:21.297" status="PASS" starttime="20161109 21:05:21.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:21.297">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:05:21.297" status="PASS" starttime="20161109 21:05:21.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:21.298">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:05:21.298" status="PASS" starttime="20161109 21:05:21.297"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:21.717">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:21.717">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:21.717" status="PASS" starttime="20161109 21:05:21.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:21.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:21.718" status="PASS" starttime="20161109 21:05:21.717"></status>
</kw>
<status endtime="20161109 21:05:21.718" status="PASS" starttime="20161109 21:05:21.294"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:22.121">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:22.121">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:22.121" status="PASS" starttime="20161109 21:05:21.718"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:22.122">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:22.122" status="PASS" starttime="20161109 21:05:22.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:22.123">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:22.123" status="PASS" starttime="20161109 21:05:22.123"></status>
</kw>
<status endtime="20161109 21:05:22.123" status="PASS" starttime="20161109 21:05:22.122"></status>
</kw>
<status endtime="20161109 21:05:22.123" status="PASS" starttime="20161109 21:05:22.121"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:22.123">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:22.123" status="PASS" starttime="20161109 21:05:21.283"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:22.124">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:22.124" status="PASS" starttime="20161109 21:05:21.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:22.124">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:22.124" status="PASS" starttime="20161109 21:05:22.124"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:22.125">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:05:22.125">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:05:22.125">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:05:22.125" status="PASS" starttime="20161109 21:05:22.124"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:22.125">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:05:22.125" status="PASS" starttime="20161109 21:05:21.277"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:05:22.126">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:05:22.127" status="FAIL" starttime="20161109 21:05:22.125"></status>
</kw>
<status endtime="20161109 21:05:22.127" status="FAIL" starttime="20161109 21:05:21.276"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:32.129">@{arglist} = [ ]</msg>
<status endtime="20161109 21:05:32.129" status="PASS" starttime="20161109 21:05:32.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:32.130">${args} = {u'data': []}</msg>
<status endtime="20161109 21:05:32.130" status="PASS" starttime="20161109 21:05:32.130"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:32.132">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:05:32.133" status="PASS" starttime="20161109 21:05:32.132"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:32.134">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:05:32.134" status="PASS" starttime="20161109 21:05:32.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:32.136">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:32.136" status="PASS" starttime="20161109 21:05:32.135"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:05:32.137" status="PASS" starttime="20161109 21:05:32.136"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:32.139">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:32.139" status="PASS" starttime="20161109 21:05:32.138"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:32.141">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:32.141" status="PASS" starttime="20161109 21:05:32.140"></status>
</kw>
<status endtime="20161109 21:05:32.141" status="PASS" starttime="20161109 21:05:32.140"></status>
</kw>
<status endtime="20161109 21:05:32.141" status="PASS" starttime="20161109 21:05:32.137"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:32.143">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:05:32.144" status="PASS" starttime="20161109 21:05:32.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:32.144">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:32.144" status="PASS" starttime="20161109 21:05:32.144"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:32.145">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:05:32.145" status="PASS" starttime="20161109 21:05:32.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:32.146">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:05:32.146" status="PASS" starttime="20161109 21:05:32.146"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:32.499">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:32.500">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:32.500" status="PASS" starttime="20161109 21:05:32.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:32.501">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:32.501" status="PASS" starttime="20161109 21:05:32.500"></status>
</kw>
<status endtime="20161109 21:05:32.501" status="PASS" starttime="20161109 21:05:32.142"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:33.007">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:33.007">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:33.007" status="PASS" starttime="20161109 21:05:32.501"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:33.009">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:33.009" status="PASS" starttime="20161109 21:05:33.008"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:33.011">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:33.011" status="PASS" starttime="20161109 21:05:33.010"></status>
</kw>
<status endtime="20161109 21:05:33.011" status="PASS" starttime="20161109 21:05:33.010"></status>
</kw>
<status endtime="20161109 21:05:33.011" status="PASS" starttime="20161109 21:05:33.008"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:33.011">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:33.012" status="PASS" starttime="20161109 21:05:32.133"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:33.012">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:33.012" status="PASS" starttime="20161109 21:05:32.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:33.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:33.013" status="PASS" starttime="20161109 21:05:33.012"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:33.014">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:05:33.014">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:05:33.015">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:05:33.015" status="PASS" starttime="20161109 21:05:33.014"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:33.015">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:05:33.015" status="PASS" starttime="20161109 21:05:32.128"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:05:33.016">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:05:33.016" status="FAIL" starttime="20161109 21:05:33.016"></status>
</kw>
<status endtime="20161109 21:05:33.017" status="FAIL" starttime="20161109 21:05:32.127"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.020">@{arglist} = [ ]</msg>
<status endtime="20161109 21:05:43.020" status="PASS" starttime="20161109 21:05:43.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.021">${args} = {u'data': []}</msg>
<status endtime="20161109 21:05:43.021" status="PASS" starttime="20161109 21:05:43.020"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.022">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:05:43.022" status="PASS" starttime="20161109 21:05:43.022"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.024">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:05:43.024" status="PASS" starttime="20161109 21:05:43.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.025">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:43.025" status="PASS" starttime="20161109 21:05:43.025"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:05:43.026" status="PASS" starttime="20161109 21:05:43.026"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.028">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:43.028" status="PASS" starttime="20161109 21:05:43.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:43.029">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:43.029" status="PASS" starttime="20161109 21:05:43.029"></status>
</kw>
<status endtime="20161109 21:05:43.029" status="PASS" starttime="20161109 21:05:43.028"></status>
</kw>
<status endtime="20161109 21:05:43.029" status="PASS" starttime="20161109 21:05:43.026"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:43.030">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:05:43.031" status="PASS" starttime="20161109 21:05:43.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.031">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:43.031" status="PASS" starttime="20161109 21:05:43.031"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.032">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:05:43.032" status="PASS" starttime="20161109 21:05:43.031"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.032">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:05:43.032" status="PASS" starttime="20161109 21:05:43.032"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.457">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:43.458">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:43.458" status="PASS" starttime="20161109 21:05:43.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:43.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:43.459" status="PASS" starttime="20161109 21:05:43.458"></status>
</kw>
<status endtime="20161109 21:05:43.459" status="PASS" starttime="20161109 21:05:43.029"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.740">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:43.740">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:43.740" status="PASS" starttime="20161109 21:05:43.460"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.742">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:43.742" status="PASS" starttime="20161109 21:05:43.741"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:43.744">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:43.744" status="PASS" starttime="20161109 21:05:43.744"></status>
</kw>
<status endtime="20161109 21:05:43.745" status="PASS" starttime="20161109 21:05:43.743"></status>
</kw>
<status endtime="20161109 21:05:43.745" status="PASS" starttime="20161109 21:05:43.740"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:43.745">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:43.745" status="PASS" starttime="20161109 21:05:43.023"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:43.745">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:43.745" status="PASS" starttime="20161109 21:05:43.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:43.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:43.746" status="PASS" starttime="20161109 21:05:43.746"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:43.747">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:05:43.747">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:05:43.747">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:05:43.747" status="PASS" starttime="20161109 21:05:43.747"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:43.747">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:05:43.748" status="PASS" starttime="20161109 21:05:43.018"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:05:43.748">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:05:43.748" status="FAIL" starttime="20161109 21:05:43.748"></status>
</kw>
<status endtime="20161109 21:05:43.748" status="FAIL" starttime="20161109 21:05:43.017"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:53.751">@{arglist} = [ ]</msg>
<status endtime="20161109 21:05:53.751" status="PASS" starttime="20161109 21:05:53.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:53.752">${args} = {u'data': []}</msg>
<status endtime="20161109 21:05:53.752" status="PASS" starttime="20161109 21:05:53.751"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:53.754">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:05:53.754" status="PASS" starttime="20161109 21:05:53.754"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:53.756">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:05:53.756" status="PASS" starttime="20161109 21:05:53.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:53.757">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:53.757" status="PASS" starttime="20161109 21:05:53.757"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:05:53.758" status="PASS" starttime="20161109 21:05:53.758"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:53.761">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:53.761" status="PASS" starttime="20161109 21:05:53.760"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:53.762">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:05:53.763" status="PASS" starttime="20161109 21:05:53.762"></status>
</kw>
<status endtime="20161109 21:05:53.763" status="PASS" starttime="20161109 21:05:53.761"></status>
</kw>
<status endtime="20161109 21:05:53.763" status="PASS" starttime="20161109 21:05:53.758"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:53.764">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:05:53.765" status="PASS" starttime="20161109 21:05:53.764"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:53.766">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:05:53.766" status="PASS" starttime="20161109 21:05:53.765"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:53.767">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:05:53.767" status="PASS" starttime="20161109 21:05:53.766"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:53.767">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:05:53.767" status="PASS" starttime="20161109 21:05:53.767"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:56.365">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:56.365">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:56.365" status="PASS" starttime="20161109 21:05:53.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:56.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:56.367" status="PASS" starttime="20161109 21:05:56.366"></status>
</kw>
<status endtime="20161109 21:05:56.368" status="PASS" starttime="20161109 21:05:53.763"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:57.369">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:05:57.369">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:57.369" status="PASS" starttime="20161109 21:05:56.369"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:57.371">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:57.371" status="PASS" starttime="20161109 21:05:57.370"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:57.372">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:05:57.373" status="PASS" starttime="20161109 21:05:57.372"></status>
</kw>
<status endtime="20161109 21:05:57.373" status="PASS" starttime="20161109 21:05:57.371"></status>
</kw>
<status endtime="20161109 21:05:57.374" status="PASS" starttime="20161109 21:05:57.369"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:57.374">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:57.374" status="PASS" starttime="20161109 21:05:53.755"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:57.374">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:05:57.374" status="PASS" starttime="20161109 21:05:53.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:05:57.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:05:57.375" status="PASS" starttime="20161109 21:05:57.375"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:05:57.376">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:05:57.376">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:05:57.377">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:05:57.377" status="PASS" starttime="20161109 21:05:57.376"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:05:57.377">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:05:57.377" status="PASS" starttime="20161109 21:05:53.750"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:05:57.378">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:05:57.378" status="FAIL" starttime="20161109 21:05:57.378"></status>
</kw>
<status endtime="20161109 21:05:57.378" status="FAIL" starttime="20161109 21:05:53.749"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:07.381">@{arglist} = [ ]</msg>
<status endtime="20161109 21:06:07.381" status="PASS" starttime="20161109 21:06:07.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:07.382">${args} = {u'data': []}</msg>
<status endtime="20161109 21:06:07.382" status="PASS" starttime="20161109 21:06:07.381"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:07.384">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:06:07.384" status="PASS" starttime="20161109 21:06:07.383"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:07.386">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:06:07.386" status="PASS" starttime="20161109 21:06:07.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:07.387">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:06:07.387" status="PASS" starttime="20161109 21:06:07.386"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:06:07.387" status="PASS" starttime="20161109 21:06:07.387"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:07.389">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:06:07.389" status="PASS" starttime="20161109 21:06:07.388"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:07.390">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:06:07.390" status="PASS" starttime="20161109 21:06:07.389"></status>
</kw>
<status endtime="20161109 21:06:07.390" status="PASS" starttime="20161109 21:06:07.389"></status>
</kw>
<status endtime="20161109 21:06:07.390" status="PASS" starttime="20161109 21:06:07.387"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:07.391">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:06:07.392" status="PASS" starttime="20161109 21:06:07.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:07.392">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:06:07.392" status="PASS" starttime="20161109 21:06:07.392"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:07.393">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:06:07.393" status="PASS" starttime="20161109 21:06:07.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:07.393">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:06:07.393" status="PASS" starttime="20161109 21:06:07.393"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:07.726">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:06:07.726">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:07.726" status="PASS" starttime="20161109 21:06:07.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:07.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:06:07.728" status="PASS" starttime="20161109 21:06:07.727"></status>
</kw>
<status endtime="20161109 21:06:07.728" status="PASS" starttime="20161109 21:06:07.390"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:08.007">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:06:08.007">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:08.008" status="PASS" starttime="20161109 21:06:07.728"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:08.009">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:06:08.009" status="PASS" starttime="20161109 21:06:08.009"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:08.011">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:06:08.011" status="PASS" starttime="20161109 21:06:08.010"></status>
</kw>
<status endtime="20161109 21:06:08.011" status="PASS" starttime="20161109 21:06:08.010"></status>
</kw>
<status endtime="20161109 21:06:08.011" status="PASS" starttime="20161109 21:06:08.008"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:08.012">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:08.012" status="PASS" starttime="20161109 21:06:07.384"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:08.012">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:08.012" status="PASS" starttime="20161109 21:06:07.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:08.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:06:08.013" status="PASS" starttime="20161109 21:06:08.013"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:08.014">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:06:08.014">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:06:08.014">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:06:08.015" status="PASS" starttime="20161109 21:06:08.014"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:08.015">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:06:08.015" status="PASS" starttime="20161109 21:06:07.380"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:06:08.016">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:06:08.017" status="FAIL" starttime="20161109 21:06:08.016"></status>
</kw>
<status endtime="20161109 21:06:08.017" status="FAIL" starttime="20161109 21:06:07.379"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.027">@{arglist} = [ ]</msg>
<status endtime="20161109 21:06:18.027" status="PASS" starttime="20161109 21:06:18.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.028">${args} = {u'data': []}</msg>
<status endtime="20161109 21:06:18.028" status="PASS" starttime="20161109 21:06:18.027"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.030">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:06:18.030" status="PASS" starttime="20161109 21:06:18.029"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.032">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:06:18.032" status="PASS" starttime="20161109 21:06:18.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:06:18.034" status="PASS" starttime="20161109 21:06:18.033"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:06:18.035" status="PASS" starttime="20161109 21:06:18.035"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.038">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:06:18.038" status="PASS" starttime="20161109 21:06:18.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:18.039">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:06:18.039" status="PASS" starttime="20161109 21:06:18.038"></status>
</kw>
<status endtime="20161109 21:06:18.039" status="PASS" starttime="20161109 21:06:18.038"></status>
</kw>
<status endtime="20161109 21:06:18.039" status="PASS" starttime="20161109 21:06:18.036"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:18.040">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:06:18.040" status="PASS" starttime="20161109 21:06:18.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.041">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:06:18.041" status="PASS" starttime="20161109 21:06:18.041"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.041">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:06:18.041" status="PASS" starttime="20161109 21:06:18.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.042">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:06:18.042" status="PASS" starttime="20161109 21:06:18.042"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.488">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:06:18.489">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:18.489" status="PASS" starttime="20161109 21:06:18.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:18.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:06:18.490" status="PASS" starttime="20161109 21:06:18.489"></status>
</kw>
<status endtime="20161109 21:06:18.490" status="PASS" starttime="20161109 21:06:18.039"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.766">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:06:18.766">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:18.766" status="PASS" starttime="20161109 21:06:18.490"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.768">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:06:18.768" status="PASS" starttime="20161109 21:06:18.767"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:18.770">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:06:18.770" status="PASS" starttime="20161109 21:06:18.770"></status>
</kw>
<status endtime="20161109 21:06:18.770" status="PASS" starttime="20161109 21:06:18.768"></status>
</kw>
<status endtime="20161109 21:06:18.771" status="PASS" starttime="20161109 21:06:18.766"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:18.771">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:18.771" status="PASS" starttime="20161109 21:06:18.030"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:18.771">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:18.771" status="PASS" starttime="20161109 21:06:18.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:18.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:06:18.772" status="PASS" starttime="20161109 21:06:18.772"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:18.773">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:06:18.773">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:06:18.773">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:06:18.773" status="PASS" starttime="20161109 21:06:18.773"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:18.774">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:06:18.774" status="PASS" starttime="20161109 21:06:18.025"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:06:18.775">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:06:18.775" status="FAIL" starttime="20161109 21:06:18.774"></status>
</kw>
<status endtime="20161109 21:06:18.775" status="FAIL" starttime="20161109 21:06:18.017"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:28.778">@{arglist} = [ ]</msg>
<status endtime="20161109 21:06:28.778" status="PASS" starttime="20161109 21:06:28.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:28.779">${args} = {u'data': []}</msg>
<status endtime="20161109 21:06:28.779" status="PASS" starttime="20161109 21:06:28.778"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:28.780">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:06:28.780" status="PASS" starttime="20161109 21:06:28.780"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:28.782">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:06:28.782" status="PASS" starttime="20161109 21:06:28.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:28.783">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:06:28.783" status="PASS" starttime="20161109 21:06:28.782"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:06:28.784" status="PASS" starttime="20161109 21:06:28.783"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:28.786">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:06:28.786" status="PASS" starttime="20161109 21:06:28.785"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:28.787">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:06:28.787" status="PASS" starttime="20161109 21:06:28.787"></status>
</kw>
<status endtime="20161109 21:06:28.787" status="PASS" starttime="20161109 21:06:28.786"></status>
</kw>
<status endtime="20161109 21:06:28.787" status="PASS" starttime="20161109 21:06:28.784"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:28.788">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:06:28.789" status="PASS" starttime="20161109 21:06:28.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:28.789">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:06:28.789" status="PASS" starttime="20161109 21:06:28.789"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:28.790">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:06:28.790" status="PASS" starttime="20161109 21:06:28.789"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:28.790">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:06:28.790" status="PASS" starttime="20161109 21:06:28.790"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:29.125">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:06:29.125">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:29.125" status="PASS" starttime="20161109 21:06:28.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:29.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:06:29.126" status="PASS" starttime="20161109 21:06:29.126"></status>
</kw>
<status endtime="20161109 21:06:29.126" status="PASS" starttime="20161109 21:06:28.788"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:29.407">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:06:29.407">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:29.407" status="PASS" starttime="20161109 21:06:29.127"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:29.409">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:06:29.409" status="PASS" starttime="20161109 21:06:29.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:29.410">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:06:29.411" status="PASS" starttime="20161109 21:06:29.410"></status>
</kw>
<status endtime="20161109 21:06:29.411" status="PASS" starttime="20161109 21:06:29.409"></status>
</kw>
<status endtime="20161109 21:06:29.411" status="PASS" starttime="20161109 21:06:29.408"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:29.411">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:29.412" status="PASS" starttime="20161109 21:06:28.781"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:29.412">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:29.412" status="PASS" starttime="20161109 21:06:28.779"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:29.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:06:29.413" status="PASS" starttime="20161109 21:06:29.413"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:29.414">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:06:29.414">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:06:29.414">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:06:29.414" status="PASS" starttime="20161109 21:06:29.414"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:29.415">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:06:29.415" status="PASS" starttime="20161109 21:06:28.777"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:06:29.416">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:06:29.416" status="FAIL" starttime="20161109 21:06:29.415"></status>
</kw>
<status endtime="20161109 21:06:29.416" status="FAIL" starttime="20161109 21:06:28.776"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:39.419">@{arglist} = [ ]</msg>
<status endtime="20161109 21:06:39.419" status="PASS" starttime="20161109 21:06:39.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:39.420">${args} = {u'data': []}</msg>
<status endtime="20161109 21:06:39.420" status="PASS" starttime="20161109 21:06:39.420"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:39.422">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:06:39.422" status="PASS" starttime="20161109 21:06:39.421"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:39.424">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:06:39.424" status="PASS" starttime="20161109 21:06:39.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:39.425">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:06:39.425" status="PASS" starttime="20161109 21:06:39.424"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:06:39.426" status="PASS" starttime="20161109 21:06:39.425"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:39.429">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:06:39.429" status="PASS" starttime="20161109 21:06:39.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:39.429">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:06:39.429" status="PASS" starttime="20161109 21:06:39.429"></status>
</kw>
<status endtime="20161109 21:06:39.430" status="PASS" starttime="20161109 21:06:39.429"></status>
</kw>
<status endtime="20161109 21:06:39.430" status="PASS" starttime="20161109 21:06:39.426"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:39.431">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:06:39.431" status="PASS" starttime="20161109 21:06:39.430"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:39.432">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:06:39.432" status="PASS" starttime="20161109 21:06:39.431"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:39.432">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:06:39.432" status="PASS" starttime="20161109 21:06:39.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:39.433">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:06:39.433" status="PASS" starttime="20161109 21:06:39.432"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:39.771">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:06:39.771">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:39.771" status="PASS" starttime="20161109 21:06:39.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:39.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:06:39.772" status="PASS" starttime="20161109 21:06:39.771"></status>
</kw>
<status endtime="20161109 21:06:39.772" status="PASS" starttime="20161109 21:06:39.430"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:40.044">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:06:40.045">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:40.045" status="PASS" starttime="20161109 21:06:39.772"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:40.046">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:06:40.046" status="PASS" starttime="20161109 21:06:40.045"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:40.047">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:06:40.047" status="PASS" starttime="20161109 21:06:40.046"></status>
</kw>
<status endtime="20161109 21:06:40.047" status="PASS" starttime="20161109 21:06:40.046"></status>
</kw>
<status endtime="20161109 21:06:40.047" status="PASS" starttime="20161109 21:06:40.045"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:40.047">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:40.047" status="PASS" starttime="20161109 21:06:39.422"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:40.047">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:40.047" status="PASS" starttime="20161109 21:06:39.421"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:40.048">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:06:40.048" status="PASS" starttime="20161109 21:06:40.048"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:40.048">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:06:40.049">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:06:40.049">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:06:40.049" status="PASS" starttime="20161109 21:06:40.048"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:40.049">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:06:40.049" status="PASS" starttime="20161109 21:06:39.418"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:06:40.050">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:06:40.050" status="FAIL" starttime="20161109 21:06:40.049"></status>
</kw>
<status endtime="20161109 21:06:40.050" status="FAIL" starttime="20161109 21:06:39.417"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.053">@{arglist} = [ ]</msg>
<status endtime="20161109 21:06:50.053" status="PASS" starttime="20161109 21:06:50.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.054">${args} = {u'data': []}</msg>
<status endtime="20161109 21:06:50.054" status="PASS" starttime="20161109 21:06:50.053"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.055">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:06:50.056" status="PASS" starttime="20161109 21:06:50.055"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.058">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:06:50.058" status="PASS" starttime="20161109 21:06:50.057"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.059">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:06:50.059" status="PASS" starttime="20161109 21:06:50.058"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:06:50.060" status="PASS" starttime="20161109 21:06:50.059"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.062">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:06:50.062" status="PASS" starttime="20161109 21:06:50.061"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:50.063">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:06:50.063" status="PASS" starttime="20161109 21:06:50.063"></status>
</kw>
<status endtime="20161109 21:06:50.064" status="PASS" starttime="20161109 21:06:50.062"></status>
</kw>
<status endtime="20161109 21:06:50.064" status="PASS" starttime="20161109 21:06:50.060"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:50.065">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:06:50.066" status="PASS" starttime="20161109 21:06:50.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.067">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:06:50.067" status="PASS" starttime="20161109 21:06:50.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.068">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:06:50.068" status="PASS" starttime="20161109 21:06:50.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.068">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:06:50.068" status="PASS" starttime="20161109 21:06:50.068"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.443">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:06:50.444">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:50.444" status="PASS" starttime="20161109 21:06:50.068"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:50.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:06:50.446" status="PASS" starttime="20161109 21:06:50.444"></status>
</kw>
<status endtime="20161109 21:06:50.447" status="PASS" starttime="20161109 21:06:50.064"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.723">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:06:50.723">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:50.723" status="PASS" starttime="20161109 21:06:50.447"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.725">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:06:50.725" status="PASS" starttime="20161109 21:06:50.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:50.726">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:06:50.726" status="PASS" starttime="20161109 21:06:50.726"></status>
</kw>
<status endtime="20161109 21:06:50.726" status="PASS" starttime="20161109 21:06:50.725"></status>
</kw>
<status endtime="20161109 21:06:50.726" status="PASS" starttime="20161109 21:06:50.723"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:50.727">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:50.727" status="PASS" starttime="20161109 21:06:50.056"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:50.727">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:06:50.727" status="PASS" starttime="20161109 21:06:50.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:06:50.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:06:50.728" status="PASS" starttime="20161109 21:06:50.728"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:06:50.729">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:06:50.729">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:06:50.729">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:06:50.729" status="PASS" starttime="20161109 21:06:50.729"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:06:50.730">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:06:50.730" status="PASS" starttime="20161109 21:06:50.051"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:06:50.731">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:06:50.731" status="FAIL" starttime="20161109 21:06:50.730"></status>
</kw>
<status endtime="20161109 21:06:50.731" status="FAIL" starttime="20161109 21:06:50.050"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:00.733">@{arglist} = [ ]</msg>
<status endtime="20161109 21:07:00.733" status="PASS" starttime="20161109 21:07:00.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:00.734">${args} = {u'data': []}</msg>
<status endtime="20161109 21:07:00.734" status="PASS" starttime="20161109 21:07:00.734"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:00.736">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:07:00.736" status="PASS" starttime="20161109 21:07:00.736"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:00.738">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:07:00.738" status="PASS" starttime="20161109 21:07:00.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:00.739">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:00.739" status="PASS" starttime="20161109 21:07:00.739"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:07:00.740" status="PASS" starttime="20161109 21:07:00.739"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:00.742">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:00.742" status="PASS" starttime="20161109 21:07:00.741"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:00.744">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:00.744" status="PASS" starttime="20161109 21:07:00.743"></status>
</kw>
<status endtime="20161109 21:07:00.745" status="PASS" starttime="20161109 21:07:00.743"></status>
</kw>
<status endtime="20161109 21:07:00.745" status="PASS" starttime="20161109 21:07:00.740"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:00.746">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:07:00.747" status="PASS" starttime="20161109 21:07:00.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:00.748">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:00.748" status="PASS" starttime="20161109 21:07:00.748"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:00.749">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:07:00.749" status="PASS" starttime="20161109 21:07:00.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:00.749">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:07:00.749" status="PASS" starttime="20161109 21:07:00.749"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:01.226">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:01.226">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:01.226" status="PASS" starttime="20161109 21:07:00.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:01.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:01.227" status="PASS" starttime="20161109 21:07:01.227"></status>
</kw>
<status endtime="20161109 21:07:01.227" status="PASS" starttime="20161109 21:07:00.745"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:01.503">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:01.503">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:01.503" status="PASS" starttime="20161109 21:07:01.228"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:01.505">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:01.505" status="PASS" starttime="20161109 21:07:01.504"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:01.507">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:01.507" status="PASS" starttime="20161109 21:07:01.506"></status>
</kw>
<status endtime="20161109 21:07:01.507" status="PASS" starttime="20161109 21:07:01.506"></status>
</kw>
<status endtime="20161109 21:07:01.507" status="PASS" starttime="20161109 21:07:01.504"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:01.508">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:01.508" status="PASS" starttime="20161109 21:07:00.736"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:01.508">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:01.508" status="PASS" starttime="20161109 21:07:00.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:01.509">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:01.510" status="PASS" starttime="20161109 21:07:01.509"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:01.511">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:07:01.511">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:07:01.511">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:07:01.511" status="PASS" starttime="20161109 21:07:01.510"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:01.512">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:07:01.512" status="PASS" starttime="20161109 21:07:00.732"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:07:01.513">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:07:01.513" status="FAIL" starttime="20161109 21:07:01.512"></status>
</kw>
<status endtime="20161109 21:07:01.513" status="FAIL" starttime="20161109 21:07:00.732"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:11.516">@{arglist} = [ ]</msg>
<status endtime="20161109 21:07:11.516" status="PASS" starttime="20161109 21:07:11.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:11.517">${args} = {u'data': []}</msg>
<status endtime="20161109 21:07:11.517" status="PASS" starttime="20161109 21:07:11.516"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:11.521">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:07:11.521" status="PASS" starttime="20161109 21:07:11.521"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:11.523">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:07:11.523" status="PASS" starttime="20161109 21:07:11.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:11.524">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:11.524" status="PASS" starttime="20161109 21:07:11.523"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:07:11.525" status="PASS" starttime="20161109 21:07:11.524"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:11.528">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:11.528" status="PASS" starttime="20161109 21:07:11.526"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:11.529">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:11.529" status="PASS" starttime="20161109 21:07:11.529"></status>
</kw>
<status endtime="20161109 21:07:11.529" status="PASS" starttime="20161109 21:07:11.528"></status>
</kw>
<status endtime="20161109 21:07:11.530" status="PASS" starttime="20161109 21:07:11.525"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:11.530">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:07:11.531" status="PASS" starttime="20161109 21:07:11.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:11.531">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:11.531" status="PASS" starttime="20161109 21:07:11.531"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:11.532">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:07:11.532" status="PASS" starttime="20161109 21:07:11.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:11.532">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:07:11.532" status="PASS" starttime="20161109 21:07:11.532"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:12.773">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:12.773">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:12.773" status="PASS" starttime="20161109 21:07:11.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:12.775">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:12.775" status="PASS" starttime="20161109 21:07:12.774"></status>
</kw>
<status endtime="20161109 21:07:12.775" status="PASS" starttime="20161109 21:07:11.530"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:13.887">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:13.887">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:13.888" status="PASS" starttime="20161109 21:07:12.775"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:13.890">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:13.890" status="PASS" starttime="20161109 21:07:13.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:13.891">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:13.892" status="PASS" starttime="20161109 21:07:13.891"></status>
</kw>
<status endtime="20161109 21:07:13.892" status="PASS" starttime="20161109 21:07:13.890"></status>
</kw>
<status endtime="20161109 21:07:13.892" status="PASS" starttime="20161109 21:07:13.888"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:13.892">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:13.892" status="PASS" starttime="20161109 21:07:11.521"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:13.893">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:13.893" status="PASS" starttime="20161109 21:07:11.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:13.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:13.894" status="PASS" starttime="20161109 21:07:13.893"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:13.894">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:07:13.894">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:07:13.895">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:07:13.895" status="PASS" starttime="20161109 21:07:13.894"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:13.895">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:07:13.895" status="PASS" starttime="20161109 21:07:11.515"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:07:13.896">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:07:13.896" status="FAIL" starttime="20161109 21:07:13.896"></status>
</kw>
<status endtime="20161109 21:07:13.897" status="FAIL" starttime="20161109 21:07:11.514"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:23.899">@{arglist} = [ ]</msg>
<status endtime="20161109 21:07:23.899" status="PASS" starttime="20161109 21:07:23.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:23.900">${args} = {u'data': []}</msg>
<status endtime="20161109 21:07:23.900" status="PASS" starttime="20161109 21:07:23.900"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:23.902">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:07:23.902" status="PASS" starttime="20161109 21:07:23.901"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:23.904">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:07:23.904" status="PASS" starttime="20161109 21:07:23.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:23.904">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:23.904" status="PASS" starttime="20161109 21:07:23.904"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:07:23.905" status="PASS" starttime="20161109 21:07:23.905"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:23.908">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:23.908" status="PASS" starttime="20161109 21:07:23.906"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:23.909">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:23.909" status="PASS" starttime="20161109 21:07:23.908"></status>
</kw>
<status endtime="20161109 21:07:23.909" status="PASS" starttime="20161109 21:07:23.908"></status>
</kw>
<status endtime="20161109 21:07:23.909" status="PASS" starttime="20161109 21:07:23.905"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:23.910">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:07:23.911" status="PASS" starttime="20161109 21:07:23.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:23.911">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:23.911" status="PASS" starttime="20161109 21:07:23.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:23.912">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:07:23.912" status="PASS" starttime="20161109 21:07:23.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:23.912">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:07:23.912" status="PASS" starttime="20161109 21:07:23.912"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:24.253">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:24.253">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:24.253" status="PASS" starttime="20161109 21:07:23.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:24.254">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:24.254" status="PASS" starttime="20161109 21:07:24.253"></status>
</kw>
<status endtime="20161109 21:07:24.254" status="PASS" starttime="20161109 21:07:23.909"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:24.538">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:24.539">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:24.539" status="PASS" starttime="20161109 21:07:24.255"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:24.541">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:24.541" status="PASS" starttime="20161109 21:07:24.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:24.542">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:24.543" status="PASS" starttime="20161109 21:07:24.542"></status>
</kw>
<status endtime="20161109 21:07:24.543" status="PASS" starttime="20161109 21:07:24.541"></status>
</kw>
<status endtime="20161109 21:07:24.543" status="PASS" starttime="20161109 21:07:24.539"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:24.543">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:24.543" status="PASS" starttime="20161109 21:07:23.902"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:24.544">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:24.544" status="PASS" starttime="20161109 21:07:23.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:24.545">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:24.545" status="PASS" starttime="20161109 21:07:24.544"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:24.546">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:07:24.546">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:07:24.546">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:07:24.546" status="PASS" starttime="20161109 21:07:24.545"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:24.546">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:07:24.546" status="PASS" starttime="20161109 21:07:23.898"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:07:24.547">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:07:24.547" status="FAIL" starttime="20161109 21:07:24.547"></status>
</kw>
<status endtime="20161109 21:07:24.548" status="FAIL" starttime="20161109 21:07:23.897"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:34.550">@{arglist} = [ ]</msg>
<status endtime="20161109 21:07:34.550" status="PASS" starttime="20161109 21:07:34.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:34.551">${args} = {u'data': []}</msg>
<status endtime="20161109 21:07:34.551" status="PASS" starttime="20161109 21:07:34.551"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:34.553">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:07:34.553" status="PASS" starttime="20161109 21:07:34.553"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:34.555">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:07:34.555" status="PASS" starttime="20161109 21:07:34.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:34.556">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:34.556" status="PASS" starttime="20161109 21:07:34.555"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:07:34.557" status="PASS" starttime="20161109 21:07:34.556"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:34.560">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:34.560" status="PASS" starttime="20161109 21:07:34.559"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:34.561">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:34.561" status="PASS" starttime="20161109 21:07:34.561"></status>
</kw>
<status endtime="20161109 21:07:34.562" status="PASS" starttime="20161109 21:07:34.560"></status>
</kw>
<status endtime="20161109 21:07:34.562" status="PASS" starttime="20161109 21:07:34.558"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:34.563">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:07:34.564" status="PASS" starttime="20161109 21:07:34.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:34.564">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:34.564" status="PASS" starttime="20161109 21:07:34.564"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:34.565">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:07:34.565" status="PASS" starttime="20161109 21:07:34.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:34.566">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:07:34.566" status="PASS" starttime="20161109 21:07:34.566"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:34.905">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:34.905">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:34.905" status="PASS" starttime="20161109 21:07:34.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:34.907">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:34.907" status="PASS" starttime="20161109 21:07:34.906"></status>
</kw>
<status endtime="20161109 21:07:34.908" status="PASS" starttime="20161109 21:07:34.562"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:35.181">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:35.181">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:35.181" status="PASS" starttime="20161109 21:07:34.908"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:35.183">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:35.183" status="PASS" starttime="20161109 21:07:35.182"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:35.185">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:35.185" status="PASS" starttime="20161109 21:07:35.184"></status>
</kw>
<status endtime="20161109 21:07:35.185" status="PASS" starttime="20161109 21:07:35.183"></status>
</kw>
<status endtime="20161109 21:07:35.185" status="PASS" starttime="20161109 21:07:35.182"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:35.186">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:35.186" status="PASS" starttime="20161109 21:07:34.553"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:35.186">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:35.186" status="PASS" starttime="20161109 21:07:34.552"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:35.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:35.187" status="PASS" starttime="20161109 21:07:35.186"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:35.188">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:07:35.188">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:07:35.188">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:07:35.188" status="PASS" starttime="20161109 21:07:35.187"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:35.188">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:07:35.189" status="PASS" starttime="20161109 21:07:34.549"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:07:35.189">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:07:35.189" status="FAIL" starttime="20161109 21:07:35.189"></status>
</kw>
<status endtime="20161109 21:07:35.189" status="FAIL" starttime="20161109 21:07:34.548"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.192">@{arglist} = [ ]</msg>
<status endtime="20161109 21:07:45.192" status="PASS" starttime="20161109 21:07:45.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.193">${args} = {u'data': []}</msg>
<status endtime="20161109 21:07:45.193" status="PASS" starttime="20161109 21:07:45.192"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.195">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:07:45.195" status="PASS" starttime="20161109 21:07:45.194"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.197">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:07:45.197" status="PASS" starttime="20161109 21:07:45.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.197">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:45.197" status="PASS" starttime="20161109 21:07:45.197"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:07:45.198" status="PASS" starttime="20161109 21:07:45.198"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.201">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:45.201" status="PASS" starttime="20161109 21:07:45.200"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:45.202">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:45.202" status="PASS" starttime="20161109 21:07:45.202"></status>
</kw>
<status endtime="20161109 21:07:45.203" status="PASS" starttime="20161109 21:07:45.201"></status>
</kw>
<status endtime="20161109 21:07:45.203" status="PASS" starttime="20161109 21:07:45.199"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:45.204">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:07:45.205" status="PASS" starttime="20161109 21:07:45.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.206">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:45.206" status="PASS" starttime="20161109 21:07:45.205"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.207">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:07:45.207" status="PASS" starttime="20161109 21:07:45.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.208">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:07:45.208" status="PASS" starttime="20161109 21:07:45.207"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.550">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:45.550">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:45.550" status="PASS" starttime="20161109 21:07:45.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:45.551">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:45.552" status="PASS" starttime="20161109 21:07:45.551"></status>
</kw>
<status endtime="20161109 21:07:45.552" status="PASS" starttime="20161109 21:07:45.203"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.832">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:45.832">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:45.832" status="PASS" starttime="20161109 21:07:45.552"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.834">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:45.835" status="PASS" starttime="20161109 21:07:45.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:45.836">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:45.836" status="PASS" starttime="20161109 21:07:45.836"></status>
</kw>
<status endtime="20161109 21:07:45.836" status="PASS" starttime="20161109 21:07:45.835"></status>
</kw>
<status endtime="20161109 21:07:45.836" status="PASS" starttime="20161109 21:07:45.833"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:45.837">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:45.837" status="PASS" starttime="20161109 21:07:45.195"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:45.837">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:45.837" status="PASS" starttime="20161109 21:07:45.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:45.838">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:45.838" status="PASS" starttime="20161109 21:07:45.838"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:45.839">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:07:45.839">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:07:45.839">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:07:45.840" status="PASS" starttime="20161109 21:07:45.839"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:45.840">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:07:45.840" status="PASS" starttime="20161109 21:07:45.191"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:07:45.841">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:07:45.841" status="FAIL" starttime="20161109 21:07:45.840"></status>
</kw>
<status endtime="20161109 21:07:45.841" status="FAIL" starttime="20161109 21:07:45.190"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:55.844">@{arglist} = [ ]</msg>
<status endtime="20161109 21:07:55.844" status="PASS" starttime="20161109 21:07:55.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:55.845">${args} = {u'data': []}</msg>
<status endtime="20161109 21:07:55.845" status="PASS" starttime="20161109 21:07:55.844"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:55.847">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:07:55.847" status="PASS" starttime="20161109 21:07:55.846"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:55.851">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:07:55.851" status="PASS" starttime="20161109 21:07:55.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:55.852">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:55.852" status="PASS" starttime="20161109 21:07:55.851"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:07:55.853" status="PASS" starttime="20161109 21:07:55.853"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:55.857">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:55.857" status="PASS" starttime="20161109 21:07:55.855"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:55.859">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:07:55.859" status="PASS" starttime="20161109 21:07:55.859"></status>
</kw>
<status endtime="20161109 21:07:55.859" status="PASS" starttime="20161109 21:07:55.858"></status>
</kw>
<status endtime="20161109 21:07:55.859" status="PASS" starttime="20161109 21:07:55.854"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:55.860">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:07:55.861" status="PASS" starttime="20161109 21:07:55.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:55.861">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:07:55.861" status="PASS" starttime="20161109 21:07:55.861"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:55.862">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:07:55.862" status="PASS" starttime="20161109 21:07:55.861"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:55.862">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:07:55.862" status="PASS" starttime="20161109 21:07:55.862"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:56.191">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:56.192">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:56.192" status="PASS" starttime="20161109 21:07:55.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:56.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:56.193" status="PASS" starttime="20161109 21:07:56.192"></status>
</kw>
<status endtime="20161109 21:07:56.193" status="PASS" starttime="20161109 21:07:55.859"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:56.581">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:07:56.581">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:56.582" status="PASS" starttime="20161109 21:07:56.193"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:56.583">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:56.583" status="PASS" starttime="20161109 21:07:56.583"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:56.585">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:07:56.585" status="PASS" starttime="20161109 21:07:56.584"></status>
</kw>
<status endtime="20161109 21:07:56.585" status="PASS" starttime="20161109 21:07:56.584"></status>
</kw>
<status endtime="20161109 21:07:56.585" status="PASS" starttime="20161109 21:07:56.582"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:56.586">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:56.586" status="PASS" starttime="20161109 21:07:55.848"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:56.586">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:07:56.586" status="PASS" starttime="20161109 21:07:55.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:07:56.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:07:56.587" status="PASS" starttime="20161109 21:07:56.586"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:07:56.588">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:07:56.588">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:07:56.588">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:07:56.588" status="PASS" starttime="20161109 21:07:56.587"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:07:56.589">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:07:56.589" status="PASS" starttime="20161109 21:07:55.842"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:07:56.590">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:07:56.590" status="FAIL" starttime="20161109 21:07:56.589"></status>
</kw>
<status endtime="20161109 21:07:56.590" status="FAIL" starttime="20161109 21:07:55.842"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:06.593">@{arglist} = [ ]</msg>
<status endtime="20161109 21:08:06.593" status="PASS" starttime="20161109 21:08:06.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:06.594">${args} = {u'data': []}</msg>
<status endtime="20161109 21:08:06.594" status="PASS" starttime="20161109 21:08:06.594"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:06.596">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:08:06.596" status="PASS" starttime="20161109 21:08:06.596"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:06.598">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:08:06.598" status="PASS" starttime="20161109 21:08:06.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:06.599">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:08:06.599" status="PASS" starttime="20161109 21:08:06.599"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:08:06.600" status="PASS" starttime="20161109 21:08:06.599"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:06.602">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:08:06.602" status="PASS" starttime="20161109 21:08:06.601"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:06.603">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:08:06.604" status="PASS" starttime="20161109 21:08:06.603"></status>
</kw>
<status endtime="20161109 21:08:06.604" status="PASS" starttime="20161109 21:08:06.602"></status>
</kw>
<status endtime="20161109 21:08:06.604" status="PASS" starttime="20161109 21:08:06.600"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:06.605">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:08:06.606" status="PASS" starttime="20161109 21:08:06.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:06.607">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:08:06.607" status="PASS" starttime="20161109 21:08:06.606"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:06.608">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:08:06.608" status="PASS" starttime="20161109 21:08:06.607"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:06.609">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:08:06.609" status="PASS" starttime="20161109 21:08:06.609"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:07.198">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:08:07.198">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:07.198" status="PASS" starttime="20161109 21:08:06.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:07.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:08:07.200" status="PASS" starttime="20161109 21:08:07.199"></status>
</kw>
<status endtime="20161109 21:08:07.200" status="PASS" starttime="20161109 21:08:06.604"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:07.484">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:08:07.484">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:07.484" status="PASS" starttime="20161109 21:08:07.200"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:07.486">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:08:07.486" status="PASS" starttime="20161109 21:08:07.485"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:07.486">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:08:07.486" status="PASS" starttime="20161109 21:08:07.486"></status>
</kw>
<status endtime="20161109 21:08:07.487" status="PASS" starttime="20161109 21:08:07.486"></status>
</kw>
<status endtime="20161109 21:08:07.487" status="PASS" starttime="20161109 21:08:07.485"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:07.487">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:07.487" status="PASS" starttime="20161109 21:08:06.596"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:07.487">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:07.487" status="PASS" starttime="20161109 21:08:06.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:07.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:08:07.488" status="PASS" starttime="20161109 21:08:07.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:07.488">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:08:07.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:08:07.488">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:08:07.488" status="PASS" starttime="20161109 21:08:07.488"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:07.489">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:08:07.489" status="PASS" starttime="20161109 21:08:06.592"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:08:07.490">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:08:07.490" status="FAIL" starttime="20161109 21:08:07.489"></status>
</kw>
<status endtime="20161109 21:08:07.490" status="FAIL" starttime="20161109 21:08:06.591"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:17.492">@{arglist} = [ ]</msg>
<status endtime="20161109 21:08:17.492" status="PASS" starttime="20161109 21:08:17.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:17.493">${args} = {u'data': []}</msg>
<status endtime="20161109 21:08:17.493" status="PASS" starttime="20161109 21:08:17.493"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:17.494">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:08:17.495" status="PASS" starttime="20161109 21:08:17.494"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:17.496">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:08:17.496" status="PASS" starttime="20161109 21:08:17.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:17.497">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:08:17.497" status="PASS" starttime="20161109 21:08:17.496"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:08:17.498" status="PASS" starttime="20161109 21:08:17.497"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:17.500">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:08:17.500" status="PASS" starttime="20161109 21:08:17.499"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:17.501">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:08:17.502" status="PASS" starttime="20161109 21:08:17.501"></status>
</kw>
<status endtime="20161109 21:08:17.502" status="PASS" starttime="20161109 21:08:17.500"></status>
</kw>
<status endtime="20161109 21:08:17.502" status="PASS" starttime="20161109 21:08:17.498"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:17.503">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:08:17.503" status="PASS" starttime="20161109 21:08:17.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:17.504">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:08:17.504" status="PASS" starttime="20161109 21:08:17.503"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:17.505">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:08:17.505" status="PASS" starttime="20161109 21:08:17.504"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:17.505">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:08:17.505" status="PASS" starttime="20161109 21:08:17.505"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:18.024">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:08:18.024">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:18.024" status="PASS" starttime="20161109 21:08:17.505"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:18.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:08:18.025" status="PASS" starttime="20161109 21:08:18.024"></status>
</kw>
<status endtime="20161109 21:08:18.025" status="PASS" starttime="20161109 21:08:17.502"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:22.064">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:08:22.064">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:22.064" status="PASS" starttime="20161109 21:08:18.025"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:22.066">${msg} = Response code:200, Content:{
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:08:22.066" status="PASS" starttime="20161109 21:08:22.065"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:22.067">Response code:200, Content:{
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:08:22.068" status="PASS" starttime="20161109 21:08:22.067"></status>
</kw>
<status endtime="20161109 21:08:22.068" status="PASS" starttime="20161109 21:08:22.066"></status>
</kw>
<status endtime="20161109 21:08:22.068" status="PASS" starttime="20161109 21:08:22.064"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:22.068">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:22.068" status="PASS" starttime="20161109 21:08:17.495"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:22.069">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:22.069" status="PASS" starttime="20161109 21:08:17.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:22.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:08:22.070" status="PASS" starttime="20161109 21:08:22.069"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:22.071">To JSON using : content={
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:08:22.071">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:08:22.071">${content} = {u'data': u'HOST_POWERING_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:08:22.071" status="PASS" starttime="20161109 21:08:22.070"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:22.071">${bmc_state} = HOST_POWERING_ON</msg>
<status endtime="20161109 21:08:22.071" status="PASS" starttime="20161109 21:08:17.491"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:08:22.072">'HOST_POWERING_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:08:22.072" status="FAIL" starttime="20161109 21:08:22.072"></status>
</kw>
<status endtime="20161109 21:08:22.073" status="FAIL" starttime="20161109 21:08:17.491"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.075">@{arglist} = [ ]</msg>
<status endtime="20161109 21:08:32.075" status="PASS" starttime="20161109 21:08:32.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.076">${args} = {u'data': []}</msg>
<status endtime="20161109 21:08:32.076" status="PASS" starttime="20161109 21:08:32.076"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.078">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:08:32.078" status="PASS" starttime="20161109 21:08:32.078"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.080">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:08:32.080" status="PASS" starttime="20161109 21:08:32.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.081">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:08:32.081" status="PASS" starttime="20161109 21:08:32.081"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:08:32.082" status="PASS" starttime="20161109 21:08:32.081"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.084">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:08:32.084" status="PASS" starttime="20161109 21:08:32.083"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:32.085">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:08:32.086" status="PASS" starttime="20161109 21:08:32.085"></status>
</kw>
<status endtime="20161109 21:08:32.086" status="PASS" starttime="20161109 21:08:32.084"></status>
</kw>
<status endtime="20161109 21:08:32.086" status="PASS" starttime="20161109 21:08:32.082"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:32.087">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:08:32.088" status="PASS" starttime="20161109 21:08:32.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:08:32.089" status="PASS" starttime="20161109 21:08:32.088"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.090">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:08:32.090" status="PASS" starttime="20161109 21:08:32.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.090">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:08:32.090" status="PASS" starttime="20161109 21:08:32.090"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.425">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:08:32.426">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:32.426" status="PASS" starttime="20161109 21:08:32.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:32.427">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:08:32.427" status="PASS" starttime="20161109 21:08:32.426"></status>
</kw>
<status endtime="20161109 21:08:32.427" status="PASS" starttime="20161109 21:08:32.086"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.712">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:08:32.712">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:32.712" status="PASS" starttime="20161109 21:08:32.427"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.714">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:08:32.714" status="PASS" starttime="20161109 21:08:32.713"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:32.716">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:08:32.716" status="PASS" starttime="20161109 21:08:32.715"></status>
</kw>
<status endtime="20161109 21:08:32.716" status="PASS" starttime="20161109 21:08:32.715"></status>
</kw>
<status endtime="20161109 21:08:32.716" status="PASS" starttime="20161109 21:08:32.713"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:32.717">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:32.717" status="PASS" starttime="20161109 21:08:32.079"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:32.717">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:32.717" status="PASS" starttime="20161109 21:08:32.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:32.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:08:32.718" status="PASS" starttime="20161109 21:08:32.717"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:32.719">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:08:32.719">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:08:32.719">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:08:32.719" status="PASS" starttime="20161109 21:08:32.718"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:32.720">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:08:32.720" status="PASS" starttime="20161109 21:08:32.074"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:08:32.721">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:08:32.721" status="FAIL" starttime="20161109 21:08:32.720"></status>
</kw>
<status endtime="20161109 21:08:32.721" status="FAIL" starttime="20161109 21:08:32.073"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:42.724">@{arglist} = [ ]</msg>
<status endtime="20161109 21:08:42.724" status="PASS" starttime="20161109 21:08:42.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:42.725">${args} = {u'data': []}</msg>
<status endtime="20161109 21:08:42.725" status="PASS" starttime="20161109 21:08:42.724"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:42.726">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:08:42.726" status="PASS" starttime="20161109 21:08:42.726"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:42.728">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:08:42.728" status="PASS" starttime="20161109 21:08:42.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:42.729">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:08:42.729" status="PASS" starttime="20161109 21:08:42.729"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:08:42.730" status="PASS" starttime="20161109 21:08:42.729"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:42.732">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:08:42.732" status="PASS" starttime="20161109 21:08:42.731"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:42.733">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:08:42.733" status="PASS" starttime="20161109 21:08:42.733"></status>
</kw>
<status endtime="20161109 21:08:42.733" status="PASS" starttime="20161109 21:08:42.732"></status>
</kw>
<status endtime="20161109 21:08:42.734" status="PASS" starttime="20161109 21:08:42.730"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:42.735">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:08:42.738" status="PASS" starttime="20161109 21:08:42.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:42.739">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:08:42.739" status="PASS" starttime="20161109 21:08:42.739"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:42.740">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:08:42.740" status="PASS" starttime="20161109 21:08:42.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:42.741">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:08:42.741" status="PASS" starttime="20161109 21:08:42.741"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:43.220">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:08:43.220">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:43.220" status="PASS" starttime="20161109 21:08:42.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:43.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:08:43.222" status="PASS" starttime="20161109 21:08:43.221"></status>
</kw>
<status endtime="20161109 21:08:43.222" status="PASS" starttime="20161109 21:08:42.734"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:43.499">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:08:43.499">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:43.499" status="PASS" starttime="20161109 21:08:43.222"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:43.501">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:08:43.501" status="PASS" starttime="20161109 21:08:43.500"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:43.503">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:08:43.503" status="PASS" starttime="20161109 21:08:43.502"></status>
</kw>
<status endtime="20161109 21:08:43.503" status="PASS" starttime="20161109 21:08:43.502"></status>
</kw>
<status endtime="20161109 21:08:43.503" status="PASS" starttime="20161109 21:08:43.500"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:43.503">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:43.504" status="PASS" starttime="20161109 21:08:42.727"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:43.504">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:43.504" status="PASS" starttime="20161109 21:08:42.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:43.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:08:43.505" status="PASS" starttime="20161109 21:08:43.504"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:43.506">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:08:43.506">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:08:43.506">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:08:43.506" status="PASS" starttime="20161109 21:08:43.505"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:43.506">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:08:43.506" status="PASS" starttime="20161109 21:08:42.723"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:08:43.507">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:08:43.507" status="FAIL" starttime="20161109 21:08:43.507"></status>
</kw>
<status endtime="20161109 21:08:43.508" status="FAIL" starttime="20161109 21:08:42.722"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:53.510">@{arglist} = [ ]</msg>
<status endtime="20161109 21:08:53.510" status="PASS" starttime="20161109 21:08:53.510"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:53.511">${args} = {u'data': []}</msg>
<status endtime="20161109 21:08:53.511" status="PASS" starttime="20161109 21:08:53.511"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:53.513">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:08:53.513" status="PASS" starttime="20161109 21:08:53.512"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:53.515">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:08:53.515" status="PASS" starttime="20161109 21:08:53.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:53.516">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:08:53.516" status="PASS" starttime="20161109 21:08:53.515"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:08:53.557" status="PASS" starttime="20161109 21:08:53.516"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:53.560">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:08:53.560" status="PASS" starttime="20161109 21:08:53.559"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:53.562">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:08:53.562" status="PASS" starttime="20161109 21:08:53.561"></status>
</kw>
<status endtime="20161109 21:08:53.562" status="PASS" starttime="20161109 21:08:53.561"></status>
</kw>
<status endtime="20161109 21:08:53.562" status="PASS" starttime="20161109 21:08:53.558"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:53.563">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:08:53.564" status="PASS" starttime="20161109 21:08:53.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:53.565">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:08:53.565" status="PASS" starttime="20161109 21:08:53.564"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:53.566">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:08:53.566" status="PASS" starttime="20161109 21:08:53.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:53.567">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:08:53.567" status="PASS" starttime="20161109 21:08:53.566"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:54.629">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:08:54.629">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:54.629" status="PASS" starttime="20161109 21:08:53.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:54.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:08:54.630" status="PASS" starttime="20161109 21:08:54.629"></status>
</kw>
<status endtime="20161109 21:08:54.630" status="PASS" starttime="20161109 21:08:53.562"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:55.483">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:08:55.483">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:55.483" status="PASS" starttime="20161109 21:08:54.631"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:55.485">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:08:55.485" status="PASS" starttime="20161109 21:08:55.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:55.486">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:08:55.486" status="PASS" starttime="20161109 21:08:55.486"></status>
</kw>
<status endtime="20161109 21:08:55.487" status="PASS" starttime="20161109 21:08:55.485"></status>
</kw>
<status endtime="20161109 21:08:55.487" status="PASS" starttime="20161109 21:08:55.483"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:55.488">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:55.488" status="PASS" starttime="20161109 21:08:53.513"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:55.488">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:08:55.488" status="PASS" starttime="20161109 21:08:53.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:08:55.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:08:55.489" status="PASS" starttime="20161109 21:08:55.489"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:08:55.490">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:08:55.490">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:08:55.490">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:08:55.490" status="PASS" starttime="20161109 21:08:55.490"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:08:55.490">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:08:55.490" status="PASS" starttime="20161109 21:08:53.509"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:08:55.491">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:08:55.491" status="FAIL" starttime="20161109 21:08:55.491"></status>
</kw>
<status endtime="20161109 21:08:55.491" status="FAIL" starttime="20161109 21:08:53.508"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:05.494">@{arglist} = [ ]</msg>
<status endtime="20161109 21:09:05.494" status="PASS" starttime="20161109 21:09:05.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:05.495">${args} = {u'data': []}</msg>
<status endtime="20161109 21:09:05.495" status="PASS" starttime="20161109 21:09:05.494"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:05.496">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:09:05.496" status="PASS" starttime="20161109 21:09:05.496"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:05.498">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:09:05.498" status="PASS" starttime="20161109 21:09:05.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:05.499">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:09:05.499" status="PASS" starttime="20161109 21:09:05.499"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:09:05.500" status="PASS" starttime="20161109 21:09:05.500"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:05.502">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:09:05.502" status="PASS" starttime="20161109 21:09:05.501"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:05.504">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:09:05.504" status="PASS" starttime="20161109 21:09:05.503"></status>
</kw>
<status endtime="20161109 21:09:05.504" status="PASS" starttime="20161109 21:09:05.503"></status>
</kw>
<status endtime="20161109 21:09:05.504" status="PASS" starttime="20161109 21:09:05.501"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:05.506">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:09:05.506" status="PASS" starttime="20161109 21:09:05.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:05.507">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:09:05.507" status="PASS" starttime="20161109 21:09:05.507"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:05.508">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:09:05.508" status="PASS" starttime="20161109 21:09:05.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:05.509">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:09:05.509" status="PASS" starttime="20161109 21:09:05.509"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:05.850">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:09:05.850">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:05.850" status="PASS" starttime="20161109 21:09:05.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:05.851">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:09:05.851" status="PASS" starttime="20161109 21:09:05.850"></status>
</kw>
<status endtime="20161109 21:09:05.851" status="PASS" starttime="20161109 21:09:05.504"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:06.127">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:09:06.128">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:06.128" status="PASS" starttime="20161109 21:09:05.851"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:06.132">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:09:06.132" status="PASS" starttime="20161109 21:09:06.131"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:06.133">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:09:06.133" status="PASS" starttime="20161109 21:09:06.133"></status>
</kw>
<status endtime="20161109 21:09:06.133" status="PASS" starttime="20161109 21:09:06.132"></status>
</kw>
<status endtime="20161109 21:09:06.134" status="PASS" starttime="20161109 21:09:06.128"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:06.134">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:06.134" status="PASS" starttime="20161109 21:09:05.497"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:06.134">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:06.134" status="PASS" starttime="20161109 21:09:05.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:06.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:09:06.135" status="PASS" starttime="20161109 21:09:06.134"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:06.136">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:09:06.136">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:09:06.136">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:09:06.136" status="PASS" starttime="20161109 21:09:06.135"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:06.136">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:09:06.136" status="PASS" starttime="20161109 21:09:05.493"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:09:06.137">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:09:06.137" status="FAIL" starttime="20161109 21:09:06.137"></status>
</kw>
<status endtime="20161109 21:09:06.137" status="FAIL" starttime="20161109 21:09:05.492"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.140">@{arglist} = [ ]</msg>
<status endtime="20161109 21:09:16.140" status="PASS" starttime="20161109 21:09:16.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.141">${args} = {u'data': []}</msg>
<status endtime="20161109 21:09:16.141" status="PASS" starttime="20161109 21:09:16.140"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.143">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:09:16.143" status="PASS" starttime="20161109 21:09:16.142"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.145">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:09:16.146" status="PASS" starttime="20161109 21:09:16.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.146">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:09:16.146" status="PASS" starttime="20161109 21:09:16.146"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:09:16.147" status="PASS" starttime="20161109 21:09:16.147"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.170">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:09:16.170" status="PASS" starttime="20161109 21:09:16.148"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:16.170">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:09:16.171" status="PASS" starttime="20161109 21:09:16.170"></status>
</kw>
<status endtime="20161109 21:09:16.171" status="PASS" starttime="20161109 21:09:16.170"></status>
</kw>
<status endtime="20161109 21:09:16.171" status="PASS" starttime="20161109 21:09:16.147"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:16.172">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:09:16.172" status="PASS" starttime="20161109 21:09:16.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.172">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:09:16.173" status="PASS" starttime="20161109 21:09:16.172"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.173">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:09:16.173" status="PASS" starttime="20161109 21:09:16.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.174">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:09:16.174" status="PASS" starttime="20161109 21:09:16.173"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.523">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:09:16.523">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:16.523" status="PASS" starttime="20161109 21:09:16.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:16.524">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:09:16.524" status="PASS" starttime="20161109 21:09:16.524"></status>
</kw>
<status endtime="20161109 21:09:16.524" status="PASS" starttime="20161109 21:09:16.171"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.796">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:09:16.796">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:16.796" status="PASS" starttime="20161109 21:09:16.525"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.798">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:09:16.798" status="PASS" starttime="20161109 21:09:16.797"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:16.800">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:09:16.800" status="PASS" starttime="20161109 21:09:16.800"></status>
</kw>
<status endtime="20161109 21:09:16.800" status="PASS" starttime="20161109 21:09:16.798"></status>
</kw>
<status endtime="20161109 21:09:16.801" status="PASS" starttime="20161109 21:09:16.797"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:16.801">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:16.801" status="PASS" starttime="20161109 21:09:16.143"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:16.801">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:16.801" status="PASS" starttime="20161109 21:09:16.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:16.802">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:09:16.802" status="PASS" starttime="20161109 21:09:16.801"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:16.802">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:09:16.803">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:09:16.803">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:09:16.803" status="PASS" starttime="20161109 21:09:16.802"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:16.803">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:09:16.803" status="PASS" starttime="20161109 21:09:16.139"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:09:16.804">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:09:16.804" status="FAIL" starttime="20161109 21:09:16.804"></status>
</kw>
<status endtime="20161109 21:09:16.804" status="FAIL" starttime="20161109 21:09:16.138"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:26.807">@{arglist} = [ ]</msg>
<status endtime="20161109 21:09:26.807" status="PASS" starttime="20161109 21:09:26.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:26.808">${args} = {u'data': []}</msg>
<status endtime="20161109 21:09:26.808" status="PASS" starttime="20161109 21:09:26.807"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:26.810">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:09:26.810" status="PASS" starttime="20161109 21:09:26.809"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:26.811">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:09:26.811" status="PASS" starttime="20161109 21:09:26.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:26.812">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:09:26.812" status="PASS" starttime="20161109 21:09:26.812"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:09:26.813" status="PASS" starttime="20161109 21:09:26.812"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:26.815">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:09:26.815" status="PASS" starttime="20161109 21:09:26.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:26.816">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:09:26.816" status="PASS" starttime="20161109 21:09:26.816"></status>
</kw>
<status endtime="20161109 21:09:26.816" status="PASS" starttime="20161109 21:09:26.815"></status>
</kw>
<status endtime="20161109 21:09:26.816" status="PASS" starttime="20161109 21:09:26.813"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:26.818">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:09:26.818" status="PASS" starttime="20161109 21:09:26.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:26.819">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:09:26.819" status="PASS" starttime="20161109 21:09:26.818"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:26.819">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:09:26.820" status="PASS" starttime="20161109 21:09:26.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:26.820">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:09:26.821" status="PASS" starttime="20161109 21:09:26.820"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:27.220">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:09:27.221">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:27.221" status="PASS" starttime="20161109 21:09:26.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:27.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:09:27.221" status="PASS" starttime="20161109 21:09:27.221"></status>
</kw>
<status endtime="20161109 21:09:27.222" status="PASS" starttime="20161109 21:09:26.817"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:27.588">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:09:27.588">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:27.588" status="PASS" starttime="20161109 21:09:27.222"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:27.590">${msg} = Response code:200, Content:{
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:09:27.590" status="PASS" starttime="20161109 21:09:27.589"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:27.591">Response code:200, Content:{
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:09:27.592" status="PASS" starttime="20161109 21:09:27.591"></status>
</kw>
<status endtime="20161109 21:09:27.592" status="PASS" starttime="20161109 21:09:27.590"></status>
</kw>
<status endtime="20161109 21:09:27.592" status="PASS" starttime="20161109 21:09:27.588"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:27.592">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:27.592" status="PASS" starttime="20161109 21:09:26.810"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:27.593">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:27.593" status="PASS" starttime="20161109 21:09:26.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:27.593">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:09:27.594" status="PASS" starttime="20161109 21:09:27.593"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:27.594">To JSON using : content={
  "data": "HOST_POWERING_OFF", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:09:27.594">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:09:27.595">${content} = {u'data': u'HOST_POWERING_OFF', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:09:27.595" status="PASS" starttime="20161109 21:09:27.594"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:27.595">${bmc_state} = HOST_POWERING_OFF</msg>
<status endtime="20161109 21:09:27.595" status="PASS" starttime="20161109 21:09:26.806"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:09:27.596">'HOST_POWERING_OFF' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:09:27.596" status="FAIL" starttime="20161109 21:09:27.595"></status>
</kw>
<status endtime="20161109 21:09:27.596" status="FAIL" starttime="20161109 21:09:26.805"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:37.599">@{arglist} = [ ]</msg>
<status endtime="20161109 21:09:37.599" status="PASS" starttime="20161109 21:09:37.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:37.600">${args} = {u'data': []}</msg>
<status endtime="20161109 21:09:37.600" status="PASS" starttime="20161109 21:09:37.599"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:37.602">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:09:37.602" status="PASS" starttime="20161109 21:09:37.601"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:37.604">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:09:37.604" status="PASS" starttime="20161109 21:09:37.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:37.605">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:09:37.605" status="PASS" starttime="20161109 21:09:37.604"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:09:37.606" status="PASS" starttime="20161109 21:09:37.605"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:37.609">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:09:37.609" status="PASS" starttime="20161109 21:09:37.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:37.610">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:09:37.610" status="PASS" starttime="20161109 21:09:37.610"></status>
</kw>
<status endtime="20161109 21:09:37.610" status="PASS" starttime="20161109 21:09:37.609"></status>
</kw>
<status endtime="20161109 21:09:37.611" status="PASS" starttime="20161109 21:09:37.606"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:37.612">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:09:37.613" status="PASS" starttime="20161109 21:09:37.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:37.613">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:09:37.613" status="PASS" starttime="20161109 21:09:37.613"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:37.614">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:09:37.614" status="PASS" starttime="20161109 21:09:37.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:37.615">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:09:37.615" status="PASS" starttime="20161109 21:09:37.615"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:38.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:09:38.736">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:38.736" status="PASS" starttime="20161109 21:09:37.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:38.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:09:38.738" status="PASS" starttime="20161109 21:09:38.737"></status>
</kw>
<status endtime="20161109 21:09:38.738" status="PASS" starttime="20161109 21:09:37.611"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:39.461">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:09:39.461">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:39.461" status="PASS" starttime="20161109 21:09:38.738"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:39.463">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:09:39.463" status="PASS" starttime="20161109 21:09:39.462"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:39.465">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:09:39.465" status="PASS" starttime="20161109 21:09:39.464"></status>
</kw>
<status endtime="20161109 21:09:39.465" status="PASS" starttime="20161109 21:09:39.463"></status>
</kw>
<status endtime="20161109 21:09:39.465" status="PASS" starttime="20161109 21:09:39.462"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:39.466">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:39.466" status="PASS" starttime="20161109 21:09:37.602"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:39.466">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:39.466" status="PASS" starttime="20161109 21:09:37.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:39.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:09:39.468" status="PASS" starttime="20161109 21:09:39.468"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:39.469">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:09:39.469">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:09:39.470">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:09:39.470" status="PASS" starttime="20161109 21:09:39.469"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:39.470">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:09:39.470" status="PASS" starttime="20161109 21:09:37.598"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:09:39.471">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:09:39.471" status="FAIL" starttime="20161109 21:09:39.470"></status>
</kw>
<status endtime="20161109 21:09:39.471" status="FAIL" starttime="20161109 21:09:37.597"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:49.475">@{arglist} = [ ]</msg>
<status endtime="20161109 21:09:49.475" status="PASS" starttime="20161109 21:09:49.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:49.476">${args} = {u'data': []}</msg>
<status endtime="20161109 21:09:49.476" status="PASS" starttime="20161109 21:09:49.475"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:49.477">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:09:49.477" status="PASS" starttime="20161109 21:09:49.477"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:49.479">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:09:49.479" status="PASS" starttime="20161109 21:09:49.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:49.480">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:09:49.480" status="PASS" starttime="20161109 21:09:49.479"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:09:49.481" status="PASS" starttime="20161109 21:09:49.480"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:49.483">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:09:49.483" status="PASS" starttime="20161109 21:09:49.482"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:49.484">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:09:49.484" status="PASS" starttime="20161109 21:09:49.484"></status>
</kw>
<status endtime="20161109 21:09:49.484" status="PASS" starttime="20161109 21:09:49.483"></status>
</kw>
<status endtime="20161109 21:09:49.485" status="PASS" starttime="20161109 21:09:49.481"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:49.486">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:09:49.486" status="PASS" starttime="20161109 21:09:49.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:49.487">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:09:49.487" status="PASS" starttime="20161109 21:09:49.487"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:49.488">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:09:49.488" status="PASS" starttime="20161109 21:09:49.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:49.489">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:09:49.489" status="PASS" starttime="20161109 21:09:49.488"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:49.829">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:09:49.829">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:49.829" status="PASS" starttime="20161109 21:09:49.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:49.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:09:49.830" status="PASS" starttime="20161109 21:09:49.829"></status>
</kw>
<status endtime="20161109 21:09:49.830" status="PASS" starttime="20161109 21:09:49.485"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:50.112">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:09:50.113">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:50.113" status="PASS" starttime="20161109 21:09:49.830"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:50.114">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:09:50.114" status="PASS" starttime="20161109 21:09:50.113"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:50.115">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:09:50.115" status="PASS" starttime="20161109 21:09:50.115"></status>
</kw>
<status endtime="20161109 21:09:50.115" status="PASS" starttime="20161109 21:09:50.114"></status>
</kw>
<status endtime="20161109 21:09:50.115" status="PASS" starttime="20161109 21:09:50.113"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:50.115">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:50.115" status="PASS" starttime="20161109 21:09:49.477"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:50.116">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:09:50.116" status="PASS" starttime="20161109 21:09:49.476"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:09:50.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:09:50.116" status="PASS" starttime="20161109 21:09:50.116"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:09:50.117">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:09:50.117">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:09:50.117">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:09:50.117" status="PASS" starttime="20161109 21:09:50.116"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:09:50.117">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:09:50.117" status="PASS" starttime="20161109 21:09:49.473"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:09:50.118">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:09:50.118" status="FAIL" starttime="20161109 21:09:50.117"></status>
</kw>
<status endtime="20161109 21:09:50.118" status="FAIL" starttime="20161109 21:09:49.472"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.120">@{arglist} = [ ]</msg>
<status endtime="20161109 21:10:00.120" status="PASS" starttime="20161109 21:10:00.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.121">${args} = {u'data': []}</msg>
<status endtime="20161109 21:10:00.121" status="PASS" starttime="20161109 21:10:00.121"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.123">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:10:00.123" status="PASS" starttime="20161109 21:10:00.123"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.125">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:10:00.125" status="PASS" starttime="20161109 21:10:00.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.126">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:00.126" status="PASS" starttime="20161109 21:10:00.125"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:10:00.127" status="PASS" starttime="20161109 21:10:00.126"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.129">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:00.129" status="PASS" starttime="20161109 21:10:00.128"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:00.131">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:00.131" status="PASS" starttime="20161109 21:10:00.131"></status>
</kw>
<status endtime="20161109 21:10:00.131" status="PASS" starttime="20161109 21:10:00.129"></status>
</kw>
<status endtime="20161109 21:10:00.131" status="PASS" starttime="20161109 21:10:00.127"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:00.132">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:10:00.133" status="PASS" starttime="20161109 21:10:00.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.133">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:00.133" status="PASS" starttime="20161109 21:10:00.133"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.134">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:10:00.134" status="PASS" starttime="20161109 21:10:00.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.134">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:10:00.134" status="PASS" starttime="20161109 21:10:00.134"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.502">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:00.502">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:00.502" status="PASS" starttime="20161109 21:10:00.134"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:00.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:00.503" status="PASS" starttime="20161109 21:10:00.502"></status>
</kw>
<status endtime="20161109 21:10:00.503" status="PASS" starttime="20161109 21:10:00.131"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.776">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:00.776">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:00.776" status="PASS" starttime="20161109 21:10:00.504"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.778">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:00.778" status="PASS" starttime="20161109 21:10:00.777"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:00.780">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:00.780" status="PASS" starttime="20161109 21:10:00.779"></status>
</kw>
<status endtime="20161109 21:10:00.780" status="PASS" starttime="20161109 21:10:00.778"></status>
</kw>
<status endtime="20161109 21:10:00.780" status="PASS" starttime="20161109 21:10:00.776"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:00.781">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:00.781" status="PASS" starttime="20161109 21:10:00.123"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:00.781">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:00.781" status="PASS" starttime="20161109 21:10:00.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:00.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:00.782" status="PASS" starttime="20161109 21:10:00.782"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:00.783">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:10:00.783">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:10:00.783">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:10:00.783" status="PASS" starttime="20161109 21:10:00.783"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:00.784">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:10:00.784" status="PASS" starttime="20161109 21:10:00.119"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:10:00.785">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:10:00.785" status="FAIL" starttime="20161109 21:10:00.784"></status>
</kw>
<status endtime="20161109 21:10:00.785" status="FAIL" starttime="20161109 21:10:00.118"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:10.787">@{arglist} = [ ]</msg>
<status endtime="20161109 21:10:10.787" status="PASS" starttime="20161109 21:10:10.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:10.788">${args} = {u'data': []}</msg>
<status endtime="20161109 21:10:10.788" status="PASS" starttime="20161109 21:10:10.787"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:10.789">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:10:10.789" status="PASS" starttime="20161109 21:10:10.789"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:10.790">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:10:10.790" status="PASS" starttime="20161109 21:10:10.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:10.791">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:10.791" status="PASS" starttime="20161109 21:10:10.791"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:10:10.791" status="PASS" starttime="20161109 21:10:10.791"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:10.793">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:10.793" status="PASS" starttime="20161109 21:10:10.792"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:10.794">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:10.794" status="PASS" starttime="20161109 21:10:10.793"></status>
</kw>
<status endtime="20161109 21:10:10.794" status="PASS" starttime="20161109 21:10:10.793"></status>
</kw>
<status endtime="20161109 21:10:10.794" status="PASS" starttime="20161109 21:10:10.792"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:10.795">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:10:10.795" status="PASS" starttime="20161109 21:10:10.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:10.796">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:10.796" status="PASS" starttime="20161109 21:10:10.795"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:10.796">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:10:10.796" status="PASS" starttime="20161109 21:10:10.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:10.797">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:10:10.797" status="PASS" starttime="20161109 21:10:10.797"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:11.126">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:11.126">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:11.126" status="PASS" starttime="20161109 21:10:10.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:11.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:11.127" status="PASS" starttime="20161109 21:10:11.127"></status>
</kw>
<status endtime="20161109 21:10:11.127" status="PASS" starttime="20161109 21:10:10.794"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:11.486">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:11.486">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:11.486" status="PASS" starttime="20161109 21:10:11.128"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:11.487">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:11.487" status="PASS" starttime="20161109 21:10:11.486"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:11.488">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:11.488" status="PASS" starttime="20161109 21:10:11.487"></status>
</kw>
<status endtime="20161109 21:10:11.488" status="PASS" starttime="20161109 21:10:11.487"></status>
</kw>
<status endtime="20161109 21:10:11.488" status="PASS" starttime="20161109 21:10:11.486"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:11.488">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:11.488" status="PASS" starttime="20161109 21:10:10.789"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:11.488">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:11.488" status="PASS" starttime="20161109 21:10:10.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:11.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:11.489" status="PASS" starttime="20161109 21:10:11.489"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:11.489">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:10:11.489">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:10:11.490">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:10:11.490" status="PASS" starttime="20161109 21:10:11.489"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:11.490">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:10:11.490" status="PASS" starttime="20161109 21:10:10.786"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:10:11.490">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:10:11.491" status="FAIL" starttime="20161109 21:10:11.490"></status>
</kw>
<status endtime="20161109 21:10:11.491" status="FAIL" starttime="20161109 21:10:10.786"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:21.493">@{arglist} = [ ]</msg>
<status endtime="20161109 21:10:21.493" status="PASS" starttime="20161109 21:10:21.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:21.494">${args} = {u'data': []}</msg>
<status endtime="20161109 21:10:21.494" status="PASS" starttime="20161109 21:10:21.494"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:21.496">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:10:21.496" status="PASS" starttime="20161109 21:10:21.495"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:21.498">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:10:21.498" status="PASS" starttime="20161109 21:10:21.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:21.499">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:21.499" status="PASS" starttime="20161109 21:10:21.498"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:10:21.500" status="PASS" starttime="20161109 21:10:21.499"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:21.502">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:21.502" status="PASS" starttime="20161109 21:10:21.501"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:21.504">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:21.504" status="PASS" starttime="20161109 21:10:21.503"></status>
</kw>
<status endtime="20161109 21:10:21.504" status="PASS" starttime="20161109 21:10:21.503"></status>
</kw>
<status endtime="20161109 21:10:21.504" status="PASS" starttime="20161109 21:10:21.500"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:21.506">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:10:21.509" status="PASS" starttime="20161109 21:10:21.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:21.510">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:21.510" status="PASS" starttime="20161109 21:10:21.509"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:21.511">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:10:21.511" status="PASS" starttime="20161109 21:10:21.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:21.512">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:10:21.512" status="PASS" starttime="20161109 21:10:21.511"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:21.867">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:21.868">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:21.868" status="PASS" starttime="20161109 21:10:21.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:21.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:21.869" status="PASS" starttime="20161109 21:10:21.868"></status>
</kw>
<status endtime="20161109 21:10:21.869" status="PASS" starttime="20161109 21:10:21.504"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:22.144">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:22.144">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:22.144" status="PASS" starttime="20161109 21:10:21.869"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:22.146">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:22.146" status="PASS" starttime="20161109 21:10:22.145"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:22.147">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:22.147" status="PASS" starttime="20161109 21:10:22.146"></status>
</kw>
<status endtime="20161109 21:10:22.147" status="PASS" starttime="20161109 21:10:22.146"></status>
</kw>
<status endtime="20161109 21:10:22.147" status="PASS" starttime="20161109 21:10:22.145"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:22.147">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:22.147" status="PASS" starttime="20161109 21:10:21.496"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:22.147">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:22.147" status="PASS" starttime="20161109 21:10:21.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:22.148">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:22.148" status="PASS" starttime="20161109 21:10:22.148"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:22.148">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:10:22.149">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:10:22.149">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:10:22.149" status="PASS" starttime="20161109 21:10:22.148"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:22.149">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:10:22.149" status="PASS" starttime="20161109 21:10:21.492"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:10:22.149">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:10:22.150" status="FAIL" starttime="20161109 21:10:22.149"></status>
</kw>
<status endtime="20161109 21:10:22.150" status="FAIL" starttime="20161109 21:10:21.491"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.152">@{arglist} = [ ]</msg>
<status endtime="20161109 21:10:32.152" status="PASS" starttime="20161109 21:10:32.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.153">${args} = {u'data': []}</msg>
<status endtime="20161109 21:10:32.153" status="PASS" starttime="20161109 21:10:32.153"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.155">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:10:32.155" status="PASS" starttime="20161109 21:10:32.154"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.157">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:10:32.157" status="PASS" starttime="20161109 21:10:32.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.158">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:32.158" status="PASS" starttime="20161109 21:10:32.157"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:10:32.159" status="PASS" starttime="20161109 21:10:32.158"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.161">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:32.161" status="PASS" starttime="20161109 21:10:32.160"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:32.162">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:32.162" status="PASS" starttime="20161109 21:10:32.162"></status>
</kw>
<status endtime="20161109 21:10:32.162" status="PASS" starttime="20161109 21:10:32.162"></status>
</kw>
<status endtime="20161109 21:10:32.162" status="PASS" starttime="20161109 21:10:32.159"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:32.163">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:10:32.164" status="PASS" starttime="20161109 21:10:32.163"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.164">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:32.164" status="PASS" starttime="20161109 21:10:32.164"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.165">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:10:32.165" status="PASS" starttime="20161109 21:10:32.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.165">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:10:32.165" status="PASS" starttime="20161109 21:10:32.165"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.506">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:32.506">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:32.506" status="PASS" starttime="20161109 21:10:32.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:32.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:32.508" status="PASS" starttime="20161109 21:10:32.507"></status>
</kw>
<status endtime="20161109 21:10:32.508" status="PASS" starttime="20161109 21:10:32.163"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.933">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:32.934">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:32.934" status="PASS" starttime="20161109 21:10:32.508"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.936">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:32.936" status="PASS" starttime="20161109 21:10:32.935"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:32.937">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:32.937" status="PASS" starttime="20161109 21:10:32.937"></status>
</kw>
<status endtime="20161109 21:10:32.937" status="PASS" starttime="20161109 21:10:32.936"></status>
</kw>
<status endtime="20161109 21:10:32.938" status="PASS" starttime="20161109 21:10:32.934"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:32.938">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:32.938" status="PASS" starttime="20161109 21:10:32.155"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:32.938">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:32.938" status="PASS" starttime="20161109 21:10:32.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:32.939">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:32.939" status="PASS" starttime="20161109 21:10:32.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:32.940">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:10:32.940">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:10:32.940">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:10:32.940" status="PASS" starttime="20161109 21:10:32.940"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:32.941">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:10:32.941" status="PASS" starttime="20161109 21:10:32.151"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:10:32.942">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:10:32.942" status="FAIL" starttime="20161109 21:10:32.941"></status>
</kw>
<status endtime="20161109 21:10:32.942" status="FAIL" starttime="20161109 21:10:32.150"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:42.945">@{arglist} = [ ]</msg>
<status endtime="20161109 21:10:42.945" status="PASS" starttime="20161109 21:10:42.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:42.947">${args} = {u'data': []}</msg>
<status endtime="20161109 21:10:42.947" status="PASS" starttime="20161109 21:10:42.945"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:42.949">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:10:42.949" status="PASS" starttime="20161109 21:10:42.948"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:42.951">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:10:42.951" status="PASS" starttime="20161109 21:10:42.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:42.952">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:42.952" status="PASS" starttime="20161109 21:10:42.951"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:10:42.952" status="PASS" starttime="20161109 21:10:42.952"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:42.954">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:42.954" status="PASS" starttime="20161109 21:10:42.953"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:42.955">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:42.955" status="PASS" starttime="20161109 21:10:42.954"></status>
</kw>
<status endtime="20161109 21:10:42.955" status="PASS" starttime="20161109 21:10:42.954"></status>
</kw>
<status endtime="20161109 21:10:42.955" status="PASS" starttime="20161109 21:10:42.952"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:42.956">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:10:42.956" status="PASS" starttime="20161109 21:10:42.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:42.957">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:42.957" status="PASS" starttime="20161109 21:10:42.957"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:42.958">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:10:42.958" status="PASS" starttime="20161109 21:10:42.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:42.958">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:10:42.958" status="PASS" starttime="20161109 21:10:42.958"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:43.575">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:43.575">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:43.575" status="PASS" starttime="20161109 21:10:42.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:43.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:43.577" status="PASS" starttime="20161109 21:10:43.576"></status>
</kw>
<status endtime="20161109 21:10:43.577" status="PASS" starttime="20161109 21:10:42.955"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:44.718">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:44.719">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:44.719" status="PASS" starttime="20161109 21:10:43.577"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:44.721">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:44.721" status="PASS" starttime="20161109 21:10:44.720"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:44.722">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:44.722" status="PASS" starttime="20161109 21:10:44.722"></status>
</kw>
<status endtime="20161109 21:10:44.723" status="PASS" starttime="20161109 21:10:44.721"></status>
</kw>
<status endtime="20161109 21:10:44.723" status="PASS" starttime="20161109 21:10:44.719"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:44.723">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:44.723" status="PASS" starttime="20161109 21:10:42.949"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:44.723">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:44.724" status="PASS" starttime="20161109 21:10:42.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:44.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:44.725" status="PASS" starttime="20161109 21:10:44.724"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:44.726">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:10:44.726">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:10:44.726">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:10:44.726" status="PASS" starttime="20161109 21:10:44.725"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:44.726">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:10:44.726" status="PASS" starttime="20161109 21:10:42.944"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:10:44.727">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:10:44.727" status="FAIL" starttime="20161109 21:10:44.727"></status>
</kw>
<status endtime="20161109 21:10:44.728" status="FAIL" starttime="20161109 21:10:42.943"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:54.731">@{arglist} = [ ]</msg>
<status endtime="20161109 21:10:54.731" status="PASS" starttime="20161109 21:10:54.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:54.732">${args} = {u'data': []}</msg>
<status endtime="20161109 21:10:54.733" status="PASS" starttime="20161109 21:10:54.731"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:54.734">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:10:54.734" status="PASS" starttime="20161109 21:10:54.734"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:54.736">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:10:54.736" status="PASS" starttime="20161109 21:10:54.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:54.737">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:54.737" status="PASS" starttime="20161109 21:10:54.737"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:10:54.738" status="PASS" starttime="20161109 21:10:54.738"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:54.741">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:54.741" status="PASS" starttime="20161109 21:10:54.739"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:54.742">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:10:54.742" status="PASS" starttime="20161109 21:10:54.742"></status>
</kw>
<status endtime="20161109 21:10:54.742" status="PASS" starttime="20161109 21:10:54.741"></status>
</kw>
<status endtime="20161109 21:10:54.742" status="PASS" starttime="20161109 21:10:54.738"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:54.743">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:10:54.744" status="PASS" starttime="20161109 21:10:54.743"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:54.744">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:10:54.744" status="PASS" starttime="20161109 21:10:54.744"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:54.745">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:10:54.745" status="PASS" starttime="20161109 21:10:54.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:54.745">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:10:54.745" status="PASS" starttime="20161109 21:10:54.745"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:55.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:55.085">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:55.085" status="PASS" starttime="20161109 21:10:54.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:55.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:55.086" status="PASS" starttime="20161109 21:10:55.085"></status>
</kw>
<status endtime="20161109 21:10:55.086" status="PASS" starttime="20161109 21:10:54.742"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:55.364">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:10:55.364">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:55.364" status="PASS" starttime="20161109 21:10:55.086"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:55.365">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:55.365" status="PASS" starttime="20161109 21:10:55.364"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:55.366">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:10:55.366" status="PASS" starttime="20161109 21:10:55.366"></status>
</kw>
<status endtime="20161109 21:10:55.366" status="PASS" starttime="20161109 21:10:55.365"></status>
</kw>
<status endtime="20161109 21:10:55.366" status="PASS" starttime="20161109 21:10:55.364"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:55.366">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:55.366" status="PASS" starttime="20161109 21:10:54.735"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:55.366">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:10:55.366" status="PASS" starttime="20161109 21:10:54.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:10:55.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:10:55.367" status="PASS" starttime="20161109 21:10:55.367"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:10:55.368">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:10:55.368">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:10:55.368">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:10:55.368" status="PASS" starttime="20161109 21:10:55.367"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:10:55.368">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:10:55.368" status="PASS" starttime="20161109 21:10:54.729"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:10:55.369">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:10:55.369" status="FAIL" starttime="20161109 21:10:55.368"></status>
</kw>
<status endtime="20161109 21:10:55.369" status="FAIL" starttime="20161109 21:10:54.728"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:05.373">@{arglist} = [ ]</msg>
<status endtime="20161109 21:11:05.374" status="PASS" starttime="20161109 21:11:05.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:05.375">${args} = {u'data': []}</msg>
<status endtime="20161109 21:11:05.376" status="PASS" starttime="20161109 21:11:05.374"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:05.377">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:11:05.377" status="PASS" starttime="20161109 21:11:05.377"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:05.379">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:11:05.379" status="PASS" starttime="20161109 21:11:05.379"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:05.380">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:11:05.380" status="PASS" starttime="20161109 21:11:05.380"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:11:05.381" status="PASS" starttime="20161109 21:11:05.381"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:05.383">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:11:05.383" status="PASS" starttime="20161109 21:11:05.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:05.384">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:11:05.384" status="PASS" starttime="20161109 21:11:05.383"></status>
</kw>
<status endtime="20161109 21:11:05.384" status="PASS" starttime="20161109 21:11:05.383"></status>
</kw>
<status endtime="20161109 21:11:05.384" status="PASS" starttime="20161109 21:11:05.381"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:05.385">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:11:05.385" status="PASS" starttime="20161109 21:11:05.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:05.386">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:11:05.386" status="PASS" starttime="20161109 21:11:05.386"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:05.386">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:11:05.387" status="PASS" starttime="20161109 21:11:05.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:05.387">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:11:05.387" status="PASS" starttime="20161109 21:11:05.387"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:05.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:11:05.727">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:05.727" status="PASS" starttime="20161109 21:11:05.387"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:05.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:11:05.728" status="PASS" starttime="20161109 21:11:05.728"></status>
</kw>
<status endtime="20161109 21:11:05.728" status="PASS" starttime="20161109 21:11:05.384"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:06.006">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:11:06.006">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:06.006" status="PASS" starttime="20161109 21:11:05.728"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:06.007">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:11:06.007" status="PASS" starttime="20161109 21:11:06.007"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:06.008">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:11:06.008" status="PASS" starttime="20161109 21:11:06.008"></status>
</kw>
<status endtime="20161109 21:11:06.008" status="PASS" starttime="20161109 21:11:06.007"></status>
</kw>
<status endtime="20161109 21:11:06.008" status="PASS" starttime="20161109 21:11:06.006"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:06.009">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:06.009" status="PASS" starttime="20161109 21:11:05.378"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:06.009">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:06.009" status="PASS" starttime="20161109 21:11:05.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:06.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:11:06.009" status="PASS" starttime="20161109 21:11:06.009"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:06.010">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:11:06.010">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:11:06.010">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:11:06.010" status="PASS" starttime="20161109 21:11:06.010"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:06.011">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:11:06.011" status="PASS" starttime="20161109 21:11:05.371"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:11:06.011">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:11:06.011" status="FAIL" starttime="20161109 21:11:06.011"></status>
</kw>
<status endtime="20161109 21:11:06.012" status="FAIL" starttime="20161109 21:11:05.370"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:16.014">@{arglist} = [ ]</msg>
<status endtime="20161109 21:11:16.014" status="PASS" starttime="20161109 21:11:16.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:16.015">${args} = {u'data': []}</msg>
<status endtime="20161109 21:11:16.016" status="PASS" starttime="20161109 21:11:16.015"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:16.017">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:11:16.017" status="PASS" starttime="20161109 21:11:16.017"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:16.019">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:11:16.019" status="PASS" starttime="20161109 21:11:16.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:16.020">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:11:16.020" status="PASS" starttime="20161109 21:11:16.020"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:11:16.022" status="PASS" starttime="20161109 21:11:16.022"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:16.024">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:11:16.024" status="PASS" starttime="20161109 21:11:16.023"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:16.024">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:11:16.025" status="PASS" starttime="20161109 21:11:16.024"></status>
</kw>
<status endtime="20161109 21:11:16.025" status="PASS" starttime="20161109 21:11:16.024"></status>
</kw>
<status endtime="20161109 21:11:16.025" status="PASS" starttime="20161109 21:11:16.022"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:16.026">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:11:16.026" status="PASS" starttime="20161109 21:11:16.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:16.027">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:11:16.027" status="PASS" starttime="20161109 21:11:16.027"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:16.027">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:11:16.027" status="PASS" starttime="20161109 21:11:16.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:16.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:11:16.028" status="PASS" starttime="20161109 21:11:16.028"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:16.362">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:11:16.362">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:16.362" status="PASS" starttime="20161109 21:11:16.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:16.363">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:11:16.364" status="PASS" starttime="20161109 21:11:16.362"></status>
</kw>
<status endtime="20161109 21:11:16.364" status="PASS" starttime="20161109 21:11:16.025"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:17.203">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:11:17.204">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:17.204" status="PASS" starttime="20161109 21:11:16.364"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:17.206">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:11:17.206" status="PASS" starttime="20161109 21:11:17.205"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:17.207">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:11:17.207" status="PASS" starttime="20161109 21:11:17.207"></status>
</kw>
<status endtime="20161109 21:11:17.208" status="PASS" starttime="20161109 21:11:17.206"></status>
</kw>
<status endtime="20161109 21:11:17.208" status="PASS" starttime="20161109 21:11:17.204"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:17.208">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:17.208" status="PASS" starttime="20161109 21:11:16.018"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:17.209">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:17.209" status="PASS" starttime="20161109 21:11:16.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:17.210">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:11:17.210" status="PASS" starttime="20161109 21:11:17.209"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:17.210">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:11:17.211">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:11:17.211">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:11:17.211" status="PASS" starttime="20161109 21:11:17.210"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:17.211">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:11:17.211" status="PASS" starttime="20161109 21:11:16.013"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:11:17.212">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:11:17.212" status="FAIL" starttime="20161109 21:11:17.212"></status>
</kw>
<status endtime="20161109 21:11:17.212" status="FAIL" starttime="20161109 21:11:16.012"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.215">@{arglist} = [ ]</msg>
<status endtime="20161109 21:11:27.215" status="PASS" starttime="20161109 21:11:27.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.217">${args} = {u'data': []}</msg>
<status endtime="20161109 21:11:27.217" status="PASS" starttime="20161109 21:11:27.216"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.219">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:11:27.219" status="PASS" starttime="20161109 21:11:27.219"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.221">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:11:27.221" status="PASS" starttime="20161109 21:11:27.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.223">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:11:27.223" status="PASS" starttime="20161109 21:11:27.222"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:11:27.224" status="PASS" starttime="20161109 21:11:27.223"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.226">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:11:27.226" status="PASS" starttime="20161109 21:11:27.225"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:27.227">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:11:27.228" status="PASS" starttime="20161109 21:11:27.227"></status>
</kw>
<status endtime="20161109 21:11:27.228" status="PASS" starttime="20161109 21:11:27.226"></status>
</kw>
<status endtime="20161109 21:11:27.228" status="PASS" starttime="20161109 21:11:27.224"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:27.229">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:11:27.230" status="PASS" starttime="20161109 21:11:27.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.231">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:11:27.231" status="PASS" starttime="20161109 21:11:27.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.232">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:11:27.232" status="PASS" starttime="20161109 21:11:27.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.233">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:11:27.233" status="PASS" starttime="20161109 21:11:27.232"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.563">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:11:27.563">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:27.563" status="PASS" starttime="20161109 21:11:27.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:27.564">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:11:27.564" status="PASS" starttime="20161109 21:11:27.563"></status>
</kw>
<status endtime="20161109 21:11:27.564" status="PASS" starttime="20161109 21:11:27.228"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.849">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:11:27.849">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:27.849" status="PASS" starttime="20161109 21:11:27.564"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.850">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:11:27.850" status="PASS" starttime="20161109 21:11:27.850"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:27.851">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:11:27.852" status="PASS" starttime="20161109 21:11:27.851"></status>
</kw>
<status endtime="20161109 21:11:27.852" status="PASS" starttime="20161109 21:11:27.850"></status>
</kw>
<status endtime="20161109 21:11:27.852" status="PASS" starttime="20161109 21:11:27.849"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:27.852">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:27.852" status="PASS" starttime="20161109 21:11:27.220"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:27.853">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:27.853" status="PASS" starttime="20161109 21:11:27.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:27.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:11:27.853" status="PASS" starttime="20161109 21:11:27.853"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:27.854">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:11:27.854">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:11:27.854">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:11:27.854" status="PASS" starttime="20161109 21:11:27.853"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:27.854">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:11:27.854" status="PASS" starttime="20161109 21:11:27.214"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:11:27.855">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:11:27.855" status="FAIL" starttime="20161109 21:11:27.854"></status>
</kw>
<status endtime="20161109 21:11:27.855" status="FAIL" starttime="20161109 21:11:27.213"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:37.858">@{arglist} = [ ]</msg>
<status endtime="20161109 21:11:37.858" status="PASS" starttime="20161109 21:11:37.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:37.859">${args} = {u'data': []}</msg>
<status endtime="20161109 21:11:37.860" status="PASS" starttime="20161109 21:11:37.859"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:37.862">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:11:37.862" status="PASS" starttime="20161109 21:11:37.861"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:37.865">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:11:37.865" status="PASS" starttime="20161109 21:11:37.864"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:37.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:11:37.866" status="PASS" starttime="20161109 21:11:37.865"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:11:37.867" status="PASS" starttime="20161109 21:11:37.867"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:37.871">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:11:37.871" status="PASS" starttime="20161109 21:11:37.869"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:37.872">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:11:37.873" status="PASS" starttime="20161109 21:11:37.872"></status>
</kw>
<status endtime="20161109 21:11:37.873" status="PASS" starttime="20161109 21:11:37.871"></status>
</kw>
<status endtime="20161109 21:11:37.873" status="PASS" starttime="20161109 21:11:37.868"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:37.874">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:11:37.874" status="PASS" starttime="20161109 21:11:37.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:37.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:11:37.875" status="PASS" starttime="20161109 21:11:37.874"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:37.875">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:11:37.875" status="PASS" starttime="20161109 21:11:37.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:37.876">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:11:37.876" status="PASS" starttime="20161109 21:11:37.875"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:38.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:11:38.367">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:38.367" status="PASS" starttime="20161109 21:11:37.876"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:38.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:11:38.369" status="PASS" starttime="20161109 21:11:38.368"></status>
</kw>
<status endtime="20161109 21:11:38.369" status="PASS" starttime="20161109 21:11:37.873"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:38.754">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:11:38.755">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:38.755" status="PASS" starttime="20161109 21:11:38.369"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:38.757">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:11:38.757" status="PASS" starttime="20161109 21:11:38.756"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:38.758">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:11:38.758" status="PASS" starttime="20161109 21:11:38.758"></status>
</kw>
<status endtime="20161109 21:11:38.759" status="PASS" starttime="20161109 21:11:38.757"></status>
</kw>
<status endtime="20161109 21:11:38.759" status="PASS" starttime="20161109 21:11:38.755"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:38.759">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:38.759" status="PASS" starttime="20161109 21:11:37.862"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:38.760">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:38.760" status="PASS" starttime="20161109 21:11:37.860"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:38.760">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:11:38.761" status="PASS" starttime="20161109 21:11:38.760"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:38.761">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:11:38.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:11:38.762">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:11:38.762" status="PASS" starttime="20161109 21:11:38.761"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:38.762">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:11:38.762" status="PASS" starttime="20161109 21:11:37.857"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:11:38.763">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:11:38.763" status="FAIL" starttime="20161109 21:11:38.763"></status>
</kw>
<status endtime="20161109 21:11:38.764" status="FAIL" starttime="20161109 21:11:37.856"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:48.768">@{arglist} = [ ]</msg>
<status endtime="20161109 21:11:48.768" status="PASS" starttime="20161109 21:11:48.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:48.770">${args} = {u'data': []}</msg>
<status endtime="20161109 21:11:48.770" status="PASS" starttime="20161109 21:11:48.769"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:48.771">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:11:48.771" status="PASS" starttime="20161109 21:11:48.771"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:48.774">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:11:48.774" status="PASS" starttime="20161109 21:11:48.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:48.775">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:11:48.775" status="PASS" starttime="20161109 21:11:48.774"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:11:48.776" status="PASS" starttime="20161109 21:11:48.775"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:48.779">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:11:48.779" status="PASS" starttime="20161109 21:11:48.777"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:48.780">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:11:48.781" status="PASS" starttime="20161109 21:11:48.780"></status>
</kw>
<status endtime="20161109 21:11:48.781" status="PASS" starttime="20161109 21:11:48.779"></status>
</kw>
<status endtime="20161109 21:11:48.781" status="PASS" starttime="20161109 21:11:48.776"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:48.782">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:11:48.783" status="PASS" starttime="20161109 21:11:48.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:48.783">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:11:48.783" status="PASS" starttime="20161109 21:11:48.783"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:48.784">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:11:48.784" status="PASS" starttime="20161109 21:11:48.784"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:48.784">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:11:48.784" status="PASS" starttime="20161109 21:11:48.784"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:54.604">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:11:54.605">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:54.605" status="PASS" starttime="20161109 21:11:48.785"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:54.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:11:54.606" status="PASS" starttime="20161109 21:11:54.605"></status>
</kw>
<status endtime="20161109 21:11:54.606" status="PASS" starttime="20161109 21:11:48.781"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:55.537">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:11:55.537">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:55.537" status="PASS" starttime="20161109 21:11:54.606"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:55.539">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:11:55.539" status="PASS" starttime="20161109 21:11:55.538"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:55.540">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:11:55.540" status="PASS" starttime="20161109 21:11:55.540"></status>
</kw>
<status endtime="20161109 21:11:55.541" status="PASS" starttime="20161109 21:11:55.539"></status>
</kw>
<status endtime="20161109 21:11:55.541" status="PASS" starttime="20161109 21:11:55.537"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:55.541">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:55.541" status="PASS" starttime="20161109 21:11:48.772"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:55.541">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:11:55.541" status="PASS" starttime="20161109 21:11:48.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:11:55.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:11:55.543" status="PASS" starttime="20161109 21:11:55.542"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:11:55.543">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:11:55.543">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:11:55.544">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:11:55.544" status="PASS" starttime="20161109 21:11:55.543"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:11:55.544">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:11:55.544" status="PASS" starttime="20161109 21:11:48.767"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:11:55.545">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:11:55.545" status="FAIL" starttime="20161109 21:11:55.545"></status>
</kw>
<status endtime="20161109 21:11:55.545" status="FAIL" starttime="20161109 21:11:48.765"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:05.551">@{arglist} = [ ]</msg>
<status endtime="20161109 21:12:05.551" status="PASS" starttime="20161109 21:12:05.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:05.552">${args} = {u'data': []}</msg>
<status endtime="20161109 21:12:05.552" status="PASS" starttime="20161109 21:12:05.552"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:05.554">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:12:05.554" status="PASS" starttime="20161109 21:12:05.554"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:05.556">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:12:05.556" status="PASS" starttime="20161109 21:12:05.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:05.557">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:05.557" status="PASS" starttime="20161109 21:12:05.556"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:12:05.558" status="PASS" starttime="20161109 21:12:05.557"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:05.560">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:05.560" status="PASS" starttime="20161109 21:12:05.559"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:05.562">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:05.562" status="PASS" starttime="20161109 21:12:05.561"></status>
</kw>
<status endtime="20161109 21:12:05.562" status="PASS" starttime="20161109 21:12:05.560"></status>
</kw>
<status endtime="20161109 21:12:05.562" status="PASS" starttime="20161109 21:12:05.558"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:05.563">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:12:05.564" status="PASS" starttime="20161109 21:12:05.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:05.564">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:05.564" status="PASS" starttime="20161109 21:12:05.564"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:05.565">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:12:05.565" status="PASS" starttime="20161109 21:12:05.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:05.565">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:12:05.565" status="PASS" starttime="20161109 21:12:05.565"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:05.897">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:12:05.897">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:05.897" status="PASS" starttime="20161109 21:12:05.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:05.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:12:05.898" status="PASS" starttime="20161109 21:12:05.897"></status>
</kw>
<status endtime="20161109 21:12:05.898" status="PASS" starttime="20161109 21:12:05.562"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:06.177">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:12:06.177">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:06.177" status="PASS" starttime="20161109 21:12:05.898"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:06.178">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:12:06.178" status="PASS" starttime="20161109 21:12:06.178"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:06.179">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:12:06.179" status="PASS" starttime="20161109 21:12:06.179"></status>
</kw>
<status endtime="20161109 21:12:06.179" status="PASS" starttime="20161109 21:12:06.179"></status>
</kw>
<status endtime="20161109 21:12:06.179" status="PASS" starttime="20161109 21:12:06.177"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:06.180">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:06.180" status="PASS" starttime="20161109 21:12:05.554"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:06.180">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:06.180" status="PASS" starttime="20161109 21:12:05.553"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:06.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:12:06.180" status="PASS" starttime="20161109 21:12:06.180"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:06.181">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:12:06.181">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:12:06.181">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:12:06.181" status="PASS" starttime="20161109 21:12:06.181"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:06.181">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:12:06.181" status="PASS" starttime="20161109 21:12:05.547"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:12:06.182">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:12:06.182" status="FAIL" starttime="20161109 21:12:06.182"></status>
</kw>
<status endtime="20161109 21:12:06.182" status="FAIL" starttime="20161109 21:12:05.546"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.186">@{arglist} = [ ]</msg>
<status endtime="20161109 21:12:16.186" status="PASS" starttime="20161109 21:12:16.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.187">${args} = {u'data': []}</msg>
<status endtime="20161109 21:12:16.187" status="PASS" starttime="20161109 21:12:16.187"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.189">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:12:16.189" status="PASS" starttime="20161109 21:12:16.188"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.191">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:12:16.191" status="PASS" starttime="20161109 21:12:16.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:16.192" status="PASS" starttime="20161109 21:12:16.191"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:12:16.193" status="PASS" starttime="20161109 21:12:16.192"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.196">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:16.196" status="PASS" starttime="20161109 21:12:16.194"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:16.197">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:16.197" status="PASS" starttime="20161109 21:12:16.197"></status>
</kw>
<status endtime="20161109 21:12:16.198" status="PASS" starttime="20161109 21:12:16.196"></status>
</kw>
<status endtime="20161109 21:12:16.198" status="PASS" starttime="20161109 21:12:16.193"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:16.201">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:12:16.201" status="PASS" starttime="20161109 21:12:16.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.203">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:16.203" status="PASS" starttime="20161109 21:12:16.202"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.203">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:12:16.204" status="PASS" starttime="20161109 21:12:16.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.204">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:12:16.204" status="PASS" starttime="20161109 21:12:16.204"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.542">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:12:16.542">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:16.542" status="PASS" starttime="20161109 21:12:16.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:16.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:12:16.543" status="PASS" starttime="20161109 21:12:16.543"></status>
</kw>
<status endtime="20161109 21:12:16.544" status="PASS" starttime="20161109 21:12:16.198"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.825">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:12:16.826">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:16.826" status="PASS" starttime="20161109 21:12:16.544"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.828">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:12:16.828" status="PASS" starttime="20161109 21:12:16.827"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:16.829">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:12:16.829" status="PASS" starttime="20161109 21:12:16.829"></status>
</kw>
<status endtime="20161109 21:12:16.829" status="PASS" starttime="20161109 21:12:16.828"></status>
</kw>
<status endtime="20161109 21:12:16.830" status="PASS" starttime="20161109 21:12:16.826"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:16.830">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:16.830" status="PASS" starttime="20161109 21:12:16.189"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:16.830">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:16.830" status="PASS" starttime="20161109 21:12:16.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:16.831">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:12:16.831" status="PASS" starttime="20161109 21:12:16.831"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:16.832">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:12:16.832">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:12:16.832">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:12:16.833" status="PASS" starttime="20161109 21:12:16.832"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:16.833">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:12:16.833" status="PASS" starttime="20161109 21:12:16.185"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:12:16.834">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:12:16.834" status="FAIL" starttime="20161109 21:12:16.833"></status>
</kw>
<status endtime="20161109 21:12:16.834" status="FAIL" starttime="20161109 21:12:16.184"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:26.837">@{arglist} = [ ]</msg>
<status endtime="20161109 21:12:26.837" status="PASS" starttime="20161109 21:12:26.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:26.838">${args} = {u'data': []}</msg>
<status endtime="20161109 21:12:26.838" status="PASS" starttime="20161109 21:12:26.837"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:26.840">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:12:26.840" status="PASS" starttime="20161109 21:12:26.839"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:26.842">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:12:26.842" status="PASS" starttime="20161109 21:12:26.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:26.843">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:26.843" status="PASS" starttime="20161109 21:12:26.843"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:12:26.844" status="PASS" starttime="20161109 21:12:26.844"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:26.846">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:26.846" status="PASS" starttime="20161109 21:12:26.845"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:26.847">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:26.848" status="PASS" starttime="20161109 21:12:26.847"></status>
</kw>
<status endtime="20161109 21:12:26.848" status="PASS" starttime="20161109 21:12:26.846"></status>
</kw>
<status endtime="20161109 21:12:26.848" status="PASS" starttime="20161109 21:12:26.844"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:26.849">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:12:26.850" status="PASS" starttime="20161109 21:12:26.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:26.851">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:26.851" status="PASS" starttime="20161109 21:12:26.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:26.852">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:12:26.852" status="PASS" starttime="20161109 21:12:26.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:26.853">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:12:26.853" status="PASS" starttime="20161109 21:12:26.852"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:27.926">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:12:27.926">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:27.926" status="PASS" starttime="20161109 21:12:26.853"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:27.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:12:27.929" status="PASS" starttime="20161109 21:12:27.927"></status>
</kw>
<status endtime="20161109 21:12:27.929" status="PASS" starttime="20161109 21:12:26.848"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:28.278">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:12:28.278">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:28.278" status="PASS" starttime="20161109 21:12:27.929"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:28.280">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:12:28.280" status="PASS" starttime="20161109 21:12:28.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:28.282">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:12:28.282" status="PASS" starttime="20161109 21:12:28.281"></status>
</kw>
<status endtime="20161109 21:12:28.282" status="PASS" starttime="20161109 21:12:28.281"></status>
</kw>
<status endtime="20161109 21:12:28.282" status="PASS" starttime="20161109 21:12:28.278"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:28.283">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:28.283" status="PASS" starttime="20161109 21:12:26.840"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:28.283">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:28.283" status="PASS" starttime="20161109 21:12:26.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:28.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:12:28.284" status="PASS" starttime="20161109 21:12:28.284"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:28.285">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:12:28.285">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:12:28.285">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:12:28.285" status="PASS" starttime="20161109 21:12:28.285"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:28.286">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:12:28.286" status="PASS" starttime="20161109 21:12:26.836"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:12:28.287">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:12:28.287" status="FAIL" starttime="20161109 21:12:28.286"></status>
</kw>
<status endtime="20161109 21:12:28.287" status="FAIL" starttime="20161109 21:12:26.835"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:38.290">@{arglist} = [ ]</msg>
<status endtime="20161109 21:12:38.290" status="PASS" starttime="20161109 21:12:38.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:38.291">${args} = {u'data': []}</msg>
<status endtime="20161109 21:12:38.291" status="PASS" starttime="20161109 21:12:38.291"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:38.293">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:12:38.293" status="PASS" starttime="20161109 21:12:38.293"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:38.295">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:12:38.295" status="PASS" starttime="20161109 21:12:38.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:38.296">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:38.296" status="PASS" starttime="20161109 21:12:38.296"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:12:38.297" status="PASS" starttime="20161109 21:12:38.297"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:38.300">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:38.300" status="PASS" starttime="20161109 21:12:38.298"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:38.301">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:38.301" status="PASS" starttime="20161109 21:12:38.301"></status>
</kw>
<status endtime="20161109 21:12:38.302" status="PASS" starttime="20161109 21:12:38.300"></status>
</kw>
<status endtime="20161109 21:12:38.302" status="PASS" starttime="20161109 21:12:38.297"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:38.303">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:12:38.304" status="PASS" starttime="20161109 21:12:38.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:38.304">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:38.304" status="PASS" starttime="20161109 21:12:38.304"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:38.305">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:12:38.305" status="PASS" starttime="20161109 21:12:38.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:38.305">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:12:38.305" status="PASS" starttime="20161109 21:12:38.305"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:38.642">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:12:38.642">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:38.642" status="PASS" starttime="20161109 21:12:38.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:38.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:12:38.643" status="PASS" starttime="20161109 21:12:38.643"></status>
</kw>
<status endtime="20161109 21:12:38.644" status="PASS" starttime="20161109 21:12:38.302"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:39.100">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:12:39.100">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:39.100" status="PASS" starttime="20161109 21:12:38.644"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:39.101">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:12:39.101" status="PASS" starttime="20161109 21:12:39.100"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:39.102">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:12:39.102" status="PASS" starttime="20161109 21:12:39.102"></status>
</kw>
<status endtime="20161109 21:12:39.102" status="PASS" starttime="20161109 21:12:39.101"></status>
</kw>
<status endtime="20161109 21:12:39.102" status="PASS" starttime="20161109 21:12:39.100"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:39.102">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:39.102" status="PASS" starttime="20161109 21:12:38.294"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:39.102">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:39.103" status="PASS" starttime="20161109 21:12:38.292"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:39.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:12:39.103" status="PASS" starttime="20161109 21:12:39.103"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:39.104">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:12:39.104">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:12:39.104">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:12:39.104" status="PASS" starttime="20161109 21:12:39.103"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:39.104">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:12:39.104" status="PASS" starttime="20161109 21:12:38.289"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:12:39.105">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:12:39.105" status="FAIL" starttime="20161109 21:12:39.104"></status>
</kw>
<status endtime="20161109 21:12:39.105" status="FAIL" starttime="20161109 21:12:38.288"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.109">@{arglist} = [ ]</msg>
<status endtime="20161109 21:12:49.110" status="PASS" starttime="20161109 21:12:49.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.111">${args} = {u'data': []}</msg>
<status endtime="20161109 21:12:49.111" status="PASS" starttime="20161109 21:12:49.110"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.113">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:12:49.113" status="PASS" starttime="20161109 21:12:49.112"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.115">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:12:49.115" status="PASS" starttime="20161109 21:12:49.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.116">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:49.116" status="PASS" starttime="20161109 21:12:49.115"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:12:49.117" status="PASS" starttime="20161109 21:12:49.116"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.120">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:49.120" status="PASS" starttime="20161109 21:12:49.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:49.121">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:49.122" status="PASS" starttime="20161109 21:12:49.121"></status>
</kw>
<status endtime="20161109 21:12:49.122" status="PASS" starttime="20161109 21:12:49.120"></status>
</kw>
<status endtime="20161109 21:12:49.122" status="PASS" starttime="20161109 21:12:49.117"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:49.124">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:12:49.124" status="PASS" starttime="20161109 21:12:49.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:49.125" status="PASS" starttime="20161109 21:12:49.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.125">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:12:49.125" status="PASS" starttime="20161109 21:12:49.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.126">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:12:49.126" status="PASS" starttime="20161109 21:12:49.125"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.551">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:12:49.551">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:49.551" status="PASS" starttime="20161109 21:12:49.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:49.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:12:49.554" status="PASS" starttime="20161109 21:12:49.552"></status>
</kw>
<status endtime="20161109 21:12:49.554" status="PASS" starttime="20161109 21:12:49.122"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.831">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:12:49.831">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:49.831" status="PASS" starttime="20161109 21:12:49.555"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.834">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:12:49.834" status="PASS" starttime="20161109 21:12:49.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:49.835">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:12:49.836" status="PASS" starttime="20161109 21:12:49.835"></status>
</kw>
<status endtime="20161109 21:12:49.836" status="PASS" starttime="20161109 21:12:49.834"></status>
</kw>
<status endtime="20161109 21:12:49.836" status="PASS" starttime="20161109 21:12:49.832"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:49.837">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:49.837" status="PASS" starttime="20161109 21:12:49.113"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:49.837">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:12:49.837" status="PASS" starttime="20161109 21:12:49.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:49.838">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:12:49.838" status="PASS" starttime="20161109 21:12:49.837"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:49.839">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:12:49.839">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:12:49.839">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:12:49.839" status="PASS" starttime="20161109 21:12:49.838"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:12:49.840">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:12:49.840" status="PASS" starttime="20161109 21:12:49.108"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:12:49.840">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:12:49.841" status="FAIL" starttime="20161109 21:12:49.840"></status>
</kw>
<status endtime="20161109 21:12:49.841" status="FAIL" starttime="20161109 21:12:49.106"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:59.844">@{arglist} = [ ]</msg>
<status endtime="20161109 21:12:59.844" status="PASS" starttime="20161109 21:12:59.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:59.845">${args} = {u'data': []}</msg>
<status endtime="20161109 21:12:59.845" status="PASS" starttime="20161109 21:12:59.845"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:59.847">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:12:59.847" status="PASS" starttime="20161109 21:12:59.846"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:59.849">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:12:59.849" status="PASS" starttime="20161109 21:12:59.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:59.850">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:59.850" status="PASS" starttime="20161109 21:12:59.849"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:12:59.850" status="PASS" starttime="20161109 21:12:59.850"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:59.853">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:59.853" status="PASS" starttime="20161109 21:12:59.852"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:59.854">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:12:59.854" status="PASS" starttime="20161109 21:12:59.854"></status>
</kw>
<status endtime="20161109 21:12:59.854" status="PASS" starttime="20161109 21:12:59.854"></status>
</kw>
<status endtime="20161109 21:12:59.855" status="PASS" starttime="20161109 21:12:59.851"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:12:59.855">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:12:59.856" status="PASS" starttime="20161109 21:12:59.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:59.856">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:12:59.856" status="PASS" starttime="20161109 21:12:59.856"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:59.857">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:12:59.857" status="PASS" starttime="20161109 21:12:59.857"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:12:59.857">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:12:59.857" status="PASS" starttime="20161109 21:12:59.857"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:07.525">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:13:07.525">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:07.525" status="PASS" starttime="20161109 21:12:59.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:07.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:13:07.527" status="PASS" starttime="20161109 21:13:07.526"></status>
</kw>
<status endtime="20161109 21:13:07.527" status="PASS" starttime="20161109 21:12:59.855"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:08.142">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:13:08.143">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:08.143" status="PASS" starttime="20161109 21:13:07.528"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:08.145">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:13:08.145" status="PASS" starttime="20161109 21:13:08.144"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:08.146">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:13:08.146" status="PASS" starttime="20161109 21:13:08.146"></status>
</kw>
<status endtime="20161109 21:13:08.146" status="PASS" starttime="20161109 21:13:08.145"></status>
</kw>
<status endtime="20161109 21:13:08.146" status="PASS" starttime="20161109 21:13:08.143"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:08.147">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:08.147" status="PASS" starttime="20161109 21:12:59.847"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:08.147">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:08.147" status="PASS" starttime="20161109 21:12:59.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:08.148">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:13:08.148" status="PASS" starttime="20161109 21:13:08.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:08.148">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:13:08.148">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:13:08.149">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:13:08.149" status="PASS" starttime="20161109 21:13:08.148"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:08.149">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:13:08.149" status="PASS" starttime="20161109 21:12:59.842"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:13:08.150">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:13:08.150" status="FAIL" starttime="20161109 21:13:08.149"></status>
</kw>
<status endtime="20161109 21:13:08.151" status="FAIL" starttime="20161109 21:12:59.841"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.154">@{arglist} = [ ]</msg>
<status endtime="20161109 21:13:18.154" status="PASS" starttime="20161109 21:13:18.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.155">${args} = {u'data': []}</msg>
<status endtime="20161109 21:13:18.155" status="PASS" starttime="20161109 21:13:18.154"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.157">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:13:18.157" status="PASS" starttime="20161109 21:13:18.156"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.159">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:13:18.159" status="PASS" starttime="20161109 21:13:18.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:13:18.160" status="PASS" starttime="20161109 21:13:18.159"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:13:18.161" status="PASS" starttime="20161109 21:13:18.160"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.163">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:13:18.163" status="PASS" starttime="20161109 21:13:18.162"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:18.164">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:13:18.165" status="PASS" starttime="20161109 21:13:18.164"></status>
</kw>
<status endtime="20161109 21:13:18.165" status="PASS" starttime="20161109 21:13:18.163"></status>
</kw>
<status endtime="20161109 21:13:18.165" status="PASS" starttime="20161109 21:13:18.161"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:18.166">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:13:18.166" status="PASS" starttime="20161109 21:13:18.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.167">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:13:18.167" status="PASS" starttime="20161109 21:13:18.166"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.167">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:13:18.167" status="PASS" starttime="20161109 21:13:18.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.168">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:13:18.168" status="PASS" starttime="20161109 21:13:18.167"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.505">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:13:18.505">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:18.505" status="PASS" starttime="20161109 21:13:18.168"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:18.507">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:13:18.507" status="PASS" starttime="20161109 21:13:18.506"></status>
</kw>
<status endtime="20161109 21:13:18.507" status="PASS" starttime="20161109 21:13:18.165"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.791">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:13:18.791">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:18.791" status="PASS" starttime="20161109 21:13:18.507"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.794">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:13:18.794" status="PASS" starttime="20161109 21:13:18.793"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:18.795">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:13:18.795" status="PASS" starttime="20161109 21:13:18.794"></status>
</kw>
<status endtime="20161109 21:13:18.795" status="PASS" starttime="20161109 21:13:18.794"></status>
</kw>
<status endtime="20161109 21:13:18.795" status="PASS" starttime="20161109 21:13:18.792"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:18.795">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:18.796" status="PASS" starttime="20161109 21:13:18.157"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:18.796">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:18.796" status="PASS" starttime="20161109 21:13:18.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:18.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:13:18.797" status="PASS" starttime="20161109 21:13:18.796"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:18.797">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:13:18.797">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:13:18.797">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:13:18.797" status="PASS" starttime="20161109 21:13:18.797"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:18.798">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:13:18.798" status="PASS" starttime="20161109 21:13:18.153"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:13:18.799">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:13:18.799" status="FAIL" starttime="20161109 21:13:18.798"></status>
</kw>
<status endtime="20161109 21:13:18.799" status="FAIL" starttime="20161109 21:13:18.151"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:28.802">@{arglist} = [ ]</msg>
<status endtime="20161109 21:13:28.802" status="PASS" starttime="20161109 21:13:28.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:28.803">${args} = {u'data': []}</msg>
<status endtime="20161109 21:13:28.803" status="PASS" starttime="20161109 21:13:28.802"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:28.805">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:13:28.805" status="PASS" starttime="20161109 21:13:28.805"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:28.807">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:13:28.807" status="PASS" starttime="20161109 21:13:28.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:28.807">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:13:28.807" status="PASS" starttime="20161109 21:13:28.807"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:13:28.808" status="PASS" starttime="20161109 21:13:28.808"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:28.810">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:13:28.810" status="PASS" starttime="20161109 21:13:28.809"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:28.811">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:13:28.812" status="PASS" starttime="20161109 21:13:28.811"></status>
</kw>
<status endtime="20161109 21:13:28.812" status="PASS" starttime="20161109 21:13:28.811"></status>
</kw>
<status endtime="20161109 21:13:28.812" status="PASS" starttime="20161109 21:13:28.808"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:28.813">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:13:28.814" status="PASS" starttime="20161109 21:13:28.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:28.814">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:13:28.814" status="PASS" starttime="20161109 21:13:28.814"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:28.815">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:13:28.815" status="PASS" starttime="20161109 21:13:28.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:28.815">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:13:28.815" status="PASS" starttime="20161109 21:13:28.815"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:29.153">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:13:29.153">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:29.153" status="PASS" starttime="20161109 21:13:28.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:29.154">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:13:29.154" status="PASS" starttime="20161109 21:13:29.154"></status>
</kw>
<status endtime="20161109 21:13:29.154" status="PASS" starttime="20161109 21:13:28.812"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:29.544">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:13:29.544">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:29.544" status="PASS" starttime="20161109 21:13:29.154"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:29.546">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:13:29.546" status="PASS" starttime="20161109 21:13:29.545"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:29.547">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:13:29.548" status="PASS" starttime="20161109 21:13:29.547"></status>
</kw>
<status endtime="20161109 21:13:29.548" status="PASS" starttime="20161109 21:13:29.546"></status>
</kw>
<status endtime="20161109 21:13:29.548" status="PASS" starttime="20161109 21:13:29.545"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:29.548">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:29.548" status="PASS" starttime="20161109 21:13:28.805"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:29.549">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:29.549" status="PASS" starttime="20161109 21:13:28.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:29.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:13:29.550" status="PASS" starttime="20161109 21:13:29.549"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:29.551">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:13:29.551">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:13:29.551">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:13:29.551" status="PASS" starttime="20161109 21:13:29.550"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:29.551">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:13:29.551" status="PASS" starttime="20161109 21:13:28.801"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:13:29.552">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:13:29.552" status="FAIL" starttime="20161109 21:13:29.552"></status>
</kw>
<status endtime="20161109 21:13:29.553" status="FAIL" starttime="20161109 21:13:28.799"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:39.556">@{arglist} = [ ]</msg>
<status endtime="20161109 21:13:39.556" status="PASS" starttime="20161109 21:13:39.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:39.557">${args} = {u'data': []}</msg>
<status endtime="20161109 21:13:39.557" status="PASS" starttime="20161109 21:13:39.556"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:39.558">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:13:39.559" status="PASS" starttime="20161109 21:13:39.558"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:39.561">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:13:39.561" status="PASS" starttime="20161109 21:13:39.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:39.562">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:13:39.563" status="PASS" starttime="20161109 21:13:39.562"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:13:39.564" status="PASS" starttime="20161109 21:13:39.563"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:39.566">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:13:39.566" status="PASS" starttime="20161109 21:13:39.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:39.567">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:13:39.567" status="PASS" starttime="20161109 21:13:39.567"></status>
</kw>
<status endtime="20161109 21:13:39.567" status="PASS" starttime="20161109 21:13:39.566"></status>
</kw>
<status endtime="20161109 21:13:39.567" status="PASS" starttime="20161109 21:13:39.564"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:39.568">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:13:39.570" status="PASS" starttime="20161109 21:13:39.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:39.571">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:13:39.571" status="PASS" starttime="20161109 21:13:39.571"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:39.571">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:13:39.572" status="PASS" starttime="20161109 21:13:39.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:39.572">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:13:39.572" status="PASS" starttime="20161109 21:13:39.572"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:39.905">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:13:39.905">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:39.905" status="PASS" starttime="20161109 21:13:39.572"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:39.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:13:39.906" status="PASS" starttime="20161109 21:13:39.906"></status>
</kw>
<status endtime="20161109 21:13:39.906" status="PASS" starttime="20161109 21:13:39.567"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:40.247">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:13:40.247">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:40.247" status="PASS" starttime="20161109 21:13:39.906"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:40.248">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:13:40.248" status="PASS" starttime="20161109 21:13:40.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:40.249">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:13:40.249" status="PASS" starttime="20161109 21:13:40.249"></status>
</kw>
<status endtime="20161109 21:13:40.249" status="PASS" starttime="20161109 21:13:40.248"></status>
</kw>
<status endtime="20161109 21:13:40.250" status="PASS" starttime="20161109 21:13:40.247"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:40.250">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:40.250" status="PASS" starttime="20161109 21:13:39.559"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:40.250">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:40.250" status="PASS" starttime="20161109 21:13:39.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:40.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:13:40.251" status="PASS" starttime="20161109 21:13:40.250"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:40.251">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:13:40.251">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:13:40.251">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:13:40.251" status="PASS" starttime="20161109 21:13:40.251"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:40.251">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:13:40.251" status="PASS" starttime="20161109 21:13:39.554"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:13:40.252">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:13:40.252" status="FAIL" starttime="20161109 21:13:40.252"></status>
</kw>
<status endtime="20161109 21:13:40.252" status="FAIL" starttime="20161109 21:13:39.553"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:50.255">@{arglist} = [ ]</msg>
<status endtime="20161109 21:13:50.256" status="PASS" starttime="20161109 21:13:50.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:50.257">${args} = {u'data': []}</msg>
<status endtime="20161109 21:13:50.257" status="PASS" starttime="20161109 21:13:50.256"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:50.258">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:13:50.258" status="PASS" starttime="20161109 21:13:50.258"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:50.260">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:13:50.260" status="PASS" starttime="20161109 21:13:50.260"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:50.261">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:13:50.261" status="PASS" starttime="20161109 21:13:50.261"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:13:50.263" status="PASS" starttime="20161109 21:13:50.261"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:50.266">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:13:50.266" status="PASS" starttime="20161109 21:13:50.264"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:50.266">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:13:50.266" status="PASS" starttime="20161109 21:13:50.266"></status>
</kw>
<status endtime="20161109 21:13:50.267" status="PASS" starttime="20161109 21:13:50.266"></status>
</kw>
<status endtime="20161109 21:13:50.267" status="PASS" starttime="20161109 21:13:50.263"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:50.268">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:13:50.268" status="PASS" starttime="20161109 21:13:50.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:50.269">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:13:50.269" status="PASS" starttime="20161109 21:13:50.268"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:50.269">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:13:50.269" status="PASS" starttime="20161109 21:13:50.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:50.270">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:13:50.270" status="PASS" starttime="20161109 21:13:50.269"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:50.695">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:13:50.696">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:50.696" status="PASS" starttime="20161109 21:13:50.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:50.696">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:13:50.696" status="PASS" starttime="20161109 21:13:50.696"></status>
</kw>
<status endtime="20161109 21:13:50.697" status="PASS" starttime="20161109 21:13:50.267"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:51.085">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:13:51.085">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:51.085" status="PASS" starttime="20161109 21:13:50.697"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:51.086">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:13:51.086" status="PASS" starttime="20161109 21:13:51.086"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:51.087">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:13:51.087" status="PASS" starttime="20161109 21:13:51.087"></status>
</kw>
<status endtime="20161109 21:13:51.087" status="PASS" starttime="20161109 21:13:51.086"></status>
</kw>
<status endtime="20161109 21:13:51.087" status="PASS" starttime="20161109 21:13:51.085"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:51.087">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:51.087" status="PASS" starttime="20161109 21:13:50.259"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:51.088">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:13:51.088" status="PASS" starttime="20161109 21:13:50.257"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:13:51.088">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:13:51.088" status="PASS" starttime="20161109 21:13:51.088"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:13:51.089">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:13:51.089">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:13:51.089">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:13:51.089" status="PASS" starttime="20161109 21:13:51.088"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:13:51.089">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:13:51.089" status="PASS" starttime="20161109 21:13:50.254"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:13:51.090">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:13:51.090" status="FAIL" starttime="20161109 21:13:51.089"></status>
</kw>
<status endtime="20161109 21:13:51.090" status="FAIL" starttime="20161109 21:13:50.253"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.093">@{arglist} = [ ]</msg>
<status endtime="20161109 21:14:01.093" status="PASS" starttime="20161109 21:14:01.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.095">${args} = {u'data': []}</msg>
<status endtime="20161109 21:14:01.095" status="PASS" starttime="20161109 21:14:01.094"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.097">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:14:01.097" status="PASS" starttime="20161109 21:14:01.096"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.099">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:14:01.099" status="PASS" starttime="20161109 21:14:01.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.100">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:01.100" status="PASS" starttime="20161109 21:14:01.099"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:14:01.101" status="PASS" starttime="20161109 21:14:01.101"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.105">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:01.105" status="PASS" starttime="20161109 21:14:01.103"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:01.106">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:01.106" status="PASS" starttime="20161109 21:14:01.105"></status>
</kw>
<status endtime="20161109 21:14:01.106" status="PASS" starttime="20161109 21:14:01.105"></status>
</kw>
<status endtime="20161109 21:14:01.106" status="PASS" starttime="20161109 21:14:01.102"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:01.107">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:14:01.108" status="PASS" starttime="20161109 21:14:01.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.108">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:01.108" status="PASS" starttime="20161109 21:14:01.108"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.109">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:14:01.109" status="PASS" starttime="20161109 21:14:01.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.109">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:14:01.109" status="PASS" starttime="20161109 21:14:01.109"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:14:01.453">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:01.453" status="PASS" starttime="20161109 21:14:01.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:01.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:14:01.455" status="PASS" starttime="20161109 21:14:01.453"></status>
</kw>
<status endtime="20161109 21:14:01.455" status="PASS" starttime="20161109 21:14:01.106"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.736">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:14:01.736">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:01.736" status="PASS" starttime="20161109 21:14:01.455"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.739">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:14:01.739" status="PASS" starttime="20161109 21:14:01.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:01.740">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:14:01.741" status="PASS" starttime="20161109 21:14:01.740"></status>
</kw>
<status endtime="20161109 21:14:01.741" status="PASS" starttime="20161109 21:14:01.739"></status>
</kw>
<status endtime="20161109 21:14:01.741" status="PASS" starttime="20161109 21:14:01.737"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:01.741">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:01.741" status="PASS" starttime="20161109 21:14:01.097"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:01.742">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:01.742" status="PASS" starttime="20161109 21:14:01.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:01.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:14:01.743" status="PASS" starttime="20161109 21:14:01.742"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:01.743">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:14:01.744">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:14:01.744">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:14:01.744" status="PASS" starttime="20161109 21:14:01.743"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:01.744">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:14:01.745" status="PASS" starttime="20161109 21:14:01.092"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:14:01.745">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:14:01.745" status="FAIL" starttime="20161109 21:14:01.745"></status>
</kw>
<status endtime="20161109 21:14:01.745" status="FAIL" starttime="20161109 21:14:01.091"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:11.749">@{arglist} = [ ]</msg>
<status endtime="20161109 21:14:11.749" status="PASS" starttime="20161109 21:14:11.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:11.750">${args} = {u'data': []}</msg>
<status endtime="20161109 21:14:11.751" status="PASS" starttime="20161109 21:14:11.750"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:11.753">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:14:11.753" status="PASS" starttime="20161109 21:14:11.752"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:11.757">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:14:11.757" status="PASS" starttime="20161109 21:14:11.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:11.758">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:11.758" status="PASS" starttime="20161109 21:14:11.757"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:14:11.759" status="PASS" starttime="20161109 21:14:11.758"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:11.763">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:11.763" status="PASS" starttime="20161109 21:14:11.761"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:11.765">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:11.765" status="PASS" starttime="20161109 21:14:11.765"></status>
</kw>
<status endtime="20161109 21:14:11.765" status="PASS" starttime="20161109 21:14:11.763"></status>
</kw>
<status endtime="20161109 21:14:11.766" status="PASS" starttime="20161109 21:14:11.760"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:11.767">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:14:11.767" status="PASS" starttime="20161109 21:14:11.766"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:11.768">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:11.768" status="PASS" starttime="20161109 21:14:11.768"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:11.769">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:14:11.769" status="PASS" starttime="20161109 21:14:11.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:11.769">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:14:11.769" status="PASS" starttime="20161109 21:14:11.769"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:16.754">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:14:16.755">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:16.755" status="PASS" starttime="20161109 21:14:11.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:16.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:14:16.756" status="PASS" starttime="20161109 21:14:16.755"></status>
</kw>
<status endtime="20161109 21:14:16.756" status="PASS" starttime="20161109 21:14:11.766"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:17.724">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:14:17.725">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:17.725" status="PASS" starttime="20161109 21:14:16.756"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:17.727">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:14:17.727" status="PASS" starttime="20161109 21:14:17.726"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:17.728">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:14:17.728" status="PASS" starttime="20161109 21:14:17.728"></status>
</kw>
<status endtime="20161109 21:14:17.728" status="PASS" starttime="20161109 21:14:17.727"></status>
</kw>
<status endtime="20161109 21:14:17.728" status="PASS" starttime="20161109 21:14:17.725"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:17.729">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:17.729" status="PASS" starttime="20161109 21:14:11.753"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:17.729">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:17.729" status="PASS" starttime="20161109 21:14:11.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:17.730">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:14:17.730" status="PASS" starttime="20161109 21:14:17.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:17.731">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:14:17.731">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:14:17.731">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:14:17.731" status="PASS" starttime="20161109 21:14:17.730"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:17.732">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:14:17.732" status="PASS" starttime="20161109 21:14:11.747"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:14:17.733">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:14:17.733" status="FAIL" starttime="20161109 21:14:17.733"></status>
</kw>
<status endtime="20161109 21:14:17.733" status="FAIL" starttime="20161109 21:14:11.746"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:27.736">@{arglist} = [ ]</msg>
<status endtime="20161109 21:14:27.736" status="PASS" starttime="20161109 21:14:27.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:27.737">${args} = {u'data': []}</msg>
<status endtime="20161109 21:14:27.738" status="PASS" starttime="20161109 21:14:27.736"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:27.739">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:14:27.739" status="PASS" starttime="20161109 21:14:27.739"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:27.741">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:14:27.741" status="PASS" starttime="20161109 21:14:27.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:27.742">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:27.742" status="PASS" starttime="20161109 21:14:27.741"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:14:27.743" status="PASS" starttime="20161109 21:14:27.742"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:27.745">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:27.745" status="PASS" starttime="20161109 21:14:27.744"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:27.746">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:27.746" status="PASS" starttime="20161109 21:14:27.745"></status>
</kw>
<status endtime="20161109 21:14:27.746" status="PASS" starttime="20161109 21:14:27.745"></status>
</kw>
<status endtime="20161109 21:14:27.746" status="PASS" starttime="20161109 21:14:27.743"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:27.747">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:14:27.747" status="PASS" starttime="20161109 21:14:27.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:27.748">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:27.748" status="PASS" starttime="20161109 21:14:27.747"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:27.748">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:14:27.748" status="PASS" starttime="20161109 21:14:27.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:27.749">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:14:27.749" status="PASS" starttime="20161109 21:14:27.748"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:28.079">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:14:28.080">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:28.080" status="PASS" starttime="20161109 21:14:27.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:28.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:14:28.081" status="PASS" starttime="20161109 21:14:28.080"></status>
</kw>
<status endtime="20161109 21:14:28.081" status="PASS" starttime="20161109 21:14:27.746"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:28.364">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:14:28.365">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:28.365" status="PASS" starttime="20161109 21:14:28.081"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:28.367">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:14:28.367" status="PASS" starttime="20161109 21:14:28.366"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:28.369">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:14:28.369" status="PASS" starttime="20161109 21:14:28.368"></status>
</kw>
<status endtime="20161109 21:14:28.369" status="PASS" starttime="20161109 21:14:28.367"></status>
</kw>
<status endtime="20161109 21:14:28.369" status="PASS" starttime="20161109 21:14:28.365"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:28.370">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:28.370" status="PASS" starttime="20161109 21:14:27.739"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:28.370">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:28.370" status="PASS" starttime="20161109 21:14:27.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:28.371">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:14:28.371" status="PASS" starttime="20161109 21:14:28.370"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:28.372">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:14:28.372">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:14:28.372">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:14:28.372" status="PASS" starttime="20161109 21:14:28.371"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:28.372">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:14:28.373" status="PASS" starttime="20161109 21:14:27.735"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:14:28.373">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:14:28.374" status="FAIL" starttime="20161109 21:14:28.373"></status>
</kw>
<status endtime="20161109 21:14:28.374" status="FAIL" starttime="20161109 21:14:27.734"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:38.376">@{arglist} = [ ]</msg>
<status endtime="20161109 21:14:38.377" status="PASS" starttime="20161109 21:14:38.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:38.378">${args} = {u'data': []}</msg>
<status endtime="20161109 21:14:38.378" status="PASS" starttime="20161109 21:14:38.377"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:38.379">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:14:38.379" status="PASS" starttime="20161109 21:14:38.379"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:38.381">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:14:38.381" status="PASS" starttime="20161109 21:14:38.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:38.382">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:38.382" status="PASS" starttime="20161109 21:14:38.382"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:14:38.383" status="PASS" starttime="20161109 21:14:38.383"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:38.386">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:38.386" status="PASS" starttime="20161109 21:14:38.385"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:38.387">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:38.387" status="PASS" starttime="20161109 21:14:38.387"></status>
</kw>
<status endtime="20161109 21:14:38.387" status="PASS" starttime="20161109 21:14:38.386"></status>
</kw>
<status endtime="20161109 21:14:38.387" status="PASS" starttime="20161109 21:14:38.384"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:38.388">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:14:38.389" status="PASS" starttime="20161109 21:14:38.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:38.390">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:38.390" status="PASS" starttime="20161109 21:14:38.389"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:38.391">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:14:38.391" status="PASS" starttime="20161109 21:14:38.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:38.391">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:14:38.391" status="PASS" starttime="20161109 21:14:38.391"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:38.723">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:14:38.723">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:38.723" status="PASS" starttime="20161109 21:14:38.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:38.723">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:14:38.724" status="PASS" starttime="20161109 21:14:38.723"></status>
</kw>
<status endtime="20161109 21:14:38.724" status="PASS" starttime="20161109 21:14:38.388"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:39.002">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:14:39.002">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:39.002" status="PASS" starttime="20161109 21:14:38.724"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:39.003">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:14:39.003" status="PASS" starttime="20161109 21:14:39.003"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:39.004">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:14:39.004" status="PASS" starttime="20161109 21:14:39.004"></status>
</kw>
<status endtime="20161109 21:14:39.004" status="PASS" starttime="20161109 21:14:39.004"></status>
</kw>
<status endtime="20161109 21:14:39.004" status="PASS" starttime="20161109 21:14:39.002"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:39.005">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:39.005" status="PASS" starttime="20161109 21:14:38.380"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:39.005">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:39.005" status="PASS" starttime="20161109 21:14:38.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:39.005">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:14:39.006" status="PASS" starttime="20161109 21:14:39.005"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:39.006">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:14:39.006">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:14:39.006">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:14:39.006" status="PASS" starttime="20161109 21:14:39.006"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:39.007">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:14:39.007" status="PASS" starttime="20161109 21:14:38.375"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:14:39.007">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:14:39.007" status="FAIL" starttime="20161109 21:14:39.007"></status>
</kw>
<status endtime="20161109 21:14:39.007" status="FAIL" starttime="20161109 21:14:38.374"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.010">@{arglist} = [ ]</msg>
<status endtime="20161109 21:14:49.010" status="PASS" starttime="20161109 21:14:49.010"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.012">${args} = {u'data': []}</msg>
<status endtime="20161109 21:14:49.012" status="PASS" starttime="20161109 21:14:49.011"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.014">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:14:49.014" status="PASS" starttime="20161109 21:14:49.014"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.017">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:14:49.017" status="PASS" starttime="20161109 21:14:49.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.019">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:49.019" status="PASS" starttime="20161109 21:14:49.018"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:14:49.020" status="PASS" starttime="20161109 21:14:49.020"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.023">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:49.024" status="PASS" starttime="20161109 21:14:49.022"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:49.025">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:49.025" status="PASS" starttime="20161109 21:14:49.025"></status>
</kw>
<status endtime="20161109 21:14:49.026" status="PASS" starttime="20161109 21:14:49.024"></status>
</kw>
<status endtime="20161109 21:14:49.026" status="PASS" starttime="20161109 21:14:49.021"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:49.027">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:14:49.027" status="PASS" starttime="20161109 21:14:49.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.027">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:49.027" status="PASS" starttime="20161109 21:14:49.027"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.028">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:14:49.028" status="PASS" starttime="20161109 21:14:49.028"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:14:49.028" status="PASS" starttime="20161109 21:14:49.028"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.371">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:14:49.371">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:49.371" status="PASS" starttime="20161109 21:14:49.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:49.373">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:14:49.373" status="PASS" starttime="20161109 21:14:49.372"></status>
</kw>
<status endtime="20161109 21:14:49.373" status="PASS" starttime="20161109 21:14:49.026"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.652">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:14:49.652">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:49.652" status="PASS" starttime="20161109 21:14:49.373"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.654">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:14:49.654" status="PASS" starttime="20161109 21:14:49.653"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:49.656">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:14:49.656" status="PASS" starttime="20161109 21:14:49.656"></status>
</kw>
<status endtime="20161109 21:14:49.657" status="PASS" starttime="20161109 21:14:49.654"></status>
</kw>
<status endtime="20161109 21:14:49.657" status="PASS" starttime="20161109 21:14:49.653"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:49.657">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:49.657" status="PASS" starttime="20161109 21:14:49.015"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:49.657">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:14:49.657" status="PASS" starttime="20161109 21:14:49.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:49.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:14:49.658" status="PASS" starttime="20161109 21:14:49.658"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:49.659">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:14:49.659">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:14:49.659">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:14:49.659" status="PASS" starttime="20161109 21:14:49.659"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:14:49.660">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:14:49.660" status="PASS" starttime="20161109 21:14:49.009"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:14:49.661">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:14:49.661" status="FAIL" starttime="20161109 21:14:49.660"></status>
</kw>
<status endtime="20161109 21:14:49.661" status="FAIL" starttime="20161109 21:14:49.008"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:59.663">@{arglist} = [ ]</msg>
<status endtime="20161109 21:14:59.663" status="PASS" starttime="20161109 21:14:59.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:59.664">${args} = {u'data': []}</msg>
<status endtime="20161109 21:14:59.664" status="PASS" starttime="20161109 21:14:59.664"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:59.666">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:14:59.666" status="PASS" starttime="20161109 21:14:59.665"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:59.668">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:14:59.668" status="PASS" starttime="20161109 21:14:59.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:59.668">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:59.668" status="PASS" starttime="20161109 21:14:59.668"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:14:59.669" status="PASS" starttime="20161109 21:14:59.669"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:59.671">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:59.671" status="PASS" starttime="20161109 21:14:59.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:59.672">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:14:59.673" status="PASS" starttime="20161109 21:14:59.672"></status>
</kw>
<status endtime="20161109 21:14:59.673" status="PASS" starttime="20161109 21:14:59.671"></status>
</kw>
<status endtime="20161109 21:14:59.673" status="PASS" starttime="20161109 21:14:59.669"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:14:59.674">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:14:59.674" status="PASS" starttime="20161109 21:14:59.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:59.675">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:14:59.675" status="PASS" starttime="20161109 21:14:59.675"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:59.676">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:14:59.676" status="PASS" starttime="20161109 21:14:59.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:14:59.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:14:59.676" status="PASS" starttime="20161109 21:14:59.676"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:00.155">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:00.155">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:00.155" status="PASS" starttime="20161109 21:14:59.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:00.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:00.156" status="PASS" starttime="20161109 21:15:00.155"></status>
</kw>
<status endtime="20161109 21:15:00.156" status="PASS" starttime="20161109 21:14:59.673"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:00.435">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:00.435">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:00.435" status="PASS" starttime="20161109 21:15:00.156"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:00.437">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:00.437" status="PASS" starttime="20161109 21:15:00.436"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:00.439">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:00.439" status="PASS" starttime="20161109 21:15:00.438"></status>
</kw>
<status endtime="20161109 21:15:00.439" status="PASS" starttime="20161109 21:15:00.437"></status>
</kw>
<status endtime="20161109 21:15:00.439" status="PASS" starttime="20161109 21:15:00.435"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:00.440">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:00.440" status="PASS" starttime="20161109 21:14:59.666"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:00.440">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:00.440" status="PASS" starttime="20161109 21:14:59.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:00.441">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:00.441" status="PASS" starttime="20161109 21:15:00.440"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:00.442">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:15:00.442">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:15:00.442">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:15:00.442" status="PASS" starttime="20161109 21:15:00.441"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:00.443">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:15:00.443" status="PASS" starttime="20161109 21:14:59.662"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:15:00.444">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:15:00.444" status="FAIL" starttime="20161109 21:15:00.443"></status>
</kw>
<status endtime="20161109 21:15:00.444" status="FAIL" starttime="20161109 21:14:59.662"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:10.448">@{arglist} = [ ]</msg>
<status endtime="20161109 21:15:10.448" status="PASS" starttime="20161109 21:15:10.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:10.449">${args} = {u'data': []}</msg>
<status endtime="20161109 21:15:10.449" status="PASS" starttime="20161109 21:15:10.448"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:10.451">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:15:10.451" status="PASS" starttime="20161109 21:15:10.450"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:10.453">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:15:10.453" status="PASS" starttime="20161109 21:15:10.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:10.454">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:15:10.454" status="PASS" starttime="20161109 21:15:10.453"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:15:10.455" status="PASS" starttime="20161109 21:15:10.454"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:10.457">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:15:10.457" status="PASS" starttime="20161109 21:15:10.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:10.458">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:15:10.458" status="PASS" starttime="20161109 21:15:10.458"></status>
</kw>
<status endtime="20161109 21:15:10.458" status="PASS" starttime="20161109 21:15:10.457"></status>
</kw>
<status endtime="20161109 21:15:10.458" status="PASS" starttime="20161109 21:15:10.455"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:10.459">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:15:10.459" status="PASS" starttime="20161109 21:15:10.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:10.460">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:15:10.460" status="PASS" starttime="20161109 21:15:10.460"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:10.460">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:15:10.460" status="PASS" starttime="20161109 21:15:10.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:10.461">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:15:10.461" status="PASS" starttime="20161109 21:15:10.461"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:10.821">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:10.821">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:10.821" status="PASS" starttime="20161109 21:15:10.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:10.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:10.822" status="PASS" starttime="20161109 21:15:10.821"></status>
</kw>
<status endtime="20161109 21:15:10.822" status="PASS" starttime="20161109 21:15:10.458"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:11.100">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:11.100">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:11.100" status="PASS" starttime="20161109 21:15:10.822"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:11.101">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:11.101" status="PASS" starttime="20161109 21:15:11.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:11.102">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:11.102" status="PASS" starttime="20161109 21:15:11.102"></status>
</kw>
<status endtime="20161109 21:15:11.102" status="PASS" starttime="20161109 21:15:11.102"></status>
</kw>
<status endtime="20161109 21:15:11.103" status="PASS" starttime="20161109 21:15:11.100"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:11.103">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:11.103" status="PASS" starttime="20161109 21:15:10.451"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:11.103">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:11.103" status="PASS" starttime="20161109 21:15:10.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:11.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:11.104" status="PASS" starttime="20161109 21:15:11.103"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:11.104">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:15:11.104">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:15:11.104">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:15:11.104" status="PASS" starttime="20161109 21:15:11.104"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:11.104">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:15:11.104" status="PASS" starttime="20161109 21:15:10.446"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:15:11.105">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:15:11.105" status="FAIL" starttime="20161109 21:15:11.105"></status>
</kw>
<status endtime="20161109 21:15:11.105" status="FAIL" starttime="20161109 21:15:10.444"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:21.110">@{arglist} = [ ]</msg>
<status endtime="20161109 21:15:21.110" status="PASS" starttime="20161109 21:15:21.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:21.111">${args} = {u'data': []}</msg>
<status endtime="20161109 21:15:21.111" status="PASS" starttime="20161109 21:15:21.111"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:21.113">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:15:21.113" status="PASS" starttime="20161109 21:15:21.112"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:21.115">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:15:21.115" status="PASS" starttime="20161109 21:15:21.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:21.116">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:15:21.116" status="PASS" starttime="20161109 21:15:21.115"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:15:21.117" status="PASS" starttime="20161109 21:15:21.116"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:21.119">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:15:21.120" status="PASS" starttime="20161109 21:15:21.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:21.121">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:15:21.121" status="PASS" starttime="20161109 21:15:21.120"></status>
</kw>
<status endtime="20161109 21:15:21.121" status="PASS" starttime="20161109 21:15:21.120"></status>
</kw>
<status endtime="20161109 21:15:21.121" status="PASS" starttime="20161109 21:15:21.117"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:21.123">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:15:21.123" status="PASS" starttime="20161109 21:15:21.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:21.124">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:15:21.124" status="PASS" starttime="20161109 21:15:21.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:21.125">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:15:21.125" status="PASS" starttime="20161109 21:15:21.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:21.126">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:15:21.126" status="PASS" starttime="20161109 21:15:21.126"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:25.036">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:25.037">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:25.037" status="PASS" starttime="20161109 21:15:21.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:25.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:25.038" status="PASS" starttime="20161109 21:15:25.037"></status>
</kw>
<status endtime="20161109 21:15:25.039" status="PASS" starttime="20161109 21:15:21.122"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:26.184">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:26.184">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:26.184" status="PASS" starttime="20161109 21:15:25.039"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:26.186">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:26.186" status="PASS" starttime="20161109 21:15:26.185"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:26.187">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:26.188" status="PASS" starttime="20161109 21:15:26.187"></status>
</kw>
<status endtime="20161109 21:15:26.188" status="PASS" starttime="20161109 21:15:26.186"></status>
</kw>
<status endtime="20161109 21:15:26.188" status="PASS" starttime="20161109 21:15:26.184"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:26.188">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:26.188" status="PASS" starttime="20161109 21:15:21.113"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:26.189">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:26.189" status="PASS" starttime="20161109 21:15:21.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:26.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:26.190" status="PASS" starttime="20161109 21:15:26.189"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:26.191">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:15:26.191">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:15:26.191">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:15:26.191" status="PASS" starttime="20161109 21:15:26.190"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:26.191">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:15:26.192" status="PASS" starttime="20161109 21:15:21.107"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:15:26.192">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:15:26.192" status="FAIL" starttime="20161109 21:15:26.192"></status>
</kw>
<status endtime="20161109 21:15:26.193" status="FAIL" starttime="20161109 21:15:21.106"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.195">@{arglist} = [ ]</msg>
<status endtime="20161109 21:15:36.195" status="PASS" starttime="20161109 21:15:36.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.196">${args} = {u'data': []}</msg>
<status endtime="20161109 21:15:36.196" status="PASS" starttime="20161109 21:15:36.196"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.198">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:15:36.198" status="PASS" starttime="20161109 21:15:36.197"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.200">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:15:36.200" status="PASS" starttime="20161109 21:15:36.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:15:36.200" status="PASS" starttime="20161109 21:15:36.200"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:15:36.201" status="PASS" starttime="20161109 21:15:36.201"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.203">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:15:36.203" status="PASS" starttime="20161109 21:15:36.202"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:36.204">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:15:36.204" status="PASS" starttime="20161109 21:15:36.204"></status>
</kw>
<status endtime="20161109 21:15:36.205" status="PASS" starttime="20161109 21:15:36.203"></status>
</kw>
<status endtime="20161109 21:15:36.205" status="PASS" starttime="20161109 21:15:36.201"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:36.206">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:15:36.207" status="PASS" starttime="20161109 21:15:36.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.207">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:15:36.207" status="PASS" starttime="20161109 21:15:36.207"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.208">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:15:36.208" status="PASS" starttime="20161109 21:15:36.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.208">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:15:36.208" status="PASS" starttime="20161109 21:15:36.208"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.565">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:36.565">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:36.566" status="PASS" starttime="20161109 21:15:36.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:36.596">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:36.596" status="PASS" starttime="20161109 21:15:36.566"></status>
</kw>
<status endtime="20161109 21:15:36.597" status="PASS" starttime="20161109 21:15:36.205"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.869">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:36.869">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:36.869" status="PASS" starttime="20161109 21:15:36.597"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.870">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:36.870" status="PASS" starttime="20161109 21:15:36.870"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:36.871">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:36.871" status="PASS" starttime="20161109 21:15:36.871"></status>
</kw>
<status endtime="20161109 21:15:36.871" status="PASS" starttime="20161109 21:15:36.870"></status>
</kw>
<status endtime="20161109 21:15:36.871" status="PASS" starttime="20161109 21:15:36.869"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:36.871">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:36.871" status="PASS" starttime="20161109 21:15:36.198"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:36.872">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:36.872" status="PASS" starttime="20161109 21:15:36.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:36.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:36.872" status="PASS" starttime="20161109 21:15:36.872"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:36.873">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:15:36.873">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:15:36.873">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:15:36.873" status="PASS" starttime="20161109 21:15:36.872"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:36.873">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:15:36.873" status="PASS" starttime="20161109 21:15:36.194"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:15:36.874">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:15:36.874" status="FAIL" starttime="20161109 21:15:36.873"></status>
</kw>
<status endtime="20161109 21:15:36.874" status="FAIL" starttime="20161109 21:15:36.193"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:46.875">@{arglist} = [ ]</msg>
<status endtime="20161109 21:15:46.875" status="PASS" starttime="20161109 21:15:46.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:46.876">${args} = {u'data': []}</msg>
<status endtime="20161109 21:15:46.876" status="PASS" starttime="20161109 21:15:46.876"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:46.877">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:15:46.877" status="PASS" starttime="20161109 21:15:46.877"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:46.879">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:15:46.879" status="PASS" starttime="20161109 21:15:46.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:46.879">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:15:46.879" status="PASS" starttime="20161109 21:15:46.879"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:15:46.880" status="PASS" starttime="20161109 21:15:46.879"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:46.881">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:15:46.881" status="PASS" starttime="20161109 21:15:46.880"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:46.882">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:15:46.882" status="PASS" starttime="20161109 21:15:46.882"></status>
</kw>
<status endtime="20161109 21:15:46.882" status="PASS" starttime="20161109 21:15:46.881"></status>
</kw>
<status endtime="20161109 21:15:46.882" status="PASS" starttime="20161109 21:15:46.880"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:46.883">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:15:46.883" status="PASS" starttime="20161109 21:15:46.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:46.884">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:15:46.884" status="PASS" starttime="20161109 21:15:46.884"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:46.884">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:15:46.884" status="PASS" starttime="20161109 21:15:46.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:46.885">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:15:46.885" status="PASS" starttime="20161109 21:15:46.885"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:47.222">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:47.222">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:47.222" status="PASS" starttime="20161109 21:15:46.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:47.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:47.222" status="PASS" starttime="20161109 21:15:47.222"></status>
</kw>
<status endtime="20161109 21:15:47.223" status="PASS" starttime="20161109 21:15:46.882"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:47.503">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:47.503">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:47.503" status="PASS" starttime="20161109 21:15:47.223"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:47.505">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:47.505" status="PASS" starttime="20161109 21:15:47.504"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:47.505">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:47.506" status="PASS" starttime="20161109 21:15:47.505"></status>
</kw>
<status endtime="20161109 21:15:47.506" status="PASS" starttime="20161109 21:15:47.505"></status>
</kw>
<status endtime="20161109 21:15:47.506" status="PASS" starttime="20161109 21:15:47.503"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:47.506">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:47.506" status="PASS" starttime="20161109 21:15:46.877"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:47.506">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:47.506" status="PASS" starttime="20161109 21:15:46.876"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:47.507">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:47.507" status="PASS" starttime="20161109 21:15:47.506"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:47.507">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:15:47.507">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:15:47.507">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:15:47.507" status="PASS" starttime="20161109 21:15:47.507"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:47.508">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:15:47.508" status="PASS" starttime="20161109 21:15:46.875"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:15:47.508">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:15:47.508" status="FAIL" starttime="20161109 21:15:47.508"></status>
</kw>
<status endtime="20161109 21:15:47.509" status="FAIL" starttime="20161109 21:15:46.874"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:57.511">@{arglist} = [ ]</msg>
<status endtime="20161109 21:15:57.511" status="PASS" starttime="20161109 21:15:57.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:57.512">${args} = {u'data': []}</msg>
<status endtime="20161109 21:15:57.512" status="PASS" starttime="20161109 21:15:57.512"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:57.514">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:15:57.514" status="PASS" starttime="20161109 21:15:57.513"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:57.516">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:15:57.516" status="PASS" starttime="20161109 21:15:57.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:57.517">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:15:57.517" status="PASS" starttime="20161109 21:15:57.516"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:15:57.518" status="PASS" starttime="20161109 21:15:57.517"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:57.520">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:15:57.520" status="PASS" starttime="20161109 21:15:57.519"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:57.521">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:15:57.521" status="PASS" starttime="20161109 21:15:57.521"></status>
</kw>
<status endtime="20161109 21:15:57.522" status="PASS" starttime="20161109 21:15:57.520"></status>
</kw>
<status endtime="20161109 21:15:57.522" status="PASS" starttime="20161109 21:15:57.518"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:57.523">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:15:57.524" status="PASS" starttime="20161109 21:15:57.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:57.524">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:15:57.525" status="PASS" starttime="20161109 21:15:57.524"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:57.525">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:15:57.525" status="PASS" starttime="20161109 21:15:57.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:57.526">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:15:57.526" status="PASS" starttime="20161109 21:15:57.526"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:58.676">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:58.676">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:58.676" status="PASS" starttime="20161109 21:15:57.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:58.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:58.677" status="PASS" starttime="20161109 21:15:58.676"></status>
</kw>
<status endtime="20161109 21:15:58.678" status="PASS" starttime="20161109 21:15:57.522"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:58.991">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:15:58.991">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:58.991" status="PASS" starttime="20161109 21:15:58.678"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:58.993">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:58.993" status="PASS" starttime="20161109 21:15:58.992"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:58.995">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:15:58.995" status="PASS" starttime="20161109 21:15:58.994"></status>
</kw>
<status endtime="20161109 21:15:58.995" status="PASS" starttime="20161109 21:15:58.993"></status>
</kw>
<status endtime="20161109 21:15:58.995" status="PASS" starttime="20161109 21:15:58.992"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:58.995">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:58.995" status="PASS" starttime="20161109 21:15:57.514"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:58.996">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:15:58.996" status="PASS" starttime="20161109 21:15:57.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:15:58.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:15:58.997" status="PASS" starttime="20161109 21:15:58.996"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:15:58.997">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:15:58.997">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:15:58.997">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:15:58.998" status="PASS" starttime="20161109 21:15:58.997"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:15:58.998">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:15:58.998" status="PASS" starttime="20161109 21:15:57.510"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:15:58.998">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:15:58.999" status="FAIL" starttime="20161109 21:15:58.998"></status>
</kw>
<status endtime="20161109 21:15:58.999" status="FAIL" starttime="20161109 21:15:57.509"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.002">@{arglist} = [ ]</msg>
<status endtime="20161109 21:16:09.002" status="PASS" starttime="20161109 21:16:09.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.003">${args} = {u'data': []}</msg>
<status endtime="20161109 21:16:09.003" status="PASS" starttime="20161109 21:16:09.002"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.004">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:16:09.004" status="PASS" starttime="20161109 21:16:09.004"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.006">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:16:09.007" status="PASS" starttime="20161109 21:16:09.006"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.007">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:16:09.007" status="PASS" starttime="20161109 21:16:09.007"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:16:09.008" status="PASS" starttime="20161109 21:16:09.007"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.010">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:16:09.010" status="PASS" starttime="20161109 21:16:09.008"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:09.011">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:16:09.011" status="PASS" starttime="20161109 21:16:09.010"></status>
</kw>
<status endtime="20161109 21:16:09.011" status="PASS" starttime="20161109 21:16:09.010"></status>
</kw>
<status endtime="20161109 21:16:09.011" status="PASS" starttime="20161109 21:16:09.008"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:09.012">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:16:09.012" status="PASS" starttime="20161109 21:16:09.012"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:16:09.013" status="PASS" starttime="20161109 21:16:09.013"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.013">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:16:09.014" status="PASS" starttime="20161109 21:16:09.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.014">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:16:09.014" status="PASS" starttime="20161109 21:16:09.014"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.355">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:16:09.355">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:09.355" status="PASS" starttime="20161109 21:16:09.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:09.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:16:09.357" status="PASS" starttime="20161109 21:16:09.356"></status>
</kw>
<status endtime="20161109 21:16:09.357" status="PASS" starttime="20161109 21:16:09.011"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.640">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:16:09.640">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:09.640" status="PASS" starttime="20161109 21:16:09.358"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.642">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:16:09.642" status="PASS" starttime="20161109 21:16:09.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:09.644">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:16:09.644" status="PASS" starttime="20161109 21:16:09.643"></status>
</kw>
<status endtime="20161109 21:16:09.644" status="PASS" starttime="20161109 21:16:09.642"></status>
</kw>
<status endtime="20161109 21:16:09.644" status="PASS" starttime="20161109 21:16:09.640"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:09.644">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:09.644" status="PASS" starttime="20161109 21:16:09.005"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:09.645">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:09.645" status="PASS" starttime="20161109 21:16:09.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:09.646">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:16:09.646" status="PASS" starttime="20161109 21:16:09.645"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:09.647">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:16:09.647">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:16:09.647">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:16:09.647" status="PASS" starttime="20161109 21:16:09.646"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:09.647">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:16:09.647" status="PASS" starttime="20161109 21:16:09.000"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:16:09.648">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:16:09.648" status="FAIL" starttime="20161109 21:16:09.648"></status>
</kw>
<status endtime="20161109 21:16:09.648" status="FAIL" starttime="20161109 21:16:08.999"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:19.651">@{arglist} = [ ]</msg>
<status endtime="20161109 21:16:19.651" status="PASS" starttime="20161109 21:16:19.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:19.652">${args} = {u'data': []}</msg>
<status endtime="20161109 21:16:19.652" status="PASS" starttime="20161109 21:16:19.652"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:19.654">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:16:19.654" status="PASS" starttime="20161109 21:16:19.654"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:19.656">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:16:19.656" status="PASS" starttime="20161109 21:16:19.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:19.657">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:16:19.657" status="PASS" starttime="20161109 21:16:19.657"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:16:19.658" status="PASS" starttime="20161109 21:16:19.658"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:19.660">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:16:19.660" status="PASS" starttime="20161109 21:16:19.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:19.662">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:16:19.662" status="PASS" starttime="20161109 21:16:19.661"></status>
</kw>
<status endtime="20161109 21:16:19.662" status="PASS" starttime="20161109 21:16:19.661"></status>
</kw>
<status endtime="20161109 21:16:19.662" status="PASS" starttime="20161109 21:16:19.658"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:19.664">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:16:19.664" status="PASS" starttime="20161109 21:16:19.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:19.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:16:19.665" status="PASS" starttime="20161109 21:16:19.665"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:19.666">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:16:19.666" status="PASS" starttime="20161109 21:16:19.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:19.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:16:19.667" status="PASS" starttime="20161109 21:16:19.667"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:19.999">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:16:19.999">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:19.999" status="PASS" starttime="20161109 21:16:19.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:20.002">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:16:20.002" status="PASS" starttime="20161109 21:16:19.999"></status>
</kw>
<status endtime="20161109 21:16:20.002" status="PASS" starttime="20161109 21:16:19.662"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:20.278">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:16:20.278">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:20.278" status="PASS" starttime="20161109 21:16:20.002"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:20.279">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:16:20.279" status="PASS" starttime="20161109 21:16:20.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:20.280">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:16:20.280" status="PASS" starttime="20161109 21:16:20.280"></status>
</kw>
<status endtime="20161109 21:16:20.280" status="PASS" starttime="20161109 21:16:20.280"></status>
</kw>
<status endtime="20161109 21:16:20.281" status="PASS" starttime="20161109 21:16:20.278"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:20.281">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:20.281" status="PASS" starttime="20161109 21:16:19.654"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:20.281">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:20.281" status="PASS" starttime="20161109 21:16:19.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:20.281">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:16:20.282" status="PASS" starttime="20161109 21:16:20.281"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:20.282">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:16:20.282">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:16:20.282">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:16:20.282" status="PASS" starttime="20161109 21:16:20.282"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:20.282">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:16:20.282" status="PASS" starttime="20161109 21:16:19.650"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:16:20.283">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:16:20.283" status="FAIL" starttime="20161109 21:16:20.283"></status>
</kw>
<status endtime="20161109 21:16:20.283" status="FAIL" starttime="20161109 21:16:19.649"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:30.285">@{arglist} = [ ]</msg>
<status endtime="20161109 21:16:30.285" status="PASS" starttime="20161109 21:16:30.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:30.286">${args} = {u'data': []}</msg>
<status endtime="20161109 21:16:30.286" status="PASS" starttime="20161109 21:16:30.285"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:30.288">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:16:30.288" status="PASS" starttime="20161109 21:16:30.288"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:30.290">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:16:30.290" status="PASS" starttime="20161109 21:16:30.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:30.291">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:16:30.291" status="PASS" starttime="20161109 21:16:30.291"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:16:30.292" status="PASS" starttime="20161109 21:16:30.292"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:30.295">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:16:30.295" status="PASS" starttime="20161109 21:16:30.293"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:30.296">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:16:30.297" status="PASS" starttime="20161109 21:16:30.296"></status>
</kw>
<status endtime="20161109 21:16:30.297" status="PASS" starttime="20161109 21:16:30.295"></status>
</kw>
<status endtime="20161109 21:16:30.297" status="PASS" starttime="20161109 21:16:30.292"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:30.298">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:16:30.299" status="PASS" starttime="20161109 21:16:30.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:30.300">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:16:30.300" status="PASS" starttime="20161109 21:16:30.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:30.301">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:16:30.301" status="PASS" starttime="20161109 21:16:30.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:30.302">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:16:30.302" status="PASS" starttime="20161109 21:16:30.301"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:38.604">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:16:38.604">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:38.604" status="PASS" starttime="20161109 21:16:30.302"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:38.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:16:38.606" status="PASS" starttime="20161109 21:16:38.605"></status>
</kw>
<status endtime="20161109 21:16:38.606" status="PASS" starttime="20161109 21:16:30.297"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:39.627">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:16:39.628">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:39.628" status="PASS" starttime="20161109 21:16:38.607"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:39.630">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:16:39.630" status="PASS" starttime="20161109 21:16:39.629"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:39.631">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:16:39.631" status="PASS" starttime="20161109 21:16:39.631"></status>
</kw>
<status endtime="20161109 21:16:39.631" status="PASS" starttime="20161109 21:16:39.630"></status>
</kw>
<status endtime="20161109 21:16:39.632" status="PASS" starttime="20161109 21:16:39.628"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:39.632">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:39.632" status="PASS" starttime="20161109 21:16:30.288"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:39.632">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:39.632" status="PASS" starttime="20161109 21:16:30.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:39.634">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:16:39.634" status="PASS" starttime="20161109 21:16:39.633"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:39.635">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:16:39.636">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:16:39.636">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:16:39.636" status="PASS" starttime="20161109 21:16:39.635"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:39.637">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:16:39.637" status="PASS" starttime="20161109 21:16:30.284"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:16:39.637">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:16:39.638" status="FAIL" starttime="20161109 21:16:39.637"></status>
</kw>
<status endtime="20161109 21:16:39.638" status="FAIL" starttime="20161109 21:16:30.284"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:49.640">@{arglist} = [ ]</msg>
<status endtime="20161109 21:16:49.640" status="PASS" starttime="20161109 21:16:49.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:49.641">${args} = {u'data': []}</msg>
<status endtime="20161109 21:16:49.641" status="PASS" starttime="20161109 21:16:49.640"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:49.643">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:16:49.643" status="PASS" starttime="20161109 21:16:49.643"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:49.645">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:16:49.645" status="PASS" starttime="20161109 21:16:49.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:49.646">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:16:49.646" status="PASS" starttime="20161109 21:16:49.645"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:16:49.647" status="PASS" starttime="20161109 21:16:49.646"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:49.649">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:16:49.649" status="PASS" starttime="20161109 21:16:49.648"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:49.650">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:16:49.651" status="PASS" starttime="20161109 21:16:49.650"></status>
</kw>
<status endtime="20161109 21:16:49.651" status="PASS" starttime="20161109 21:16:49.649"></status>
</kw>
<status endtime="20161109 21:16:49.651" status="PASS" starttime="20161109 21:16:49.647"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:49.652">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:16:49.653" status="PASS" starttime="20161109 21:16:49.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:49.653">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:16:49.654" status="PASS" starttime="20161109 21:16:49.653"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:49.654">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:16:49.655" status="PASS" starttime="20161109 21:16:49.654"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:49.655">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:16:49.655" status="PASS" starttime="20161109 21:16:49.655"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:49.990">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:16:49.990">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:49.990" status="PASS" starttime="20161109 21:16:49.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:49.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:16:49.991" status="PASS" starttime="20161109 21:16:49.990"></status>
</kw>
<status endtime="20161109 21:16:49.991" status="PASS" starttime="20161109 21:16:49.651"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:50.267">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:16:50.267">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:50.267" status="PASS" starttime="20161109 21:16:49.991"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:50.269">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:16:50.269" status="PASS" starttime="20161109 21:16:50.268"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:50.270">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:16:50.270" status="PASS" starttime="20161109 21:16:50.270"></status>
</kw>
<status endtime="20161109 21:16:50.270" status="PASS" starttime="20161109 21:16:50.269"></status>
</kw>
<status endtime="20161109 21:16:50.271" status="PASS" starttime="20161109 21:16:50.267"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:50.271">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:50.271" status="PASS" starttime="20161109 21:16:49.643"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:50.271">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:16:50.271" status="PASS" starttime="20161109 21:16:49.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:16:50.272">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:16:50.272" status="PASS" starttime="20161109 21:16:50.272"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:16:50.273">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:16:50.273">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:16:50.273">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:16:50.273" status="PASS" starttime="20161109 21:16:50.273"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:16:50.274">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:16:50.274" status="PASS" starttime="20161109 21:16:49.639"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:16:50.275">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:16:50.275" status="FAIL" starttime="20161109 21:16:50.274"></status>
</kw>
<status endtime="20161109 21:16:50.275" status="FAIL" starttime="20161109 21:16:49.638"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:00.278">@{arglist} = [ ]</msg>
<status endtime="20161109 21:17:00.278" status="PASS" starttime="20161109 21:17:00.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:00.279">${args} = {u'data': []}</msg>
<status endtime="20161109 21:17:00.279" status="PASS" starttime="20161109 21:17:00.278"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:00.281">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:17:00.281" status="PASS" starttime="20161109 21:17:00.280"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:00.283">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:17:00.283" status="PASS" starttime="20161109 21:17:00.282"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:00.283">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:00.284" status="PASS" starttime="20161109 21:17:00.283"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:17:00.284" status="PASS" starttime="20161109 21:17:00.284"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:00.287">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:00.287" status="PASS" starttime="20161109 21:17:00.285"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:00.288">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:00.288" status="PASS" starttime="20161109 21:17:00.288"></status>
</kw>
<status endtime="20161109 21:17:00.288" status="PASS" starttime="20161109 21:17:00.287"></status>
</kw>
<status endtime="20161109 21:17:00.288" status="PASS" starttime="20161109 21:17:00.285"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:00.289">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:17:00.291" status="PASS" starttime="20161109 21:17:00.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:00.292">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:00.292" status="PASS" starttime="20161109 21:17:00.291"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:00.292">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:17:00.292" status="PASS" starttime="20161109 21:17:00.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:00.293">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:17:00.293" status="PASS" starttime="20161109 21:17:00.293"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:00.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:00.622">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:00.622" status="PASS" starttime="20161109 21:17:00.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:00.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:00.623" status="PASS" starttime="20161109 21:17:00.623"></status>
</kw>
<status endtime="20161109 21:17:00.623" status="PASS" starttime="20161109 21:17:00.288"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:01.035">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:01.035">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:01.035" status="PASS" starttime="20161109 21:17:00.624"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:01.036">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:01.036" status="PASS" starttime="20161109 21:17:01.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:01.037">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:01.037" status="PASS" starttime="20161109 21:17:01.037"></status>
</kw>
<status endtime="20161109 21:17:01.037" status="PASS" starttime="20161109 21:17:01.037"></status>
</kw>
<status endtime="20161109 21:17:01.038" status="PASS" starttime="20161109 21:17:01.035"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:01.038">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:01.038" status="PASS" starttime="20161109 21:17:00.281"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:01.038">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:01.038" status="PASS" starttime="20161109 21:17:00.279"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:01.039">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:01.039" status="PASS" starttime="20161109 21:17:01.038"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:01.039">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:17:01.039">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:17:01.039">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:17:01.039" status="PASS" starttime="20161109 21:17:01.039"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:01.040">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:17:01.040" status="PASS" starttime="20161109 21:17:00.277"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:17:01.040">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:17:01.040" status="FAIL" starttime="20161109 21:17:01.040"></status>
</kw>
<status endtime="20161109 21:17:01.040" status="FAIL" starttime="20161109 21:17:00.276"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.043">@{arglist} = [ ]</msg>
<status endtime="20161109 21:17:11.043" status="PASS" starttime="20161109 21:17:11.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.044">${args} = {u'data': []}</msg>
<status endtime="20161109 21:17:11.044" status="PASS" starttime="20161109 21:17:11.043"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.046">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:17:11.046" status="PASS" starttime="20161109 21:17:11.045"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.048">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:17:11.048" status="PASS" starttime="20161109 21:17:11.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.049">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:11.049" status="PASS" starttime="20161109 21:17:11.048"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:17:11.050" status="PASS" starttime="20161109 21:17:11.049"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.053">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:11.053" status="PASS" starttime="20161109 21:17:11.051"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:11.054">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:11.054" status="PASS" starttime="20161109 21:17:11.054"></status>
</kw>
<status endtime="20161109 21:17:11.054" status="PASS" starttime="20161109 21:17:11.053"></status>
</kw>
<status endtime="20161109 21:17:11.054" status="PASS" starttime="20161109 21:17:11.051"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:11.056">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:17:11.056" status="PASS" starttime="20161109 21:17:11.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.057">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:11.058" status="PASS" starttime="20161109 21:17:11.057"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.059">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:17:11.059" status="PASS" starttime="20161109 21:17:11.058"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.060">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:17:11.060" status="PASS" starttime="20161109 21:17:11.059"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.401">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:11.401">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:11.401" status="PASS" starttime="20161109 21:17:11.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:11.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:11.403" status="PASS" starttime="20161109 21:17:11.402"></status>
</kw>
<status endtime="20161109 21:17:11.403" status="PASS" starttime="20161109 21:17:11.055"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.676">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:11.676">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:11.676" status="PASS" starttime="20161109 21:17:11.403"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.678">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:11.678" status="PASS" starttime="20161109 21:17:11.677"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:11.680">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:11.680" status="PASS" starttime="20161109 21:17:11.679"></status>
</kw>
<status endtime="20161109 21:17:11.680" status="PASS" starttime="20161109 21:17:11.678"></status>
</kw>
<status endtime="20161109 21:17:11.680" status="PASS" starttime="20161109 21:17:11.677"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:11.680">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:11.681" status="PASS" starttime="20161109 21:17:11.046"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:11.681">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:11.681" status="PASS" starttime="20161109 21:17:11.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:11.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:11.682" status="PASS" starttime="20161109 21:17:11.682"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:11.683">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:17:11.684">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:17:11.684">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:17:11.684" status="PASS" starttime="20161109 21:17:11.683"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:11.684">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:17:11.684" status="PASS" starttime="20161109 21:17:11.042"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:17:11.686">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:17:11.686" status="FAIL" starttime="20161109 21:17:11.685"></status>
</kw>
<status endtime="20161109 21:17:11.687" status="FAIL" starttime="20161109 21:17:11.041"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:21.689">@{arglist} = [ ]</msg>
<status endtime="20161109 21:17:21.689" status="PASS" starttime="20161109 21:17:21.689"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:21.690">${args} = {u'data': []}</msg>
<status endtime="20161109 21:17:21.690" status="PASS" starttime="20161109 21:17:21.689"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:21.692">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:17:21.692" status="PASS" starttime="20161109 21:17:21.691"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:21.694">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:17:21.694" status="PASS" starttime="20161109 21:17:21.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:21.694">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:21.695" status="PASS" starttime="20161109 21:17:21.694"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:17:21.695" status="PASS" starttime="20161109 21:17:21.695"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:21.698">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:21.698" status="PASS" starttime="20161109 21:17:21.697"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:21.699">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:21.699" status="PASS" starttime="20161109 21:17:21.698"></status>
</kw>
<status endtime="20161109 21:17:21.699" status="PASS" starttime="20161109 21:17:21.698"></status>
</kw>
<status endtime="20161109 21:17:21.699" status="PASS" starttime="20161109 21:17:21.696"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:21.700">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:17:21.700" status="PASS" starttime="20161109 21:17:21.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:21.701">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:21.701" status="PASS" starttime="20161109 21:17:21.700"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:21.701">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:17:21.701" status="PASS" starttime="20161109 21:17:21.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:21.702">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:17:21.702" status="PASS" starttime="20161109 21:17:21.701"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:22.045">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:22.045">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:22.045" status="PASS" starttime="20161109 21:17:21.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:22.046">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:22.046" status="PASS" starttime="20161109 21:17:22.045"></status>
</kw>
<status endtime="20161109 21:17:22.046" status="PASS" starttime="20161109 21:17:21.699"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:22.433">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:22.433">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:22.433" status="PASS" starttime="20161109 21:17:22.046"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:22.435">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:22.435" status="PASS" starttime="20161109 21:17:22.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:22.436">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:22.436" status="PASS" starttime="20161109 21:17:22.436"></status>
</kw>
<status endtime="20161109 21:17:22.436" status="PASS" starttime="20161109 21:17:22.435"></status>
</kw>
<status endtime="20161109 21:17:22.437" status="PASS" starttime="20161109 21:17:22.433"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:22.437">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:22.437" status="PASS" starttime="20161109 21:17:21.692"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:22.438">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:22.438" status="PASS" starttime="20161109 21:17:21.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:22.439">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:22.439" status="PASS" starttime="20161109 21:17:22.438"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:22.440">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:17:22.440">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:17:22.441">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:17:22.441" status="PASS" starttime="20161109 21:17:22.440"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:22.441">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:17:22.442" status="PASS" starttime="20161109 21:17:21.688"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:17:22.442">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:17:22.442" status="FAIL" starttime="20161109 21:17:22.442"></status>
</kw>
<status endtime="20161109 21:17:22.443" status="FAIL" starttime="20161109 21:17:21.687"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:32.445">@{arglist} = [ ]</msg>
<status endtime="20161109 21:17:32.445" status="PASS" starttime="20161109 21:17:32.445"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:32.446">${args} = {u'data': []}</msg>
<status endtime="20161109 21:17:32.446" status="PASS" starttime="20161109 21:17:32.446"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:32.448">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:17:32.448" status="PASS" starttime="20161109 21:17:32.448"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:32.450">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:17:32.450" status="PASS" starttime="20161109 21:17:32.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:32.451">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:32.451" status="PASS" starttime="20161109 21:17:32.451"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:17:32.452" status="PASS" starttime="20161109 21:17:32.452"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:32.455">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:32.455" status="PASS" starttime="20161109 21:17:32.453"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:32.457">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:32.457" status="PASS" starttime="20161109 21:17:32.457"></status>
</kw>
<status endtime="20161109 21:17:32.458" status="PASS" starttime="20161109 21:17:32.455"></status>
</kw>
<status endtime="20161109 21:17:32.458" status="PASS" starttime="20161109 21:17:32.452"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:32.459">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:17:32.459" status="PASS" starttime="20161109 21:17:32.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:32.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:32.459" status="PASS" starttime="20161109 21:17:32.459"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:32.460">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:17:32.460" status="PASS" starttime="20161109 21:17:32.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:32.461">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:17:32.461" status="PASS" starttime="20161109 21:17:32.460"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:32.793">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:32.793">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:32.793" status="PASS" starttime="20161109 21:17:32.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:32.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:32.794" status="PASS" starttime="20161109 21:17:32.793"></status>
</kw>
<status endtime="20161109 21:17:32.794" status="PASS" starttime="20161109 21:17:32.458"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:33.079">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:33.079">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:33.079" status="PASS" starttime="20161109 21:17:32.794"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:33.080">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:33.080" status="PASS" starttime="20161109 21:17:33.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:33.081">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:33.081" status="PASS" starttime="20161109 21:17:33.081"></status>
</kw>
<status endtime="20161109 21:17:33.081" status="PASS" starttime="20161109 21:17:33.081"></status>
</kw>
<status endtime="20161109 21:17:33.082" status="PASS" starttime="20161109 21:17:33.079"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:33.082">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:33.082" status="PASS" starttime="20161109 21:17:32.449"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:33.082">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:33.082" status="PASS" starttime="20161109 21:17:32.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:33.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:33.083" status="PASS" starttime="20161109 21:17:33.082"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:33.085">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:17:33.085">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:17:33.085">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:17:33.085" status="PASS" starttime="20161109 21:17:33.084"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:33.085">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:17:33.085" status="PASS" starttime="20161109 21:17:32.444"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:17:33.086">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:17:33.086" status="FAIL" starttime="20161109 21:17:33.085"></status>
</kw>
<status endtime="20161109 21:17:33.086" status="FAIL" starttime="20161109 21:17:32.443"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:43.089">@{arglist} = [ ]</msg>
<status endtime="20161109 21:17:43.089" status="PASS" starttime="20161109 21:17:43.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:43.090">${args} = {u'data': []}</msg>
<status endtime="20161109 21:17:43.090" status="PASS" starttime="20161109 21:17:43.089"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:43.092">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:17:43.092" status="PASS" starttime="20161109 21:17:43.092"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:43.094">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:17:43.094" status="PASS" starttime="20161109 21:17:43.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:43.095">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:43.095" status="PASS" starttime="20161109 21:17:43.095"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:17:43.096" status="PASS" starttime="20161109 21:17:43.096"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:43.098">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:43.099" status="PASS" starttime="20161109 21:17:43.097"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:43.099">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:43.100" status="PASS" starttime="20161109 21:17:43.099"></status>
</kw>
<status endtime="20161109 21:17:43.100" status="PASS" starttime="20161109 21:17:43.099"></status>
</kw>
<status endtime="20161109 21:17:43.100" status="PASS" starttime="20161109 21:17:43.096"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:43.101">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:17:43.101" status="PASS" starttime="20161109 21:17:43.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:43.101">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:43.102" status="PASS" starttime="20161109 21:17:43.101"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:43.102">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:17:43.102" status="PASS" starttime="20161109 21:17:43.102"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:43.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:17:43.103" status="PASS" starttime="20161109 21:17:43.102"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:47.730">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:47.730">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:47.730" status="PASS" starttime="20161109 21:17:43.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:47.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:47.732" status="PASS" starttime="20161109 21:17:47.731"></status>
</kw>
<status endtime="20161109 21:17:47.732" status="PASS" starttime="20161109 21:17:43.100"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:48.784">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:48.785">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:48.785" status="PASS" starttime="20161109 21:17:47.732"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:48.787">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:48.787" status="PASS" starttime="20161109 21:17:48.786"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:48.788">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:48.789" status="PASS" starttime="20161109 21:17:48.788"></status>
</kw>
<status endtime="20161109 21:17:48.789" status="PASS" starttime="20161109 21:17:48.787"></status>
</kw>
<status endtime="20161109 21:17:48.789" status="PASS" starttime="20161109 21:17:48.785"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:48.789">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:48.789" status="PASS" starttime="20161109 21:17:43.093"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:48.790">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:48.790" status="PASS" starttime="20161109 21:17:43.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:48.791">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:48.791" status="PASS" starttime="20161109 21:17:48.790"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:48.792">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:17:48.792">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:17:48.792">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:17:48.792" status="PASS" starttime="20161109 21:17:48.791"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:48.793">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:17:48.793" status="PASS" starttime="20161109 21:17:43.087"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:17:48.793">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:17:48.794" status="FAIL" starttime="20161109 21:17:48.793"></status>
</kw>
<status endtime="20161109 21:17:48.794" status="FAIL" starttime="20161109 21:17:43.086"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:58.797">@{arglist} = [ ]</msg>
<status endtime="20161109 21:17:58.797" status="PASS" starttime="20161109 21:17:58.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:58.798">${args} = {u'data': []}</msg>
<status endtime="20161109 21:17:58.798" status="PASS" starttime="20161109 21:17:58.797"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:58.799">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:17:58.800" status="PASS" starttime="20161109 21:17:58.799"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:58.801">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:17:58.801" status="PASS" starttime="20161109 21:17:58.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:58.802">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:58.802" status="PASS" starttime="20161109 21:17:58.802"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:17:58.803" status="PASS" starttime="20161109 21:17:58.803"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:58.805">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:58.806" status="PASS" starttime="20161109 21:17:58.804"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:58.807">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:17:58.807" status="PASS" starttime="20161109 21:17:58.806"></status>
</kw>
<status endtime="20161109 21:17:58.807" status="PASS" starttime="20161109 21:17:58.806"></status>
</kw>
<status endtime="20161109 21:17:58.808" status="PASS" starttime="20161109 21:17:58.803"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:58.809">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:17:58.810" status="PASS" starttime="20161109 21:17:58.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:58.810">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:17:58.810" status="PASS" starttime="20161109 21:17:58.810"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:58.811">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:17:58.811" status="PASS" starttime="20161109 21:17:58.810"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:58.811">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:17:58.811" status="PASS" starttime="20161109 21:17:58.811"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:59.189">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:59.190">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:59.190" status="PASS" starttime="20161109 21:17:58.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:59.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:59.191" status="PASS" starttime="20161109 21:17:59.190"></status>
</kw>
<status endtime="20161109 21:17:59.191" status="PASS" starttime="20161109 21:17:58.808"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:59.475">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:17:59.475">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:59.475" status="PASS" starttime="20161109 21:17:59.191"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:59.477">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:59.477" status="PASS" starttime="20161109 21:17:59.476"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:59.479">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:17:59.479" status="PASS" starttime="20161109 21:17:59.479"></status>
</kw>
<status endtime="20161109 21:17:59.479" status="PASS" starttime="20161109 21:17:59.478"></status>
</kw>
<status endtime="20161109 21:17:59.479" status="PASS" starttime="20161109 21:17:59.476"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:59.480">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:59.480" status="PASS" starttime="20161109 21:17:58.800"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:59.481">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:17:59.481" status="PASS" starttime="20161109 21:17:58.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:17:59.482">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:17:59.482" status="PASS" starttime="20161109 21:17:59.481"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:17:59.482">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:17:59.483">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:17:59.483">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:17:59.483" status="PASS" starttime="20161109 21:17:59.482"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:17:59.483">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:17:59.483" status="PASS" starttime="20161109 21:17:58.795"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:17:59.484">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:17:59.484" status="FAIL" starttime="20161109 21:17:59.484"></status>
</kw>
<status endtime="20161109 21:17:59.485" status="FAIL" starttime="20161109 21:17:58.794"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:09.487">@{arglist} = [ ]</msg>
<status endtime="20161109 21:18:09.487" status="PASS" starttime="20161109 21:18:09.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:09.488">${args} = {u'data': []}</msg>
<status endtime="20161109 21:18:09.489" status="PASS" starttime="20161109 21:18:09.488"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:09.490">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:18:09.490" status="PASS" starttime="20161109 21:18:09.490"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:09.492">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:18:09.492" status="PASS" starttime="20161109 21:18:09.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:09.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:18:09.494" status="PASS" starttime="20161109 21:18:09.493"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:18:09.495" status="PASS" starttime="20161109 21:18:09.494"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:09.497">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:18:09.497" status="PASS" starttime="20161109 21:18:09.496"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:09.499">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:18:09.499" status="PASS" starttime="20161109 21:18:09.498"></status>
</kw>
<status endtime="20161109 21:18:09.499" status="PASS" starttime="20161109 21:18:09.497"></status>
</kw>
<status endtime="20161109 21:18:09.499" status="PASS" starttime="20161109 21:18:09.495"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:09.500">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:18:09.500" status="PASS" starttime="20161109 21:18:09.499"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:09.501">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:18:09.501" status="PASS" starttime="20161109 21:18:09.500"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:09.501">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:18:09.501" status="PASS" starttime="20161109 21:18:09.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:09.502">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:18:09.502" status="PASS" starttime="20161109 21:18:09.501"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:09.841">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:18:09.842">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:09.842" status="PASS" starttime="20161109 21:18:09.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:09.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:09.843" status="PASS" starttime="20161109 21:18:09.842"></status>
</kw>
<status endtime="20161109 21:18:09.843" status="PASS" starttime="20161109 21:18:09.499"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:10.119">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:18:10.120">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:10.120" status="PASS" starttime="20161109 21:18:09.843"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:10.121">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:18:10.121" status="PASS" starttime="20161109 21:18:10.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:10.122">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:18:10.122" status="PASS" starttime="20161109 21:18:10.122"></status>
</kw>
<status endtime="20161109 21:18:10.123" status="PASS" starttime="20161109 21:18:10.121"></status>
</kw>
<status endtime="20161109 21:18:10.123" status="PASS" starttime="20161109 21:18:10.120"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:10.123">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:10.123" status="PASS" starttime="20161109 21:18:09.491"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:10.123">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:10.123" status="PASS" starttime="20161109 21:18:09.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:10.124">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:10.124" status="PASS" starttime="20161109 21:18:10.123"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:10.124">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:18:10.124">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:18:10.124">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:18:10.124" status="PASS" starttime="20161109 21:18:10.124"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:10.125">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:18:10.125" status="PASS" starttime="20161109 21:18:09.486"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:18:10.125">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:18:10.125" status="FAIL" starttime="20161109 21:18:10.125"></status>
</kw>
<status endtime="20161109 21:18:10.126" status="FAIL" starttime="20161109 21:18:09.485"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.128">@{arglist} = [ ]</msg>
<status endtime="20161109 21:18:20.128" status="PASS" starttime="20161109 21:18:20.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.130">${args} = {u'data': []}</msg>
<status endtime="20161109 21:18:20.130" status="PASS" starttime="20161109 21:18:20.129"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.131">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:18:20.131" status="PASS" starttime="20161109 21:18:20.131"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.133">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:18:20.133" status="PASS" starttime="20161109 21:18:20.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.134">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:18:20.134" status="PASS" starttime="20161109 21:18:20.134"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:18:20.135" status="PASS" starttime="20161109 21:18:20.134"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.137">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:18:20.138" status="PASS" starttime="20161109 21:18:20.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:20.139">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:18:20.139" status="PASS" starttime="20161109 21:18:20.139"></status>
</kw>
<status endtime="20161109 21:18:20.139" status="PASS" starttime="20161109 21:18:20.138"></status>
</kw>
<status endtime="20161109 21:18:20.139" status="PASS" starttime="20161109 21:18:20.135"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:20.140">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:18:20.140" status="PASS" starttime="20161109 21:18:20.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.141">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:18:20.141" status="PASS" starttime="20161109 21:18:20.141"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.141">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:18:20.142" status="PASS" starttime="20161109 21:18:20.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.142">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:18:20.142" status="PASS" starttime="20161109 21:18:20.142"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.476">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:18:20.476">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:20.476" status="PASS" starttime="20161109 21:18:20.142"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:20.477">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:20.478" status="PASS" starttime="20161109 21:18:20.476"></status>
</kw>
<status endtime="20161109 21:18:20.478" status="PASS" starttime="20161109 21:18:20.139"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.759">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:18:20.759">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:20.759" status="PASS" starttime="20161109 21:18:20.478"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.761">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:18:20.761" status="PASS" starttime="20161109 21:18:20.760"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:20.763">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:18:20.763" status="PASS" starttime="20161109 21:18:20.762"></status>
</kw>
<status endtime="20161109 21:18:20.763" status="PASS" starttime="20161109 21:18:20.762"></status>
</kw>
<status endtime="20161109 21:18:20.763" status="PASS" starttime="20161109 21:18:20.760"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:20.764">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:20.765" status="PASS" starttime="20161109 21:18:20.132"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:20.765">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:20.765" status="PASS" starttime="20161109 21:18:20.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:20.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:20.766" status="PASS" starttime="20161109 21:18:20.765"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:20.767">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:18:20.767">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:18:20.767">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:18:20.767" status="PASS" starttime="20161109 21:18:20.766"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:20.767">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:18:20.767" status="PASS" starttime="20161109 21:18:20.127"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:18:20.768">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:18:20.768" status="FAIL" starttime="20161109 21:18:20.768"></status>
</kw>
<status endtime="20161109 21:18:20.769" status="FAIL" starttime="20161109 21:18:20.126"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:30.771">@{arglist} = [ ]</msg>
<status endtime="20161109 21:18:30.771" status="PASS" starttime="20161109 21:18:30.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:30.772">${args} = {u'data': []}</msg>
<status endtime="20161109 21:18:30.772" status="PASS" starttime="20161109 21:18:30.771"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:30.774">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161109 21:18:30.774" status="PASS" starttime="20161109 21:18:30.773"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:30.776">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161109 21:18:30.776" status="PASS" starttime="20161109 21:18:30.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:30.777">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:18:30.777" status="PASS" starttime="20161109 21:18:30.776"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:18:30.778" status="PASS" starttime="20161109 21:18:30.777"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:30.781">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:18:30.781" status="PASS" starttime="20161109 21:18:30.779"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:30.782">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:18:30.782" status="PASS" starttime="20161109 21:18:30.782"></status>
</kw>
<status endtime="20161109 21:18:30.782" status="PASS" starttime="20161109 21:18:30.781"></status>
</kw>
<status endtime="20161109 21:18:30.783" status="PASS" starttime="20161109 21:18:30.778"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:30.784">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:18:30.785" status="PASS" starttime="20161109 21:18:30.783"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:30.785">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:18:30.785" status="PASS" starttime="20161109 21:18:30.785"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:30.786">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:18:30.786" status="PASS" starttime="20161109 21:18:30.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:30.787">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:18:30.787" status="PASS" starttime="20161109 21:18:30.787"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.189">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:18:31.189">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:31.189" status="PASS" starttime="20161109 21:18:30.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:31.189">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:31.189" status="PASS" starttime="20161109 21:18:31.189"></status>
</kw>
<status endtime="20161109 21:18:31.190" status="PASS" starttime="20161109 21:18:30.783"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.525">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:18:31.525">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:31.525" status="PASS" starttime="20161109 21:18:31.190"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.527">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:18:31.527" status="PASS" starttime="20161109 21:18:31.526"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:31.527">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:18:31.528" status="PASS" starttime="20161109 21:18:31.527"></status>
</kw>
<status endtime="20161109 21:18:31.528" status="PASS" starttime="20161109 21:18:31.527"></status>
</kw>
<status endtime="20161109 21:18:31.528" status="PASS" starttime="20161109 21:18:31.526"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:31.528">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:31.528" status="PASS" starttime="20161109 21:18:30.774"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:31.528">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:31.528" status="PASS" starttime="20161109 21:18:30.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:31.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:31.529" status="PASS" starttime="20161109 21:18:31.528"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.530">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:18:31.530">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:18:31.530">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:18:31.530" status="PASS" starttime="20161109 21:18:31.530"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:31.531">${bmc_state} = HOST_POWERED_ON</msg>
<status endtime="20161109 21:18:31.531" status="PASS" starttime="20161109 21:18:30.770"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:18:31.532">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:18:31.532" status="FAIL" starttime="20161109 21:18:31.531"></status>
</kw>
<status endtime="20161109 21:18:31.532" status="FAIL" starttime="20161109 21:18:30.769"></status>
</kw>
<msg level="FAIL" timestamp="20161109 21:18:31.533">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161109 21:18:31.533" status="FAIL" starttime="20161109 21:03:29.374"></status>
</kw>
<status endtime="20161109 21:18:31.533" status="FAIL" starttime="20161109 21:03:29.373"></status>
</kw>
<status endtime="20161109 21:18:31.533" status="FAIL" starttime="20161109 21:03:20.891"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Log FFDC if failed and collect SOL</doc>
<kw name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<kw name="Log FFDC If Test Case Failed" library="openbmc_ffdc">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.543">${cur_time} = 2016-11-09 21:18:31:542703</msg>
<status endtime="20161109 21:18:31.543" status="PASS" starttime="20161109 21:18:31.542"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.544">${cur_time} = 20161109211831542703</msg>
<status endtime="20161109 21:18:31.544" status="PASS" starttime="20161109 21:18:31.543"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:31.544">${cur_time} = 20161109211831542703</msg>
<status endtime="20161109 21:18:31.544" status="PASS" starttime="20161109 21:18:31.542"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:31.548">${FFDC_TIME} = 20161109211831542703</msg>
<status endtime="20161109 21:18:31.548" status="PASS" starttime="20161109 21:18:31.544"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status endtime="20161109 21:18:31.549" status="PASS" starttime="20161109 21:18:31.549"></status>
</kw>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.550">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20161109 21:18:31.550" status="PASS" starttime="20161109 21:18:31.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.550">${suite_name} = 20161109211831542703_TestsTestBasicPoweron</msg>
<status endtime="20161109 21:18:31.550" status="PASS" starttime="20161109 21:18:31.550"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.551">${test_name} = powerontest</msg>
<status endtime="20161109 21:18:31.551" status="PASS" starttime="20161109 21:18:31.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.551">${test_name} = 20161109211831542703_powerontest</msg>
<status endtime="20161109 21:18:31.551" status="PASS" starttime="20161109 21:18:31.551"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:31.552">${suitename} = 20161109211831542703_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161109 21:18:31.552">${testname} = 20161109211831542703_powerontest</msg>
<status endtime="20161109 21:18:31.552" status="PASS" starttime="20161109 21:18:31.549"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:31.555">${FFDC_DIR_PATH} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest</msg>
<status endtime="20161109 21:18:31.555" status="PASS" starttime="20161109 21:18:31.552"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.555">${prefix} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_</msg>
<status endtime="20161109 21:18:31.555" status="PASS" starttime="20161109 21:18:31.555"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:31.558">${LOG_PREFIX} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_</msg>
<status endtime="20161109 21:18:31.558" status="PASS" starttime="20161109 21:18:31.556"></status>
</kw>
<kw name="Create FFDC Directory" library="openbmc_ffdc_utils">
<doc>Creates directory and report file</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.560">Created directory '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.560" status="PASS" starttime="20161109 21:18:31.559"></status>
</kw>
<kw name="Create FFDC Report File" library="openbmc_ffdc_utils">
<doc>Create a generic file name for ffdc</doc>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:31.564">${FFDC_FILE_PATH} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt</msg>
<status endtime="20161109 21:18:31.564" status="PASS" starttime="20161109 21:18:31.561"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.565">Created file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.565" status="PASS" starttime="20161109 21:18:31.564"></status>
</kw>
<status endtime="20161109 21:18:31.565" status="PASS" starttime="20161109 21:18:31.561"></status>
</kw>
<status endtime="20161109 21:18:31.565" status="PASS" starttime="20161109 21:18:31.558"></status>
</kw>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.567">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.567" status="PASS" starttime="20161109 21:18:31.566"></status>
</kw>
<status endtime="20161109 21:18:31.567" status="PASS" starttime="20161109 21:18:31.565"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.568">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.568" status="PASS" starttime="20161109 21:18:31.567"></status>
</kw>
<status endtime="20161109 21:18:31.568" status="PASS" starttime="20161109 21:18:31.567"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.569">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.569" status="PASS" starttime="20161109 21:18:31.569"></status>
</kw>
<status endtime="20161109 21:18:31.569" status="PASS" starttime="20161109 21:18:31.568"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.570">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.570" status="PASS" starttime="20161109 21:18:31.570"></status>
</kw>
<status endtime="20161109 21:18:31.571" status="PASS" starttime="20161109 21:18:31.569"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.572">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.572" status="PASS" starttime="20161109 21:18:31.571"></status>
</kw>
<status endtime="20161109 21:18:31.572" status="PASS" starttime="20161109 21:18:31.571"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.573">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.573" status="PASS" starttime="20161109 21:18:31.572"></status>
</kw>
<status endtime="20161109 21:18:31.573" status="PASS" starttime="20161109 21:18:31.572"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.574">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.574" status="PASS" starttime="20161109 21:18:31.574"></status>
</kw>
<status endtime="20161109 21:18:31.574" status="PASS" starttime="20161109 21:18:31.573"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.575">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.575" status="PASS" starttime="20161109 21:18:31.575"></status>
</kw>
<status endtime="20161109 21:18:31.575" status="PASS" starttime="20161109 21:18:31.574"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.577">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.577" status="PASS" starttime="20161109 21:18:31.576"></status>
</kw>
<status endtime="20161109 21:18:31.577" status="PASS" starttime="20161109 21:18:31.576"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.578">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.578" status="PASS" starttime="20161109 21:18:31.578"></status>
</kw>
<status endtime="20161109 21:18:31.578" status="PASS" starttime="20161109 21:18:31.577"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.579">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.579" status="PASS" starttime="20161109 21:18:31.579"></status>
</kw>
<status endtime="20161109 21:18:31.579" status="PASS" starttime="20161109 21:18:31.578"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.581">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.581" status="PASS" starttime="20161109 21:18:31.580"></status>
</kw>
<status endtime="20161109 21:18:31.581" status="PASS" starttime="20161109 21:18:31.580"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.582">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.582" status="PASS" starttime="20161109 21:18:31.582"></status>
</kw>
<status endtime="20161109 21:18:31.582" status="PASS" starttime="20161109 21:18:31.581"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.583">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.583" status="PASS" starttime="20161109 21:18:31.583"></status>
</kw>
<status endtime="20161109 21:18:31.584" status="PASS" starttime="20161109 21:18:31.582"></status>
</kw>
<status endtime="20161109 21:18:31.584" status="PASS" starttime="20161109 21:18:31.577"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.585">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.585" status="PASS" starttime="20161109 21:18:31.584"></status>
</kw>
<status endtime="20161109 21:18:31.585" status="PASS" starttime="20161109 21:18:31.584"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.585">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20161109 21:18:31.585" status="PASS" starttime="20161109 21:18:31.585"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.587">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.587" status="PASS" starttime="20161109 21:18:31.586"></status>
</kw>
<status endtime="20161109 21:18:31.587" status="PASS" starttime="20161109 21:18:31.586"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.588">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.588" status="PASS" starttime="20161109 21:18:31.587"></status>
</kw>
<status endtime="20161109 21:18:31.588" status="PASS" starttime="20161109 21:18:31.587"></status>
</kw>
<status endtime="20161109 21:18:31.588" status="PASS" starttime="20161109 21:18:31.586"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.589">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.589" status="PASS" starttime="20161109 21:18:31.589"></status>
</kw>
<status endtime="20161109 21:18:31.589" status="PASS" starttime="20161109 21:18:31.588"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.590">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.590" status="PASS" starttime="20161109 21:18:31.590"></status>
</kw>
<status endtime="20161109 21:18:31.590" status="PASS" starttime="20161109 21:18:31.589"></status>
</kw>
<status endtime="20161109 21:18:31.590" status="PASS" starttime="20161109 21:18:31.588"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.592">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.592" status="PASS" starttime="20161109 21:18:31.591"></status>
</kw>
<status endtime="20161109 21:18:31.592" status="PASS" starttime="20161109 21:18:31.591"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.593">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.593" status="PASS" starttime="20161109 21:18:31.592"></status>
</kw>
<status endtime="20161109 21:18:31.593" status="PASS" starttime="20161109 21:18:31.592"></status>
</kw>
<status endtime="20161109 21:18:31.593" status="PASS" starttime="20161109 21:18:31.591"></status>
</kw>
<status endtime="20161109 21:18:31.593" status="PASS" starttime="20161109 21:18:31.585"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:31.594">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:31.594" status="PASS" starttime="20161109 21:18:31.594"></status>
</kw>
<status endtime="20161109 21:18:31.594" status="PASS" starttime="20161109 21:18:31.593"></status>
</kw>
<status endtime="20161109 21:18:31.594" status="PASS" starttime="20161109 21:18:31.565"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.595">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20161109 21:18:31.595" status="PASS" starttime="20161109 21:18:31.595"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.596">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') ]</msg>
<status endtime="20161109 21:18:31.596" status="PASS" starttime="20161109 21:18:31.596"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:31.602">Returning from the enclosing user keyword.</msg>
<status endtime="20161109 21:18:31.602" status="PASS" starttime="20161109 21:18:31.598"></status>
</kw>
<status endtime="20161109 21:18:31.602" status="PASS" starttime="20161109 21:18:31.598"></status>
</kw>
<status endtime="20161109 21:18:31.602" status="PASS" starttime="20161109 21:18:31.597"></status>
</kw>
<status endtime="20161109 21:18:31.603" status="PASS" starttime="20161109 21:18:31.597"></status>
</kw>
<status endtime="20161109 21:18:31.603" status="PASS" starttime="20161109 21:18:31.597"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:18:31.606">Dictionary does not contain key 'host'.</msg>
<status endtime="20161109 21:18:31.606" status="FAIL" starttime="20161109 21:18:31.606"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:31.606">${has_host} = False</msg>
<status endtime="20161109 21:18:31.607" status="PASS" starttime="20161109 21:18:31.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161109 21:18:31.611" status="PASS" starttime="20161109 21:18:31.611"></status>
</kw>
<status endtime="20161109 21:18:31.611" status="PASS" starttime="20161109 21:18:31.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.616">${port_num} = 22</msg>
<status endtime="20161109 21:18:31.616" status="PASS" starttime="20161109 21:18:31.616"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.617">${SSH_PORT} = 22</msg>
<status endtime="20161109 21:18:31.617" status="PASS" starttime="20161109 21:18:31.617"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:31.618">${https_num} = 443</msg>
<status endtime="20161109 21:18:31.618" status="PASS" starttime="20161109 21:18:31.617"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:31.619">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161109 21:18:31.619" status="PASS" starttime="20161109 21:18:31.618"></status>
</kw>
<status endtime="20161109 21:18:31.619" status="PASS" starttime="20161109 21:18:31.615"></status>
</kw>
<status endtime="20161109 21:18:31.619" status="PASS" starttime="20161109 21:18:31.611"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:18:31.620">Dictionary does not contain key 'port'.</msg>
<status endtime="20161109 21:18:31.621" status="FAIL" starttime="20161109 21:18:31.620"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:31.621">${has_port} = False</msg>
<status endtime="20161109 21:18:31.621" status="PASS" starttime="20161109 21:18:31.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161109 21:18:31.625" status="PASS" starttime="20161109 21:18:31.625"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161109 21:18:31.625" status="PASS" starttime="20161109 21:18:31.625"></status>
</kw>
<status endtime="20161109 21:18:31.626" status="PASS" starttime="20161109 21:18:31.624"></status>
</kw>
<status endtime="20161109 21:18:31.626" status="PASS" starttime="20161109 21:18:31.621"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:31.626">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 21:18:33.911">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161109 21:18:33.911" status="PASS" starttime="20161109 21:18:31.626"></status>
</kw>
<status endtime="20161109 21:18:33.911" status="PASS" starttime="20161109 21:18:31.605"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:33.912">@{entries} = [ BMC FILES ]</msg>
<status endtime="20161109 21:18:33.912" status="PASS" starttime="20161109 21:18:33.912"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:33.913">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status endtime="20161109 21:18:33.913" status="PASS" starttime="20161109 21:18:33.913"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:33.914">${logpath} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_procinfo</msg>
<status endtime="20161109 21:18:33.914" status="PASS" starttime="20161109 21:18:33.913"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161109 21:18:33.917" status="PASS" starttime="20161109 21:18:33.915"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:33.918">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161109 21:18:34.026">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:34.026">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161109 21:18:34.026">${stderr} = </msg>
<status endtime="20161109 21:18:34.026" status="PASS" starttime="20161109 21:18:33.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:34.035">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_procinfo"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_procinfo&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:34.035" status="PASS" starttime="20161109 21:18:34.032"></status>
</kw>
<status endtime="20161109 21:18:34.035" status="PASS" starttime="20161109 21:18:34.031"></status>
</kw>
<status endtime="20161109 21:18:34.035" status="PASS" starttime="20161109 21:18:34.027"></status>
</kw>
<status endtime="20161109 21:18:34.035" status="PASS" starttime="20161109 21:18:33.914"></status>
</kw>
<status endtime="20161109 21:18:34.035" status="PASS" starttime="20161109 21:18:33.913"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:34.037">${logpath} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_meminfo</msg>
<status endtime="20161109 21:18:34.037" status="PASS" starttime="20161109 21:18:34.036"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161109 21:18:34.044" status="PASS" starttime="20161109 21:18:34.038"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:34.045">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161109 21:18:34.137">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:34.138">${stdout} = MemTotal:         499020 kB
MemFree:          339200 kB
MemAvailable:     377956 kB
Buffers:           10468 kB
Cached:            67032 kB
SwapCached:            0 kB
Active:           107756 kB
Inac...</msg>
<msg level="INFO" timestamp="20161109 21:18:34.139">${stderr} = </msg>
<status endtime="20161109 21:18:34.139" status="PASS" starttime="20161109 21:18:34.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:34.146">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_meminfo"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_meminfo&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:34.146" status="PASS" starttime="20161109 21:18:34.145"></status>
</kw>
<status endtime="20161109 21:18:34.146" status="PASS" starttime="20161109 21:18:34.144"></status>
</kw>
<status endtime="20161109 21:18:34.146" status="PASS" starttime="20161109 21:18:34.139"></status>
</kw>
<status endtime="20161109 21:18:34.146" status="PASS" starttime="20161109 21:18:34.037"></status>
</kw>
<status endtime="20161109 21:18:34.146" status="PASS" starttime="20161109 21:18:34.036"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:34.148">${logpath} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_journalctl</msg>
<status endtime="20161109 21:18:34.148" status="PASS" starttime="20161109 21:18:34.147"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161109 21:18:34.152" status="PASS" starttime="20161109 21:18:34.149"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:34.152">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161109 21:18:38.782">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:38.784">${stdout} = -- Logs begin at Thu 2016-10-20 19:57:24 UTC, end at Thu 2016-10-20 20:17:07 UTC. --
Oct 20 19:57:24 barreleye systemd-journald[460]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161109 21:18:38.784">${stderr} = </msg>
<status endtime="20161109 21:18:38.785" status="PASS" starttime="20161109 21:18:34.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:38.793">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_journalctl"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_journalctl&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:38.793" status="PASS" starttime="20161109 21:18:38.791"></status>
</kw>
<status endtime="20161109 21:18:38.793" status="PASS" starttime="20161109 21:18:38.789"></status>
</kw>
<status endtime="20161109 21:18:38.793" status="PASS" starttime="20161109 21:18:38.785"></status>
</kw>
<status endtime="20161109 21:18:38.793" status="PASS" starttime="20161109 21:18:34.148"></status>
</kw>
<status endtime="20161109 21:18:38.793" status="PASS" starttime="20161109 21:18:34.147"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:38.794">${logpath} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_dmesg</msg>
<status endtime="20161109 21:18:38.794" status="PASS" starttime="20161109 21:18:38.794"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161109 21:18:38.797" status="PASS" starttime="20161109 21:18:38.795"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:38.798">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161109 21:18:38.986">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:38.986">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-c5682cbc3542add705e35152329436067bb1f94a (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Tue Nov 1 05:44:54 UTC 2016
CPU: ARM926EJ-S [41069265] re...</msg>
<msg level="INFO" timestamp="20161109 21:18:38.986">${stderr} = </msg>
<status endtime="20161109 21:18:38.986" status="PASS" starttime="20161109 21:18:38.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:38.991">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_dmesg"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_dmesg&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:38.991" status="PASS" starttime="20161109 21:18:38.990"></status>
</kw>
<status endtime="20161109 21:18:38.991" status="PASS" starttime="20161109 21:18:38.990"></status>
</kw>
<status endtime="20161109 21:18:38.991" status="PASS" starttime="20161109 21:18:38.987"></status>
</kw>
<status endtime="20161109 21:18:38.991" status="PASS" starttime="20161109 21:18:38.794"></status>
</kw>
<status endtime="20161109 21:18:38.991" status="PASS" starttime="20161109 21:18:38.793"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:38.992">${logpath} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_proc_list</msg>
<status endtime="20161109 21:18:38.992" status="PASS" starttime="20161109 21:18:38.992"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20161109 21:18:38.996" status="PASS" starttime="20161109 21:18:38.993"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:38.996">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161109 21:18:39.353">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:39.369">${stdout} = Mem: 159912K used, 339108K free, 33424K shrd, 10468K buff, 67040K cached
CPU:   9% usr   0% sys   0% nic  90% idle   0% io   0% irq   0% sirq
Load average: 0.70 1.05 1.17 1/113 1478
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20161109 21:18:39.369">${stderr} = </msg>
<status endtime="20161109 21:18:39.369" status="PASS" starttime="20161109 21:18:38.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:39.399">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_proc_list"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_proc_list&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:39.399" status="PASS" starttime="20161109 21:18:39.374"></status>
</kw>
<status endtime="20161109 21:18:39.399" status="PASS" starttime="20161109 21:18:39.373"></status>
</kw>
<status endtime="20161109 21:18:39.399" status="PASS" starttime="20161109 21:18:39.369"></status>
</kw>
<status endtime="20161109 21:18:39.399" status="PASS" starttime="20161109 21:18:38.992"></status>
</kw>
<status endtime="20161109 21:18:39.399" status="PASS" starttime="20161109 21:18:38.991"></status>
</kw>
<status endtime="20161109 21:18:39.399" status="PASS" starttime="20161109 21:18:33.913"></status>
</kw>
<status endtime="20161109 21:18:39.399" status="PASS" starttime="20161109 21:18:33.912"></status>
</kw>
<status endtime="20161109 21:18:39.399" status="PASS" starttime="20161109 21:18:33.912"></status>
</kw>
<status endtime="20161109 21:18:39.399" status="PASS" starttime="20161109 21:18:33.912"></status>
</kw>
<status endtime="20161109 21:18:39.400" status="PASS" starttime="20161109 21:18:31.604"></status>
</kw>
<status endtime="20161109 21:18:39.400" status="PASS" starttime="20161109 21:18:31.604"></status>
</kw>
<status endtime="20161109 21:18:39.400" status="PASS" starttime="20161109 21:18:31.603"></status>
</kw>
<status endtime="20161109 21:18:39.400" status="PASS" starttime="20161109 21:18:31.603"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:18:39.403">Dictionary does not contain key 'host'.</msg>
<status endtime="20161109 21:18:39.403" status="FAIL" starttime="20161109 21:18:39.402"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:39.403">${has_host} = False</msg>
<status endtime="20161109 21:18:39.403" status="PASS" starttime="20161109 21:18:39.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161109 21:18:39.406" status="PASS" starttime="20161109 21:18:39.406"></status>
</kw>
<status endtime="20161109 21:18:39.406" status="PASS" starttime="20161109 21:18:39.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:39.410">${port_num} = 22</msg>
<status endtime="20161109 21:18:39.410" status="PASS" starttime="20161109 21:18:39.410"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:39.411">${SSH_PORT} = 22</msg>
<status endtime="20161109 21:18:39.411" status="PASS" starttime="20161109 21:18:39.410"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:39.411">${https_num} = 443</msg>
<status endtime="20161109 21:18:39.411" status="PASS" starttime="20161109 21:18:39.411"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:39.412">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161109 21:18:39.412" status="PASS" starttime="20161109 21:18:39.411"></status>
</kw>
<status endtime="20161109 21:18:39.412" status="PASS" starttime="20161109 21:18:39.410"></status>
</kw>
<status endtime="20161109 21:18:39.412" status="PASS" starttime="20161109 21:18:39.407"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:18:39.413">Dictionary does not contain key 'port'.</msg>
<status endtime="20161109 21:18:39.413" status="FAIL" starttime="20161109 21:18:39.413"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:39.413">${has_port} = False</msg>
<status endtime="20161109 21:18:39.413" status="PASS" starttime="20161109 21:18:39.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161109 21:18:39.417" status="PASS" starttime="20161109 21:18:39.417"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161109 21:18:39.418" status="PASS" starttime="20161109 21:18:39.417"></status>
</kw>
<status endtime="20161109 21:18:39.418" status="PASS" starttime="20161109 21:18:39.416"></status>
</kw>
<status endtime="20161109 21:18:39.418" status="PASS" starttime="20161109 21:18:39.413"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:39.418">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 21:18:41.611">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161109 21:18:41.612" status="PASS" starttime="20161109 21:18:39.418"></status>
</kw>
<status endtime="20161109 21:18:41.612" status="PASS" starttime="20161109 21:18:39.401"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:41.613">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20161109 21:18:41.613" status="PASS" starttime="20161109 21:18:41.612"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:41.615">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20161109 21:18:41.615" status="PASS" starttime="20161109 21:18:41.614"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:41.620">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20161109 21:18:41.620" status="PASS" starttime="20161109 21:18:41.615"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.628">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.628" status="PASS" starttime="20161109 21:18:41.628"></status>
</kw>
<status endtime="20161109 21:18:41.629" status="PASS" starttime="20161109 21:18:41.627"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.630">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.630" status="PASS" starttime="20161109 21:18:41.629"></status>
</kw>
<status endtime="20161109 21:18:41.630" status="PASS" starttime="20161109 21:18:41.629"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.631">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.631" status="PASS" starttime="20161109 21:18:41.631"></status>
</kw>
<status endtime="20161109 21:18:41.631" status="PASS" starttime="20161109 21:18:41.630"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.633">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.633" status="PASS" starttime="20161109 21:18:41.632"></status>
</kw>
<status endtime="20161109 21:18:41.633" status="PASS" starttime="20161109 21:18:41.631"></status>
</kw>
<status endtime="20161109 21:18:41.633" status="PASS" starttime="20161109 21:18:41.626"></status>
</kw>
<status endtime="20161109 21:18:41.633" status="PASS" starttime="20161109 21:18:41.622"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:41.633">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161109 21:18:41.702">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:41.702">${stdout} = 20161109203916</msg>
<msg level="INFO" timestamp="20161109 21:18:41.702">${stderr} = </msg>
<status endtime="20161109 21:18:41.702" status="PASS" starttime="20161109 21:18:41.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.707">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.707" status="PASS" starttime="20161109 21:18:41.706"></status>
</kw>
<status endtime="20161109 21:18:41.707" status="PASS" starttime="20161109 21:18:41.705"></status>
</kw>
<status endtime="20161109 21:18:41.707" status="PASS" starttime="20161109 21:18:41.702"></status>
</kw>
<status endtime="20161109 21:18:41.707" status="PASS" starttime="20161109 21:18:41.621"></status>
</kw>
<status endtime="20161109 21:18:41.707" status="PASS" starttime="20161109 21:18:41.620"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.712">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.712" status="PASS" starttime="20161109 21:18:41.712"></status>
</kw>
<status endtime="20161109 21:18:41.712" status="PASS" starttime="20161109 21:18:41.711"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.713">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.713" status="PASS" starttime="20161109 21:18:41.713"></status>
</kw>
<status endtime="20161109 21:18:41.713" status="PASS" starttime="20161109 21:18:41.712"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.714">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.714" status="PASS" starttime="20161109 21:18:41.714"></status>
</kw>
<status endtime="20161109 21:18:41.715" status="PASS" starttime="20161109 21:18:41.714"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.715">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.716" status="PASS" starttime="20161109 21:18:41.715"></status>
</kw>
<status endtime="20161109 21:18:41.716" status="PASS" starttime="20161109 21:18:41.715"></status>
</kw>
<status endtime="20161109 21:18:41.716" status="PASS" starttime="20161109 21:18:41.711"></status>
</kw>
<status endtime="20161109 21:18:41.716" status="PASS" starttime="20161109 21:18:41.708"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:41.716">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161109 21:18:41.815">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:41.815">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-213"
VERSION_ID="v1.99.0-213-g17b02f3-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161109 21:18:41.815">${stderr} = </msg>
<status endtime="20161109 21:18:41.815" status="PASS" starttime="20161109 21:18:41.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.819">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.820" status="PASS" starttime="20161109 21:18:41.819"></status>
</kw>
<status endtime="20161109 21:18:41.820" status="PASS" starttime="20161109 21:18:41.818"></status>
</kw>
<status endtime="20161109 21:18:41.820" status="PASS" starttime="20161109 21:18:41.815"></status>
</kw>
<status endtime="20161109 21:18:41.820" status="PASS" starttime="20161109 21:18:41.707"></status>
</kw>
<status endtime="20161109 21:18:41.820" status="PASS" starttime="20161109 21:18:41.707"></status>
</kw>
<status endtime="20161109 21:18:41.820" status="PASS" starttime="20161109 21:18:41.620"></status>
</kw>
<status endtime="20161109 21:18:41.820" status="PASS" starttime="20161109 21:18:41.614"></status>
</kw>
<status endtime="20161109 21:18:41.820" status="PASS" starttime="20161109 21:18:41.613"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:41.821">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20161109 21:18:41.821" status="PASS" starttime="20161109 21:18:41.821"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:41.822">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20161109 21:18:41.822" status="PASS" starttime="20161109 21:18:41.821"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.827">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.827" status="PASS" starttime="20161109 21:18:41.827"></status>
</kw>
<status endtime="20161109 21:18:41.827" status="PASS" starttime="20161109 21:18:41.826"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.829">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.829" status="PASS" starttime="20161109 21:18:41.828"></status>
</kw>
<status endtime="20161109 21:18:41.829" status="PASS" starttime="20161109 21:18:41.828"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.830">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.830" status="PASS" starttime="20161109 21:18:41.829"></status>
</kw>
<status endtime="20161109 21:18:41.830" status="PASS" starttime="20161109 21:18:41.829"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:41.831">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:41.831" status="PASS" starttime="20161109 21:18:41.831"></status>
</kw>
<status endtime="20161109 21:18:41.831" status="PASS" starttime="20161109 21:18:41.830"></status>
</kw>
<status endtime="20161109 21:18:41.831" status="PASS" starttime="20161109 21:18:41.826"></status>
</kw>
<status endtime="20161109 21:18:41.831" status="PASS" starttime="20161109 21:18:41.823"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:41.832">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161109 21:18:43.600">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:43.600">${stdout} =  = HOST_POWERED_ON</msg>
<msg level="INFO" timestamp="20161109 21:18:43.600">${stderr} = </msg>
<status endtime="20161109 21:18:43.601" status="PASS" starttime="20161109 21:18:41.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.608">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.608" status="PASS" starttime="20161109 21:18:43.607"></status>
</kw>
<status endtime="20161109 21:18:43.609" status="PASS" starttime="20161109 21:18:43.606"></status>
</kw>
<status endtime="20161109 21:18:43.609" status="PASS" starttime="20161109 21:18:43.601"></status>
</kw>
<status endtime="20161109 21:18:43.609" status="PASS" starttime="20161109 21:18:41.822"></status>
</kw>
<status endtime="20161109 21:18:43.609" status="PASS" starttime="20161109 21:18:41.822"></status>
</kw>
<status endtime="20161109 21:18:43.609" status="PASS" starttime="20161109 21:18:41.822"></status>
</kw>
<status endtime="20161109 21:18:43.609" status="PASS" starttime="20161109 21:18:41.820"></status>
</kw>
<status endtime="20161109 21:18:43.609" status="PASS" starttime="20161109 21:18:41.820"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:43.611">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20161109 21:18:43.611" status="PASS" starttime="20161109 21:18:43.611"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:43.612">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20161109 21:18:43.612" status="PASS" starttime="20161109 21:18:43.611"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.620">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.620" status="PASS" starttime="20161109 21:18:43.620"></status>
</kw>
<status endtime="20161109 21:18:43.620" status="PASS" starttime="20161109 21:18:43.619"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.622">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.622" status="PASS" starttime="20161109 21:18:43.621"></status>
</kw>
<status endtime="20161109 21:18:43.622" status="PASS" starttime="20161109 21:18:43.621"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.623">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.623" status="PASS" starttime="20161109 21:18:43.622"></status>
</kw>
<status endtime="20161109 21:18:43.623" status="PASS" starttime="20161109 21:18:43.622"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.624">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.624" status="PASS" starttime="20161109 21:18:43.624"></status>
</kw>
<status endtime="20161109 21:18:43.625" status="PASS" starttime="20161109 21:18:43.623"></status>
</kw>
<status endtime="20161109 21:18:43.625" status="PASS" starttime="20161109 21:18:43.619"></status>
</kw>
<status endtime="20161109 21:18:43.625" status="PASS" starttime="20161109 21:18:43.614"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:43.625">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161109 21:18:43.698">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:43.699">${stdout} =  20:17:18 up 20 min,  load average: 0.72, 1.05, 1.16</msg>
<msg level="INFO" timestamp="20161109 21:18:43.699">${stderr} = </msg>
<status endtime="20161109 21:18:43.699" status="PASS" starttime="20161109 21:18:43.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.703">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.703" status="PASS" starttime="20161109 21:18:43.702"></status>
</kw>
<status endtime="20161109 21:18:43.703" status="PASS" starttime="20161109 21:18:43.702"></status>
</kw>
<status endtime="20161109 21:18:43.703" status="PASS" starttime="20161109 21:18:43.699"></status>
</kw>
<status endtime="20161109 21:18:43.703" status="PASS" starttime="20161109 21:18:43.613"></status>
</kw>
<status endtime="20161109 21:18:43.703" status="PASS" starttime="20161109 21:18:43.613"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.708">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.708" status="PASS" starttime="20161109 21:18:43.708"></status>
</kw>
<status endtime="20161109 21:18:43.709" status="PASS" starttime="20161109 21:18:43.707"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.710">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.710" status="PASS" starttime="20161109 21:18:43.709"></status>
</kw>
<status endtime="20161109 21:18:43.710" status="PASS" starttime="20161109 21:18:43.709"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.711">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.711" status="PASS" starttime="20161109 21:18:43.711"></status>
</kw>
<status endtime="20161109 21:18:43.711" status="PASS" starttime="20161109 21:18:43.710"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.712">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.712" status="PASS" starttime="20161109 21:18:43.712"></status>
</kw>
<status endtime="20161109 21:18:43.713" status="PASS" starttime="20161109 21:18:43.712"></status>
</kw>
<status endtime="20161109 21:18:43.713" status="PASS" starttime="20161109 21:18:43.707"></status>
</kw>
<status endtime="20161109 21:18:43.713" status="PASS" starttime="20161109 21:18:43.704"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:43.713">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161109 21:18:43.939">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:43.939">${stdout} = Linux barreleye 4.7.10-c5682cbc3542add705e35152329436067bb1f94a #1 Tue Nov 1 05:44:54 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161109 21:18:43.939">${stderr} = </msg>
<status endtime="20161109 21:18:43.939" status="PASS" starttime="20161109 21:18:43.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.943">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.944" status="PASS" starttime="20161109 21:18:43.943"></status>
</kw>
<status endtime="20161109 21:18:43.944" status="PASS" starttime="20161109 21:18:43.942"></status>
</kw>
<status endtime="20161109 21:18:43.944" status="PASS" starttime="20161109 21:18:43.939"></status>
</kw>
<status endtime="20161109 21:18:43.944" status="PASS" starttime="20161109 21:18:43.703"></status>
</kw>
<status endtime="20161109 21:18:43.944" status="PASS" starttime="20161109 21:18:43.703"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.951">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.951" status="PASS" starttime="20161109 21:18:43.951"></status>
</kw>
<status endtime="20161109 21:18:43.951" status="PASS" starttime="20161109 21:18:43.950"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.952">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.953" status="PASS" starttime="20161109 21:18:43.952"></status>
</kw>
<status endtime="20161109 21:18:43.953" status="PASS" starttime="20161109 21:18:43.951"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.954">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.954" status="PASS" starttime="20161109 21:18:43.954"></status>
</kw>
<status endtime="20161109 21:18:43.954" status="PASS" starttime="20161109 21:18:43.953"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:43.955">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:43.955" status="PASS" starttime="20161109 21:18:43.955"></status>
</kw>
<status endtime="20161109 21:18:43.955" status="PASS" starttime="20161109 21:18:43.954"></status>
</kw>
<status endtime="20161109 21:18:43.956" status="PASS" starttime="20161109 21:18:43.948"></status>
</kw>
<status endtime="20161109 21:18:43.956" status="PASS" starttime="20161109 21:18:43.945"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:43.956">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161109 21:18:44.123">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:18:44.123">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M     32.6...</msg>
<msg level="INFO" timestamp="20161109 21:18:44.123">${stderr} = </msg>
<status endtime="20161109 21:18:44.123" status="PASS" starttime="20161109 21:18:43.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:44.127">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:44.127" status="PASS" starttime="20161109 21:18:44.127"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:44.126"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:44.123"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:43.945"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:43.944"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:43.612"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:43.610"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:43.609"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:41.613"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:39.401"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:39.401"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:39.400"></status>
</kw>
<status endtime="20161109 21:18:44.128" status="PASS" starttime="20161109 21:18:39.400"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:18:44.131">Dictionary does not contain key 'host'.</msg>
<status endtime="20161109 21:18:44.131" status="FAIL" starttime="20161109 21:18:44.131"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:44.131">${has_host} = False</msg>
<status endtime="20161109 21:18:44.131" status="PASS" starttime="20161109 21:18:44.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161109 21:18:44.134" status="PASS" starttime="20161109 21:18:44.134"></status>
</kw>
<status endtime="20161109 21:18:44.134" status="PASS" starttime="20161109 21:18:44.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:44.139">${port_num} = 22</msg>
<status endtime="20161109 21:18:44.139" status="PASS" starttime="20161109 21:18:44.139"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:44.140">${SSH_PORT} = 22</msg>
<status endtime="20161109 21:18:44.140" status="PASS" starttime="20161109 21:18:44.140"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:44.140">${https_num} = 443</msg>
<status endtime="20161109 21:18:44.140" status="PASS" starttime="20161109 21:18:44.140"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:44.141">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161109 21:18:44.141" status="PASS" starttime="20161109 21:18:44.141"></status>
</kw>
<status endtime="20161109 21:18:44.141" status="PASS" starttime="20161109 21:18:44.138"></status>
</kw>
<status endtime="20161109 21:18:44.141" status="PASS" starttime="20161109 21:18:44.135"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:18:44.142">Dictionary does not contain key 'port'.</msg>
<status endtime="20161109 21:18:44.142" status="FAIL" starttime="20161109 21:18:44.142"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:44.142">${has_port} = False</msg>
<status endtime="20161109 21:18:44.142" status="PASS" starttime="20161109 21:18:44.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161109 21:18:44.146" status="PASS" starttime="20161109 21:18:44.146"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161109 21:18:44.148" status="PASS" starttime="20161109 21:18:44.146"></status>
</kw>
<status endtime="20161109 21:18:44.148" status="PASS" starttime="20161109 21:18:44.145"></status>
</kw>
<status endtime="20161109 21:18:44.148" status="PASS" starttime="20161109 21:18:44.142"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:44.149">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 21:18:46.497">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161109 21:18:46.497" status="PASS" starttime="20161109 21:18:44.148"></status>
</kw>
<status endtime="20161109 21:18:46.497" status="PASS" starttime="20161109 21:18:44.130"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:46.498">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20161109 21:18:46.498" status="PASS" starttime="20161109 21:18:46.498"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:46.500">@{cmd_list} = [ ('BMC_led', '/org/openbmc/control/led/enumerate') | ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_record_log', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', '...</msg>
<status endtime="20161109 21:18:46.500" status="PASS" starttime="20161109 21:18:46.500"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_led', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:46.502">${logpath} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_led</msg>
<status endtime="20161109 21:18:46.502" status="PASS" starttime="20161109 21:18:46.501"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:46.503">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20161109 21:18:46.503" status="PASS" starttime="20161109 21:18:46.503"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:46.506">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status endtime="20161109 21:18:46.506" status="PASS" starttime="20161109 21:18:46.505"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:46.507">URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status endtime="20161109 21:18:46.508" status="PASS" starttime="20161109 21:18:46.507"></status>
</kw>
<status endtime="20161109 21:18:46.508" status="PASS" starttime="20161109 21:18:46.506"></status>
</kw>
<status endtime="20161109 21:18:46.508" status="PASS" starttime="20161109 21:18:46.504"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:46.509">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:18:46.510" status="PASS" starttime="20161109 21:18:46.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:46.510">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:18:46.510" status="PASS" starttime="20161109 21:18:46.510"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:46.511">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:18:46.511" status="PASS" starttime="20161109 21:18:46.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:46.512">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:18:46.512" status="PASS" starttime="20161109 21:18:46.511"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:46.871">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:18:46.871">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:46.871" status="PASS" starttime="20161109 21:18:46.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:46.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:46.872" status="PASS" starttime="20161109 21:18:46.872"></status>
</kw>
<status endtime="20161109 21:18:46.872" status="PASS" starttime="20161109 21:18:46.508"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:47.068">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:18:47.068">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:47.068" status="PASS" starttime="20161109 21:18:46.872"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:47.070">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK...</msg>
<status endtime="20161109 21:18:47.070" status="PASS" starttime="20161109 21:18:47.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:47.070">Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:18:47.071" status="PASS" starttime="20161109 21:18:47.070"></status>
</kw>
<status endtime="20161109 21:18:47.071" status="PASS" starttime="20161109 21:18:47.070"></status>
</kw>
<status endtime="20161109 21:18:47.071" status="PASS" starttime="20161109 21:18:47.069"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:47.071">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:47.071" status="PASS" starttime="20161109 21:18:46.502"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:47.072">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:47.072" status="PASS" starttime="20161109 21:18:47.072"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:47.072">${status} = True</msg>
<status endtime="20161109 21:18:47.072" status="PASS" starttime="20161109 21:18:47.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161109 21:18:47.075" status="PASS" starttime="20161109 21:18:47.072"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:47.075">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:18:47.076">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161109 21:18:47.076">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status endtime="20161109 21:18:47.076" status="PASS" starttime="20161109 21:18:47.075"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:47.078">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_led"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_led&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:47.078" status="PASS" starttime="20161109 21:18:47.076"></status>
</kw>
<status endtime="20161109 21:18:47.078" status="PASS" starttime="20161109 21:18:47.076"></status>
</kw>
<status endtime="20161109 21:18:47.078" status="PASS" starttime="20161109 21:18:46.501"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:47.078">${logpath} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_inventory</msg>
<status endtime="20161109 21:18:47.078" status="PASS" starttime="20161109 21:18:47.078"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:47.079">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status endtime="20161109 21:18:47.080" status="PASS" starttime="20161109 21:18:47.079"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:47.081">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status endtime="20161109 21:18:47.081" status="PASS" starttime="20161109 21:18:47.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:47.082">URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status endtime="20161109 21:18:47.082" status="PASS" starttime="20161109 21:18:47.082"></status>
</kw>
<status endtime="20161109 21:18:47.082" status="PASS" starttime="20161109 21:18:47.081"></status>
</kw>
<status endtime="20161109 21:18:47.082" status="PASS" starttime="20161109 21:18:47.080"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:47.083">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:18:47.084" status="PASS" starttime="20161109 21:18:47.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:47.085">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:18:47.085" status="PASS" starttime="20161109 21:18:47.084"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:47.085">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:18:47.086" status="PASS" starttime="20161109 21:18:47.085"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:47.086">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:18:47.086" status="PASS" starttime="20161109 21:18:47.086"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:47.512">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:18:47.512">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:47.512" status="PASS" starttime="20161109 21:18:47.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:47.514">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:47.514" status="PASS" starttime="20161109 21:18:47.513"></status>
</kw>
<status endtime="20161109 21:18:47.514" status="PASS" starttime="20161109 21:18:47.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:53.438">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:18:53.438">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:53.438" status="PASS" starttime="20161109 21:18:47.514"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:53.441">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-op...</msg>
<status endtime="20161109 21:18:53.441" status="PASS" starttime="20161109 21:18:53.440"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:53.443">Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g17b02f3-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/227"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/229"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/229"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:18:53.444" status="PASS" starttime="20161109 21:18:53.443"></status>
</kw>
<status endtime="20161109 21:18:53.444" status="PASS" starttime="20161109 21:18:53.441"></status>
</kw>
<status endtime="20161109 21:18:53.445" status="PASS" starttime="20161109 21:18:53.439"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:53.445">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:53.445" status="PASS" starttime="20161109 21:18:47.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:53.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:53.446" status="PASS" starttime="20161109 21:18:53.446"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:53.446">${status} = True</msg>
<status endtime="20161109 21:18:53.446" status="PASS" starttime="20161109 21:18:53.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161109 21:18:53.450" status="PASS" starttime="20161109 21:18:53.447"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:53.459">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g17b02f3-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/227"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/229"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/229"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:18:53.460">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161109 21:18:53.461">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-81b8d98",
            "Custom Field 2": "\tskiboot-5.3.2-opdirty...</msg>
<status endtime="20161109 21:18:53.461" status="PASS" starttime="20161109 21:18:53.450"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:53.463">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_inventory"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_inventory&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:53.463" status="PASS" starttime="20161109 21:18:53.462"></status>
</kw>
<status endtime="20161109 21:18:53.463" status="PASS" starttime="20161109 21:18:53.461"></status>
</kw>
<status endtime="20161109 21:18:53.463" status="PASS" starttime="20161109 21:18:47.078"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:53.464">${logpath} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_record_log</msg>
<status endtime="20161109 21:18:53.464" status="PASS" starttime="20161109 21:18:53.463"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:53.465">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20161109 21:18:53.465" status="PASS" starttime="20161109 21:18:53.464"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:53.466">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status endtime="20161109 21:18:53.466" status="PASS" starttime="20161109 21:18:53.465"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:53.467">URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status endtime="20161109 21:18:53.467" status="PASS" starttime="20161109 21:18:53.467"></status>
</kw>
<status endtime="20161109 21:18:53.467" status="PASS" starttime="20161109 21:18:53.466"></status>
</kw>
<status endtime="20161109 21:18:53.467" status="PASS" starttime="20161109 21:18:53.465"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:53.468">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:18:53.468" status="PASS" starttime="20161109 21:18:53.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:53.469">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:18:53.469" status="PASS" starttime="20161109 21:18:53.468"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:53.469">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:18:53.469" status="PASS" starttime="20161109 21:18:53.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:53.470">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:18:53.470" status="PASS" starttime="20161109 21:18:53.470"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:56.761">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:18:56.761">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:56.761" status="PASS" starttime="20161109 21:18:53.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:56.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:56.762" status="PASS" starttime="20161109 21:18:56.762"></status>
</kw>
<status endtime="20161109 21:18:56.763" status="PASS" starttime="20161109 21:18:53.467"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:57.462">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:18:57.463">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:57.463" status="PASS" starttime="20161109 21:18:56.763"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:57.467">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/227": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chass...</msg>
<status endtime="20161109 21:18:57.467" status="PASS" starttime="20161109 21:18:57.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:57.469">Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/227": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 20:01:39"
    }, 
    "/org/openbmc/records/events/227/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/229": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 20:01:42"
    }, 
    "/org/openbmc/records/events/229/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:18:57.469" status="PASS" starttime="20161109 21:18:57.468"></status>
</kw>
<status endtime="20161109 21:18:57.469" status="PASS" starttime="20161109 21:18:57.467"></status>
</kw>
<status endtime="20161109 21:18:57.470" status="PASS" starttime="20161109 21:18:57.465"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:57.470">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:57.470" status="PASS" starttime="20161109 21:18:53.464"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:57.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:57.472" status="PASS" starttime="20161109 21:18:57.471"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:18:57.472">${status} = True</msg>
<status endtime="20161109 21:18:57.472" status="PASS" starttime="20161109 21:18:57.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161109 21:18:57.477" status="PASS" starttime="20161109 21:18:57.472"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:57.478">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/227": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 20:01:39"
    }, 
    "/org/openbmc/records/events/227/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/229": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 20:01:42"
    }, 
    "/org/openbmc/records/events/229/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:18:57.478">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161109 21:18:57.478">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/227": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status endtime="20161109 21:18:57.478" status="PASS" starttime="20161109 21:18:57.477"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:18:57.482">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_record_log"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_record_log&lt;/a&gt;'.</msg>
<status endtime="20161109 21:18:57.482" status="PASS" starttime="20161109 21:18:57.480"></status>
</kw>
<status endtime="20161109 21:18:57.482" status="PASS" starttime="20161109 21:18:57.479"></status>
</kw>
<status endtime="20161109 21:18:57.482" status="PASS" starttime="20161109 21:18:53.463"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:57.483">${logpath} = /tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_sensor_list</msg>
<status endtime="20161109 21:18:57.483" status="PASS" starttime="20161109 21:18:57.482"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:57.484">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20161109 21:18:57.484" status="PASS" starttime="20161109 21:18:57.483"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:57.485">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status endtime="20161109 21:18:57.485" status="PASS" starttime="20161109 21:18:57.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:57.486">URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status endtime="20161109 21:18:57.486" status="PASS" starttime="20161109 21:18:57.486"></status>
</kw>
<status endtime="20161109 21:18:57.486" status="PASS" starttime="20161109 21:18:57.485"></status>
</kw>
<status endtime="20161109 21:18:57.486" status="PASS" starttime="20161109 21:18:57.484"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:57.487">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:18:57.487" status="PASS" starttime="20161109 21:18:57.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:57.488">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:18:57.488" status="PASS" starttime="20161109 21:18:57.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:57.488">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:18:57.488" status="PASS" starttime="20161109 21:18:57.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:57.489">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:18:57.489" status="PASS" starttime="20161109 21:18:57.489"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:18:58.312">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:18:58.313">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:18:58.313" status="PASS" starttime="20161109 21:18:57.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:18:58.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:18:58.314" status="PASS" starttime="20161109 21:18:58.313"></status>
</kw>
<status endtime="20161109 21:18:58.314" status="PASS" starttime="20161109 21:18:57.486"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:04.640">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:19:04.640">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:04.640" status="PASS" starttime="20161109 21:18:58.314"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:04.643">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "er...</msg>
<status endtime="20161109 21:19:04.643" status="PASS" starttime="20161109 21:19:04.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:04.644">Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 12872, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12005, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 13024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12010, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 23275, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1936, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 9440, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 9642, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1616, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 10465, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 13235, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19285, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 13366, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 12857, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 28750, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1300, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1302, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1154, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:04.646" status="PASS" starttime="20161109 21:19:04.644"></status>
</kw>
<status endtime="20161109 21:19:04.646" status="PASS" starttime="20161109 21:19:04.643"></status>
</kw>
<status endtime="20161109 21:19:04.646" status="PASS" starttime="20161109 21:19:04.641"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:04.646">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:04.646" status="PASS" starttime="20161109 21:18:57.483"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:04.648">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:19:04.648" status="PASS" starttime="20161109 21:19:04.647"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:04.648">${status} = True</msg>
<status endtime="20161109 21:19:04.648" status="PASS" starttime="20161109 21:19:04.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20161109 21:19:04.652" status="PASS" starttime="20161109 21:19:04.648"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:04.656">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 12872, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12005, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 13024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12010, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 23275, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1936, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 9440, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 9642, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1616, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 10465, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 13235, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19285, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 13366, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 12857, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 28750, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1300, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1302, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1154, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:19:04.656">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161109 21:19:04.657">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status endtime="20161109 21:19:04.657" status="PASS" starttime="20161109 21:19:04.652"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:04.659">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_sensor_list"&gt;/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest/20161109211831542703_BMC_sensor_list&lt;/a&gt;'.</msg>
<status endtime="20161109 21:19:04.659" status="PASS" starttime="20161109 21:19:04.658"></status>
</kw>
<status endtime="20161109 21:19:04.659" status="PASS" starttime="20161109 21:19:04.657"></status>
</kw>
<status endtime="20161109 21:19:04.659" status="PASS" starttime="20161109 21:18:57.482"></status>
</kw>
<status endtime="20161109 21:19:04.659" status="PASS" starttime="20161109 21:18:46.500"></status>
</kw>
<status endtime="20161109 21:19:04.659" status="PASS" starttime="20161109 21:18:46.499"></status>
</kw>
<status endtime="20161109 21:19:04.659" status="PASS" starttime="20161109 21:18:46.498"></status>
</kw>
<status endtime="20161109 21:19:04.659" status="PASS" starttime="20161109 21:18:46.498"></status>
</kw>
<status endtime="20161109 21:19:04.659" status="PASS" starttime="20161109 21:18:44.129"></status>
</kw>
<status endtime="20161109 21:19:04.660" status="PASS" starttime="20161109 21:18:44.129"></status>
</kw>
<status endtime="20161109 21:19:04.660" status="PASS" starttime="20161109 21:18:44.129"></status>
</kw>
<status endtime="20161109 21:19:04.660" status="PASS" starttime="20161109 21:18:44.128"></status>
</kw>
<status endtime="20161109 21:19:04.660" status="PASS" starttime="20161109 21:18:31.596"></status>
</kw>
<status endtime="20161109 21:19:04.660" status="PASS" starttime="20161109 21:18:31.595"></status>
</kw>
<status endtime="20161109 21:19:04.660" status="PASS" starttime="20161109 21:18:31.595"></status>
</kw>
<status endtime="20161109 21:19:04.660" status="PASS" starttime="20161109 21:18:31.595"></status>
</kw>
<status endtime="20161109 21:19:04.660" status="PASS" starttime="20161109 21:18:31.594"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:04.661">${cur_time} = 2016-11-09 21:19:04:660742</msg>
<status endtime="20161109 21:19:04.661" status="PASS" starttime="20161109 21:19:04.661"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:04.661">${cur_time} = 20161109211904660742</msg>
<status endtime="20161109 21:19:04.661" status="PASS" starttime="20161109 21:19:04.661"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:04.662">${cur_time} = 20161109211904660742</msg>
<status endtime="20161109 21:19:04.662" status="PASS" starttime="20161109 21:19:04.660"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status endtime="20161109 21:19:04.662" status="PASS" starttime="20161109 21:19:04.662"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:04.663">
/tmp/root/12496/obmc-robot/logs/20161109211831542703_TestsTestBasicPoweron/20161109211831542703_powerontest</msg>
<status endtime="20161109 21:19:04.663" status="PASS" starttime="20161109 21:19:04.662"></status>
</kw>
<status endtime="20161109 21:19:04.663" status="PASS" starttime="20161109 21:18:31.542"></status>
</kw>
<status endtime="20161109 21:19:04.663" status="PASS" starttime="20161109 21:18:31.535"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:04.664">Directory '&lt;a href="file:///tmp/root/12496/obmc-robot/logs"&gt;/tmp/root/12496/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161109 21:19:04.664" status="PASS" starttime="20161109 21:19:04.663"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:04.664">File '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161109 21:19:04.665" status="PASS" starttime="20161109 21:19:04.664"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:04.665">${exist} = True</msg>
<status endtime="20161109 21:19:04.665" status="PASS" starttime="20161109 21:19:04.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161109 21:19:04.668" status="PASS" starttime="20161109 21:19:04.665"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:04.668">${cur_time} = 2016-11-09 21:19:04:668240</msg>
<status endtime="20161109 21:19:04.668" status="PASS" starttime="20161109 21:19:04.668"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:04.669">${cur_time} = 20161109211904668240</msg>
<status endtime="20161109 21:19:04.669" status="PASS" starttime="20161109 21:19:04.669"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:04.669">${cur_time} = 20161109211904668240</msg>
<status endtime="20161109 21:19:04.669" status="PASS" starttime="20161109 21:19:04.668"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:04.670">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:19:04.670" status="PASS" starttime="20161109 21:19:04.669"></status>
</kw>
<status endtime="20161109 21:19:04.670" status="PASS" starttime="20161109 21:19:04.663"></status>
</kw>
<status endtime="20161109 21:19:04.670" status="PASS" starttime="20161109 21:18:31.534"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:19:04.672">Dictionary does not contain key 'host'.</msg>
<status endtime="20161109 21:19:04.672" status="FAIL" starttime="20161109 21:19:04.672"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:04.672">${has_host} = False</msg>
<status endtime="20161109 21:19:04.672" status="PASS" starttime="20161109 21:19:04.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161109 21:19:04.676" status="PASS" starttime="20161109 21:19:04.675"></status>
</kw>
<status endtime="20161109 21:19:04.676" status="PASS" starttime="20161109 21:19:04.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:04.680">${port_num} = 22</msg>
<status endtime="20161109 21:19:04.680" status="PASS" starttime="20161109 21:19:04.680"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:04.681">${SSH_PORT} = 22</msg>
<status endtime="20161109 21:19:04.681" status="PASS" starttime="20161109 21:19:04.680"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:04.681">${https_num} = 443</msg>
<status endtime="20161109 21:19:04.681" status="PASS" starttime="20161109 21:19:04.681"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:04.682">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161109 21:19:04.682" status="PASS" starttime="20161109 21:19:04.682"></status>
</kw>
<status endtime="20161109 21:19:04.682" status="PASS" starttime="20161109 21:19:04.679"></status>
</kw>
<status endtime="20161109 21:19:04.683" status="PASS" starttime="20161109 21:19:04.676"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:19:04.684">Dictionary does not contain key 'port'.</msg>
<status endtime="20161109 21:19:04.684" status="FAIL" starttime="20161109 21:19:04.683"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:04.684">${has_port} = False</msg>
<status endtime="20161109 21:19:04.684" status="PASS" starttime="20161109 21:19:04.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161109 21:19:04.690" status="PASS" starttime="20161109 21:19:04.689"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161109 21:19:04.691" status="PASS" starttime="20161109 21:19:04.690"></status>
</kw>
<status endtime="20161109 21:19:04.691" status="PASS" starttime="20161109 21:19:04.689"></status>
</kw>
<status endtime="20161109 21:19:04.691" status="PASS" starttime="20161109 21:19:04.684"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:04.692">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 21:19:08.946">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161109 21:19:08.946" status="PASS" starttime="20161109 21:19:04.691"></status>
</kw>
<status endtime="20161109 21:19:08.947" status="PASS" starttime="20161109 21:19:04.671"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:08.948">Executing command 'ls /tmp/obmc-console.log-20161109210312807966_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161109 21:19:09.148">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:19:09.149">${pid} = 933</msg>
<msg level="INFO" timestamp="20161109 21:19:09.149">${stderr} = </msg>
<status endtime="20161109 21:19:09.149" status="PASS" starttime="20161109 21:19:08.947"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:09.150">Length is 0</msg>
<status endtime="20161109 21:19:09.150" status="PASS" starttime="20161109 21:19:09.149"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:09.151">Executing command 'ps ax | grep 933 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161109 21:19:10.524">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:19:10.525">${rc} = 0</msg>
<status endtime="20161109 21:19:10.525" status="PASS" starttime="20161109 21:19:09.150"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status endtime="20161109 21:19:10.530" status="PASS" starttime="20161109 21:19:10.525"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:10.531">Executing command 'kill -s KILL 933'.</msg>
<msg level="INFO" timestamp="20161109 21:19:10.599">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:19:10.600">${console} = </msg>
<msg level="INFO" timestamp="20161109 21:19:10.600">${stderr} = </msg>
<status endtime="20161109 21:19:10.600" status="PASS" starttime="20161109 21:19:10.530"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:10.600">Length is 0</msg>
<status endtime="20161109 21:19:10.600" status="PASS" starttime="20161109 21:19:10.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:10.601">Current Client PID:933</msg>
<status endtime="20161109 21:19:10.601" status="PASS" starttime="20161109 21:19:10.601"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:10.602">Executing command 'cat /tmp/obmc-console.log-20161109210312807966_933'.</msg>
<msg level="INFO" timestamp="20161109 21:19:10.870">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 21:19:10.871">${console} = </msg>
<msg level="INFO" timestamp="20161109 21:19:10.871">${stderr} = </msg>
<status endtime="20161109 21:19:10.871" status="PASS" starttime="20161109 21:19:10.601"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:10.872">Length is 0</msg>
<status endtime="20161109 21:19:10.872" status="PASS" starttime="20161109 21:19:10.871"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:10.872">${sol_log} = </msg>
<status endtime="20161109 21:19:10.872" status="PASS" starttime="20161109 21:19:04.670"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:10.873"></msg>
<status endtime="20161109 21:19:10.873" status="PASS" starttime="20161109 21:19:10.873"></status>
</kw>
<status endtime="20161109 21:19:10.873" status="PASS" starttime="20161109 21:18:31.534"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status endtime="20161109 21:19:10.873" critical="yes" status="FAIL" starttime="20161109 21:03:10.129">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status endtime="20161109 21:19:10.874" status="FAIL" starttime="20161109 21:03:10.101"></status>
</suite>
<suite name="Test Eventlog" source="/tmp/root/12496/obmc-robot/tests/test_eventlog.robot" id="s1-s4">
<kw name="Open Connection And Log In" library="connection_client" type="setup">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:19:10.911">Dictionary does not contain key 'host'.</msg>
<status endtime="20161109 21:19:10.911" status="FAIL" starttime="20161109 21:19:10.910"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:10.911">${has_host} = False</msg>
<status endtime="20161109 21:19:10.911" status="PASS" starttime="20161109 21:19:10.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161109 21:19:10.914" status="PASS" starttime="20161109 21:19:10.914"></status>
</kw>
<status endtime="20161109 21:19:10.914" status="PASS" starttime="20161109 21:19:10.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:10.918">${port_num} = 22</msg>
<status endtime="20161109 21:19:10.918" status="PASS" starttime="20161109 21:19:10.918"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:10.919">${SSH_PORT} = 22</msg>
<status endtime="20161109 21:19:10.919" status="PASS" starttime="20161109 21:19:10.919"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:10.920">${https_num} = 443</msg>
<status endtime="20161109 21:19:10.920" status="PASS" starttime="20161109 21:19:10.919"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:10.920">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161109 21:19:10.920" status="PASS" starttime="20161109 21:19:10.920"></status>
</kw>
<status endtime="20161109 21:19:10.920" status="PASS" starttime="20161109 21:19:10.917"></status>
</kw>
<status endtime="20161109 21:19:10.920" status="PASS" starttime="20161109 21:19:10.914"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 21:19:10.921">Dictionary does not contain key 'port'.</msg>
<status endtime="20161109 21:19:10.921" status="FAIL" starttime="20161109 21:19:10.921"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:10.921">${has_port} = False</msg>
<status endtime="20161109 21:19:10.921" status="PASS" starttime="20161109 21:19:10.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161109 21:19:10.925" status="PASS" starttime="20161109 21:19:10.925"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161109 21:19:10.926" status="PASS" starttime="20161109 21:19:10.925"></status>
</kw>
<status endtime="20161109 21:19:10.926" status="PASS" starttime="20161109 21:19:10.925"></status>
</kw>
<status endtime="20161109 21:19:10.926" status="PASS" starttime="20161109 21:19:10.922"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:10.926">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 21:19:14.074">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161109 21:19:14.074" status="PASS" starttime="20161109 21:19:10.926"></status>
</kw>
<status endtime="20161109 21:19:14.074" status="PASS" starttime="20161109 21:19:10.909"></status>
</kw>
<test name="clear any logs" id="s1-s4-t1">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.077">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161109 21:19:14.077" status="PASS" starttime="20161109 21:19:14.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.078">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:19:14.078" status="PASS" starttime="20161109 21:19:14.077"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:19:14.079" status="PASS" starttime="20161109 21:19:14.078"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.081">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:19:14.081" status="PASS" starttime="20161109 21:19:14.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:14.083">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:19:14.083" status="PASS" starttime="20161109 21:19:14.082"></status>
</kw>
<status endtime="20161109 21:19:14.083" status="PASS" starttime="20161109 21:19:14.082"></status>
</kw>
<status endtime="20161109 21:19:14.083" status="PASS" starttime="20161109 21:19:14.079"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:14.085">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:19:14.085" status="PASS" starttime="20161109 21:19:14.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.086">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:19:14.086" status="PASS" starttime="20161109 21:19:14.086"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.087">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:19:14.087" status="PASS" starttime="20161109 21:19:14.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.088">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:19:14.088" status="PASS" starttime="20161109 21:19:14.088"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.425">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:19:14.425">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:14.425" status="PASS" starttime="20161109 21:19:14.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:14.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:19:14.425" status="PASS" starttime="20161109 21:19:14.425"></status>
</kw>
<status endtime="20161109 21:19:14.426" status="PASS" starttime="20161109 21:19:14.084"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.913">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:19:14.913">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:14.913" status="PASS" starttime="20161109 21:19:14.426"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.915">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:14.915" status="PASS" starttime="20161109 21:19:14.914"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:14.916">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:14.916" status="PASS" starttime="20161109 21:19:14.916"></status>
</kw>
<status endtime="20161109 21:19:14.917" status="PASS" starttime="20161109 21:19:14.915"></status>
</kw>
<status endtime="20161109 21:19:14.917" status="PASS" starttime="20161109 21:19:14.913"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:14.917">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:14.917" status="PASS" starttime="20161109 21:19:14.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:14.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:19:14.918" status="PASS" starttime="20161109 21:19:14.918"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.920">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161109 21:19:14.920" status="PASS" starttime="20161109 21:19:14.919"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.922">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161109 21:19:14.922" status="PASS" starttime="20161109 21:19:14.921"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:14.924">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161109 21:19:14.924" status="PASS" starttime="20161109 21:19:14.923"></status>
</kw>
<status endtime="20161109 21:19:14.924" status="PASS" starttime="20161109 21:19:14.922"></status>
</kw>
<status endtime="20161109 21:19:14.924" status="PASS" starttime="20161109 21:19:14.920"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:14.926">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:19:14.927" status="PASS" starttime="20161109 21:19:14.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.928">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:19:14.928" status="PASS" starttime="20161109 21:19:14.927"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.929">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:19:14.929" status="PASS" starttime="20161109 21:19:14.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:14.930">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:19:14.930" status="PASS" starttime="20161109 21:19:14.929"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.639">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:19:15.640">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:15.641" status="PASS" starttime="20161109 21:19:14.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:15.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:19:15.643" status="PASS" starttime="20161109 21:19:15.641"></status>
</kw>
<status endtime="20161109 21:19:15.647" status="PASS" starttime="20161109 21:19:14.924"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.704">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:19:15.704">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:15.704" status="PASS" starttime="20161109 21:19:15.647"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.705">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:15.706" status="PASS" starttime="20161109 21:19:15.705"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:15.706">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:15.706" status="PASS" starttime="20161109 21:19:15.706"></status>
</kw>
<status endtime="20161109 21:19:15.706" status="PASS" starttime="20161109 21:19:15.706"></status>
</kw>
<status endtime="20161109 21:19:15.707" status="PASS" starttime="20161109 21:19:15.704"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:15.707">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:15.707" status="PASS" starttime="20161109 21:19:14.919"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.708">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:19:15.708">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:19:15.708">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:19:15.708" status="PASS" starttime="20161109 21:19:15.707"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:15.708">Length is 0</msg>
<status endtime="20161109 21:19:15.708" status="PASS" starttime="20161109 21:19:15.708"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161109 21:19:15.712" status="PASS" starttime="20161109 21:19:15.709"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:15.713">Directory '&lt;a href="file:///tmp/root/12496/obmc-robot/logs"&gt;/tmp/root/12496/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161109 21:19:15.714" status="PASS" starttime="20161109 21:19:15.713"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:15.715">File '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161109 21:19:15.715" status="PASS" starttime="20161109 21:19:15.715"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:15.715">${exist} = True</msg>
<status endtime="20161109 21:19:15.715" status="PASS" starttime="20161109 21:19:15.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161109 21:19:15.720" status="PASS" starttime="20161109 21:19:15.716"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.722">${cur_time} = 2016-11-09 21:19:15:721728</msg>
<status endtime="20161109 21:19:15.722" status="PASS" starttime="20161109 21:19:15.721"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.723">${cur_time} = 20161109211915721728</msg>
<status endtime="20161109 21:19:15.723" status="PASS" starttime="20161109 21:19:15.722"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:15.723">${cur_time} = 20161109211915721728</msg>
<status endtime="20161109 21:19:15.723" status="PASS" starttime="20161109 21:19:15.721"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:15.725">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:19:15.725" status="PASS" starttime="20161109 21:19:15.724"></status>
</kw>
<status endtime="20161109 21:19:15.725" status="PASS" starttime="20161109 21:19:15.712"></status>
</kw>
<status endtime="20161109 21:19:15.725" status="PASS" starttime="20161109 21:19:15.709"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status endtime="20161109 21:19:15.725" critical="yes" status="PASS" starttime="20161109 21:19:14.074"></status>
</test>
<test name="write a log" id="s1-s4-t2">
<kw name="create a test log">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.727">${data} = {u'data': []}</msg>
<status endtime="20161109 21:19:15.728" status="PASS" starttime="20161109 21:19:15.727"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.729">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161109 21:19:15.729" status="PASS" starttime="20161109 21:19:15.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.730">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:19:15.730" status="PASS" starttime="20161109 21:19:15.729"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161109 21:19:15.730" status="PASS" starttime="20161109 21:19:15.730"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.732">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:19:15.732" status="PASS" starttime="20161109 21:19:15.731"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:15.733">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161109 21:19:15.733" status="PASS" starttime="20161109 21:19:15.732"></status>
</kw>
<status endtime="20161109 21:19:15.733" status="PASS" starttime="20161109 21:19:15.732"></status>
</kw>
<status endtime="20161109 21:19:15.733" status="PASS" starttime="20161109 21:19:15.730"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:15.734">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:19:15.734" status="PASS" starttime="20161109 21:19:15.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.735">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:19:15.735" status="PASS" starttime="20161109 21:19:15.734"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.735">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:19:15.735" status="PASS" starttime="20161109 21:19:15.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:15.736">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:19:15.736" status="PASS" starttime="20161109 21:19:15.735"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:16.069">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:19:16.070">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:16.070" status="PASS" starttime="20161109 21:19:15.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:16.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:19:16.070" status="PASS" starttime="20161109 21:19:16.070"></status>
</kw>
<status endtime="20161109 21:19:16.071" status="PASS" starttime="20161109 21:19:15.733"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:16.837">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:19:16.837">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:16.837" status="PASS" starttime="20161109 21:19:16.071"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:16.839">${msg} = Response code:200, Content:{
  "data": 230, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:16.839" status="PASS" starttime="20161109 21:19:16.838"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:16.840">Response code:200, Content:{
  "data": 230, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:16.840" status="PASS" starttime="20161109 21:19:16.840"></status>
</kw>
<status endtime="20161109 21:19:16.841" status="PASS" starttime="20161109 21:19:16.839"></status>
</kw>
<status endtime="20161109 21:19:16.841" status="PASS" starttime="20161109 21:19:16.837"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:16.841">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:16.841" status="PASS" starttime="20161109 21:19:15.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:16.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:19:16.842" status="PASS" starttime="20161109 21:19:16.842"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:16.845">To JSON using : content={
  "data": 230, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:19:16.845">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:19:16.845">${json} = {u'data': 230, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:19:16.845" status="PASS" starttime="20161109 21:19:16.844"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:16.846">${LOGID} = 230</msg>
<status endtime="20161109 21:19:16.846" status="PASS" starttime="20161109 21:19:16.846"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:16.847">${uri} = /org/openbmc/records/events/230</msg>
<status endtime="20161109 21:19:16.847" status="PASS" starttime="20161109 21:19:16.846"></status>
</kw>
<status endtime="20161109 21:19:16.847" status="PASS" starttime="20161109 21:19:15.726"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161109 21:19:16.851" status="PASS" starttime="20161109 21:19:16.848"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:16.852">Directory '&lt;a href="file:///tmp/root/12496/obmc-robot/logs"&gt;/tmp/root/12496/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161109 21:19:16.853" status="PASS" starttime="20161109 21:19:16.852"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:16.853">File '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161109 21:19:16.854" status="PASS" starttime="20161109 21:19:16.853"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:16.854">${exist} = True</msg>
<status endtime="20161109 21:19:16.854" status="PASS" starttime="20161109 21:19:16.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161109 21:19:16.856" status="PASS" starttime="20161109 21:19:16.854"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:16.857">${cur_time} = 2016-11-09 21:19:16:857037</msg>
<status endtime="20161109 21:19:16.857" status="PASS" starttime="20161109 21:19:16.857"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:16.858">${cur_time} = 20161109211916857037</msg>
<status endtime="20161109 21:19:16.858" status="PASS" starttime="20161109 21:19:16.857"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:16.858">${cur_time} = 20161109211916857037</msg>
<status endtime="20161109 21:19:16.858" status="PASS" starttime="20161109 21:19:16.857"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:16.859">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:19:16.859" status="PASS" starttime="20161109 21:19:16.858"></status>
</kw>
<status endtime="20161109 21:19:16.859" status="PASS" starttime="20161109 21:19:16.852"></status>
</kw>
<status endtime="20161109 21:19:16.859" status="PASS" starttime="20161109 21:19:16.848"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status endtime="20161109 21:19:16.859" critical="yes" status="PASS" starttime="20161109 21:19:15.726"></status>
</test>
<kw name="Close All Connections" library="SSHLibrary" type="teardown">
<doc>Closes all open connections.</doc>
<status endtime="20161109 21:19:17.205" status="PASS" starttime="20161109 21:19:16.860"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status endtime="20161109 21:19:17.205" status="PASS" starttime="20161109 21:19:10.880"></status>
</suite>
<suite name="Test Obmcrest" source="/tmp/root/12496/obmc-robot/tests/test_obmcrest.robot" id="s1-s5">
<test name="Good connection for testing" id="s1-s5-t1">
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:17.235">${base_uri} = /</msg>
<status endtime="20161109 21:19:17.235" status="PASS" starttime="20161109 21:19:17.235"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:17.237">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status endtime="20161109 21:19:17.237" status="PASS" starttime="20161109 21:19:17.236"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:17.237">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status endtime="20161109 21:19:17.237" status="PASS" starttime="20161109 21:19:17.237"></status>
</kw>
<status endtime="20161109 21:19:17.238" status="PASS" starttime="20161109 21:19:17.237"></status>
</kw>
<status endtime="20161109 21:19:17.238" status="PASS" starttime="20161109 21:19:17.235"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:17.238">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:19:17.239" status="PASS" starttime="20161109 21:19:17.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:17.240">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:19:17.240" status="PASS" starttime="20161109 21:19:17.239"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:17.241">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:19:17.241" status="PASS" starttime="20161109 21:19:17.240"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:17.242">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:19:17.242" status="PASS" starttime="20161109 21:19:17.241"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.264">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:19:18.264">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:18.264" status="PASS" starttime="20161109 21:19:17.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:18.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:19:18.265" status="PASS" starttime="20161109 21:19:18.264"></status>
</kw>
<status endtime="20161109 21:19:18.265" status="PASS" starttime="20161109 21:19:17.238"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.321">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:19:18.322">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:18.322" status="PASS" starttime="20161109 21:19:18.266"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.323">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:18.324" status="PASS" starttime="20161109 21:19:18.323"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:18.325">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:18.325" status="PASS" starttime="20161109 21:19:18.325"></status>
</kw>
<status endtime="20161109 21:19:18.325" status="PASS" starttime="20161109 21:19:18.324"></status>
</kw>
<status endtime="20161109 21:19:18.326" status="PASS" starttime="20161109 21:19:18.322"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:18.326">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:18.326" status="PASS" starttime="20161109 21:19:17.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:18.327">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:19:18.327" status="PASS" starttime="20161109 21:19:18.326"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.328">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:19:18.328">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:19:18.328">${content} = {u'data': [u'/org'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:19:18.328" status="PASS" starttime="20161109 21:19:18.327"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:18.328">${content} = [u'/org']</msg>
<status endtime="20161109 21:19:18.329" status="PASS" starttime="20161109 21:19:17.234"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${content}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${c}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.329">${c} = /org</msg>
<status endtime="20161109 21:19:18.330" status="PASS" starttime="20161109 21:19:18.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${c}</arg>
<arg>/org</arg>
</arguments>
<status endtime="20161109 21:19:18.330" status="PASS" starttime="20161109 21:19:18.330"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161109 21:19:18.334" status="PASS" starttime="20161109 21:19:18.331"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:18.335">Directory '&lt;a href="file:///tmp/root/12496/obmc-robot/logs"&gt;/tmp/root/12496/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161109 21:19:18.335" status="PASS" starttime="20161109 21:19:18.335"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:18.336">File '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161109 21:19:18.336" status="PASS" starttime="20161109 21:19:18.336"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:18.337">${exist} = True</msg>
<status endtime="20161109 21:19:18.337" status="PASS" starttime="20161109 21:19:18.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161109 21:19:18.340" status="PASS" starttime="20161109 21:19:18.337"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.341">${cur_time} = 2016-11-09 21:19:18:340979</msg>
<status endtime="20161109 21:19:18.341" status="PASS" starttime="20161109 21:19:18.341"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.342">${cur_time} = 20161109211918340979</msg>
<status endtime="20161109 21:19:18.342" status="PASS" starttime="20161109 21:19:18.341"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:18.342">${cur_time} = 20161109211918340979</msg>
<status endtime="20161109 21:19:18.342" status="PASS" starttime="20161109 21:19:18.340"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:18.343">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:19:18.343" status="PASS" starttime="20161109 21:19:18.342"></status>
</kw>
<status endtime="20161109 21:19:18.343" status="PASS" starttime="20161109 21:19:18.334"></status>
</kw>
<status endtime="20161109 21:19:18.343" status="PASS" starttime="20161109 21:19:18.330"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>Good_connection_for_testing</tag>
</tags>
<status endtime="20161109 21:19:18.343" critical="yes" status="PASS" starttime="20161109 21:19:17.234"></status>
</test>
<test name="get directory listing /" id="s1-s5-t2">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.345">${base_uri} = /</msg>
<status endtime="20161109 21:19:18.345" status="PASS" starttime="20161109 21:19:18.344"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.346">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status endtime="20161109 21:19:18.346" status="PASS" starttime="20161109 21:19:18.346"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:18.347">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status endtime="20161109 21:19:18.347" status="PASS" starttime="20161109 21:19:18.347"></status>
</kw>
<status endtime="20161109 21:19:18.348" status="PASS" starttime="20161109 21:19:18.346"></status>
</kw>
<status endtime="20161109 21:19:18.348" status="PASS" starttime="20161109 21:19:18.345"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:18.348">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161109 21:19:18.349" status="PASS" starttime="20161109 21:19:18.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.349">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161109 21:19:18.349" status="PASS" starttime="20161109 21:19:18.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.350">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161109 21:19:18.350" status="PASS" starttime="20161109 21:19:18.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:18.351">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161109 21:19:18.351" status="PASS" starttime="20161109 21:19:18.350"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:19.018">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 21:19:19.018">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:19.018" status="PASS" starttime="20161109 21:19:18.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:19.019">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:19:19.019" status="PASS" starttime="20161109 21:19:19.018"></status>
</kw>
<status endtime="20161109 21:19:19.019" status="PASS" starttime="20161109 21:19:18.348"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:19.109">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161109 21:19:19.109">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:19.109" status="PASS" starttime="20161109 21:19:19.019"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:19.110">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:19.110" status="PASS" starttime="20161109 21:19:19.110"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:19.111">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161109 21:19:19.111" status="PASS" starttime="20161109 21:19:19.111"></status>
</kw>
<status endtime="20161109 21:19:19.111" status="PASS" starttime="20161109 21:19:19.110"></status>
</kw>
<status endtime="20161109 21:19:19.111" status="PASS" starttime="20161109 21:19:19.109"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:19.112">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161109 21:19:19.112" status="PASS" starttime="20161109 21:19:18.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 21:19:19.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161109 21:19:19.112" status="PASS" starttime="20161109 21:19:19.112"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:19.113">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 21:19:19.113">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 21:19:19.113">${json} = {u'data': [u'/org'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20161109 21:19:19.113" status="PASS" starttime="20161109 21:19:19.112"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${json['data']}</arg>
<arg>/org</arg>
</arguments>
<status endtime="20161109 21:19:19.113" status="PASS" starttime="20161109 21:19:19.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json['status']}</arg>
<arg>ok</arg>
</arguments>
<status endtime="20161109 21:19:19.114" status="PASS" starttime="20161109 21:19:19.114"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161109 21:19:19.117" status="PASS" starttime="20161109 21:19:19.115"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:19.119">Directory '&lt;a href="file:///tmp/root/12496/obmc-robot/logs"&gt;/tmp/root/12496/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161109 21:19:19.120" status="PASS" starttime="20161109 21:19:19.118"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:19.120">File '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161109 21:19:19.120" status="PASS" starttime="20161109 21:19:19.120"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:19.120">${exist} = True</msg>
<status endtime="20161109 21:19:19.120" status="PASS" starttime="20161109 21:19:19.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161109 21:19:19.123" status="PASS" starttime="20161109 21:19:19.121"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:19.124">${cur_time} = 2016-11-09 21:19:19:123828</msg>
<status endtime="20161109 21:19:19.124" status="PASS" starttime="20161109 21:19:19.124"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 21:19:19.124">${cur_time} = 20161109211919123828</msg>
<status endtime="20161109 21:19:19.125" status="PASS" starttime="20161109 21:19:19.124"></status>
</kw>
<msg level="INFO" timestamp="20161109 21:19:19.125">${cur_time} = 20161109211919123828</msg>
<status endtime="20161109 21:19:19.125" status="PASS" starttime="20161109 21:19:19.123"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161109 21:19:19.125">Appended to file '&lt;a href="file:///tmp/root/12496/obmc-robot/logs/test_history.txt"&gt;/tmp/root/12496/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161109 21:19:19.126" status="PASS" starttime="20161109 21:19:19.125"></status>
</kw>
<status endtime="20161109 21:19:19.126" status="PASS" starttime="20161109 21:19:19.118"></status>
</kw>
<status endtime="20161109 21:19:19.126" status="PASS" starttime="20161109 21:19:19.114"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>get_directory_listing</tag>
</tags>
<status endtime="20161109 21:19:19.126" critical="yes" status="PASS" starttime="20161109 21:19:18.343"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status endtime="20161109 21:19:19.127" status="PASS" starttime="20161109 21:19:17.210"></status>
</suite>
<status endtime="20161109 21:19:19.141" status="FAIL" starttime="20161109 21:02:58.217"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="1">Critical Tests</stat>
<stat pass="7" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="4" fail="0">CI</stat>
<stat pass="1" fail="0">clear_any_logs</stat>
<stat pass="1" fail="0">Create_error_log_on_single_FRU</stat>
<stat pass="1" fail="0">Delete_error_log</stat>
<stat pass="1" fail="0">get_directory_listing</stat>
<stat pass="1" fail="0">Good_connection_for_testing</stat>
<stat pass="0" fail="1">power_on_test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
<stat pass="1" fail="0">write_a_log</stat>
</tag>
<suite>
<stat name="Tests" pass="7" id="s1" fail="1">Tests</stat>
<stat name="Security" pass="1" id="s1-s1" fail="0">Tests.Security</stat>
<stat name="Test Ssl" pass="1" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat name="Test Association" pass="2" id="s1-s2" fail="0">Tests.Test Association</stat>
<stat name="Test Basic Poweron" pass="0" id="s1-s3" fail="1">Tests.Test Basic Poweron</stat>
<stat name="Test Eventlog" pass="2" id="s1-s4" fail="0">Tests.Test Eventlog</stat>
<stat name="Test Obmcrest" pass="2" id="s1-s5" fail="0">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
