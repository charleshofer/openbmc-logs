<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161109 19:45:48.279" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite id="s1" name="Tests" source="/tmp/root/31414/obmc-robot/tests">
<suite id="s1-s1" name="Security" source="/tmp/root/31414/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/root/31414/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>https://${OPENBMC_HOST}/</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:48.818">Creating Session using : alias=openbmc, url=https://9.3.23.30/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:45:48.818" endtime="20161109 19:45:48.818"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:48.819">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:48.819" endtime="20161109 19:45:48.819"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:48.821">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:45:48.820" endtime="20161109 19:45:48.821"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:48.821">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:45:48.821" endtime="20161109 19:45:48.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:49.172">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:49.172">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:48.822" endtime="20161109 19:45:49.172"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:49.854">Get Request using : alias=openbmc, uri=/list, headers=None </msg>
<msg level="INFO" timestamp="20161109 19:45:49.855">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:49.173" endtime="20161109 19:45:49.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:49.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:49.855" endtime="20161109 19:45:49.856"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:49.857">To JSON using : content={
  "data": [
    "/org/openbmc/sensors/powercap/min_cap", 
    "/org/openbmc/control", 
    "/org/openbmc/sensors/host/powercap", 
    "/org/openbmc/UserManager/Group", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28", 
    "/org/openbmc/control/power0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25", 
    "/org/openbmc/settings/host0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event", 
    "/org/openbmc/inventory/system/systemevent", 
    "/org/openbmc/sensors/host/cpu0/OccStatus", 
    "/org/openbmc/sensors/temperature/dimm20", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1", 
    "/org/openbmc/sensors/temperature/dimm21", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
    "/org/openbmc/sensors/powercap/max_cap", 
    "/org/openbmc/control/checkstop0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7", 
    "/org/openbmc/sensors/tach/fan0L", 
    "/org/openbmc/inventory/system/chassis/sas_expander", 
    "/org/openbmc/sensors/tach/fan0H", 
    "/org/openbmc/watchdog", 
    "/org/openbmc/inventory/system/misc", 
    "/org/openbmc/UserManager/Users", 
    "/org/openbmc/sensors/temperature/dimm28", 
    "/org/openbmc/sensors/temperature/dimm29", 
    "/org/openbmc/sensors/temperature/dimm24", 
    "/org/openbmc/sensors/temperature/dimm25", 
    "/org/openbmc/records/events/214/fru", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3", 
    "/org/openbmc/sensors/temperature/cpu0/core11", 
    "/org/openbmc/sensors/temperature/cpu0/core10", 
    "/org/openbmc/sensors/powercap/system_power", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10", 
    "/org/openbmc/records/events", 
    "/org/openbmc/sensors/tach/fan1H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29", 
    "/org/openbmc/sensors/tach/fan1L", 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1", 
    "/org/openbmc/sensors/temperature/dimm16", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4", 
    "/org/openbmc/sensors/speed/fan1", 
    "/org/openbmc/sensors/speed/fan0", 
    "/org/openbmc/sensors/speed/fan3", 
    "/org/openbmc/sensors/speed/fan2", 
    "/org/openbmc/sensors/speed/fan5", 
    "/org/openbmc/sensors/speed/fan4", 
    "/org/openbmc/managers/Download", 
    "/org/openbmc/sensors/HSCA/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14", 
    "/org/openbmc/control/flash/bmc", 
    "/org/openbmc/records/events/214", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2", 
    "/org/openbmc/sensors/temperature/dimm17", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9", 
    "/org/openbmc/managers/System", 
    "/org/openbmc/sensors/temperature/cpu0/core9", 
    "/org/openbmc/control/led/identify", 
    "/org/openbmc/sensors/temperature/cpu1/core10", 
    "/org/openbmc/sensors/temperature/cpu1/core11", 
    "/org/openbmc/sensors/temperature/cpu0/core1", 
    "/org/openbmc/sensors/temperature/cpu0/core3", 
    "/org/openbmc/sensors/temperature/cpu0/core2", 
    "/org/openbmc/sensors/temperature/cpu0/core5", 
    "/org/openbmc/sensors/temperature/cpu0/core4", 
    "/org/openbmc/sensors/temperature/cpu0/core7", 
    "/org/openbmc/sensors/temperature/cpu0/core6", 
    "/org/openbmc/control/bmc0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6", 
    "/org/openbmc/sensors/temperature/cpu1/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3", 
    "/org/openbmc/control/fans", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2", 
    "/org/openbmc/sensors/temperature/cpu1/core2", 
    "/org/openbmc/inventory/system/chassis", 
    "/org/openbmc", 
    "/org/openbmc/sensors/temperature/dimm1", 
    "/org/openbmc/UserManager/Groups", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9", 
    "/org/openbmc/sensors/host/cpu1/OccStatus", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1", 
    "/org/openbmc/HostServices", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5", 
    "/org/openbmc/buttons", 
    "/org/openbmc/control/host0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM1", 
    "/org/openbmc/sensors/voltage/P0V97_CPU0", 
    "/org/openbmc/sensors/voltage/P0V97_CPU1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12", 
    "/org/openbmc/inventory", 
    "/org/openbmc/sensors/temperature/cpu1/core4", 
    "/org/openbmc/sensors/temperature/cpu1/core5", 
    "/org/openbmc/sensors/tach/fan4H", 
    "/org/openbmc/sensors/temperature/cpu1/core0", 
    "/org/openbmc/sensors/tach/fan4L", 
    "/org/openbmc/sensors/temperature/cpu1/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock", 
    "/org/openbmc/sensors/temperature/cpu1/core8", 
    "/org/openbmc/sensors/temperature/cpu1/core9", 
    "/org/openbmc/control/led/heartbeat", 
    "/org/openbmc/control/flash", 
    "/org/openbmc/sensors/temperature/membuf0", 
    "/org/openbmc/sensors/temperature/membuf1", 
    "/org/openbmc/sensors/temperature/membuf4", 
    "/org/openbmc/sensors/temperature/membuf5", 
    "/org/openbmc/sensors/temperature/membuf6", 
    "/org/openbmc/sensors/HSCB/Iout", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1", 
    "/org/openbmc/buttons/reset0", 
    "/org/openbmc/HostIpmi/1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1", 
    "/org/openbmc/control/led", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0", 
    "/org/openbmc/sensors/host/BootCount", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4", 
    "/org/openbmc/sensors/tach/fan5L", 
    "/org/openbmc/sensors/host/BootProgress", 
    "/org/openbmc/sensors/tach/fan5H", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3", 
    "/org/openbmc/control/chassis0", 
    "/org/openbmc/inventory/system/chassis/hdd_backplane", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7", 
    "/org/openbmc/sensors/temperature/dimm5", 
    "/org/openbmc/sensors/temperature/dimm4", 
    "/org/openbmc/buttons/power0", 
    "/org/openbmc/control/flash/bios", 
    "/org/openbmc/sensors/temperature/dimm0", 
    "/org/openbmc/sensors/powercap/n_cap", 
    "/org/openbmc/sensors/HSCA/Iout", 
    "/org/openbmc/inventory/system", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8", 
    "/org/openbmc/inventory/system/bios", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser", 
    "/org/openbmc/sensors/host/OperatingSystemStatus", 
    "/org/openbmc/sensors/powercap/user_cap", 
    "/org/openbmc/sensors/tach/fan2L", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2", 
    "/org/openbmc/control/led/beep", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0", 
    "/org/openbmc/sensors/tach/fan2H", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4", 
    "/org/openbmc/inventory/system/chassis/fan4", 
    "/org/openbmc/inventory/system/chassis/fan5", 
    "/org/openbmc/inventory/system/chassis/fan2", 
    "/org/openbmc/inventory/system/chassis/fan3", 
    "/org/openbmc/inventory/system/chassis/fan0", 
    "/org/openbmc/inventory/system/chassis/fan1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15", 
    "/org/openbmc/sensors/temperature/rtc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11", 
    "/org/openbmc/NetworkManager/Interface", 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10", 
    "/org/openbmc/inventory/system/chassis/motherboard/apss", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18", 
    "/org/openbmc/inventory/system/chassis/io_board", 
    "/org/openbmc/UserManager/User", 
    "/org/openbmc/watchdog/host0", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4", 
    "/org/openbmc/sensors", 
    "/org/openbmc/sensors/temperature/ambient", 
    "/org/openbmc/sensors/HSCB/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6", 
    "/org/openbmc/sensors/powercap/curr_cap", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1", 
    "/org/openbmc/inventory/system/chassis/motherboard", 
    "/org/openbmc/sensors/tach/fan3L", 
    "/org/openbmc/sensors/tach/fan3H", 
    "/org/openbmc/sensors/temperature/membuf7"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:45:49.858">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:45:49.858">${jsondata} = {u'data': [u'/org/openbmc/sensors/powercap/min_cap', u'/org/openbmc/control', u'/org/openbmc/sensors/host/powercap', u'/org/openbmc/UserManager/Group', u'/org/openbmc/inventory/system/chassis/io_board...</msg>
<status status="PASS" starttime="20161109 19:45:49.856" endtime="20161109 19:45:49.859"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${jsondata}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:49.859">Length is 3</msg>
<status status="PASS" starttime="20161109 19:45:49.859" endtime="20161109 19:45:49.860"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="Log FFDC">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:49.861" endtime="20161109 19:45:49.865"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:49.866" html="yes">Created directory '&lt;a href="file:///tmp/root/31414/obmc-robot/logs"&gt;/tmp/root/31414/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 19:45:49.866" endtime="20161109 19:45:49.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:45:49.868">File '/tmp/root/31414/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20161109 19:45:49.867" endtime="20161109 19:45:49.868"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:49.868">${exist} = False</msg>
<status status="PASS" starttime="20161109 19:45:49.867" endtime="20161109 19:45:49.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:49.872" html="yes">Created file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 19:45:49.871" endtime="20161109 19:45:49.872"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:49.869" endtime="20161109 19:45:49.872"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:49.873">${cur_time} = 2016-11-09 19:45:49:872491</msg>
<status status="PASS" starttime="20161109 19:45:49.872" endtime="20161109 19:45:49.873"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:49.873">${cur_time} = 20161109194549872491</msg>
<status status="PASS" starttime="20161109 19:45:49.873" endtime="20161109 19:45:49.873"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:49.873">${cur_time} = 20161109194549872491</msg>
<status status="PASS" starttime="20161109 19:45:49.872" endtime="20161109 19:45:49.873"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:49.874" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 19:45:49.874" endtime="20161109 19:45:49.874"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:49.865" endtime="20161109 19:45:49.874"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:49.860" endtime="20161109 19:45:49.874"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20161109 19:45:48.817" critical="yes" endtime="20161109 19:45:49.874"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161109 19:45:49.875">Delete All Sessions</msg>
<status status="PASS" starttime="20161109 19:45:49.875" endtime="20161109 19:45:49.875"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20161109 19:45:48.305" endtime="20161109 19:45:49.875"></status>
</suite>
<status status="PASS" starttime="20161109 19:45:48.304" endtime="20161109 19:45:49.878"></status>
</suite>
<suite id="s1-s2" name="Test Association" source="/tmp/root/31414/obmc-robot/tests/test_association.robot">
<kw type="setup" name="Suite Initialization Setup">
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:45:49.901">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161109 19:45:49.901" endtime="20161109 19:45:49.901"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:49.901">${has_host} = False</msg>
<status status="PASS" starttime="20161109 19:45:49.900" endtime="20161109 19:45:49.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:49.904" endtime="20161109 19:45:49.904"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:49.901" endtime="20161109 19:45:49.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:49.909">${port_num} = 22</msg>
<status status="PASS" starttime="20161109 19:45:49.908" endtime="20161109 19:45:49.909"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:49.909">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161109 19:45:49.909" endtime="20161109 19:45:49.909"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:49.910">${https_num} = 443</msg>
<status status="PASS" starttime="20161109 19:45:49.909" endtime="20161109 19:45:49.910"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:49.910">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161109 19:45:49.910" endtime="20161109 19:45:49.910"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:49.908" endtime="20161109 19:45:49.911"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:49.905" endtime="20161109 19:45:49.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:45:49.911">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161109 19:45:49.911" endtime="20161109 19:45:49.911"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:49.912">${has_port} = False</msg>
<status status="PASS" starttime="20161109 19:45:49.911" endtime="20161109 19:45:49.912"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:49.915" endtime="20161109 19:45:49.915"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:49.916" endtime="20161109 19:45:49.916"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:49.915" endtime="20161109 19:45:49.916"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:49.912" endtime="20161109 19:45:49.916"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:49.917">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 19:45:52.416">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161109 19:45:49.916" endtime="20161109 19:45:52.417"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:49.900" endtime="20161109 19:45:52.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:52.420">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status status="PASS" starttime="20161109 19:45:52.419" endtime="20161109 19:45:52.420"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:52.421">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:52.420" endtime="20161109 19:45:52.421"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:52.421" endtime="20161109 19:45:52.422"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:52.424">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:45:52.422" endtime="20161109 19:45:52.424"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:52.425">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:45:52.425" endtime="20161109 19:45:52.425"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:52.424" endtime="20161109 19:45:52.425"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:52.422" endtime="20161109 19:45:52.426"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:52.427">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:45:52.426" endtime="20161109 19:45:52.427"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:52.428">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:52.428" endtime="20161109 19:45:52.428"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:52.429">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:45:52.428" endtime="20161109 19:45:52.429"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:52.430">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:45:52.430" endtime="20161109 19:45:52.430"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:53.119">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:53.119">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:52.430" endtime="20161109 19:45:53.119"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:53.120">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:53.120" endtime="20161109 19:45:53.120"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:52.426" endtime="20161109 19:45:53.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:53.563">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:53.563">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:53.121" endtime="20161109 19:45:53.563"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:53.564">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:53.563" endtime="20161109 19:45:53.564"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:53.565">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:53.565" endtime="20161109 19:45:53.565"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:53.564" endtime="20161109 19:45:53.565"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:53.563" endtime="20161109 19:45:53.565"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:53.565">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:52.418" endtime="20161109 19:45:53.565"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:53.566">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:53.565" endtime="20161109 19:45:53.566"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:53.567">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" starttime="20161109 19:45:53.566" endtime="20161109 19:45:53.567"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:53.568">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:45:53.567" endtime="20161109 19:45:53.568"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:53.569">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:45:53.569" endtime="20161109 19:45:53.569"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:53.568" endtime="20161109 19:45:53.569"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:53.567" endtime="20161109 19:45:53.569"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:53.570">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:45:53.570" endtime="20161109 19:45:53.570"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:53.571">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:53.571" endtime="20161109 19:45:53.571"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:53.572">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:45:53.571" endtime="20161109 19:45:53.572"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:53.572">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:45:53.572" endtime="20161109 19:45:53.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:54.314">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:54.315">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:53.572" endtime="20161109 19:45:54.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:54.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:54.315" endtime="20161109 19:45:54.316"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:53.569" endtime="20161109 19:45:54.316"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:54.522">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161109 19:45:54.522">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:54.316" endtime="20161109 19:45:54.522"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:54.524">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:54.523" endtime="20161109 19:45:54.524"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:54.525">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:54.525" endtime="20161109 19:45:54.525"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:54.524" endtime="20161109 19:45:54.525"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:54.522" endtime="20161109 19:45:54.526"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:54.526">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:53.566" endtime="20161109 19:45:54.526"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:54.527">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:45:54.527">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:45:54.527">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:45:54.526" endtime="20161109 19:45:54.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:54.528">Length is 0</msg>
<status status="PASS" starttime="20161109 19:45:54.527" endtime="20161109 19:45:54.528"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:52.418" endtime="20161109 19:45:54.528"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:52.417" endtime="20161109 19:45:54.528"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:49.900" endtime="20161109 19:45:54.528"></status>
</kw>
<test id="s1-s2-t1" name="Create error log on single FRU">
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:54.532">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status status="PASS" starttime="20161109 19:45:54.531" endtime="20161109 19:45:54.532"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:54.533">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:54.532" endtime="20161109 19:45:54.533"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:54.533" endtime="20161109 19:45:54.534"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:54.536">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:45:54.535" endtime="20161109 19:45:54.536"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:54.538">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:45:54.537" endtime="20161109 19:45:54.538"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:54.536" endtime="20161109 19:45:54.538"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:54.534" endtime="20161109 19:45:54.538"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:54.539">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:45:54.539" endtime="20161109 19:45:54.540"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:54.540">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:54.540" endtime="20161109 19:45:54.540"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:54.541">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:45:54.540" endtime="20161109 19:45:54.541"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:54.541">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:45:54.541" endtime="20161109 19:45:54.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:55.236">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:55.236">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:54.542" endtime="20161109 19:45:55.237"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:55.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:55.237" endtime="20161109 19:45:55.238"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:54.538" endtime="20161109 19:45:55.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:55.597">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:55.597">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:55.238" endtime="20161109 19:45:55.597"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:55.599">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:55.598" endtime="20161109 19:45:55.599"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:55.601">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:55.600" endtime="20161109 19:45:55.601"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:55.599" endtime="20161109 19:45:55.601"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:55.597" endtime="20161109 19:45:55.601"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:55.602">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:54.531" endtime="20161109 19:45:55.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:55.602">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:55.602" endtime="20161109 19:45:55.603"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:55.604">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" starttime="20161109 19:45:55.604" endtime="20161109 19:45:55.604"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:55.607">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:45:55.606" endtime="20161109 19:45:55.607"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:55.609">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:45:55.608" endtime="20161109 19:45:55.609"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:55.608" endtime="20161109 19:45:55.609"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:55.604" endtime="20161109 19:45:55.609"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:55.610">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:45:55.610" endtime="20161109 19:45:55.610"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:55.611">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:55.611" endtime="20161109 19:45:55.611"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:55.611">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:45:55.611" endtime="20161109 19:45:55.611"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:55.612">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:45:55.612" endtime="20161109 19:45:55.612"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.162">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:56.162">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:55.612" endtime="20161109 19:45:56.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:56.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:56.162" endtime="20161109 19:45:56.163"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:55.609" endtime="20161109 19:45:56.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.221">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161109 19:45:56.221">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:56.163" endtime="20161109 19:45:56.221"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.223">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:56.222" endtime="20161109 19:45:56.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:56.224">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:56.224" endtime="20161109 19:45:56.224"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:56.223" endtime="20161109 19:45:56.225"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:56.221" endtime="20161109 19:45:56.225"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:56.225">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:55.603" endtime="20161109 19:45:56.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.226">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:45:56.226">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:45:56.227">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:45:56.226" endtime="20161109 19:45:56.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:56.228">Length is 0</msg>
<status status="PASS" starttime="20161109 19:45:56.227" endtime="20161109 19:45:56.228"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:54.530" endtime="20161109 19:45:56.228"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:54.530" endtime="20161109 19:45:56.228"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.229">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161109 19:45:56.378">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 19:45:56.379">${elog} = q 215</msg>
<msg level="INFO" timestamp="20161109 19:45:56.379">${stderr} = </msg>
<status status="PASS" starttime="20161109 19:45:56.228" endtime="20161109 19:45:56.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:56.379">Length is 0</msg>
<status status="PASS" starttime="20161109 19:45:56.379" endtime="20161109 19:45:56.380"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.382">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" starttime="20161109 19:45:56.381" endtime="20161109 19:45:56.382"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.383">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:45:56.383" endtime="20161109 19:45:56.384"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:56.385">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:45:56.384" endtime="20161109 19:45:56.385"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:56.384" endtime="20161109 19:45:56.385"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:56.382" endtime="20161109 19:45:56.385"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:56.386">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:45:56.386" endtime="20161109 19:45:56.387"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.387">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:56.387" endtime="20161109 19:45:56.387"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.388">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:45:56.388" endtime="20161109 19:45:56.388"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.389">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:45:56.388" endtime="20161109 19:45:56.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.933">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:56.933">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:56.389" endtime="20161109 19:45:56.933"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:56.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:56.933" endtime="20161109 19:45:56.934"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:56.385" endtime="20161109 19:45:56.934"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.996">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161109 19:45:56.996">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:56.934" endtime="20161109 19:45:56.996"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:56.997">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/215"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:56.997" endtime="20161109 19:45:56.997"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:56.998">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/215"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:56.998" endtime="20161109 19:45:56.998"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:56.997" endtime="20161109 19:45:56.999"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:56.996" endtime="20161109 19:45:56.999"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:56.999">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:56.380" endtime="20161109 19:45:56.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:56.999">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:56.999" endtime="20161109 19:45:56.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.000">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/215"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:45:57.001">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:45:57.001">${jsondata} = {u'data': [u'/org/openbmc/records/events/215'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:45:57.000" endtime="20161109 19:45:57.001"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:57.001">${log_list} = [u'/org/openbmc/records/events/215']</msg>
<status status="PASS" starttime="20161109 19:45:56.380" endtime="20161109 19:45:57.001"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:57.001" endtime="20161109 19:45:57.002"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.002">${association_uri} = /org/openbmc/records/events/215/fru</msg>
<status status="PASS" starttime="20161109 19:45:57.002" endtime="20161109 19:45:57.002"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.004">${base_uri} = /org/openbmc/records/events/215/fru/attr/endpoints</msg>
<status status="PASS" starttime="20161109 19:45:57.003" endtime="20161109 19:45:57.004"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.005">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/215/fru/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:45:57.005" endtime="20161109 19:45:57.005"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:57.006">URI:https://9.3.23.30:443/org/openbmc/records/events/215/fru/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:45:57.006" endtime="20161109 19:45:57.006"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:57.005" endtime="20161109 19:45:57.006"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:57.004" endtime="20161109 19:45:57.006"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:57.007">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:45:57.007" endtime="20161109 19:45:57.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.008">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:57.008" endtime="20161109 19:45:57.008"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.008">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:45:57.008" endtime="20161109 19:45:57.008"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.009">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:45:57.009" endtime="20161109 19:45:57.009"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.648">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:57.648">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:57.009" endtime="20161109 19:45:57.648"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:57.649">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:57.648" endtime="20161109 19:45:57.649"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:57.006" endtime="20161109 19:45:57.650"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.781">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/215/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161109 19:45:57.781">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:57.650" endtime="20161109 19:45:57.781"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.782">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:57.781" endtime="20161109 19:45:57.782"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:57.783">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:57.782" endtime="20161109 19:45:57.783"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:57.782" endtime="20161109 19:45:57.783"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:57.781" endtime="20161109 19:45:57.783"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:57.783">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:57.003" endtime="20161109 19:45:57.783"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.784">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:45:57.784">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:45:57.784">${content} = {u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:45:57.783" endtime="20161109 19:45:57.784"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:57.784">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status status="PASS" starttime="20161109 19:45:57.002" endtime="20161109 19:45:57.784"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:57.784" endtime="20161109 19:45:57.784"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.786">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status status="PASS" starttime="20161109 19:45:57.785" endtime="20161109 19:45:57.786"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.787">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:45:57.786" endtime="20161109 19:45:57.787"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:57.788">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:45:57.788" endtime="20161109 19:45:57.788"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:57.787" endtime="20161109 19:45:57.788"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:57.786" endtime="20161109 19:45:57.788"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:57.789">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:45:57.789" endtime="20161109 19:45:57.789"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.790">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:57.789" endtime="20161109 19:45:57.790"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.790">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:45:57.790" endtime="20161109 19:45:57.790"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:57.791">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:45:57.791" endtime="20161109 19:45:57.791"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.437">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:58.437">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:57.791" endtime="20161109 19:45:58.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:58.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:58.437" endtime="20161109 19:45:58.438"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:57.788" endtime="20161109 19:45:58.438"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.533">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161109 19:45:58.534">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:58.438" endtime="20161109 19:45:58.534"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.535">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/215"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:58.535" endtime="20161109 19:45:58.536"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:58.537">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/215"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:58.536" endtime="20161109 19:45:58.537"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:58.536" endtime="20161109 19:45:58.537"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:58.534" endtime="20161109 19:45:58.537"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:58.538">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:57.785" endtime="20161109 19:45:58.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.538">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/215"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:45:58.538">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:45:58.539">${content} = {u'data': [u'/org/openbmc/records/events/215'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:45:58.538" endtime="20161109 19:45:58.539"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:58.539">${dimm1_event} = [u'/org/openbmc/records/events/215']</msg>
<status status="PASS" starttime="20161109 19:45:57.785" endtime="20161109 19:45:58.539"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:58.540" endtime="20161109 19:45:58.540"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="Log FFDC">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:58.541" endtime="20161109 19:45:58.546"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:58.547" html="yes">Directory '&lt;a href="file:///tmp/root/31414/obmc-robot/logs"&gt;/tmp/root/31414/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161109 19:45:58.547" endtime="20161109 19:45:58.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:58.548" html="yes">File '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161109 19:45:58.548" endtime="20161109 19:45:58.549"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:58.549">${exist} = True</msg>
<status status="PASS" starttime="20161109 19:45:58.548" endtime="20161109 19:45:58.549"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:58.549" endtime="20161109 19:45:58.552"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.553">${cur_time} = 2016-11-09 19:45:58:552445</msg>
<status status="PASS" starttime="20161109 19:45:58.552" endtime="20161109 19:45:58.553"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.553">${cur_time} = 20161109194558552445</msg>
<status status="PASS" starttime="20161109 19:45:58.553" endtime="20161109 19:45:58.553"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:58.554">${cur_time} = 20161109194558552445</msg>
<status status="PASS" starttime="20161109 19:45:58.552" endtime="20161109 19:45:58.554"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:58.554" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 19:45:58.554" endtime="20161109 19:45:58.554"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:58.546" endtime="20161109 19:45:58.555"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:58.541" endtime="20161109 19:45:58.555"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status status="PASS" starttime="20161109 19:45:54.529" critical="yes" endtime="20161109 19:45:58.555"></status>
</test>
<test id="s1-s2-t2" name="Delete error log">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.556">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:45:58.556" endtime="20161109 19:45:58.556"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.557">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status status="PASS" starttime="20161109 19:45:58.557" endtime="20161109 19:45:58.557"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.558">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:58.557" endtime="20161109 19:45:58.558"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:58.558" endtime="20161109 19:45:58.558"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.559">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:45:58.559" endtime="20161109 19:45:58.559"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:58.560">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:45:58.560" endtime="20161109 19:45:58.560"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:58.560" endtime="20161109 19:45:58.560"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:58.558" endtime="20161109 19:45:58.560"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:58.561">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:45:58.561" endtime="20161109 19:45:58.562"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.562">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:58.562" endtime="20161109 19:45:58.562"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.563">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:45:58.562" endtime="20161109 19:45:58.563"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:58.563">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:45:58.563" endtime="20161109 19:45:58.563"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.124">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:59.124">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:58.563" endtime="20161109 19:45:59.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:59.124">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:59.124" endtime="20161109 19:45:59.125"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:58.561" endtime="20161109 19:45:59.125"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.476">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:59.476">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:59.125" endtime="20161109 19:45:59.476"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.477">${msg} = Response code:200, Content:{
  "data": 216, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:59.477" endtime="20161109 19:45:59.477"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:59.478">Response code:200, Content:{
  "data": 216, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:45:59.478" endtime="20161109 19:45:59.478"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:59.477" endtime="20161109 19:45:59.478"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:59.476" endtime="20161109 19:45:59.478"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:59.478">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:58.556" endtime="20161109 19:45:59.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:59.479">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:59.479" endtime="20161109 19:45:59.479"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.480">To JSON using : content={
  "data": 216, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:45:59.480">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:45:59.480">${json} = {u'data': 216, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:45:59.479" endtime="20161109 19:45:59.480"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.480">${LOGID} = 216</msg>
<status status="PASS" starttime="20161109 19:45:59.480" endtime="20161109 19:45:59.480"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.481">${uri} = /org/openbmc/records/events/216</msg>
<status status="PASS" starttime="20161109 19:45:59.480" endtime="20161109 19:45:59.481"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:45:59.481">${log_uri1} = /org/openbmc/records/events/216</msg>
<status status="PASS" starttime="20161109 19:45:58.555" endtime="20161109 19:45:59.481"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.481">${association_uri1} = /org/openbmc/records/events/216/fru</msg>
<status status="PASS" starttime="20161109 19:45:59.481" endtime="20161109 19:45:59.482"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.483">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:45:59.482" endtime="20161109 19:45:59.483"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.484">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status status="PASS" starttime="20161109 19:45:59.484" endtime="20161109 19:45:59.484"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.485">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:59.484" endtime="20161109 19:45:59.485"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:45:59.485" endtime="20161109 19:45:59.485"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.487">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:45:59.486" endtime="20161109 19:45:59.487"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:59.488">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:45:59.488" endtime="20161109 19:45:59.488"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:59.487" endtime="20161109 19:45:59.488"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:59.486" endtime="20161109 19:45:59.488"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:59.489">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:45:59.489" endtime="20161109 19:45:59.490"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.490">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:45:59.490" endtime="20161109 19:45:59.490"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.491">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:45:59.490" endtime="20161109 19:45:59.491"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.491">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:45:59.491" endtime="20161109 19:45:59.491"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:45:59.863">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:45:59.864">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:59.491" endtime="20161109 19:45:59.864"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:45:59.864">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:45:59.864" endtime="20161109 19:45:59.864"></status>
</kw>
<status status="PASS" starttime="20161109 19:45:59.488" endtime="20161109 19:45:59.864"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.149">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:00.150">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:59.865" endtime="20161109 19:46:00.150"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.152">${msg} = Response code:200, Content:{
  "data": 217, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:00.151" endtime="20161109 19:46:00.152"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:00.153">Response code:200, Content:{
  "data": 217, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:00.152" endtime="20161109 19:46:00.153"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:00.152" endtime="20161109 19:46:00.153"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:00.150" endtime="20161109 19:46:00.153"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:00.154">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:45:59.483" endtime="20161109 19:46:00.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:00.154">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:00.154" endtime="20161109 19:46:00.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.155">To JSON using : content={
  "data": 217, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:00.155">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:00.155">${json} = {u'data': 217, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:00.155" endtime="20161109 19:46:00.155"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.156">${LOGID} = 217</msg>
<status status="PASS" starttime="20161109 19:46:00.156" endtime="20161109 19:46:00.156"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.157">${uri} = /org/openbmc/records/events/217</msg>
<status status="PASS" starttime="20161109 19:46:00.157" endtime="20161109 19:46:00.157"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:00.157">${log_uri2} = /org/openbmc/records/events/217</msg>
<status status="PASS" starttime="20161109 19:45:59.482" endtime="20161109 19:46:00.157"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.158">${del_uri} = /org/openbmc/records/events/216/action/delete</msg>
<status status="PASS" starttime="20161109 19:46:00.158" endtime="20161109 19:46:00.158"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.160">${base_uri} = /org/openbmc/records/events/216/action/delete</msg>
<status status="PASS" starttime="20161109 19:46:00.159" endtime="20161109 19:46:00.160"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:00.160" endtime="20161109 19:46:00.160"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:00.160" endtime="20161109 19:46:00.161"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.162">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/216/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:00.161" endtime="20161109 19:46:00.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:00.163">URI:https://9.3.23.30:443/org/openbmc/records/events/216/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:00.163" endtime="20161109 19:46:00.163"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:00.162" endtime="20161109 19:46:00.163"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:00.161" endtime="20161109 19:46:00.163"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:00.164">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:00.164" endtime="20161109 19:46:00.164"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.165">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:00.165" endtime="20161109 19:46:00.165"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.165">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:00.165" endtime="20161109 19:46:00.165"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.166">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:00.166" endtime="20161109 19:46:00.166"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:00.569">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:00.166" endtime="20161109 19:46:00.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:00.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:00.569" endtime="20161109 19:46:00.569"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:00.163" endtime="20161109 19:46:00.570"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.853">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/216/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:00.853">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:00.570" endtime="20161109 19:46:00.853"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.854">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:00.853" endtime="20161109 19:46:00.854"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:00.855">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:00.855" endtime="20161109 19:46:00.855"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:00.854" endtime="20161109 19:46:00.855"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:00.853" endtime="20161109 19:46:00.855"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:00.855">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:00.158" endtime="20161109 19:46:00.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:00.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:00.856" endtime="20161109 19:46:00.856"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.857">${base_uri} = /org/openbmc/records/events/216/fru</msg>
<status status="PASS" starttime="20161109 19:46:00.856" endtime="20161109 19:46:00.857"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.859">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/216/fru, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:46:00.857" endtime="20161109 19:46:00.859"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:00.860">URI:https://9.3.23.30:443/org/openbmc/records/events/216/fru, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:46:00.860" endtime="20161109 19:46:00.860"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:00.859" endtime="20161109 19:46:00.860"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:00.857" endtime="20161109 19:46:00.860"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:00.861">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:00.861" endtime="20161109 19:46:00.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.862">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:00.862" endtime="20161109 19:46:00.862"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.862">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:00.862" endtime="20161109 19:46:00.863"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:00.863">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:00.863" endtime="20161109 19:46:00.863"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:01.441">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:01.441">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:00.863" endtime="20161109 19:46:01.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:01.442">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:01.442" endtime="20161109 19:46:01.443"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:00.861" endtime="20161109 19:46:01.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:01.495">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/216/fru, headers=None </msg>
<msg level="INFO" timestamp="20161109 19:46:01.495">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:01.443" endtime="20161109 19:46:01.495"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:01.497">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/216/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status status="PASS" starttime="20161109 19:46:01.496" endtime="20161109 19:46:01.497"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:01.498">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/216/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status status="PASS" starttime="20161109 19:46:01.498" endtime="20161109 19:46:01.498"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:01.497" endtime="20161109 19:46:01.498"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:01.495" endtime="20161109 19:46:01.498"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:01.499">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:00.856" endtime="20161109 19:46:01.499"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:01.500">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/216/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:01.500">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:01.500">${jsondata} = {u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/216/fru'}, u'message': u'404 Not Found', u'status': u'error'}</msg>
<status status="PASS" starttime="20161109 19:46:01.499" endtime="20161109 19:46:01.500"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:01.500" endtime="20161109 19:46:01.501"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:01.503">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status status="PASS" starttime="20161109 19:46:01.502" endtime="20161109 19:46:01.503"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:01.505">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:46:01.504" endtime="20161109 19:46:01.505"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:01.506">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:46:01.506" endtime="20161109 19:46:01.506"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:01.505" endtime="20161109 19:46:01.506"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:01.503" endtime="20161109 19:46:01.507"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:01.508">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:01.507" endtime="20161109 19:46:01.508"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:01.509">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:01.509" endtime="20161109 19:46:01.509"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:01.510">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:01.509" endtime="20161109 19:46:01.510"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:01.510">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:01.510" endtime="20161109 19:46:01.510"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:01.994">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:01.994">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:01.510" endtime="20161109 19:46:01.994"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:01.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:01.994" endtime="20161109 19:46:01.995"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:01.507" endtime="20161109 19:46:01.995"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:02.074">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161109 19:46:02.074">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:01.995" endtime="20161109 19:46:02.074"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:02.075">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/217"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:02.075" endtime="20161109 19:46:02.075"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:02.076">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/217"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:02.076" endtime="20161109 19:46:02.076"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:02.076" endtime="20161109 19:46:02.076"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:02.074" endtime="20161109 19:46:02.076"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:02.077">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:01.501" endtime="20161109 19:46:02.077"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:02.077">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/217"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:02.077">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:02.077">${content} = {u'data': [u'/org/openbmc/records/events/217'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:02.077" endtime="20161109 19:46:02.077"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:02.078">${dimm3_event} = [u'/org/openbmc/records/events/217']</msg>
<status status="PASS" starttime="20161109 19:46:01.501" endtime="20161109 19:46:02.078"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:02.078" endtime="20161109 19:46:02.078"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:02.080">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status status="PASS" starttime="20161109 19:46:02.079" endtime="20161109 19:46:02.080"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:02.081">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:46:02.080" endtime="20161109 19:46:02.081"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:02.082">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:46:02.082" endtime="20161109 19:46:02.082"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:02.081" endtime="20161109 19:46:02.082"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:02.080" endtime="20161109 19:46:02.082"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:02.083">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:02.083" endtime="20161109 19:46:02.083"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:02.084">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:02.083" endtime="20161109 19:46:02.084"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:02.084">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:02.084" endtime="20161109 19:46:02.084"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:02.085">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:02.084" endtime="20161109 19:46:02.085"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:02.722">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:02.722">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:02.085" endtime="20161109 19:46:02.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:02.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:02.723" endtime="20161109 19:46:02.724"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:02.082" endtime="20161109 19:46:02.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:03.008">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161109 19:46:03.009">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:02.724" endtime="20161109 19:46:03.009"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:03.011">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/217"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:03.010" endtime="20161109 19:46:03.011"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:03.013">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/217"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:03.012" endtime="20161109 19:46:03.013"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.011" endtime="20161109 19:46:03.013"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.009" endtime="20161109 19:46:03.013"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:03.013">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:02.079" endtime="20161109 19:46:03.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:03.015">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/217"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:03.015">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:03.015">${content} = {u'data': [u'/org/openbmc/records/events/217'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:03.014" endtime="20161109 19:46:03.015"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:03.015">${dimm2_event} = [u'/org/openbmc/records/events/217']</msg>
<status status="PASS" starttime="20161109 19:46:02.078" endtime="20161109 19:46:03.016"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:03.016" endtime="20161109 19:46:03.016"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="Log FFDC">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:03.017" endtime="20161109 19:46:03.021"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:03.022" html="yes">Directory '&lt;a href="file:///tmp/root/31414/obmc-robot/logs"&gt;/tmp/root/31414/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161109 19:46:03.021" endtime="20161109 19:46:03.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:03.022" html="yes">File '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161109 19:46:03.022" endtime="20161109 19:46:03.022"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:03.023">${exist} = True</msg>
<status status="PASS" starttime="20161109 19:46:03.022" endtime="20161109 19:46:03.023"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:03.023" endtime="20161109 19:46:03.025"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:03.026">${cur_time} = 2016-11-09 19:46:03:025985</msg>
<status status="PASS" starttime="20161109 19:46:03.026" endtime="20161109 19:46:03.026"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:03.027">${cur_time} = 20161109194603025985</msg>
<status status="PASS" starttime="20161109 19:46:03.026" endtime="20161109 19:46:03.027"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:03.027">${cur_time} = 20161109194603025985</msg>
<status status="PASS" starttime="20161109 19:46:03.025" endtime="20161109 19:46:03.027"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:03.028" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 19:46:03.027" endtime="20161109 19:46:03.028"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.021" endtime="20161109 19:46:03.028"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.017" endtime="20161109 19:46:03.028"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status status="PASS" starttime="20161109 19:45:58.555" critical="yes" endtime="20161109 19:46:03.028"></status>
</test>
<kw type="teardown" library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20161109 19:46:03.029" endtime="20161109 19:46:03.037"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status status="PASS" starttime="20161109 19:45:49.879" endtime="20161109 19:46:03.037"></status>
</suite>
<suite id="s1-s3" name="Test Basic Poweron" source="/tmp/root/31414/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s3-t1" name="power on test">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:46:03.068">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161109 19:46:03.068" endtime="20161109 19:46:03.068"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:03.068">${has_host} = False</msg>
<status status="PASS" starttime="20161109 19:46:03.068" endtime="20161109 19:46:03.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:03.071" endtime="20161109 19:46:03.072"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.069" endtime="20161109 19:46:03.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:03.075">${port_num} = 22</msg>
<status status="PASS" starttime="20161109 19:46:03.075" endtime="20161109 19:46:03.075"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:03.076">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161109 19:46:03.075" endtime="20161109 19:46:03.076"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:03.076">${https_num} = 443</msg>
<status status="PASS" starttime="20161109 19:46:03.076" endtime="20161109 19:46:03.076"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:03.077">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161109 19:46:03.076" endtime="20161109 19:46:03.077"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.075" endtime="20161109 19:46:03.077"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.072" endtime="20161109 19:46:03.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:46:03.078">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161109 19:46:03.078" endtime="20161109 19:46:03.078"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:03.078">${has_port} = False</msg>
<status status="PASS" starttime="20161109 19:46:03.077" endtime="20161109 19:46:03.078"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:03.082" endtime="20161109 19:46:03.083"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:03.083" endtime="20161109 19:46:03.083"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.082" endtime="20161109 19:46:03.083"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.078" endtime="20161109 19:46:03.083"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:03.084">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 19:46:06.531">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161109 19:46:03.083" endtime="20161109 19:46:06.531"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.067" endtime="20161109 19:46:06.532"></status>
</kw>
<kw library="utils" name="Get Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:06.534">${cur_time} = 20161109194606533286</msg>
<status status="PASS" starttime="20161109 19:46:06.533" endtime="20161109 19:46:06.534"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:06.534">${cur_time} = 20161109194606533286</msg>
<status status="PASS" starttime="20161109 19:46:06.532" endtime="20161109 19:46:06.534"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:06.539">${LOG_TIME} = 20161109194606533286</msg>
<status status="PASS" starttime="20161109 19:46:06.534" endtime="20161109 19:46:06.539"></status>
</kw>
<kw library="SSHLibrary" name="Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:06.540">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161109194606533286_$$'.</msg>
<status status="PASS" starttime="20161109 19:46:06.539" endtime="20161109 19:46:06.548"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:03.067" endtime="20161109 19:46:06.548"></status>
</kw>
<kw library="poweroffs" name="BMC Power Off">
<doc>Powers off the system and makes sure that all states are</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:46:06.552">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161109 19:46:06.551" endtime="20161109 19:46:06.552"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:06.552">${has_host} = False</msg>
<status status="PASS" starttime="20161109 19:46:06.551" endtime="20161109 19:46:06.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:06.558" endtime="20161109 19:46:06.558"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:06.553" endtime="20161109 19:46:06.558"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:06.564">${port_num} = 22</msg>
<status status="PASS" starttime="20161109 19:46:06.564" endtime="20161109 19:46:06.564"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:06.565">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161109 19:46:06.564" endtime="20161109 19:46:06.565"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:06.565">${https_num} = 443</msg>
<status status="PASS" starttime="20161109 19:46:06.565" endtime="20161109 19:46:06.565"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:06.566">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161109 19:46:06.566" endtime="20161109 19:46:06.566"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:06.563" endtime="20161109 19:46:06.566"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:06.559" endtime="20161109 19:46:06.567"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:46:06.568">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161109 19:46:06.567" endtime="20161109 19:46:06.568"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:06.568">${has_port} = False</msg>
<status status="PASS" starttime="20161109 19:46:06.567" endtime="20161109 19:46:06.568"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:06.573" endtime="20161109 19:46:06.573"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:06.574" endtime="20161109 19:46:06.574"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:06.573" endtime="20161109 19:46:06.574"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:06.568" endtime="20161109 19:46:06.574"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:06.575">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 19:46:09.459">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161109 19:46:06.574" endtime="20161109 19:46:09.459"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:06.549" endtime="20161109 19:46:09.460"></status>
</kw>
<kw library="utils" name="Initiate Power Off">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:09.461">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:46:09.461" endtime="20161109 19:46:09.461"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:09.462">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:46:09.462" endtime="20161109 19:46:09.462"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:09.464">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161109 19:46:09.463" endtime="20161109 19:46:09.464"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:09.466">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" starttime="20161109 19:46:09.465" endtime="20161109 19:46:09.466"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:09.467">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:09.467" endtime="20161109 19:46:09.467"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:09.468" endtime="20161109 19:46:09.468"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:09.470">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:09.470" endtime="20161109 19:46:09.470"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:09.471">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:09.471" endtime="20161109 19:46:09.471"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:09.470" endtime="20161109 19:46:09.471"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:09.469" endtime="20161109 19:46:09.471"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:09.472">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:09.472" endtime="20161109 19:46:09.473"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:09.473">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:09.473" endtime="20161109 19:46:09.473"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:09.474">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:09.473" endtime="20161109 19:46:09.474"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:09.474">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:09.474" endtime="20161109 19:46:09.474"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:09.820">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:09.820">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:09.475" endtime="20161109 19:46:09.821"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:09.821">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:09.821" endtime="20161109 19:46:09.821"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:09.472" endtime="20161109 19:46:09.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.098">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:10.098">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:09.822" endtime="20161109 19:46:10.098"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.099">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:10.099" endtime="20161109 19:46:10.099"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:10.100">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:10.100" endtime="20161109 19:46:10.101"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:10.100" endtime="20161109 19:46:10.101"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:10.098" endtime="20161109 19:46:10.101"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:10.101">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:09.464" endtime="20161109 19:46:10.101"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:10.101">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:09.462" endtime="20161109 19:46:10.101"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:10.102">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:10.101" endtime="20161109 19:46:10.102"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw library="utils" name="Is Power Off">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.103">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:46:10.103" endtime="20161109 19:46:10.103"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.104">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:46:10.103" endtime="20161109 19:46:10.104"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.105">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161109 19:46:10.104" endtime="20161109 19:46:10.105"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.106">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161109 19:46:10.106" endtime="20161109 19:46:10.106"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.106">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:10.106" endtime="20161109 19:46:10.106"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:10.107" endtime="20161109 19:46:10.107"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.108">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:10.108" endtime="20161109 19:46:10.108"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:10.109">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:10.109" endtime="20161109 19:46:10.109"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:10.108" endtime="20161109 19:46:10.109"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:10.107" endtime="20161109 19:46:10.109"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:10.110">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:10.110" endtime="20161109 19:46:10.111"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.111">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:10.111" endtime="20161109 19:46:10.111"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.112">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:10.112" endtime="20161109 19:46:10.112"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:10.112">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:10.112" endtime="20161109 19:46:10.112"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.380">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:12.380">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:10.113" endtime="20161109 19:46:12.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:12.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:12.381" endtime="20161109 19:46:12.381"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:10.110" endtime="20161109 19:46:12.382"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.844">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:12.844">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:12.382" endtime="20161109 19:46:12.845"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.847">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:12.846" endtime="20161109 19:46:12.847"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:12.848">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:12.848" endtime="20161109 19:46:12.848"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:12.847" endtime="20161109 19:46:12.848"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:12.845" endtime="20161109 19:46:12.848"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:12.849">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:10.105" endtime="20161109 19:46:12.849"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:12.849">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:10.104" endtime="20161109 19:46:12.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:12.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:12.850" endtime="20161109 19:46:12.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.851">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:12.851">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:12.851">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:12.851" endtime="20161109 19:46:12.851"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:12.852">${state} = 0</msg>
<status status="PASS" starttime="20161109 19:46:10.103" endtime="20161109 19:46:12.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:12.852" endtime="20161109 19:46:12.853"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:10.102" endtime="20161109 19:46:12.853"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:10.102" endtime="20161109 19:46:12.853"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:09.460" endtime="20161109 19:46:12.853"></status>
</kw>
<kw library="poweroffs" name="Check Power Off States">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.855">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:46:12.854" endtime="20161109 19:46:12.855"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.856">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:46:12.855" endtime="20161109 19:46:12.856"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.858">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161109 19:46:12.857" endtime="20161109 19:46:12.858"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.860">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161109 19:46:12.859" endtime="20161109 19:46:12.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.860">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:12.860" endtime="20161109 19:46:12.860"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:12.861" endtime="20161109 19:46:12.861"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.864">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:12.863" endtime="20161109 19:46:12.864"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:12.864">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:12.864" endtime="20161109 19:46:12.865"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:12.864" endtime="20161109 19:46:12.865"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:12.861" endtime="20161109 19:46:12.865"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:12.866">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:12.865" endtime="20161109 19:46:12.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.867">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:12.866" endtime="20161109 19:46:12.867"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.867">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:12.867" endtime="20161109 19:46:12.867"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:12.868">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:12.867" endtime="20161109 19:46:12.868"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:13.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:13.794">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:12.868" endtime="20161109 19:46:13.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:13.795">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:13.794" endtime="20161109 19:46:13.795"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:12.865" endtime="20161109 19:46:13.795"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:14.308">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:14.309">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:13.796" endtime="20161109 19:46:14.309"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:14.311">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:14.310" endtime="20161109 19:46:14.311"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:14.312">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:14.312" endtime="20161109 19:46:14.312"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:14.311" endtime="20161109 19:46:14.312"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:14.309" endtime="20161109 19:46:14.312"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:14.313">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:12.858" endtime="20161109 19:46:14.313"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:14.313">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:12.856" endtime="20161109 19:46:14.313"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:14.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:14.313" endtime="20161109 19:46:14.314"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:14.314">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:14.314">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:14.315">${content} = {u'data': 0, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:14.314" endtime="20161109 19:46:14.315"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:14.315">${power_state} = 0</msg>
<status status="PASS" starttime="20161109 19:46:12.854" endtime="20161109 19:46:14.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:14.315" endtime="20161109 19:46:14.316"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:14.316" endtime="20161109 19:46:14.317"></status>
</kw>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>/org/openbmc/sensors/host/BootProgress</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:14.320">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20161109 19:46:14.319" endtime="20161109 19:46:14.320"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:14.321">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:46:14.320" endtime="20161109 19:46:14.321"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:14.322">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 19:46:14.322" endtime="20161109 19:46:14.322"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:14.321" endtime="20161109 19:46:14.322"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:14.320" endtime="20161109 19:46:14.322"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:14.323">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:14.323" endtime="20161109 19:46:14.323"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:14.324">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:14.324" endtime="20161109 19:46:14.324"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:14.324">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:14.324" endtime="20161109 19:46:14.324"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:14.325">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:14.325" endtime="20161109 19:46:14.325"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.096">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:15.097">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:14.325" endtime="20161109 19:46:15.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:15.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:15.097" endtime="20161109 19:46:15.097"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:14.322" endtime="20161109 19:46:15.098"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.176">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161109 19:46:15.176">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:15.098" endtime="20161109 19:46:15.176"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.178">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:15.177" endtime="20161109 19:46:15.178"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:15.180">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:15.180" endtime="20161109 19:46:15.180"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:15.179" endtime="20161109 19:46:15.180"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:15.176" endtime="20161109 19:46:15.181"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:15.181">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:14.318" endtime="20161109 19:46:15.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.182">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:15.182">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:15.182">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:15.181" endtime="20161109 19:46:15.182"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:15.183">${state} = Off</msg>
<status status="PASS" starttime="20161109 19:46:14.317" endtime="20161109 19:46:15.183"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:15.183">${boot_progress} = Off</msg>
<status status="PASS" starttime="20161109 19:46:14.317" endtime="20161109 19:46:15.183"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:15.183" endtime="20161109 19:46:15.184"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:15.184" endtime="20161109 19:46:15.184"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.185">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" starttime="20161109 19:46:15.185" endtime="20161109 19:46:15.185"></status>
</kw>
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.186">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:46:15.186" endtime="20161109 19:46:15.186"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.188">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:46:15.187" endtime="20161109 19:46:15.188"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.190">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:46:15.189" endtime="20161109 19:46:15.190"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.191">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:46:15.191" endtime="20161109 19:46:15.191"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.191">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:15.191" endtime="20161109 19:46:15.191"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:15.192" endtime="20161109 19:46:15.192"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.194">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:15.193" endtime="20161109 19:46:15.194"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:15.194">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:15.194" endtime="20161109 19:46:15.194"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:15.194" endtime="20161109 19:46:15.195"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:15.192" endtime="20161109 19:46:15.195"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:15.195">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:15.195" endtime="20161109 19:46:15.196"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.196">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:15.196" endtime="20161109 19:46:15.196"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.197">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:15.197" endtime="20161109 19:46:15.197"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.197">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:15.197" endtime="20161109 19:46:15.197"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:15.827">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:15.827">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:15.198" endtime="20161109 19:46:15.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:15.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:15.827" endtime="20161109 19:46:15.828"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:15.195" endtime="20161109 19:46:15.828"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:16.342">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:16.342">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:15.828" endtime="20161109 19:46:16.342"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:16.345">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:16.344" endtime="20161109 19:46:16.345"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:16.346">Response code:200, Content:{
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:16.346" endtime="20161109 19:46:16.347"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:16.345" endtime="20161109 19:46:16.347"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:16.343" endtime="20161109 19:46:16.347"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:16.347">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:15.190" endtime="20161109 19:46:16.347"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:16.348">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:15.188" endtime="20161109 19:46:16.348"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:16.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:16.348" endtime="20161109 19:46:16.349"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:16.350">To JSON using : content={
  "data": "HOST_POWERED_OFF", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:16.350">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:16.350">${content} = {u'data': u'HOST_POWERED_OFF', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:16.349" endtime="20161109 19:46:16.350"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:16.351">${bmc_state} = HOST_POWERED_OFF</msg>
<status status="PASS" starttime="20161109 19:46:15.186" endtime="20161109 19:46:16.351"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:16.351" endtime="20161109 19:46:16.351"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:16.352" endtime="20161109 19:46:16.352"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:12.853" endtime="20161109 19:46:16.352"></status>
</kw>
<kw library="SSHLibrary" name="Close Connection">
<doc>Closes the current connection.</doc>
<status status="PASS" starttime="20161109 19:46:16.353" endtime="20161109 19:46:16.417"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:06.549" endtime="20161109 19:46:16.417"></status>
</kw>
<kw library="powerons" name="BMC Power On">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:16.419">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status status="PASS" starttime="20161109 19:46:16.419" endtime="20161109 19:46:16.420"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:46:16.423">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161109 19:46:16.422" endtime="20161109 19:46:16.423"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:16.423">${has_host} = False</msg>
<status status="PASS" starttime="20161109 19:46:16.421" endtime="20161109 19:46:16.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:16.430" endtime="20161109 19:46:16.431"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:16.424" endtime="20161109 19:46:16.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:16.436">${port_num} = 22</msg>
<status status="PASS" starttime="20161109 19:46:16.435" endtime="20161109 19:46:16.436"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:16.436">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161109 19:46:16.436" endtime="20161109 19:46:16.436"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:16.437">${https_num} = 443</msg>
<status status="PASS" starttime="20161109 19:46:16.437" endtime="20161109 19:46:16.437"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:16.438">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161109 19:46:16.437" endtime="20161109 19:46:16.438"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:16.435" endtime="20161109 19:46:16.439"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:16.431" endtime="20161109 19:46:16.439"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:46:16.440">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161109 19:46:16.439" endtime="20161109 19:46:16.440"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:16.440">${has_port} = False</msg>
<status status="PASS" starttime="20161109 19:46:16.439" endtime="20161109 19:46:16.440"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:16.445" endtime="20161109 19:46:16.446"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:16.446" endtime="20161109 19:46:16.446"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:16.445" endtime="20161109 19:46:16.446"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:16.440" endtime="20161109 19:46:16.447"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:16.447">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 19:46:19.298">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161109 19:46:16.447" endtime="20161109 19:46:19.298"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:16.420" endtime="20161109 19:46:19.298"></status>
</kw>
<kw library="utils" name="Initiate Power On">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.300">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:46:19.300" endtime="20161109 19:46:19.300"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.301">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:46:19.300" endtime="20161109 19:46:19.301"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.303">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161109 19:46:19.302" endtime="20161109 19:46:19.303"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.305">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status status="PASS" starttime="20161109 19:46:19.304" endtime="20161109 19:46:19.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.306">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:19.305" endtime="20161109 19:46:19.306"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:19.306" endtime="20161109 19:46:19.307"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.310">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:19.308" endtime="20161109 19:46:19.310"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:19.310">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:19.310" endtime="20161109 19:46:19.311"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.310" endtime="20161109 19:46:19.311"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.307" endtime="20161109 19:46:19.311"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:19.312">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:19.311" endtime="20161109 19:46:19.312"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.312">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:19.312" endtime="20161109 19:46:19.312"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.313">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:19.313" endtime="20161109 19:46:19.313"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.314">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:19.313" endtime="20161109 19:46:19.314"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.646">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:19.646">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:19.314" endtime="20161109 19:46:19.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:19.647">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:19.646" endtime="20161109 19:46:19.647"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.311" endtime="20161109 19:46:19.647"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.928">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:19.928">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:19.647" endtime="20161109 19:46:19.928"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.929">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:19.929" endtime="20161109 19:46:19.929"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:19.930">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:19.930" endtime="20161109 19:46:19.930"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.929" endtime="20161109 19:46:19.930"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.928" endtime="20161109 19:46:19.930"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:19.931">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:19.303" endtime="20161109 19:46:19.931"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:19.931">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:19.301" endtime="20161109 19:46:19.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:19.931">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:19.931" endtime="20161109 19:46:19.931"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.933">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:46:19.933" endtime="20161109 19:46:19.933"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.934">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:46:19.933" endtime="20161109 19:46:19.934"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.935">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" starttime="20161109 19:46:19.934" endtime="20161109 19:46:19.935"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.936">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" starttime="20161109 19:46:19.935" endtime="20161109 19:46:19.936"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:19.936" endtime="20161109 19:46:19.936"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:19.936" endtime="20161109 19:46:19.937"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.938">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:19.937" endtime="20161109 19:46:19.938"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:19.939">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:19.939" endtime="20161109 19:46:19.939"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.938" endtime="20161109 19:46:19.939"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.937" endtime="20161109 19:46:19.939"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:19.940">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:19.940" endtime="20161109 19:46:19.940"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.941">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:19.941" endtime="20161109 19:46:19.941"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.941">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:19.941" endtime="20161109 19:46:19.941"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:19.942">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:19.942" endtime="20161109 19:46:19.942"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:24.933">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:24.934">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:19.943" endtime="20161109 19:46:24.934"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:24.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:24.934" endtime="20161109 19:46:24.935"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.939" endtime="20161109 19:46:24.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.684">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:25.684">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:24.935" endtime="20161109 19:46:25.684"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.686">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:25.685" endtime="20161109 19:46:25.686"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:25.687">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:25.687" endtime="20161109 19:46:25.687"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:25.686" endtime="20161109 19:46:25.687"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:25.684" endtime="20161109 19:46:25.688"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:25.688">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:19.935" endtime="20161109 19:46:25.688"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:25.688">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:19.934" endtime="20161109 19:46:25.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:25.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:25.689" endtime="20161109 19:46:25.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.690">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:25.690">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:25.690">${content} = {u'data': 1, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:25.690" endtime="20161109 19:46:25.690"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:25.691">${state} = 1</msg>
<status status="PASS" starttime="20161109 19:46:19.932" endtime="20161109 19:46:25.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:25.691" endtime="20161109 19:46:25.692"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.932" endtime="20161109 19:46:25.692"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.932" endtime="20161109 19:46:25.692"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:19.299" endtime="20161109 19:46:25.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' != '${EMPTY}'</arg>
<arg>Wait For OS</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:25.692" endtime="20161109 19:46:25.697"></status>
</kw>
<kw library="SSHLibrary" name="Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>bmc_connection</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:25.697" endtime="20161109 19:46:25.697"></status>
</kw>
<kw library="powerons" name="Check Power On States">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${OS_WAIT_TIMEOUT}</arg>
<arg>10sec</arg>
<arg>Is Host Booted</arg>
</arguments>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.700">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:46:25.700" endtime="20161109 19:46:25.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.701">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:46:25.700" endtime="20161109 19:46:25.701"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.702">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:46:25.701" endtime="20161109 19:46:25.702"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.703">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:46:25.702" endtime="20161109 19:46:25.703"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.703">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:25.703" endtime="20161109 19:46:25.703"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:25.704" endtime="20161109 19:46:25.704"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.705">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:25.704" endtime="20161109 19:46:25.705"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:25.706">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:25.706" endtime="20161109 19:46:25.706"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:25.705" endtime="20161109 19:46:25.706"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:25.704" endtime="20161109 19:46:25.706"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:25.707">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:25.707" endtime="20161109 19:46:25.708"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.708">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:25.708" endtime="20161109 19:46:25.708"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.709">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:25.708" endtime="20161109 19:46:25.709"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:25.709">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:25.709" endtime="20161109 19:46:25.709"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:26.857">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:26.857">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:25.710" endtime="20161109 19:46:26.857"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:26.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:26.858" endtime="20161109 19:46:26.859"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:25.707" endtime="20161109 19:46:26.859"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:28.689">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:28.690">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:26.859" endtime="20161109 19:46:28.690"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:28.692">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:28.691" endtime="20161109 19:46:28.692"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:28.693">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:28.693" endtime="20161109 19:46:28.693"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:28.692" endtime="20161109 19:46:28.694"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:28.690" endtime="20161109 19:46:28.694"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:28.694">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:25.702" endtime="20161109 19:46:28.694"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:28.694">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:25.701" endtime="20161109 19:46:28.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:28.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:28.695" endtime="20161109 19:46:28.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:28.696">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:28.696">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:28.697">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:28.696" endtime="20161109 19:46:28.697"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:28.697">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:46:25.699" endtime="20161109 19:46:28.697"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:46:28.698">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:46:28.697" endtime="20161109 19:46:28.698"></status>
</kw>
<status status="FAIL" starttime="20161109 19:46:25.699" endtime="20161109 19:46:28.698"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:38.702">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:46:38.701" endtime="20161109 19:46:38.702"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:38.703">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:46:38.702" endtime="20161109 19:46:38.703"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:38.705">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:46:38.704" endtime="20161109 19:46:38.705"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:38.707">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:46:38.706" endtime="20161109 19:46:38.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:38.708">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:38.707" endtime="20161109 19:46:38.708"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:38.708" endtime="20161109 19:46:38.709"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:38.711">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:38.710" endtime="20161109 19:46:38.711"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:38.712">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:38.711" endtime="20161109 19:46:38.712"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:38.711" endtime="20161109 19:46:38.712"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:38.709" endtime="20161109 19:46:38.712"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:38.713">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:38.712" endtime="20161109 19:46:38.713"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:38.714">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:38.713" endtime="20161109 19:46:38.714"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:38.714">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:38.714" endtime="20161109 19:46:38.714"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:38.715">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:38.714" endtime="20161109 19:46:38.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:39.906">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:39.906">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:38.715" endtime="20161109 19:46:39.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:39.907">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:39.906" endtime="20161109 19:46:39.907"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:38.712" endtime="20161109 19:46:39.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:40.752">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:40.752">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:39.908" endtime="20161109 19:46:40.752"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:40.754">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:40.754" endtime="20161109 19:46:40.754"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:40.756">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:40.755" endtime="20161109 19:46:40.756"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:40.755" endtime="20161109 19:46:40.756"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:40.753" endtime="20161109 19:46:40.756"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:40.757">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:38.705" endtime="20161109 19:46:40.757"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:40.757">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:38.703" endtime="20161109 19:46:40.757"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:40.758">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:40.757" endtime="20161109 19:46:40.758"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:40.759">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:40.759">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:40.759">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:40.758" endtime="20161109 19:46:40.759"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:40.760">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:46:38.700" endtime="20161109 19:46:40.760"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:46:40.761">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:46:40.760" endtime="20161109 19:46:40.761"></status>
</kw>
<status status="FAIL" starttime="20161109 19:46:38.699" endtime="20161109 19:46:40.761"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:50.764">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:46:50.764" endtime="20161109 19:46:50.764"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:50.766">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:46:50.765" endtime="20161109 19:46:50.766"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:50.768">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:46:50.767" endtime="20161109 19:46:50.768"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:50.770">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:46:50.769" endtime="20161109 19:46:50.770"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:50.771">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:50.770" endtime="20161109 19:46:50.771"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:46:50.771" endtime="20161109 19:46:50.771"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:50.773">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:50.772" endtime="20161109 19:46:50.773"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:50.774">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:46:50.774" endtime="20161109 19:46:50.774"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:50.773" endtime="20161109 19:46:50.774"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:50.771" endtime="20161109 19:46:50.774"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:50.776">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:46:50.775" endtime="20161109 19:46:50.776"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:50.777">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:46:50.776" endtime="20161109 19:46:50.777"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:50.777">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:46:50.777" endtime="20161109 19:46:50.777"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:50.778">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:46:50.777" endtime="20161109 19:46:50.778"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:51.254">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:51.254">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:50.778" endtime="20161109 19:46:51.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:51.255">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:51.254" endtime="20161109 19:46:51.255"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:50.775" endtime="20161109 19:46:51.255"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:51.533">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:46:51.533">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:51.256" endtime="20161109 19:46:51.533"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:51.535">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:51.534" endtime="20161109 19:46:51.535"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:51.537">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:46:51.536" endtime="20161109 19:46:51.537"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:51.536" endtime="20161109 19:46:51.537"></status>
</kw>
<status status="PASS" starttime="20161109 19:46:51.534" endtime="20161109 19:46:51.537"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:51.538">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:50.768" endtime="20161109 19:46:51.538"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:51.538">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:46:50.766" endtime="20161109 19:46:51.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:46:51.539">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:46:51.539" endtime="20161109 19:46:51.539"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:46:51.540">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:46:51.540">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:46:51.540">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:46:51.540" endtime="20161109 19:46:51.540"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:46:51.541">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:46:50.763" endtime="20161109 19:46:51.541"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:46:51.542">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:46:51.541" endtime="20161109 19:46:51.542"></status>
</kw>
<status status="FAIL" starttime="20161109 19:46:50.762" endtime="20161109 19:46:51.542"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:01.545">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:47:01.544" endtime="20161109 19:47:01.545"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:01.546">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:47:01.545" endtime="20161109 19:47:01.546"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:01.550">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:47:01.549" endtime="20161109 19:47:01.550"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:01.552">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:47:01.552" endtime="20161109 19:47:01.552"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:01.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:47:01.552" endtime="20161109 19:47:01.553"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:47:01.553" endtime="20161109 19:47:01.554"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:01.556">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:47:01.555" endtime="20161109 19:47:01.556"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:01.557">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:47:01.557" endtime="20161109 19:47:01.558"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:01.556" endtime="20161109 19:47:01.558"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:01.554" endtime="20161109 19:47:01.558"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:01.559">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:47:01.559" endtime="20161109 19:47:01.560"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:01.561">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:47:01.560" endtime="20161109 19:47:01.561"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:01.562">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:47:01.561" endtime="20161109 19:47:01.562"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:01.562">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:47:01.562" endtime="20161109 19:47:01.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:02.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:47:02.084">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:01.562" endtime="20161109 19:47:02.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:02.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:47:02.085" endtime="20161109 19:47:02.085"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:01.558" endtime="20161109 19:47:02.085"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:03.038">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:47:03.039">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:02.085" endtime="20161109 19:47:03.039"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:03.041">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:47:03.040" endtime="20161109 19:47:03.041"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:03.042">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:47:03.042" endtime="20161109 19:47:03.042"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:03.041" endtime="20161109 19:47:03.042"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:03.039" endtime="20161109 19:47:03.042"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:47:03.043">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:01.550" endtime="20161109 19:47:03.043"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:47:03.043">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:01.546" endtime="20161109 19:47:03.043"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:03.044">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:47:03.043" endtime="20161109 19:47:03.044"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:03.044">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:47:03.044">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:47:03.045">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:47:03.044" endtime="20161109 19:47:03.045"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:47:03.045">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:47:01.544" endtime="20161109 19:47:03.045"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:47:03.047">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:47:03.047" endtime="20161109 19:47:03.047"></status>
</kw>
<status status="FAIL" starttime="20161109 19:47:01.543" endtime="20161109 19:47:03.047"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.050">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:47:13.049" endtime="20161109 19:47:13.050"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.051">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:47:13.050" endtime="20161109 19:47:13.051"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.053">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:47:13.052" endtime="20161109 19:47:13.053"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.055">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:47:13.054" endtime="20161109 19:47:13.055"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.055">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:47:13.055" endtime="20161109 19:47:13.055"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:47:13.056" endtime="20161109 19:47:13.056"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.059">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:47:13.057" endtime="20161109 19:47:13.059"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:13.060">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:47:13.060" endtime="20161109 19:47:13.060"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:13.059" endtime="20161109 19:47:13.060"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:13.057" endtime="20161109 19:47:13.060"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:13.062">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:47:13.061" endtime="20161109 19:47:13.062"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.063">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:47:13.063" endtime="20161109 19:47:13.063"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.064">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:47:13.063" endtime="20161109 19:47:13.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.064">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:47:13.064" endtime="20161109 19:47:13.064"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.402">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:47:13.402">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:13.064" endtime="20161109 19:47:13.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:13.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:47:13.402" endtime="20161109 19:47:13.403"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:13.061" endtime="20161109 19:47:13.403"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.682">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:47:13.682">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:13.404" endtime="20161109 19:47:13.682"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.684">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:47:13.683" endtime="20161109 19:47:13.684"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:13.685">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:47:13.685" endtime="20161109 19:47:13.686"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:13.684" endtime="20161109 19:47:13.686"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:13.683" endtime="20161109 19:47:13.686"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:47:13.686">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:13.053" endtime="20161109 19:47:13.686"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:47:13.687">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:13.051" endtime="20161109 19:47:13.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:13.688">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:47:13.687" endtime="20161109 19:47:13.688"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:13.688">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:47:13.689">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:47:13.689">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:47:13.688" endtime="20161109 19:47:13.689"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:47:13.689">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:47:13.049" endtime="20161109 19:47:13.689"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:47:13.690">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:47:13.690" endtime="20161109 19:47:13.690"></status>
</kw>
<status status="FAIL" starttime="20161109 19:47:13.048" endtime="20161109 19:47:13.690"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:23.693">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:47:23.693" endtime="20161109 19:47:23.693"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:23.694">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:47:23.694" endtime="20161109 19:47:23.694"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:23.696">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:47:23.696" endtime="20161109 19:47:23.696"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:23.698">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:47:23.698" endtime="20161109 19:47:23.698"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:23.699">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:47:23.699" endtime="20161109 19:47:23.699"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:47:23.700" endtime="20161109 19:47:23.701"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:23.703">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:47:23.702" endtime="20161109 19:47:23.703"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:23.704">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:47:23.704" endtime="20161109 19:47:23.704"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:23.703" endtime="20161109 19:47:23.704"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:23.701" endtime="20161109 19:47:23.704"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:23.705">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:47:23.705" endtime="20161109 19:47:23.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:23.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:47:23.706" endtime="20161109 19:47:23.706"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:23.707">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:47:23.706" endtime="20161109 19:47:23.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:23.707">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:47:23.707" endtime="20161109 19:47:23.707"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:24.041">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:47:24.041">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:23.707" endtime="20161109 19:47:24.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:24.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:47:24.041" endtime="20161109 19:47:24.042"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:23.704" endtime="20161109 19:47:24.042"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:24.330">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:47:24.330">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:24.042" endtime="20161109 19:47:24.330"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:24.332">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:47:24.331" endtime="20161109 19:47:24.332"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:24.334">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:47:24.334" endtime="20161109 19:47:24.334"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:24.333" endtime="20161109 19:47:24.334"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:24.331" endtime="20161109 19:47:24.335"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:47:24.335">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:23.696" endtime="20161109 19:47:24.335"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:47:24.335">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:47:23.695" endtime="20161109 19:47:24.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:24.336">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:47:24.336" endtime="20161109 19:47:24.337"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:24.337">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:47:24.337">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:47:24.338">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:47:24.337" endtime="20161109 19:47:24.338"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:47:24.338">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:47:23.692" endtime="20161109 19:47:24.338"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:47:24.339">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:47:24.339" endtime="20161109 19:47:24.340"></status>
</kw>
<status status="FAIL" starttime="20161109 19:47:23.691" endtime="20161109 19:47:24.340"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:34.342">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:47:34.342" endtime="20161109 19:47:34.342"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:34.343">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:47:34.342" endtime="20161109 19:47:34.343"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:34.344">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:47:34.344" endtime="20161109 19:47:34.344"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:34.345">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:47:34.345" endtime="20161109 19:47:34.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:34.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:47:34.345" endtime="20161109 19:47:34.346"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:47:34.346" endtime="20161109 19:47:34.346"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:34.348">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:47:34.347" endtime="20161109 19:47:34.348"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:34.348">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:47:34.348" endtime="20161109 19:47:34.348"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:34.348" endtime="20161109 19:47:34.349"></status>
</kw>
<status status="PASS" starttime="20161109 19:47:34.346" endtime="20161109 19:47:34.349"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:47:34.349">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:47:34.349" endtime="20161109 19:47:34.350"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:34.350">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:47:34.350" endtime="20161109 19:47:34.350"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:34.351">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:47:34.351" endtime="20161109 19:47:34.351"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:47:34.352">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:47:34.351" endtime="20161109 19:47:34.352"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="FAIL" timestamp="20161109 19:48:14.989">ConnectTimeout: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff896c4290&gt;, 'Connection to 9.3.23.30 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" starttime="20161109 19:47:34.352" endtime="20161109 19:48:14.990"></status>
</kw>
<status status="FAIL" starttime="20161109 19:47:34.349" endtime="20161109 19:48:14.991"></status>
</kw>
<status status="FAIL" starttime="20161109 19:47:34.344" endtime="20161109 19:48:14.992"></status>
</kw>
<status status="FAIL" starttime="20161109 19:47:34.343" endtime="20161109 19:48:14.992"></status>
</kw>
<status status="FAIL" starttime="20161109 19:47:34.341" endtime="20161109 19:48:14.992"></status>
</kw>
<status status="FAIL" starttime="20161109 19:47:34.341" endtime="20161109 19:48:14.992"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:24.995">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:48:24.995" endtime="20161109 19:48:24.995"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:24.996">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:48:24.995" endtime="20161109 19:48:24.996"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:24.998">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:48:24.997" endtime="20161109 19:48:24.998"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:25.000">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:48:24.999" endtime="20161109 19:48:25.000"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:25.000">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:48:25.000" endtime="20161109 19:48:25.001"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:48:25.001" endtime="20161109 19:48:25.001"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:25.004">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:48:25.002" endtime="20161109 19:48:25.004"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:48:25.005">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:48:25.004" endtime="20161109 19:48:25.005"></status>
</kw>
<status status="PASS" starttime="20161109 19:48:25.004" endtime="20161109 19:48:25.005"></status>
</kw>
<status status="PASS" starttime="20161109 19:48:25.001" endtime="20161109 19:48:25.005"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:48:25.006">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:48:25.006" endtime="20161109 19:48:25.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:25.007">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:48:25.006" endtime="20161109 19:48:25.007"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:25.007">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:48:25.007" endtime="20161109 19:48:25.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:25.008">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:48:25.008" endtime="20161109 19:48:25.008"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:52.898">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:48:52.898">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:48:25.008" endtime="20161109 19:48:52.898"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:48:52.899">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:48:52.898" endtime="20161109 19:48:52.899"></status>
</kw>
<status status="PASS" starttime="20161109 19:48:25.005" endtime="20161109 19:48:52.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:53.515">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:48:53.516">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:48:52.899" endtime="20161109 19:48:53.516"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:53.518">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:48:53.517" endtime="20161109 19:48:53.518"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:48:53.519">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:48:53.519" endtime="20161109 19:48:53.519"></status>
</kw>
<status status="PASS" starttime="20161109 19:48:53.518" endtime="20161109 19:48:53.519"></status>
</kw>
<status status="PASS" starttime="20161109 19:48:53.516" endtime="20161109 19:48:53.520"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:48:53.520">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:48:24.998" endtime="20161109 19:48:53.520"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:48:53.520">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:48:24.996" endtime="20161109 19:48:53.520"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:48:53.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:48:53.521" endtime="20161109 19:48:53.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:48:53.522">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:48:53.522">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:48:53.522">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:48:53.522" endtime="20161109 19:48:53.522"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:48:53.523">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:48:24.994" endtime="20161109 19:48:53.523"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:48:53.524">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:48:53.523" endtime="20161109 19:48:53.524"></status>
</kw>
<status status="FAIL" starttime="20161109 19:48:24.993" endtime="20161109 19:48:53.524"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:03.527">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:49:03.526" endtime="20161109 19:49:03.527"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:03.528">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:49:03.527" endtime="20161109 19:49:03.528"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:03.530">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:49:03.529" endtime="20161109 19:49:03.530"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:03.532">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:49:03.531" endtime="20161109 19:49:03.532"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:03.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:03.532" endtime="20161109 19:49:03.532"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:49:03.533" endtime="20161109 19:49:03.533"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:03.536">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:03.534" endtime="20161109 19:49:03.536"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:03.537">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:03.537" endtime="20161109 19:49:03.537"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:03.536" endtime="20161109 19:49:03.537"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:03.533" endtime="20161109 19:49:03.537"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:03.538">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:49:03.538" endtime="20161109 19:49:03.539"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:03.539">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:03.539" endtime="20161109 19:49:03.539"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:03.540">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:49:03.540" endtime="20161109 19:49:03.540"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:03.540">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:49:03.540" endtime="20161109 19:49:03.540"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:03.878">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:49:03.878">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:03.541" endtime="20161109 19:49:03.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:03.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:49:03.878" endtime="20161109 19:49:03.879"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:03.538" endtime="20161109 19:49:03.879"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:04.156">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:49:04.156">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:03.879" endtime="20161109 19:49:04.156"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:04.158">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:49:04.157" endtime="20161109 19:49:04.158"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:04.159">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:49:04.159" endtime="20161109 19:49:04.160"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:04.158" endtime="20161109 19:49:04.160"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:04.157" endtime="20161109 19:49:04.160"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:04.160">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:03.530" endtime="20161109 19:49:04.160"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:04.161">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:03.528" endtime="20161109 19:49:04.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:04.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:49:04.161" endtime="20161109 19:49:04.162"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:04.162">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:49:04.162">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:49:04.163">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:49:04.162" endtime="20161109 19:49:04.163"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:04.163">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:49:03.526" endtime="20161109 19:49:04.163"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:49:04.164">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:49:04.163" endtime="20161109 19:49:04.164"></status>
</kw>
<status status="FAIL" starttime="20161109 19:49:03.525" endtime="20161109 19:49:04.164"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.167">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:49:14.166" endtime="20161109 19:49:14.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.168">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:49:14.167" endtime="20161109 19:49:14.168"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.171">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:49:14.170" endtime="20161109 19:49:14.171"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.173">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:49:14.172" endtime="20161109 19:49:14.173"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.173">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:14.173" endtime="20161109 19:49:14.174"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:49:14.174" endtime="20161109 19:49:14.174"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.177">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:14.176" endtime="20161109 19:49:14.177"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:14.177">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:14.177" endtime="20161109 19:49:14.177"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:14.177" endtime="20161109 19:49:14.178"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:14.175" endtime="20161109 19:49:14.178"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:14.178">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:49:14.178" endtime="20161109 19:49:14.179"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:14.179" endtime="20161109 19:49:14.179"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.180">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:49:14.180" endtime="20161109 19:49:14.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.181">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:49:14.180" endtime="20161109 19:49:14.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.521">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:49:14.521">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:14.181" endtime="20161109 19:49:14.521"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:14.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:49:14.521" endtime="20161109 19:49:14.521"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:14.178" endtime="20161109 19:49:14.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.800">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:49:14.800">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:14.522" endtime="20161109 19:49:14.800"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.801">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:49:14.801" endtime="20161109 19:49:14.801"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:14.802">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:49:14.802" endtime="20161109 19:49:14.802"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:14.802" endtime="20161109 19:49:14.802"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:14.801" endtime="20161109 19:49:14.803"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:14.803">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:14.171" endtime="20161109 19:49:14.803"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:14.803">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:14.169" endtime="20161109 19:49:14.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:14.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:49:14.803" endtime="20161109 19:49:14.804"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:14.804">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:49:14.804">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:49:14.804">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:49:14.804" endtime="20161109 19:49:14.804"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:14.804">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:49:14.166" endtime="20161109 19:49:14.804"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:49:14.805">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:49:14.805" endtime="20161109 19:49:14.805"></status>
</kw>
<status status="FAIL" starttime="20161109 19:49:14.165" endtime="20161109 19:49:14.805"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:24.807">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:49:24.807" endtime="20161109 19:49:24.807"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:24.808">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:49:24.808" endtime="20161109 19:49:24.808"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:24.810">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:49:24.810" endtime="20161109 19:49:24.810"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:24.812">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:49:24.811" endtime="20161109 19:49:24.812"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:24.813">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:24.812" endtime="20161109 19:49:24.813"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:49:24.813" endtime="20161109 19:49:24.814"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:24.816">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:24.815" endtime="20161109 19:49:24.816"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:24.817">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:24.817" endtime="20161109 19:49:24.817"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:24.816" endtime="20161109 19:49:24.817"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:24.814" endtime="20161109 19:49:24.817"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:24.818">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:49:24.818" endtime="20161109 19:49:24.819"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:24.819">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:24.819" endtime="20161109 19:49:24.819"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:24.820">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:49:24.819" endtime="20161109 19:49:24.820"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:24.820">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:49:24.820" endtime="20161109 19:49:24.820"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:25.160">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:49:25.160">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:24.820" endtime="20161109 19:49:25.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:25.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:49:25.160" endtime="20161109 19:49:25.161"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:24.817" endtime="20161109 19:49:25.161"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:25.437">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:49:25.437">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:25.161" endtime="20161109 19:49:25.437"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:25.439">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:49:25.438" endtime="20161109 19:49:25.439"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:25.440">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:49:25.440" endtime="20161109 19:49:25.441"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:25.439" endtime="20161109 19:49:25.441"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:25.437" endtime="20161109 19:49:25.441"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:25.441">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:24.810" endtime="20161109 19:49:25.441"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:25.442">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:24.809" endtime="20161109 19:49:25.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:25.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:49:25.442" endtime="20161109 19:49:25.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:25.443">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:49:25.444">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:49:25.444">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:49:25.443" endtime="20161109 19:49:25.444"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:25.444">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:49:24.806" endtime="20161109 19:49:25.444"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:49:25.445">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:49:25.445" endtime="20161109 19:49:25.445"></status>
</kw>
<status status="FAIL" starttime="20161109 19:49:24.806" endtime="20161109 19:49:25.446"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:35.447">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:49:35.447" endtime="20161109 19:49:35.447"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:35.448">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:49:35.447" endtime="20161109 19:49:35.448"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:35.449">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:49:35.449" endtime="20161109 19:49:35.449"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:35.450">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:49:35.450" endtime="20161109 19:49:35.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:35.450">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:35.450" endtime="20161109 19:49:35.450"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:49:35.451" endtime="20161109 19:49:35.451"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:35.453">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:35.452" endtime="20161109 19:49:35.453"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:35.453">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:35.453" endtime="20161109 19:49:35.454"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:35.453" endtime="20161109 19:49:35.454"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:35.451" endtime="20161109 19:49:35.454"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:35.455">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:49:35.454" endtime="20161109 19:49:35.455"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:35.455">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:35.455" endtime="20161109 19:49:35.455"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:35.456">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:49:35.456" endtime="20161109 19:49:35.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:35.456">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:49:35.456" endtime="20161109 19:49:35.457"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:35.790">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:49:35.790">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:35.457" endtime="20161109 19:49:35.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:35.791">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:49:35.791" endtime="20161109 19:49:35.791"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:35.454" endtime="20161109 19:49:35.791"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:36.080">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:49:36.080">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:35.791" endtime="20161109 19:49:36.081"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:36.082">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:49:36.081" endtime="20161109 19:49:36.082"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:36.082">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:49:36.082" endtime="20161109 19:49:36.084"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:36.082" endtime="20161109 19:49:36.084"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:36.081" endtime="20161109 19:49:36.084"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:36.084">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:35.449" endtime="20161109 19:49:36.084"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:36.084">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:35.448" endtime="20161109 19:49:36.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:36.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:49:36.085" endtime="20161109 19:49:36.085"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:36.085">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:49:36.085">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:49:36.086">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:49:36.085" endtime="20161109 19:49:36.086"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:36.086">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:49:35.447" endtime="20161109 19:49:36.086"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:49:36.086">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:49:36.086" endtime="20161109 19:49:36.086"></status>
</kw>
<status status="FAIL" starttime="20161109 19:49:35.446" endtime="20161109 19:49:36.087"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.089">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:49:46.089" endtime="20161109 19:49:46.089"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.090">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:49:46.090" endtime="20161109 19:49:46.090"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.092">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:49:46.091" endtime="20161109 19:49:46.092"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.094">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:49:46.093" endtime="20161109 19:49:46.094"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.095">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:46.094" endtime="20161109 19:49:46.095"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:49:46.095" endtime="20161109 19:49:46.096"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.098">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:46.097" endtime="20161109 19:49:46.098"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:46.099">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:46.099" endtime="20161109 19:49:46.099"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:46.098" endtime="20161109 19:49:46.099"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:46.096" endtime="20161109 19:49:46.099"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:46.100">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:49:46.100" endtime="20161109 19:49:46.100"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.101">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:46.101" endtime="20161109 19:49:46.101"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.101">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:49:46.101" endtime="20161109 19:49:46.101"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.102">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:49:46.102" endtime="20161109 19:49:46.102"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.437">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:49:46.437">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:46.102" endtime="20161109 19:49:46.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:46.439">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:49:46.438" endtime="20161109 19:49:46.439"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:46.099" endtime="20161109 19:49:46.439"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.719">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:49:46.720">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:46.439" endtime="20161109 19:49:46.720"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.722">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:49:46.721" endtime="20161109 19:49:46.722"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:46.723">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:49:46.723" endtime="20161109 19:49:46.723"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:46.722" endtime="20161109 19:49:46.723"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:46.720" endtime="20161109 19:49:46.724"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:46.724">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:46.092" endtime="20161109 19:49:46.724"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:46.724">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:46.090" endtime="20161109 19:49:46.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:46.725">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:49:46.725" endtime="20161109 19:49:46.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:46.726">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:49:46.726">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:49:46.726">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:49:46.726" endtime="20161109 19:49:46.726"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:49:46.727">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:49:46.088" endtime="20161109 19:49:46.727"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:49:46.728">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:49:46.727" endtime="20161109 19:49:46.728"></status>
</kw>
<status status="FAIL" starttime="20161109 19:49:46.087" endtime="20161109 19:49:46.728"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:56.730">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:49:56.730" endtime="20161109 19:49:56.731"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:56.732">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:49:56.731" endtime="20161109 19:49:56.732"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:56.733">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:49:56.733" endtime="20161109 19:49:56.734"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:56.735">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:49:56.735" endtime="20161109 19:49:56.736"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:56.736">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:56.736" endtime="20161109 19:49:56.736"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:49:56.737" endtime="20161109 19:49:56.737"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:56.739">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:56.738" endtime="20161109 19:49:56.739"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:56.740">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:49:56.740" endtime="20161109 19:49:56.740"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:56.739" endtime="20161109 19:49:56.740"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:56.738" endtime="20161109 19:49:56.740"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:49:56.741">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:49:56.741" endtime="20161109 19:49:56.742"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:56.742">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:49:56.742" endtime="20161109 19:49:56.742"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:56.743">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:49:56.742" endtime="20161109 19:49:56.743"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:49:56.743">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:49:56.743" endtime="20161109 19:49:56.743"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:00.958">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:00.959">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:56.743" endtime="20161109 19:50:00.959"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:00.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:00.959" endtime="20161109 19:50:00.960"></status>
</kw>
<status status="PASS" starttime="20161109 19:49:56.740" endtime="20161109 19:50:00.960"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:01.439">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:01.440">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:00.961" endtime="20161109 19:50:01.440"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:01.442">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:01.441" endtime="20161109 19:50:01.442"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:01.443">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:01.442" endtime="20161109 19:50:01.443"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:01.442" endtime="20161109 19:50:01.443"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:01.440" endtime="20161109 19:50:01.443"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:01.444">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:56.734" endtime="20161109 19:50:01.444"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:01.444">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:49:56.732" endtime="20161109 19:50:01.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:01.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:01.444" endtime="20161109 19:50:01.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:01.446">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:50:01.446">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:50:01.446">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:50:01.445" endtime="20161109 19:50:01.446"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:01.446">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:49:56.729" endtime="20161109 19:50:01.446"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:50:01.447">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:50:01.447" endtime="20161109 19:50:01.447"></status>
</kw>
<status status="FAIL" starttime="20161109 19:49:56.729" endtime="20161109 19:50:01.448"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:11.450">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:50:11.450" endtime="20161109 19:50:11.451"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:11.452">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:50:11.451" endtime="20161109 19:50:11.452"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:11.454">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:50:11.453" endtime="20161109 19:50:11.454"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:11.456">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:50:11.455" endtime="20161109 19:50:11.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:11.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:50:11.456" endtime="20161109 19:50:11.457"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:50:11.457" endtime="20161109 19:50:11.458"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:11.460">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:50:11.459" endtime="20161109 19:50:11.460"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:11.462">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:50:11.461" endtime="20161109 19:50:11.462"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:11.460" endtime="20161109 19:50:11.462"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:11.458" endtime="20161109 19:50:11.462"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:11.464">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:50:11.463" endtime="20161109 19:50:11.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:11.465">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:50:11.465" endtime="20161109 19:50:11.465"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:11.466">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:50:11.466" endtime="20161109 19:50:11.466"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:11.467">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:50:11.466" endtime="20161109 19:50:11.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:11.811">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:11.811">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:11.467" endtime="20161109 19:50:11.811"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:11.812">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:11.811" endtime="20161109 19:50:11.812"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:11.463" endtime="20161109 19:50:11.812"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:12.092">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:12.092">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:11.812" endtime="20161109 19:50:12.092"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:12.093">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:12.093" endtime="20161109 19:50:12.093"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:12.094">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:12.094" endtime="20161109 19:50:12.094"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:12.093" endtime="20161109 19:50:12.094"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:12.092" endtime="20161109 19:50:12.094"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:12.095">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:11.454" endtime="20161109 19:50:12.095"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:12.095">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:11.452" endtime="20161109 19:50:12.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:12.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:12.095" endtime="20161109 19:50:12.095"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:12.096">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:50:12.096">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:50:12.096">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:50:12.096" endtime="20161109 19:50:12.096"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:12.096">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:50:11.449" endtime="20161109 19:50:12.096"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:50:12.097">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:50:12.096" endtime="20161109 19:50:12.097"></status>
</kw>
<status status="FAIL" starttime="20161109 19:50:11.449" endtime="20161109 19:50:12.097"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.100">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:50:22.099" endtime="20161109 19:50:22.100"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.101">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:50:22.100" endtime="20161109 19:50:22.101"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.102">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:50:22.102" endtime="20161109 19:50:22.103"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.104">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:50:22.104" endtime="20161109 19:50:22.104"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.105">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:50:22.105" endtime="20161109 19:50:22.105"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:50:22.106" endtime="20161109 19:50:22.106"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.109">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:50:22.107" endtime="20161109 19:50:22.109"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:22.109">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:50:22.109" endtime="20161109 19:50:22.110"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:22.109" endtime="20161109 19:50:22.110"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:22.106" endtime="20161109 19:50:22.110"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:22.111">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:50:22.110" endtime="20161109 19:50:22.111"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.112">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:50:22.111" endtime="20161109 19:50:22.112"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.112">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:50:22.112" endtime="20161109 19:50:22.112"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.113">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:50:22.112" endtime="20161109 19:50:22.113"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.443">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:22.444">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:22.113" endtime="20161109 19:50:22.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:22.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:22.444" endtime="20161109 19:50:22.445"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:22.110" endtime="20161109 19:50:22.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.730">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:22.731">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:22.445" endtime="20161109 19:50:22.731"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.733">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:22.732" endtime="20161109 19:50:22.733"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:22.734">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:22.734" endtime="20161109 19:50:22.734"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:22.733" endtime="20161109 19:50:22.734"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:22.731" endtime="20161109 19:50:22.735"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:22.735">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:22.103" endtime="20161109 19:50:22.735"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:22.735">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:22.101" endtime="20161109 19:50:22.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:22.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:22.736" endtime="20161109 19:50:22.736"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:22.737">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:50:22.737">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:50:22.737">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:50:22.737" endtime="20161109 19:50:22.737"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:22.738">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:50:22.098" endtime="20161109 19:50:22.738"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:50:22.739">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:50:22.738" endtime="20161109 19:50:22.739"></status>
</kw>
<status status="FAIL" starttime="20161109 19:50:22.098" endtime="20161109 19:50:22.739"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:32.742">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:50:32.741" endtime="20161109 19:50:32.742"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:32.743">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:50:32.742" endtime="20161109 19:50:32.743"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:32.745">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:50:32.744" endtime="20161109 19:50:32.745"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:32.747">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:50:32.746" endtime="20161109 19:50:32.747"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:32.748">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:50:32.747" endtime="20161109 19:50:32.748"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:50:32.748" endtime="20161109 19:50:32.759"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:32.761">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:50:32.760" endtime="20161109 19:50:32.761"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:32.762">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:50:32.761" endtime="20161109 19:50:32.762"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:32.761" endtime="20161109 19:50:32.762"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:32.759" endtime="20161109 19:50:32.762"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:32.763">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:50:32.762" endtime="20161109 19:50:32.763"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:32.764">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:50:32.763" endtime="20161109 19:50:32.764"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:32.764">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:50:32.764" endtime="20161109 19:50:32.764"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:32.765">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:50:32.764" endtime="20161109 19:50:32.765"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:33.111">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:33.111">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:32.765" endtime="20161109 19:50:33.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:33.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:33.112" endtime="20161109 19:50:33.112"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:32.762" endtime="20161109 19:50:33.112"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:33.539">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:33.539">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:33.113" endtime="20161109 19:50:33.539"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:33.541">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:33.540" endtime="20161109 19:50:33.541"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:33.543">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:33.542" endtime="20161109 19:50:33.543"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:33.541" endtime="20161109 19:50:33.543"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:33.540" endtime="20161109 19:50:33.543"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:33.544">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:32.745" endtime="20161109 19:50:33.544"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:33.544">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:32.743" endtime="20161109 19:50:33.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:33.545">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:33.544" endtime="20161109 19:50:33.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:33.546">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:50:33.546">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:50:33.546">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:50:33.545" endtime="20161109 19:50:33.546"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:33.546">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:50:32.740" endtime="20161109 19:50:33.546"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:50:33.547">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:50:33.547" endtime="20161109 19:50:33.547"></status>
</kw>
<status status="FAIL" starttime="20161109 19:50:32.740" endtime="20161109 19:50:33.548"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:43.550">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:50:43.550" endtime="20161109 19:50:43.550"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:43.551">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:50:43.551" endtime="20161109 19:50:43.551"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:43.553">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:50:43.552" endtime="20161109 19:50:43.553"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:43.555">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:50:43.554" endtime="20161109 19:50:43.555"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:43.556">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:50:43.555" endtime="20161109 19:50:43.556"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:50:43.556" endtime="20161109 19:50:43.557"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:43.559">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:50:43.558" endtime="20161109 19:50:43.559"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:43.560">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:50:43.560" endtime="20161109 19:50:43.560"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:43.559" endtime="20161109 19:50:43.560"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:43.557" endtime="20161109 19:50:43.560"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:43.561">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:50:43.561" endtime="20161109 19:50:43.562"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:43.562">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:50:43.562" endtime="20161109 19:50:43.562"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:43.563">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:50:43.562" endtime="20161109 19:50:43.563"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:43.563">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:50:43.563" endtime="20161109 19:50:43.563"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:43.900">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:43.900">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:43.563" endtime="20161109 19:50:43.901"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:43.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:43.901" endtime="20161109 19:50:43.902"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:43.560" endtime="20161109 19:50:43.902"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:44.185">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:44.185">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:43.903" endtime="20161109 19:50:44.185"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:44.187">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:44.186" endtime="20161109 19:50:44.187"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:44.187">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:44.187" endtime="20161109 19:50:44.187"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:44.187" endtime="20161109 19:50:44.188"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:44.186" endtime="20161109 19:50:44.188"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:44.188">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:43.553" endtime="20161109 19:50:44.188"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:44.188">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:43.552" endtime="20161109 19:50:44.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:44.189">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:44.188" endtime="20161109 19:50:44.189"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:44.189">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:50:44.189">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:50:44.189">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:50:44.189" endtime="20161109 19:50:44.190"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:44.190">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:50:43.549" endtime="20161109 19:50:44.190"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:50:44.191">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:50:44.190" endtime="20161109 19:50:44.191"></status>
</kw>
<status status="FAIL" starttime="20161109 19:50:43.548" endtime="20161109 19:50:44.191"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:54.194">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:50:54.194" endtime="20161109 19:50:54.194"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:54.195">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:50:54.195" endtime="20161109 19:50:54.196"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:54.197">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:50:54.197" endtime="20161109 19:50:54.197"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:54.200">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:50:54.199" endtime="20161109 19:50:54.200"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:54.201">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:50:54.200" endtime="20161109 19:50:54.201"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:50:54.201" endtime="20161109 19:50:54.202"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:54.204">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:50:54.203" endtime="20161109 19:50:54.204"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:54.206">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:50:54.205" endtime="20161109 19:50:54.206"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:54.205" endtime="20161109 19:50:54.206"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:54.202" endtime="20161109 19:50:54.206"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:54.208">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:50:54.207" endtime="20161109 19:50:54.208"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:54.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:50:54.209" endtime="20161109 19:50:54.209"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:54.210">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:50:54.210" endtime="20161109 19:50:54.210"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:54.211">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:50:54.210" endtime="20161109 19:50:54.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:54.730">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:54.730">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:54.211" endtime="20161109 19:50:54.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:54.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:54.730" endtime="20161109 19:50:54.731"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:54.207" endtime="20161109 19:50:54.731"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:55.008">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:50:55.009">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:54.731" endtime="20161109 19:50:55.009"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:55.010">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:55.009" endtime="20161109 19:50:55.010"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:55.010">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:50:55.010" endtime="20161109 19:50:55.011"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:55.010" endtime="20161109 19:50:55.011"></status>
</kw>
<status status="PASS" starttime="20161109 19:50:55.009" endtime="20161109 19:50:55.011"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:55.011">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:54.198" endtime="20161109 19:50:55.011"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:55.011">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:50:54.196" endtime="20161109 19:50:55.011"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:50:55.012">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:50:55.011" endtime="20161109 19:50:55.012"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:50:55.012">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:50:55.012">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:50:55.012">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:50:55.012" endtime="20161109 19:50:55.012"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:50:55.013">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:50:54.193" endtime="20161109 19:50:55.013"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:50:55.013">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:50:55.013" endtime="20161109 19:50:55.013"></status>
</kw>
<status status="FAIL" starttime="20161109 19:50:54.192" endtime="20161109 19:50:55.014"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.017">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:51:05.016" endtime="20161109 19:51:05.017"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.018">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:51:05.017" endtime="20161109 19:51:05.018"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.020">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:51:05.019" endtime="20161109 19:51:05.020"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.021">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:51:05.021" endtime="20161109 19:51:05.021"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.022">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:05.022" endtime="20161109 19:51:05.022"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:51:05.022" endtime="20161109 19:51:05.023"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.024">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:05.023" endtime="20161109 19:51:05.024"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:05.025">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:05.025" endtime="20161109 19:51:05.025"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:05.024" endtime="20161109 19:51:05.025"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:05.023" endtime="20161109 19:51:05.026"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:05.026">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:51:05.026" endtime="20161109 19:51:05.027"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.027">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:05.027" endtime="20161109 19:51:05.028"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.028">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:51:05.028" endtime="20161109 19:51:05.028"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.029">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:51:05.028" endtime="20161109 19:51:05.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.376">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:51:05.376">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:05.029" endtime="20161109 19:51:05.376"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:05.377">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:51:05.376" endtime="20161109 19:51:05.377"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:05.026" endtime="20161109 19:51:05.377"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.661">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:51:05.662">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:05.378" endtime="20161109 19:51:05.662"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.664">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:51:05.663" endtime="20161109 19:51:05.664"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:05.665">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:51:05.665" endtime="20161109 19:51:05.665"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:05.664" endtime="20161109 19:51:05.665"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:05.662" endtime="20161109 19:51:05.666"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:05.666">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:05.020" endtime="20161109 19:51:05.666"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:05.666">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:05.018" endtime="20161109 19:51:05.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:05.667">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:51:05.667" endtime="20161109 19:51:05.667"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:05.668">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:51:05.668">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:51:05.668">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:51:05.668" endtime="20161109 19:51:05.669"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:05.669">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:51:05.015" endtime="20161109 19:51:05.669"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:51:05.670">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:51:05.669" endtime="20161109 19:51:05.670"></status>
</kw>
<status status="FAIL" starttime="20161109 19:51:05.014" endtime="20161109 19:51:05.670"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:15.673">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:51:15.672" endtime="20161109 19:51:15.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:15.674">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:51:15.673" endtime="20161109 19:51:15.674"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:15.676">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:51:15.675" endtime="20161109 19:51:15.676"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:15.678">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:51:15.677" endtime="20161109 19:51:15.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:15.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:15.678" endtime="20161109 19:51:15.679"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:51:15.679" endtime="20161109 19:51:15.680"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:15.682">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:15.681" endtime="20161109 19:51:15.683"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:15.687">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:15.684" endtime="20161109 19:51:15.687"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:15.683" endtime="20161109 19:51:15.687"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:15.680" endtime="20161109 19:51:15.688"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:15.689">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:51:15.689" endtime="20161109 19:51:15.690"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:15.691">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:15.690" endtime="20161109 19:51:15.691"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:15.691">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:51:15.691" endtime="20161109 19:51:15.691"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:15.692">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:51:15.691" endtime="20161109 19:51:15.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:16.581">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:51:16.581">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:15.692" endtime="20161109 19:51:16.581"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:16.582">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:51:16.582" endtime="20161109 19:51:16.582"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:15.688" endtime="20161109 19:51:16.582"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:17.308">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:51:17.308">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:16.583" endtime="20161109 19:51:17.308"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:17.311">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:51:17.310" endtime="20161109 19:51:17.311"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:17.312">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:51:17.312" endtime="20161109 19:51:17.312"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:17.311" endtime="20161109 19:51:17.312"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:17.309" endtime="20161109 19:51:17.312"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:17.313">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:15.676" endtime="20161109 19:51:17.313"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:17.313">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:15.674" endtime="20161109 19:51:17.313"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:17.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:51:17.314" endtime="20161109 19:51:17.314"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:17.315">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:51:17.315">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:51:17.315">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:51:17.315" endtime="20161109 19:51:17.315"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:17.316">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:51:15.672" endtime="20161109 19:51:17.316"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:51:17.317">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:51:17.316" endtime="20161109 19:51:17.317"></status>
</kw>
<status status="FAIL" starttime="20161109 19:51:15.671" endtime="20161109 19:51:17.317"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.320">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:51:27.319" endtime="20161109 19:51:27.320"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.321">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:51:27.320" endtime="20161109 19:51:27.321"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.323">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:51:27.323" endtime="20161109 19:51:27.323"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.325">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:51:27.325" endtime="20161109 19:51:27.325"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.326">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:27.326" endtime="20161109 19:51:27.326"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:51:27.327" endtime="20161109 19:51:27.327"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.331">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:27.330" endtime="20161109 19:51:27.331"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:27.332">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:27.331" endtime="20161109 19:51:27.332"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:27.331" endtime="20161109 19:51:27.332"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:27.327" endtime="20161109 19:51:27.332"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:27.333">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:51:27.333" endtime="20161109 19:51:27.333"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.334">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:27.334" endtime="20161109 19:51:27.334"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.334">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:51:27.334" endtime="20161109 19:51:27.334"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.335">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:51:27.335" endtime="20161109 19:51:27.335"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.676">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:51:27.676">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:27.335" endtime="20161109 19:51:27.676"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:27.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:51:27.676" endtime="20161109 19:51:27.677"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:27.332" endtime="20161109 19:51:27.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.958">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:51:27.958">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:27.678" endtime="20161109 19:51:27.958"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.959">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:51:27.959" endtime="20161109 19:51:27.959"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:27.960">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:51:27.960" endtime="20161109 19:51:27.960"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:27.959" endtime="20161109 19:51:27.960"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:27.958" endtime="20161109 19:51:27.960"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:27.961">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:27.324" endtime="20161109 19:51:27.961"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:27.961">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:27.321" endtime="20161109 19:51:27.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:27.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:51:27.961" endtime="20161109 19:51:27.962"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:27.962">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:51:27.962">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:51:27.962">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:51:27.962" endtime="20161109 19:51:27.962"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:27.963">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:51:27.319" endtime="20161109 19:51:27.963"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:51:27.963">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:51:27.963" endtime="20161109 19:51:27.963"></status>
</kw>
<status status="FAIL" starttime="20161109 19:51:27.318" endtime="20161109 19:51:27.963"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:37.966">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:51:37.965" endtime="20161109 19:51:37.966"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:37.967">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:51:37.966" endtime="20161109 19:51:37.967"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:37.968">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:51:37.968" endtime="20161109 19:51:37.968"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:37.970">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:51:37.970" endtime="20161109 19:51:37.970"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:37.971">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:37.971" endtime="20161109 19:51:37.971"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:51:37.972" endtime="20161109 19:51:37.972"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:37.976">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:37.974" endtime="20161109 19:51:37.976"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:37.977">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:37.977" endtime="20161109 19:51:37.977"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:37.976" endtime="20161109 19:51:37.978"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:37.973" endtime="20161109 19:51:37.978"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:37.979">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:51:37.979" endtime="20161109 19:51:37.980"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:37.981">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:37.981" endtime="20161109 19:51:37.981"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:37.982">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:51:37.981" endtime="20161109 19:51:37.982"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:37.982">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:51:37.982" endtime="20161109 19:51:37.982"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:38.318">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:51:38.318">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:37.982" endtime="20161109 19:51:38.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:38.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:51:38.319" endtime="20161109 19:51:38.319"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:37.978" endtime="20161109 19:51:38.320"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:38.799">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:51:38.800">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:38.320" endtime="20161109 19:51:38.800"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:38.802">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:51:38.801" endtime="20161109 19:51:38.802"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:38.803">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:51:38.803" endtime="20161109 19:51:38.803"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:38.802" endtime="20161109 19:51:38.803"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:38.800" endtime="20161109 19:51:38.804"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:38.804">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:37.969" endtime="20161109 19:51:38.804"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:38.804">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:37.967" endtime="20161109 19:51:38.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:38.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:51:38.805" endtime="20161109 19:51:38.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:38.806">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:51:38.806">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:51:38.806">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:51:38.806" endtime="20161109 19:51:38.806"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:38.807">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:51:37.965" endtime="20161109 19:51:38.807"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:51:38.808">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:51:38.807" endtime="20161109 19:51:38.808"></status>
</kw>
<status status="FAIL" starttime="20161109 19:51:37.964" endtime="20161109 19:51:38.808"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:48.811">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:51:48.810" endtime="20161109 19:51:48.811"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:48.812">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:51:48.811" endtime="20161109 19:51:48.812"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:48.814">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:51:48.813" endtime="20161109 19:51:48.814"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:48.816">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:51:48.815" endtime="20161109 19:51:48.816"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:48.817">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:48.816" endtime="20161109 19:51:48.817"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:51:48.817" endtime="20161109 19:51:48.818"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:48.821">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:48.819" endtime="20161109 19:51:48.821"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:48.822">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:48.822" endtime="20161109 19:51:48.822"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:48.821" endtime="20161109 19:51:48.822"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:48.818" endtime="20161109 19:51:48.822"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:48.823">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:51:48.823" endtime="20161109 19:51:48.823"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:48.824">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:48.824" endtime="20161109 19:51:48.824"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:48.824">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:51:48.824" endtime="20161109 19:51:48.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:48.825">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:51:48.825" endtime="20161109 19:51:48.825"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:49.368">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:51:49.368">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:48.825" endtime="20161109 19:51:49.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:49.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:51:49.368" endtime="20161109 19:51:49.369"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:48.822" endtime="20161109 19:51:49.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:49.844">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:51:49.844">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:49.369" endtime="20161109 19:51:49.844"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:49.845">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:51:49.845" endtime="20161109 19:51:49.845"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:49.846">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:51:49.846" endtime="20161109 19:51:49.846"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:49.845" endtime="20161109 19:51:49.847"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:49.844" endtime="20161109 19:51:49.847"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:49.847">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:48.814" endtime="20161109 19:51:49.847"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:49.847">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:48.812" endtime="20161109 19:51:49.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:49.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:51:49.847" endtime="20161109 19:51:49.848"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:49.848">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:51:49.848">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:51:49.848">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:51:49.848" endtime="20161109 19:51:49.848"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:51:49.849">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:51:48.810" endtime="20161109 19:51:49.849"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:51:49.849">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:51:49.849" endtime="20161109 19:51:49.849"></status>
</kw>
<status status="FAIL" starttime="20161109 19:51:48.809" endtime="20161109 19:51:49.849"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:59.852">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:51:59.852" endtime="20161109 19:51:59.852"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:59.853">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:51:59.852" endtime="20161109 19:51:59.853"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:59.855">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:51:59.854" endtime="20161109 19:51:59.855"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:59.857">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:51:59.857" endtime="20161109 19:51:59.857"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:59.858">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:59.858" endtime="20161109 19:51:59.858"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:51:59.858" endtime="20161109 19:51:59.859"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:59.861">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:59.860" endtime="20161109 19:51:59.861"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:59.862">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:51:59.862" endtime="20161109 19:51:59.862"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:59.862" endtime="20161109 19:51:59.863"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:59.859" endtime="20161109 19:51:59.863"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:51:59.864">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:51:59.863" endtime="20161109 19:51:59.864"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:59.865">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:51:59.864" endtime="20161109 19:51:59.865"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:59.865">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:51:59.865" endtime="20161109 19:51:59.865"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:51:59.866">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:51:59.865" endtime="20161109 19:51:59.866"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:00.250">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:52:00.250">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:59.866" endtime="20161109 19:52:00.250"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:00.251">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:52:00.250" endtime="20161109 19:52:00.251"></status>
</kw>
<status status="PASS" starttime="20161109 19:51:59.863" endtime="20161109 19:52:00.251"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:00.631">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:52:00.632">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:00.252" endtime="20161109 19:52:00.632"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:00.634">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:52:00.633" endtime="20161109 19:52:00.634"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:00.635">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:52:00.635" endtime="20161109 19:52:00.635"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:00.634" endtime="20161109 19:52:00.635"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:00.632" endtime="20161109 19:52:00.636"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:00.636">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:59.855" endtime="20161109 19:52:00.636"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:00.636">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:51:59.854" endtime="20161109 19:52:00.636"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:00.637">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:52:00.637" endtime="20161109 19:52:00.637"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:00.638">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:52:00.638">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:52:00.638">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:52:00.638" endtime="20161109 19:52:00.639"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:00.639">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:51:59.851" endtime="20161109 19:52:00.639"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:52:00.640">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:52:00.639" endtime="20161109 19:52:00.640"></status>
</kw>
<status status="FAIL" starttime="20161109 19:51:59.850" endtime="20161109 19:52:00.640"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:10.643">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:52:10.642" endtime="20161109 19:52:10.643"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:10.644">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:52:10.643" endtime="20161109 19:52:10.644"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:10.646">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:52:10.645" endtime="20161109 19:52:10.646"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:10.648">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:52:10.647" endtime="20161109 19:52:10.648"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:10.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:52:10.648" endtime="20161109 19:52:10.649"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:52:10.649" endtime="20161109 19:52:10.649"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:10.652">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:52:10.651" endtime="20161109 19:52:10.652"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:10.653">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:52:10.653" endtime="20161109 19:52:10.653"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:10.653" endtime="20161109 19:52:10.653"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:10.650" endtime="20161109 19:52:10.654"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:10.654">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:52:10.654" endtime="20161109 19:52:10.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:10.655">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:52:10.655" endtime="20161109 19:52:10.655"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:10.656">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:52:10.655" endtime="20161109 19:52:10.656"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:10.656">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:52:10.656" endtime="20161109 19:52:10.656"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:10.991">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:52:10.992">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:10.656" endtime="20161109 19:52:10.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:10.993">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:52:10.992" endtime="20161109 19:52:10.993"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:10.654" endtime="20161109 19:52:10.993"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:11.270">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:52:11.270">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:10.993" endtime="20161109 19:52:11.270"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:11.272">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:52:11.271" endtime="20161109 19:52:11.272"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:11.274">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:52:11.273" endtime="20161109 19:52:11.274"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:11.273" endtime="20161109 19:52:11.274"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:11.270" endtime="20161109 19:52:11.274"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:11.275">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:10.646" endtime="20161109 19:52:11.275"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:11.275">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:10.644" endtime="20161109 19:52:11.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:11.276">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:52:11.276" endtime="20161109 19:52:11.276"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:11.277">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:52:11.277">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:52:11.277">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:52:11.276" endtime="20161109 19:52:11.277"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:11.278">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:52:10.642" endtime="20161109 19:52:11.278"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:52:11.279">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:52:11.278" endtime="20161109 19:52:11.279"></status>
</kw>
<status status="FAIL" starttime="20161109 19:52:10.641" endtime="20161109 19:52:11.279"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:21.282">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:52:21.281" endtime="20161109 19:52:21.282"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:21.283">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:52:21.283" endtime="20161109 19:52:21.283"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:21.285">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:52:21.285" endtime="20161109 19:52:21.285"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:21.287">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:52:21.287" endtime="20161109 19:52:21.287"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:21.288">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:52:21.288" endtime="20161109 19:52:21.288"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:52:21.289" endtime="20161109 19:52:21.289"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:21.292">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:52:21.290" endtime="20161109 19:52:21.292"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:21.293">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:52:21.293" endtime="20161109 19:52:21.293"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:21.292" endtime="20161109 19:52:21.293"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:21.289" endtime="20161109 19:52:21.293"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:21.294">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:52:21.294" endtime="20161109 19:52:21.295"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:21.295">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:52:21.295" endtime="20161109 19:52:21.295"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:21.296">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:52:21.295" endtime="20161109 19:52:21.296"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:21.296">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:52:21.296" endtime="20161109 19:52:21.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:23.744">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:52:23.744">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:21.296" endtime="20161109 19:52:23.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:23.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:52:23.744" endtime="20161109 19:52:23.746"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:21.294" endtime="20161109 19:52:23.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:28.154">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:52:28.155">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:23.746" endtime="20161109 19:52:28.155"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:28.158">${msg} = Response code:200, Content:{
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:52:28.157" endtime="20161109 19:52:28.158"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:28.160">Response code:200, Content:{
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:52:28.159" endtime="20161109 19:52:28.160"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:28.158" endtime="20161109 19:52:28.160"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:28.156" endtime="20161109 19:52:28.160"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:28.160">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:21.285" endtime="20161109 19:52:28.161"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:28.161">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:21.284" endtime="20161109 19:52:28.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:28.162">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:52:28.161" endtime="20161109 19:52:28.162"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:28.163">To JSON using : content={
  "data": "HOST_POWERING_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:52:28.163">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:52:28.163">${content} = {u'data': u'HOST_POWERING_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:52:28.162" endtime="20161109 19:52:28.163"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:28.164">${bmc_state} = HOST_POWERING_ON</msg>
<status status="PASS" starttime="20161109 19:52:21.280" endtime="20161109 19:52:28.164"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:52:28.164">'HOST_POWERING_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:52:28.164" endtime="20161109 19:52:28.164"></status>
</kw>
<status status="FAIL" starttime="20161109 19:52:21.280" endtime="20161109 19:52:28.165"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.167">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:52:38.167" endtime="20161109 19:52:38.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.168">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:52:38.168" endtime="20161109 19:52:38.169"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.170">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:52:38.170" endtime="20161109 19:52:38.170"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.172">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:52:38.172" endtime="20161109 19:52:38.172"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.173">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:52:38.173" endtime="20161109 19:52:38.173"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:52:38.174" endtime="20161109 19:52:38.174"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.175">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:52:38.175" endtime="20161109 19:52:38.175"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:38.176">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:52:38.176" endtime="20161109 19:52:38.177"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:38.176" endtime="20161109 19:52:38.177"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:38.174" endtime="20161109 19:52:38.177"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:38.178">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:52:38.178" endtime="20161109 19:52:38.179"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:52:38.179" endtime="20161109 19:52:38.179"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.180">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:52:38.180" endtime="20161109 19:52:38.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.181">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:52:38.180" endtime="20161109 19:52:38.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.521">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:52:38.522">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:38.181" endtime="20161109 19:52:38.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:38.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:52:38.522" endtime="20161109 19:52:38.522"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:38.177" endtime="20161109 19:52:38.523"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.913">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:52:38.913">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:38.523" endtime="20161109 19:52:38.913"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.914">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:52:38.914" endtime="20161109 19:52:38.914"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:38.915">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:52:38.915" endtime="20161109 19:52:38.915"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:38.915" endtime="20161109 19:52:38.916"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:38.913" endtime="20161109 19:52:38.916"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:38.916">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:38.171" endtime="20161109 19:52:38.916"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:38.916">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:38.169" endtime="20161109 19:52:38.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:38.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:52:38.916" endtime="20161109 19:52:38.917"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:38.917">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:52:38.917">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:52:38.917">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:52:38.917" endtime="20161109 19:52:38.917"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:38.918">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:52:38.166" endtime="20161109 19:52:38.918"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:52:38.918">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:52:38.918" endtime="20161109 19:52:38.918"></status>
</kw>
<status status="FAIL" starttime="20161109 19:52:38.165" endtime="20161109 19:52:38.918"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:48.921">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:52:48.920" endtime="20161109 19:52:48.921"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:48.922">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:52:48.921" endtime="20161109 19:52:48.922"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:48.924">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:52:48.924" endtime="20161109 19:52:48.924"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:48.926">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:52:48.926" endtime="20161109 19:52:48.926"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:48.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:52:48.926" endtime="20161109 19:52:48.927"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:52:48.927" endtime="20161109 19:52:48.927"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:48.930">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:52:48.928" endtime="20161109 19:52:48.930"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:48.931">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:52:48.931" endtime="20161109 19:52:48.931"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:48.930" endtime="20161109 19:52:48.931"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:48.928" endtime="20161109 19:52:48.931"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:48.932">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:52:48.932" endtime="20161109 19:52:48.933"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:48.933">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:52:48.933" endtime="20161109 19:52:48.934"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:48.934">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:52:48.934" endtime="20161109 19:52:48.934"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:48.935">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:52:48.934" endtime="20161109 19:52:48.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:49.632">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:52:49.632">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:48.935" endtime="20161109 19:52:49.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:49.633">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:52:49.633" endtime="20161109 19:52:49.634"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:48.931" endtime="20161109 19:52:49.634"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:50.240">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:52:50.240">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:49.634" endtime="20161109 19:52:50.240"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:50.242">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:52:50.241" endtime="20161109 19:52:50.242"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:50.244">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:52:50.244" endtime="20161109 19:52:50.244"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:50.243" endtime="20161109 19:52:50.244"></status>
</kw>
<status status="PASS" starttime="20161109 19:52:50.240" endtime="20161109 19:52:50.244"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:50.244">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:48.924" endtime="20161109 19:52:50.244"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:50.245">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:52:48.922" endtime="20161109 19:52:50.245"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:52:50.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:52:50.245" endtime="20161109 19:52:50.245"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:52:50.246">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:52:50.246">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:52:50.246">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:52:50.246" endtime="20161109 19:52:50.246"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:52:50.247">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:52:48.920" endtime="20161109 19:52:50.247"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:52:50.247">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:52:50.247" endtime="20161109 19:52:50.248"></status>
</kw>
<status status="FAIL" starttime="20161109 19:52:48.919" endtime="20161109 19:52:50.248"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:00.249">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:53:00.249" endtime="20161109 19:53:00.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:00.250">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:53:00.250" endtime="20161109 19:53:00.250"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:00.251">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:53:00.251" endtime="20161109 19:53:00.251"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:00.252">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:53:00.252" endtime="20161109 19:53:00.252"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:00.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:53:00.252" endtime="20161109 19:53:00.253"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:53:00.253" endtime="20161109 19:53:00.253"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:00.255">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:53:00.254" endtime="20161109 19:53:00.255"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:00.257">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:53:00.256" endtime="20161109 19:53:00.257"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:00.255" endtime="20161109 19:53:00.257"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:00.253" endtime="20161109 19:53:00.257"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:00.259">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:53:00.258" endtime="20161109 19:53:00.291"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:00.292">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:53:00.292" endtime="20161109 19:53:00.292"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:00.293">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:53:00.292" endtime="20161109 19:53:00.293"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:00.293">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:53:00.293" endtime="20161109 19:53:00.293"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:01.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:53:01.139">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:00.293" endtime="20161109 19:53:01.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:01.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:53:01.139" endtime="20161109 19:53:01.140"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:00.257" endtime="20161109 19:53:01.140"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:01.681">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:53:01.681">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:01.140" endtime="20161109 19:53:01.681"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:01.683">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:53:01.682" endtime="20161109 19:53:01.683"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:01.685">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:53:01.684" endtime="20161109 19:53:01.685"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:01.684" endtime="20161109 19:53:01.685"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:01.682" endtime="20161109 19:53:01.685"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:01.686">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:00.251" endtime="20161109 19:53:01.686"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:01.686">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:00.250" endtime="20161109 19:53:01.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:01.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:53:01.686" endtime="20161109 19:53:01.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:01.688">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:53:01.688">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:53:01.688">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:53:01.687" endtime="20161109 19:53:01.688"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:01.689">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:53:00.249" endtime="20161109 19:53:01.689"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:53:01.689">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:53:01.689" endtime="20161109 19:53:01.690"></status>
</kw>
<status status="FAIL" starttime="20161109 19:53:00.248" endtime="20161109 19:53:01.690"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:11.693">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:53:11.692" endtime="20161109 19:53:11.693"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:11.694">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:53:11.693" endtime="20161109 19:53:11.694"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:11.696">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:53:11.695" endtime="20161109 19:53:11.696"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:11.697">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:53:11.697" endtime="20161109 19:53:11.697"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:11.698">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:53:11.698" endtime="20161109 19:53:11.698"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:53:11.698" endtime="20161109 19:53:11.699"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:11.701">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:53:11.700" endtime="20161109 19:53:11.701"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:11.702">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:53:11.702" endtime="20161109 19:53:11.703"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:11.701" endtime="20161109 19:53:11.703"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:11.699" endtime="20161109 19:53:11.703"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:11.704">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:53:11.704" endtime="20161109 19:53:11.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:11.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:53:11.705" endtime="20161109 19:53:11.705"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:11.706">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:53:11.705" endtime="20161109 19:53:11.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:11.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:53:11.706" endtime="20161109 19:53:11.706"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:12.042">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:53:12.042">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:11.706" endtime="20161109 19:53:12.042"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:12.043">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:53:12.043" endtime="20161109 19:53:12.043"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:11.703" endtime="20161109 19:53:12.043"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:12.324">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:53:12.324">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:12.043" endtime="20161109 19:53:12.324"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:12.326">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:53:12.325" endtime="20161109 19:53:12.326"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:12.328">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:53:12.327" endtime="20161109 19:53:12.328"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:12.326" endtime="20161109 19:53:12.328"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:12.325" endtime="20161109 19:53:12.328"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:12.329">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:11.696" endtime="20161109 19:53:12.329"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:12.329">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:11.694" endtime="20161109 19:53:12.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:12.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:53:12.329" endtime="20161109 19:53:12.330"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:12.331">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:53:12.331">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:53:12.331">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:53:12.330" endtime="20161109 19:53:12.331"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:12.331">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:53:11.691" endtime="20161109 19:53:12.332"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:53:12.332">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:53:12.332" endtime="20161109 19:53:12.333"></status>
</kw>
<status status="FAIL" starttime="20161109 19:53:11.690" endtime="20161109 19:53:12.333"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:22.335">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:53:22.335" endtime="20161109 19:53:22.335"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:22.336">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:53:22.335" endtime="20161109 19:53:22.336"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:22.338">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:53:22.337" endtime="20161109 19:53:22.338"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:22.339">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:53:22.339" endtime="20161109 19:53:22.339"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:22.340">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:53:22.340" endtime="20161109 19:53:22.340"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:53:22.340" endtime="20161109 19:53:22.341"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:22.343">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:53:22.342" endtime="20161109 19:53:22.343"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:22.345">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:53:22.344" endtime="20161109 19:53:22.345"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:22.343" endtime="20161109 19:53:22.345"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:22.341" endtime="20161109 19:53:22.345"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:22.346">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:53:22.345" endtime="20161109 19:53:22.346"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:22.347">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:53:22.347" endtime="20161109 19:53:22.347"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:22.347">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:53:22.347" endtime="20161109 19:53:22.347"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:22.348">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:53:22.348" endtime="20161109 19:53:22.348"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:22.825">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:53:22.825">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:22.348" endtime="20161109 19:53:22.825"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:22.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:53:22.826" endtime="20161109 19:53:22.826"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:22.345" endtime="20161109 19:53:22.826"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:23.119">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:53:23.119">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:22.827" endtime="20161109 19:53:23.119"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:23.120">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:53:23.120" endtime="20161109 19:53:23.120"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:23.121">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:53:23.121" endtime="20161109 19:53:23.121"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:23.120" endtime="20161109 19:53:23.121"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:23.119" endtime="20161109 19:53:23.121"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:23.121">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:22.338" endtime="20161109 19:53:23.121"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:23.122">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:22.336" endtime="20161109 19:53:23.122"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:23.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:53:23.122" endtime="20161109 19:53:23.122"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:23.124">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:53:23.124">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:53:23.124">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:53:23.122" endtime="20161109 19:53:23.124"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:23.124">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:53:22.334" endtime="20161109 19:53:23.124"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:53:23.125">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:53:23.124" endtime="20161109 19:53:23.125"></status>
</kw>
<status status="FAIL" starttime="20161109 19:53:22.333" endtime="20161109 19:53:23.125"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:33.127">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:53:33.127" endtime="20161109 19:53:33.127"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:33.128">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:53:33.128" endtime="20161109 19:53:33.128"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:33.130">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:53:33.130" endtime="20161109 19:53:33.130"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:33.132">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:53:33.132" endtime="20161109 19:53:33.133"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:33.134">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:53:33.133" endtime="20161109 19:53:33.134"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:53:33.134" endtime="20161109 19:53:33.135"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:33.137">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:53:33.136" endtime="20161109 19:53:33.137"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:33.137">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:53:33.137" endtime="20161109 19:53:33.138"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:33.137" endtime="20161109 19:53:33.138"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:33.135" endtime="20161109 19:53:33.138"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:33.139">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:53:33.138" endtime="20161109 19:53:33.139"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:33.139">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:53:33.139" endtime="20161109 19:53:33.139"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:33.140">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:53:33.140" endtime="20161109 19:53:33.140"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:33.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:53:33.140" endtime="20161109 19:53:33.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:40.865">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:53:40.865">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:33.141" endtime="20161109 19:53:40.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:40.866">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:53:40.866" endtime="20161109 19:53:40.866"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:33.138" endtime="20161109 19:53:40.866"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:42.010">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:53:42.010">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:40.867" endtime="20161109 19:53:42.010"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:42.012">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:53:42.011" endtime="20161109 19:53:42.012"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:42.014">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:53:42.013" endtime="20161109 19:53:42.014"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:42.012" endtime="20161109 19:53:42.014"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:42.010" endtime="20161109 19:53:42.014"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:42.015">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:33.130" endtime="20161109 19:53:42.015"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:42.015">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:33.129" endtime="20161109 19:53:42.015"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:42.016">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:53:42.016" endtime="20161109 19:53:42.016"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:42.017">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:53:42.017">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:53:42.017">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:53:42.017" endtime="20161109 19:53:42.017"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:42.018">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:53:33.126" endtime="20161109 19:53:42.018"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:53:42.019">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:53:42.018" endtime="20161109 19:53:42.019"></status>
</kw>
<status status="FAIL" starttime="20161109 19:53:33.125" endtime="20161109 19:53:42.019"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.023">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:53:52.022" endtime="20161109 19:53:52.023"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.024">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:53:52.023" endtime="20161109 19:53:52.024"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.027">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:53:52.026" endtime="20161109 19:53:52.027"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.030">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:53:52.029" endtime="20161109 19:53:52.030"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.031">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:53:52.030" endtime="20161109 19:53:52.031"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:53:52.032" endtime="20161109 19:53:52.032"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.036">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:53:52.034" endtime="20161109 19:53:52.036"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:52.037">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:53:52.036" endtime="20161109 19:53:52.037"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:52.036" endtime="20161109 19:53:52.037"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:52.033" endtime="20161109 19:53:52.037"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:52.038">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:53:52.038" endtime="20161109 19:53:52.039"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:53:52.039" endtime="20161109 19:53:52.039"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.040">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:53:52.039" endtime="20161109 19:53:52.040"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.040">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:53:52.040" endtime="20161109 19:53:52.041"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.373">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:53:52.374">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:52.041" endtime="20161109 19:53:52.374"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:52.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:53:52.374" endtime="20161109 19:53:52.375"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:52.037" endtime="20161109 19:53:52.375"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.665">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:53:52.665">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:52.375" endtime="20161109 19:53:52.665"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.667">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:53:52.666" endtime="20161109 19:53:52.667"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:52.668">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:53:52.668" endtime="20161109 19:53:52.668"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:52.667" endtime="20161109 19:53:52.669"></status>
</kw>
<status status="PASS" starttime="20161109 19:53:52.665" endtime="20161109 19:53:52.669"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:52.669">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:52.027" endtime="20161109 19:53:52.669"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:52.669">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:53:52.024" endtime="20161109 19:53:52.669"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:53:52.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:53:52.670" endtime="20161109 19:53:52.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:53:52.671">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:53:52.671">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:53:52.671">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:53:52.671" endtime="20161109 19:53:52.672"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:53:52.672">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:53:52.021" endtime="20161109 19:53:52.672"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:53:52.673">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:53:52.672" endtime="20161109 19:53:52.673"></status>
</kw>
<status status="FAIL" starttime="20161109 19:53:52.020" endtime="20161109 19:53:52.673"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:02.677">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:54:02.676" endtime="20161109 19:54:02.677"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:02.678">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:54:02.677" endtime="20161109 19:54:02.678"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:02.679">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:54:02.679" endtime="20161109 19:54:02.680"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:02.681">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:54:02.681" endtime="20161109 19:54:02.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:02.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:54:02.682" endtime="20161109 19:54:02.682"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:54:02.683" endtime="20161109 19:54:02.683"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:02.686">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:54:02.685" endtime="20161109 19:54:02.686"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:02.687">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:54:02.687" endtime="20161109 19:54:02.687"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:02.686" endtime="20161109 19:54:02.687"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:02.684" endtime="20161109 19:54:02.687"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:02.688">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:54:02.688" endtime="20161109 19:54:02.689"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:02.689">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:54:02.689" endtime="20161109 19:54:02.689"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:02.690">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:54:02.690" endtime="20161109 19:54:02.690"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:02.690">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:54:02.690" endtime="20161109 19:54:02.690"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:03.170">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:54:03.170">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:02.691" endtime="20161109 19:54:03.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:03.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:54:03.170" endtime="20161109 19:54:03.171"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:02.688" endtime="20161109 19:54:03.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:03.455">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:54:03.455">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:03.172" endtime="20161109 19:54:03.455"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:03.457">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:54:03.456" endtime="20161109 19:54:03.457"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:03.459">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:54:03.458" endtime="20161109 19:54:03.459"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:03.457" endtime="20161109 19:54:03.459"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:03.455" endtime="20161109 19:54:03.459"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:03.460">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:02.680" endtime="20161109 19:54:03.460"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:03.460">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:02.678" endtime="20161109 19:54:03.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:03.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:54:03.460" endtime="20161109 19:54:03.461"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:03.462">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:54:03.462">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:54:03.462">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:54:03.461" endtime="20161109 19:54:03.462"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:03.463">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:54:02.675" endtime="20161109 19:54:03.463"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:54:03.464">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:54:03.463" endtime="20161109 19:54:03.464"></status>
</kw>
<status status="FAIL" starttime="20161109 19:54:02.674" endtime="20161109 19:54:03.464"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:13.467">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:54:13.467" endtime="20161109 19:54:13.468"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:13.469">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:54:13.468" endtime="20161109 19:54:13.469"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:13.470">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:54:13.470" endtime="20161109 19:54:13.470"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:13.472">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:54:13.472" endtime="20161109 19:54:13.472"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:13.473">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:54:13.473" endtime="20161109 19:54:13.473"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:54:13.474" endtime="20161109 19:54:13.474"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:13.476">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:54:13.475" endtime="20161109 19:54:13.476"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:13.477">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:54:13.477" endtime="20161109 19:54:13.477"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:13.476" endtime="20161109 19:54:13.477"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:13.474" endtime="20161109 19:54:13.477"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:13.478">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:54:13.478" endtime="20161109 19:54:13.479"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:13.479">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:54:13.479" endtime="20161109 19:54:13.479"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:13.480">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:54:13.479" endtime="20161109 19:54:13.480"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:13.480">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:54:13.480" endtime="20161109 19:54:13.480"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:13.812">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:54:13.812">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:13.480" endtime="20161109 19:54:13.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:13.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:54:13.813" endtime="20161109 19:54:13.813"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:13.478" endtime="20161109 19:54:13.813"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:14.100">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:54:14.100">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:13.813" endtime="20161109 19:54:14.100"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:14.102">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:54:14.101" endtime="20161109 19:54:14.102"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:14.102">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:54:14.102" endtime="20161109 19:54:14.102"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:14.102" endtime="20161109 19:54:14.103"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:14.101" endtime="20161109 19:54:14.103"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:14.103">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:13.471" endtime="20161109 19:54:14.103"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:14.103">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:13.469" endtime="20161109 19:54:14.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:14.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:54:14.103" endtime="20161109 19:54:14.104"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:14.104">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:54:14.104">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:54:14.104">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:54:14.104" endtime="20161109 19:54:14.104"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:14.105">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:54:13.466" endtime="20161109 19:54:14.105"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:54:14.105">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:54:14.105" endtime="20161109 19:54:14.105"></status>
</kw>
<status status="FAIL" starttime="20161109 19:54:13.465" endtime="20161109 19:54:14.105"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.108">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:54:24.108" endtime="20161109 19:54:24.109"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.110">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:54:24.109" endtime="20161109 19:54:24.110"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.112">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:54:24.112" endtime="20161109 19:54:24.112"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.115">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:54:24.114" endtime="20161109 19:54:24.115"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.117">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:54:24.116" endtime="20161109 19:54:24.117"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:54:24.117" endtime="20161109 19:54:24.117"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.119">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:54:24.118" endtime="20161109 19:54:24.119"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:24.120">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:54:24.120" endtime="20161109 19:54:24.120"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:24.119" endtime="20161109 19:54:24.121"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:24.117" endtime="20161109 19:54:24.121"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:24.121">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:54:24.121" endtime="20161109 19:54:24.122"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.122">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:54:24.122" endtime="20161109 19:54:24.122"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.123">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:54:24.122" endtime="20161109 19:54:24.123"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.123">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:54:24.123" endtime="20161109 19:54:24.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.491">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:54:24.491">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:24.124" endtime="20161109 19:54:24.491"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:24.492">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:54:24.492" endtime="20161109 19:54:24.492"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:24.121" endtime="20161109 19:54:24.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.775">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:54:24.776">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:24.493" endtime="20161109 19:54:24.776"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.778">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:54:24.777" endtime="20161109 19:54:24.778"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:24.779">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:54:24.779" endtime="20161109 19:54:24.779"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:24.778" endtime="20161109 19:54:24.779"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:24.776" endtime="20161109 19:54:24.780"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:24.781">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:24.113" endtime="20161109 19:54:24.781"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:24.781">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:24.110" endtime="20161109 19:54:24.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:24.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:54:24.781" endtime="20161109 19:54:24.782"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:24.783">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:54:24.783">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:54:24.783">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:54:24.782" endtime="20161109 19:54:24.783"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:24.784">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:54:24.107" endtime="20161109 19:54:24.784"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:54:24.785">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:54:24.784" endtime="20161109 19:54:24.785"></status>
</kw>
<status status="FAIL" starttime="20161109 19:54:24.106" endtime="20161109 19:54:24.785"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:34.788">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:54:34.787" endtime="20161109 19:54:34.788"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:34.788">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:54:34.788" endtime="20161109 19:54:34.789"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:34.791">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:54:34.790" endtime="20161109 19:54:34.791"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:34.793">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:54:34.792" endtime="20161109 19:54:34.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:34.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:54:34.793" endtime="20161109 19:54:34.794"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:54:34.794" endtime="20161109 19:54:34.794"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:34.797">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:54:34.796" endtime="20161109 19:54:34.797"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:34.798">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:54:34.798" endtime="20161109 19:54:34.798"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:34.797" endtime="20161109 19:54:34.798"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:34.795" endtime="20161109 19:54:34.798"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:34.799">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:54:34.799" endtime="20161109 19:54:34.799"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:34.800">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:54:34.800" endtime="20161109 19:54:34.800"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:34.800">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:54:34.800" endtime="20161109 19:54:34.800"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:34.801">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:54:34.801" endtime="20161109 19:54:34.801"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:35.140">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:54:35.140">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:34.801" endtime="20161109 19:54:35.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:35.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:54:35.141" endtime="20161109 19:54:35.141"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:34.798" endtime="20161109 19:54:35.142"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:35.425">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:54:35.425">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:35.142" endtime="20161109 19:54:35.425"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:35.427">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:54:35.426" endtime="20161109 19:54:35.427"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:35.428">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:54:35.428" endtime="20161109 19:54:35.429"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:35.427" endtime="20161109 19:54:35.429"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:35.425" endtime="20161109 19:54:35.429"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:35.429">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:34.791" endtime="20161109 19:54:35.429"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:35.430">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:34.789" endtime="20161109 19:54:35.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:35.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:54:35.430" endtime="20161109 19:54:35.431"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:35.431">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:54:35.432">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:54:35.432">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:54:35.431" endtime="20161109 19:54:35.432"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:35.432">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:54:34.786" endtime="20161109 19:54:35.432"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:54:35.433">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:54:35.433" endtime="20161109 19:54:35.433"></status>
</kw>
<status status="FAIL" starttime="20161109 19:54:34.785" endtime="20161109 19:54:35.433"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:45.436">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:54:45.436" endtime="20161109 19:54:45.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:45.437">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:54:45.436" endtime="20161109 19:54:45.437"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:45.438">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:54:45.438" endtime="20161109 19:54:45.438"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:45.440">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:54:45.440" endtime="20161109 19:54:45.440"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:45.441">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:54:45.440" endtime="20161109 19:54:45.441"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:54:45.441" endtime="20161109 19:54:45.441"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:45.444">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:54:45.443" endtime="20161109 19:54:45.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:45.445">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:54:45.445" endtime="20161109 19:54:45.445"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:45.444" endtime="20161109 19:54:45.445"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:45.442" endtime="20161109 19:54:45.445"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:45.447">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:54:45.446" endtime="20161109 19:54:45.448"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:45.448">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:54:45.448" endtime="20161109 19:54:45.448"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:45.449">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:54:45.448" endtime="20161109 19:54:45.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:45.449">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:54:45.449" endtime="20161109 19:54:45.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:49.625">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:54:49.625">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:45.449" endtime="20161109 19:54:49.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:49.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:54:49.625" endtime="20161109 19:54:49.626"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:45.446" endtime="20161109 19:54:49.627"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:50.526">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:54:50.526">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:49.627" endtime="20161109 19:54:50.526"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:50.528">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:54:50.527" endtime="20161109 19:54:50.528"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:50.529">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:54:50.529" endtime="20161109 19:54:50.529"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:50.528" endtime="20161109 19:54:50.530"></status>
</kw>
<status status="PASS" starttime="20161109 19:54:50.526" endtime="20161109 19:54:50.530"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:50.530">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:45.439" endtime="20161109 19:54:50.530"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:50.530">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:54:45.437" endtime="20161109 19:54:50.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:54:50.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:54:50.531" endtime="20161109 19:54:50.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:54:50.532">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:54:50.532">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:54:50.532">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:54:50.532" endtime="20161109 19:54:50.532"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:54:50.533">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:54:45.435" endtime="20161109 19:54:50.533"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:54:50.534">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:54:50.533" endtime="20161109 19:54:50.534"></status>
</kw>
<status status="FAIL" starttime="20161109 19:54:45.434" endtime="20161109 19:54:50.534"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:00.537">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:55:00.536" endtime="20161109 19:55:00.537"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:00.538">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:55:00.537" endtime="20161109 19:55:00.538"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:00.540">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:55:00.539" endtime="20161109 19:55:00.540"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:00.542">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:55:00.541" endtime="20161109 19:55:00.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:00.542">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:00.542" endtime="20161109 19:55:00.543"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:55:00.543" endtime="20161109 19:55:00.544"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:00.546">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:00.545" endtime="20161109 19:55:00.546"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:00.548">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:00.547" endtime="20161109 19:55:00.548"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:00.547" endtime="20161109 19:55:00.548"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:00.544" endtime="20161109 19:55:00.548"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:00.549">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:55:00.548" endtime="20161109 19:55:00.549"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:00.550">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:00.549" endtime="20161109 19:55:00.550"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:00.550">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:55:00.550" endtime="20161109 19:55:00.550"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:00.551">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:55:00.550" endtime="20161109 19:55:00.551"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:00.890">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:55:00.890">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:00.551" endtime="20161109 19:55:00.890"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:00.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:55:00.890" endtime="20161109 19:55:00.891"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:00.548" endtime="20161109 19:55:00.891"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:01.174">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:55:01.175">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:00.891" endtime="20161109 19:55:01.175"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:01.176">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:55:01.175" endtime="20161109 19:55:01.176"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:01.177">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:55:01.177" endtime="20161109 19:55:01.177"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:01.176" endtime="20161109 19:55:01.177"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:01.175" endtime="20161109 19:55:01.178"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:01.178">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:00.540" endtime="20161109 19:55:01.178"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:01.178">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:00.538" endtime="20161109 19:55:01.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:01.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:55:01.179" endtime="20161109 19:55:01.179"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:01.180">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:55:01.180">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:55:01.186">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:55:01.180" endtime="20161109 19:55:01.186"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:01.186">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:55:00.535" endtime="20161109 19:55:01.186"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:55:01.188">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:55:01.187" endtime="20161109 19:55:01.188"></status>
</kw>
<status status="FAIL" starttime="20161109 19:55:00.534" endtime="20161109 19:55:01.188"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.190">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:55:11.190" endtime="20161109 19:55:11.190"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.191">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:55:11.191" endtime="20161109 19:55:11.192"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.193">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:55:11.193" endtime="20161109 19:55:11.193"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.195">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:55:11.195" endtime="20161109 19:55:11.195"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.196">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:11.196" endtime="20161109 19:55:11.196"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:55:11.197" endtime="20161109 19:55:11.197"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.200">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:11.198" endtime="20161109 19:55:11.200"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:11.201">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:11.201" endtime="20161109 19:55:11.201"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:11.200" endtime="20161109 19:55:11.201"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:11.197" endtime="20161109 19:55:11.202"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:11.203">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:55:11.203" endtime="20161109 19:55:11.204"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.205">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:11.204" endtime="20161109 19:55:11.205"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.205">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:55:11.205" endtime="20161109 19:55:11.206"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.206">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:55:11.206" endtime="20161109 19:55:11.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.543">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:55:11.543">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:11.207" endtime="20161109 19:55:11.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:11.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:55:11.544" endtime="20161109 19:55:11.544"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:11.202" endtime="20161109 19:55:11.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.831">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:55:11.831">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:11.544" endtime="20161109 19:55:11.831"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.832">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:55:11.831" endtime="20161109 19:55:11.832"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:11.833">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:55:11.832" endtime="20161109 19:55:11.833"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:11.832" endtime="20161109 19:55:11.833"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:11.831" endtime="20161109 19:55:11.833"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:11.833">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:11.194" endtime="20161109 19:55:11.833"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:11.833">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:11.192" endtime="20161109 19:55:11.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:11.834">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:55:11.834" endtime="20161109 19:55:11.834"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:11.834">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:55:11.835">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:55:11.835">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:55:11.834" endtime="20161109 19:55:11.835"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:11.835">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:55:11.189" endtime="20161109 19:55:11.835"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:55:11.836">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:55:11.835" endtime="20161109 19:55:11.836"></status>
</kw>
<status status="FAIL" starttime="20161109 19:55:11.188" endtime="20161109 19:55:11.836"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:21.838">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:55:21.838" endtime="20161109 19:55:21.838"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:21.839">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:55:21.839" endtime="20161109 19:55:21.840"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:21.841">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:55:21.841" endtime="20161109 19:55:21.841"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:21.843">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:55:21.843" endtime="20161109 19:55:21.843"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:21.844">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:21.844" endtime="20161109 19:55:21.844"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:55:21.845" endtime="20161109 19:55:21.845"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:21.848">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:21.846" endtime="20161109 19:55:21.848"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:21.849">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:21.849" endtime="20161109 19:55:21.849"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:21.848" endtime="20161109 19:55:21.849"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:21.845" endtime="20161109 19:55:21.849"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:21.850">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:55:21.850" endtime="20161109 19:55:21.851"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:21.851">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:21.851" endtime="20161109 19:55:21.851"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:21.852">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:55:21.851" endtime="20161109 19:55:21.852"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:21.852">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:55:21.852" endtime="20161109 19:55:21.852"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:22.184">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:55:22.184">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:21.852" endtime="20161109 19:55:22.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:22.185">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:55:22.185" endtime="20161109 19:55:22.185"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:21.850" endtime="20161109 19:55:22.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:22.466">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:55:22.466">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:22.185" endtime="20161109 19:55:22.466"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:22.469">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:55:22.467" endtime="20161109 19:55:22.469"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:22.470">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:55:22.470" endtime="20161109 19:55:22.470"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:22.469" endtime="20161109 19:55:22.470"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:22.467" endtime="20161109 19:55:22.470"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:22.471">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:21.842" endtime="20161109 19:55:22.471"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:22.471">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:21.840" endtime="20161109 19:55:22.471"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:22.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:55:22.472" endtime="20161109 19:55:22.472"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:22.473">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:55:22.473">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:55:22.473">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:55:22.473" endtime="20161109 19:55:22.473"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:22.474">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:55:21.837" endtime="20161109 19:55:22.474"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:55:22.475">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:55:22.474" endtime="20161109 19:55:22.475"></status>
</kw>
<status status="FAIL" starttime="20161109 19:55:21.836" endtime="20161109 19:55:22.475"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:32.478">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:55:32.477" endtime="20161109 19:55:32.478"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:32.479">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:55:32.479" endtime="20161109 19:55:32.480"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:32.481">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:55:32.481" endtime="20161109 19:55:32.481"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:32.483">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:55:32.483" endtime="20161109 19:55:32.483"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:32.484">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:32.484" endtime="20161109 19:55:32.484"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:55:32.485" endtime="20161109 19:55:32.485"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:32.488">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:32.486" endtime="20161109 19:55:32.488"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:32.489">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:32.489" endtime="20161109 19:55:32.489"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:32.488" endtime="20161109 19:55:32.489"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:32.486" endtime="20161109 19:55:32.489"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:32.490">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:55:32.490" endtime="20161109 19:55:32.490"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:32.491">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:32.491" endtime="20161109 19:55:32.491"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:32.491">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:55:32.491" endtime="20161109 19:55:32.491"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:32.492">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:55:32.492" endtime="20161109 19:55:32.492"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:32.824">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:55:32.824">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:32.492" endtime="20161109 19:55:32.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:32.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:55:32.824" endtime="20161109 19:55:32.825"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:32.489" endtime="20161109 19:55:32.825"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:33.109">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:55:33.109">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:32.825" endtime="20161109 19:55:33.109"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:33.110">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:55:33.110" endtime="20161109 19:55:33.110"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:33.111">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:55:33.111" endtime="20161109 19:55:33.111"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:33.110" endtime="20161109 19:55:33.111"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:33.109" endtime="20161109 19:55:33.111"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:33.111">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:32.481" endtime="20161109 19:55:33.112"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:33.112">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:32.480" endtime="20161109 19:55:33.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:33.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:55:33.112" endtime="20161109 19:55:33.112"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:33.113">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:55:33.113">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:55:33.113">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:55:33.113" endtime="20161109 19:55:33.113"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:33.114">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:55:32.477" endtime="20161109 19:55:33.114"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:55:33.114">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:55:33.114" endtime="20161109 19:55:33.114"></status>
</kw>
<status status="FAIL" starttime="20161109 19:55:32.476" endtime="20161109 19:55:33.115"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.117">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:55:43.117" endtime="20161109 19:55:43.117"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.118">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:55:43.117" endtime="20161109 19:55:43.118"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.120">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:55:43.119" endtime="20161109 19:55:43.120"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.122">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:55:43.122" endtime="20161109 19:55:43.122"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.123">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:43.123" endtime="20161109 19:55:43.123"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:55:43.124" endtime="20161109 19:55:43.124"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.127">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:43.125" endtime="20161109 19:55:43.127"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:43.129">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:43.128" endtime="20161109 19:55:43.129"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:43.127" endtime="20161109 19:55:43.129"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:43.124" endtime="20161109 19:55:43.129"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:43.130">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:55:43.130" endtime="20161109 19:55:43.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.131">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:43.131" endtime="20161109 19:55:43.131"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.131">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:55:43.131" endtime="20161109 19:55:43.132"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.132">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:55:43.132" endtime="20161109 19:55:43.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.468">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:55:43.468">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:43.132" endtime="20161109 19:55:43.468"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:43.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:55:43.469" endtime="20161109 19:55:43.470"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:43.129" endtime="20161109 19:55:43.470"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.750">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:55:43.750">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:43.470" endtime="20161109 19:55:43.750"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.752">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:55:43.752" endtime="20161109 19:55:43.753"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:43.754">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:55:43.754" endtime="20161109 19:55:43.754"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:43.753" endtime="20161109 19:55:43.754"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:43.751" endtime="20161109 19:55:43.754"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:43.755">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:43.120" endtime="20161109 19:55:43.755"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:43.755">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:43.118" endtime="20161109 19:55:43.755"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:43.756">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:55:43.756" endtime="20161109 19:55:43.756"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:43.757">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:55:43.757">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:55:43.757">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:55:43.757" endtime="20161109 19:55:43.757"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:55:43.758">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:55:43.116" endtime="20161109 19:55:43.758"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:55:43.759">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:55:43.758" endtime="20161109 19:55:43.759"></status>
</kw>
<status status="FAIL" starttime="20161109 19:55:43.115" endtime="20161109 19:55:43.759"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:53.761">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:55:53.761" endtime="20161109 19:55:53.761"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:53.762">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:55:53.762" endtime="20161109 19:55:53.763"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:53.765">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:55:53.764" endtime="20161109 19:55:53.765"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:53.767">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:55:53.766" endtime="20161109 19:55:53.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:53.768">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:53.767" endtime="20161109 19:55:53.768"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:55:53.768" endtime="20161109 19:55:53.769"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:53.771">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:53.770" endtime="20161109 19:55:53.771"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:53.773">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:55:53.772" endtime="20161109 19:55:53.773"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:53.771" endtime="20161109 19:55:53.773"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:53.769" endtime="20161109 19:55:53.773"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:55:53.775">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:55:53.774" endtime="20161109 19:55:53.775"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:53.776">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:55:53.775" endtime="20161109 19:55:53.776"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:53.777">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:55:53.776" endtime="20161109 19:55:53.777"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:55:53.778">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:55:53.777" endtime="20161109 19:55:53.778"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:01.764">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:01.764">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:53.778" endtime="20161109 19:56:01.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:01.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:01.765" endtime="20161109 19:56:01.766"></status>
</kw>
<status status="PASS" starttime="20161109 19:55:53.773" endtime="20161109 19:56:01.766"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:02.903">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:02.903">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:01.767" endtime="20161109 19:56:02.903"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:02.904">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:02.904" endtime="20161109 19:56:02.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:02.905">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:02.905" endtime="20161109 19:56:02.905"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:02.904" endtime="20161109 19:56:02.905"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:02.903" endtime="20161109 19:56:02.905"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:02.906">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:53.765" endtime="20161109 19:56:02.906"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:02.906">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:55:53.763" endtime="20161109 19:56:02.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:02.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:02.906" endtime="20161109 19:56:02.906"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:02.907">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:56:02.907">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:56:02.907">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:56:02.907" endtime="20161109 19:56:02.907"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:02.907">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:55:53.760" endtime="20161109 19:56:02.907"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:56:02.908">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:56:02.907" endtime="20161109 19:56:02.908"></status>
</kw>
<status status="FAIL" starttime="20161109 19:55:53.760" endtime="20161109 19:56:02.908"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:12.911">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:56:12.911" endtime="20161109 19:56:12.911"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:12.912">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:56:12.912" endtime="20161109 19:56:12.912"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:12.915">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:56:12.914" endtime="20161109 19:56:12.915"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:12.917">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:56:12.916" endtime="20161109 19:56:12.917"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:12.918">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:56:12.917" endtime="20161109 19:56:12.918"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:56:12.918" endtime="20161109 19:56:12.918"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:12.920">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:56:12.920" endtime="20161109 19:56:12.920"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:12.921">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:56:12.921" endtime="20161109 19:56:12.921"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:12.921" endtime="20161109 19:56:12.922"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:12.919" endtime="20161109 19:56:12.922"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:12.923">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:56:12.922" endtime="20161109 19:56:12.923"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:12.924">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:56:12.923" endtime="20161109 19:56:12.924"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:12.924">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:56:12.924" endtime="20161109 19:56:12.924"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:12.925">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:56:12.925" endtime="20161109 19:56:12.925"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:13.273">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:13.273">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:12.925" endtime="20161109 19:56:13.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:13.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:13.273" endtime="20161109 19:56:13.274"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:12.922" endtime="20161109 19:56:13.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:13.556">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:13.557">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:13.275" endtime="20161109 19:56:13.557"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:13.559">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:13.558" endtime="20161109 19:56:13.559"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:13.560">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:13.560" endtime="20161109 19:56:13.560"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:13.559" endtime="20161109 19:56:13.560"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:13.557" endtime="20161109 19:56:13.561"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:13.561">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:12.915" endtime="20161109 19:56:13.561"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:13.561">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:12.913" endtime="20161109 19:56:13.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:13.562">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:13.562" endtime="20161109 19:56:13.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:13.563">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:56:13.563">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:56:13.563">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:56:13.563" endtime="20161109 19:56:13.563"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:13.564">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:56:12.910" endtime="20161109 19:56:13.564"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:56:13.565">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:56:13.564" endtime="20161109 19:56:13.565"></status>
</kw>
<status status="FAIL" starttime="20161109 19:56:12.909" endtime="20161109 19:56:13.565"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:23.568">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:56:23.567" endtime="20161109 19:56:23.568"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:23.569">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:56:23.568" endtime="20161109 19:56:23.569"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:23.571">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:56:23.570" endtime="20161109 19:56:23.571"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:23.573">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:56:23.572" endtime="20161109 19:56:23.573"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:23.578">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:56:23.573" endtime="20161109 19:56:23.578"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:56:23.578" endtime="20161109 19:56:23.578"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:23.580">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:56:23.580" endtime="20161109 19:56:23.581"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:23.581">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:56:23.581" endtime="20161109 19:56:23.582"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:23.581" endtime="20161109 19:56:23.582"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:23.579" endtime="20161109 19:56:23.582"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:23.583">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:56:23.582" endtime="20161109 19:56:23.583"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:23.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:56:23.583" endtime="20161109 19:56:23.583"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:23.584">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:56:23.584" endtime="20161109 19:56:23.584"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:23.584">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:56:23.584" endtime="20161109 19:56:23.585"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:23.923">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:23.923">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:23.585" endtime="20161109 19:56:23.923"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:23.924">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:23.924" endtime="20161109 19:56:23.924"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:23.582" endtime="20161109 19:56:23.925"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:24.204">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:24.205">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:23.925" endtime="20161109 19:56:24.205"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:24.207">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:24.206" endtime="20161109 19:56:24.207"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:24.209">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:24.208" endtime="20161109 19:56:24.209"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:24.207" endtime="20161109 19:56:24.209"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:24.205" endtime="20161109 19:56:24.209"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:24.210">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:23.571" endtime="20161109 19:56:24.210"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:24.210">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:23.569" endtime="20161109 19:56:24.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:24.211">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:24.210" endtime="20161109 19:56:24.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:24.211">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:56:24.211">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:56:24.211">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:56:24.211" endtime="20161109 19:56:24.212"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:24.212">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:56:23.567" endtime="20161109 19:56:24.212"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:56:24.212">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:56:24.212" endtime="20161109 19:56:24.213"></status>
</kw>
<status status="FAIL" starttime="20161109 19:56:23.566" endtime="20161109 19:56:24.213"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:34.216">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:56:34.215" endtime="20161109 19:56:34.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:34.217">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:56:34.216" endtime="20161109 19:56:34.217"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:34.219">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:56:34.218" endtime="20161109 19:56:34.219"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:34.221">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:56:34.220" endtime="20161109 19:56:34.221"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:34.222">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:56:34.221" endtime="20161109 19:56:34.222"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:56:34.222" endtime="20161109 19:56:34.223"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:34.225">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:56:34.224" endtime="20161109 19:56:34.225"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:34.226">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:56:34.226" endtime="20161109 19:56:34.227"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:34.225" endtime="20161109 19:56:34.227"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:34.223" endtime="20161109 19:56:34.227"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:34.229">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:56:34.228" endtime="20161109 19:56:34.229"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:34.230">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:56:34.230" endtime="20161109 19:56:34.230"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:34.231">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:56:34.230" endtime="20161109 19:56:34.231"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:34.231">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:56:34.231" endtime="20161109 19:56:34.231"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:34.723">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:34.723">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:34.231" endtime="20161109 19:56:34.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:34.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:34.724" endtime="20161109 19:56:34.724"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:34.227" endtime="20161109 19:56:34.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:35.001">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:35.001">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:34.725" endtime="20161109 19:56:35.001"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:35.002">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:35.002" endtime="20161109 19:56:35.002"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:35.003">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:35.003" endtime="20161109 19:56:35.003"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:35.002" endtime="20161109 19:56:35.003"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:35.001" endtime="20161109 19:56:35.003"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:35.004">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:34.219" endtime="20161109 19:56:35.004"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:35.004">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:34.217" endtime="20161109 19:56:35.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:35.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:35.004" endtime="20161109 19:56:35.004"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:35.005">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:56:35.005">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:56:35.005">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:56:35.005" endtime="20161109 19:56:35.005"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:35.005">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:56:34.215" endtime="20161109 19:56:35.005"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:56:35.006">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:56:35.006" endtime="20161109 19:56:35.006"></status>
</kw>
<status status="FAIL" starttime="20161109 19:56:34.214" endtime="20161109 19:56:35.006"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.009">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:56:45.008" endtime="20161109 19:56:45.009"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.010">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:56:45.009" endtime="20161109 19:56:45.010"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.012">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:56:45.011" endtime="20161109 19:56:45.012"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.014">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:56:45.014" endtime="20161109 19:56:45.014"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.015">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:56:45.015" endtime="20161109 19:56:45.015"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:56:45.016" endtime="20161109 19:56:45.016"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.019">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:56:45.017" endtime="20161109 19:56:45.019"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:45.021">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:56:45.020" endtime="20161109 19:56:45.021"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:45.020" endtime="20161109 19:56:45.021"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:45.016" endtime="20161109 19:56:45.021"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:45.022">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:56:45.022" endtime="20161109 19:56:45.022"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.023">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:56:45.022" endtime="20161109 19:56:45.023"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.023">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:56:45.023" endtime="20161109 19:56:45.023"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.024">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:56:45.023" endtime="20161109 19:56:45.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.364">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:45.364">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:45.024" endtime="20161109 19:56:45.364"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:45.365">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:45.365" endtime="20161109 19:56:45.365"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:45.021" endtime="20161109 19:56:45.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.645">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:45.646">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:45.365" endtime="20161109 19:56:45.646"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.647">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:45.646" endtime="20161109 19:56:45.647"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:45.648">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:45.648" endtime="20161109 19:56:45.648"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:45.647" endtime="20161109 19:56:45.648"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:45.646" endtime="20161109 19:56:45.648"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:45.648">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:45.012" endtime="20161109 19:56:45.648"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:45.648">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:45.010" endtime="20161109 19:56:45.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:45.649">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:45.649" endtime="20161109 19:56:45.649"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:45.650">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:56:45.650">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:56:45.650">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:56:45.649" endtime="20161109 19:56:45.650"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:45.650">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:56:45.008" endtime="20161109 19:56:45.650"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:56:45.651">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:56:45.651" endtime="20161109 19:56:45.652"></status>
</kw>
<status status="FAIL" starttime="20161109 19:56:45.007" endtime="20161109 19:56:45.652"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:55.655">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:56:55.654" endtime="20161109 19:56:55.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:55.656">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:56:55.655" endtime="20161109 19:56:55.657"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:55.658">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:56:55.658" endtime="20161109 19:56:55.658"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:55.661">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:56:55.660" endtime="20161109 19:56:55.661"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:55.662">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:56:55.661" endtime="20161109 19:56:55.662"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:56:55.662" endtime="20161109 19:56:55.662"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:55.664">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:56:55.664" endtime="20161109 19:56:55.665"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:55.666">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:56:55.665" endtime="20161109 19:56:55.666"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:55.665" endtime="20161109 19:56:55.666"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:55.663" endtime="20161109 19:56:55.666"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:55.667">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:56:55.667" endtime="20161109 19:56:55.668"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:55.669">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:56:55.668" endtime="20161109 19:56:55.669"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:55.670">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:56:55.669" endtime="20161109 19:56:55.670"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:55.670">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:56:55.670" endtime="20161109 19:56:55.671"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:56.002">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:56.002">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:55.671" endtime="20161109 19:56:56.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:56.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:56.002" endtime="20161109 19:56:56.003"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:55.666" endtime="20161109 19:56:56.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:56.298">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:56:56.298">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:56.003" endtime="20161109 19:56:56.298"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:56.300">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:56.299" endtime="20161109 19:56:56.300"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:56.302">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:56:56.301" endtime="20161109 19:56:56.302"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:56.301" endtime="20161109 19:56:56.302"></status>
</kw>
<status status="PASS" starttime="20161109 19:56:56.298" endtime="20161109 19:56:56.302"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:56.302">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:55.658" endtime="20161109 19:56:56.303"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:56.303">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:56:55.657" endtime="20161109 19:56:56.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:56:56.304">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:56:56.303" endtime="20161109 19:56:56.304"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:56:56.305">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:56:56.305">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:56:56.305">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:56:56.304" endtime="20161109 19:56:56.305"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:56:56.305">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:56:55.654" endtime="20161109 19:56:56.306"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:56:56.306">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:56:56.306" endtime="20161109 19:56:56.307"></status>
</kw>
<status status="FAIL" starttime="20161109 19:56:55.653" endtime="20161109 19:56:56.307"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:06.310">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:57:06.310" endtime="20161109 19:57:06.310"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:06.311">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:57:06.311" endtime="20161109 19:57:06.312"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:06.313">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:57:06.313" endtime="20161109 19:57:06.313"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:06.315">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:57:06.315" endtime="20161109 19:57:06.315"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:06.316">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:57:06.316" endtime="20161109 19:57:06.316"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:57:06.316" endtime="20161109 19:57:06.317"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:06.319">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:57:06.318" endtime="20161109 19:57:06.319"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:06.321">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:57:06.320" endtime="20161109 19:57:06.321"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:06.320" endtime="20161109 19:57:06.321"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:06.317" endtime="20161109 19:57:06.321"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:06.322">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:57:06.322" endtime="20161109 19:57:06.323"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:06.324">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:57:06.323" endtime="20161109 19:57:06.324"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:06.324">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:57:06.324" endtime="20161109 19:57:06.324"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:06.325">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:57:06.324" endtime="20161109 19:57:06.325"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:08.213">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:57:08.214">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:06.325" endtime="20161109 19:57:08.214"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:08.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:57:08.214" endtime="20161109 19:57:08.215"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:06.322" endtime="20161109 19:57:08.215"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:09.061">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:57:09.061">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:08.216" endtime="20161109 19:57:09.061"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:09.063">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:57:09.062" endtime="20161109 19:57:09.063"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:09.065">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:57:09.064" endtime="20161109 19:57:09.065"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:09.063" endtime="20161109 19:57:09.065"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:09.061" endtime="20161109 19:57:09.065"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:09.065">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:06.313" endtime="20161109 19:57:09.066"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:09.066">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:06.312" endtime="20161109 19:57:09.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:09.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:57:09.066" endtime="20161109 19:57:09.067"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:09.068">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:57:09.068">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:57:09.068">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:57:09.068" endtime="20161109 19:57:09.068"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:09.069">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:57:06.309" endtime="20161109 19:57:09.069"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:57:09.070">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:57:09.069" endtime="20161109 19:57:09.070"></status>
</kw>
<status status="FAIL" starttime="20161109 19:57:06.308" endtime="20161109 19:57:09.070"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.073">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:57:19.073" endtime="20161109 19:57:19.073"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.074">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:57:19.074" endtime="20161109 19:57:19.074"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.076">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:57:19.076" endtime="20161109 19:57:19.076"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.078">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:57:19.078" endtime="20161109 19:57:19.078"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.080">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:57:19.079" endtime="20161109 19:57:19.080"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:57:19.080" endtime="20161109 19:57:19.081"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.083">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:57:19.082" endtime="20161109 19:57:19.083"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:19.083">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:57:19.083" endtime="20161109 19:57:19.084"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:19.083" endtime="20161109 19:57:19.084"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:19.081" endtime="20161109 19:57:19.084"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:19.085">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:57:19.084" endtime="20161109 19:57:19.085"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.086">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:57:19.085" endtime="20161109 19:57:19.086"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.086">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:57:19.086" endtime="20161109 19:57:19.086"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.087">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:57:19.086" endtime="20161109 19:57:19.087"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.429">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:57:19.429">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:19.087" endtime="20161109 19:57:19.429"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:19.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:57:19.429" endtime="20161109 19:57:19.430"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:19.084" endtime="20161109 19:57:19.430"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.714">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:57:19.714">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:19.430" endtime="20161109 19:57:19.715"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.716">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:57:19.716" endtime="20161109 19:57:19.717"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:19.718">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:57:19.718" endtime="20161109 19:57:19.718"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:19.717" endtime="20161109 19:57:19.719"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:19.715" endtime="20161109 19:57:19.719"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:19.719">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:19.076" endtime="20161109 19:57:19.719"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:19.720">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:19.075" endtime="20161109 19:57:19.720"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:19.720">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:57:19.720" endtime="20161109 19:57:19.721"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:19.722">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:57:19.722">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:57:19.722">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:57:19.721" endtime="20161109 19:57:19.722"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:19.722">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:57:19.072" endtime="20161109 19:57:19.722"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:57:19.723">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:57:19.723" endtime="20161109 19:57:19.723"></status>
</kw>
<status status="FAIL" starttime="20161109 19:57:19.071" endtime="20161109 19:57:19.724"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:29.725">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:57:29.725" endtime="20161109 19:57:29.726"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:29.726">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:57:29.726" endtime="20161109 19:57:29.726"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:29.727">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:57:29.727" endtime="20161109 19:57:29.727"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:29.728">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:57:29.728" endtime="20161109 19:57:29.728"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:29.729">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:57:29.729" endtime="20161109 19:57:29.729"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:57:29.729" endtime="20161109 19:57:29.729"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:29.731">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:57:29.730" endtime="20161109 19:57:29.731"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:29.732">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:57:29.732" endtime="20161109 19:57:29.732"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:29.731" endtime="20161109 19:57:29.732"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:29.729" endtime="20161109 19:57:29.732"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:29.733">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:57:29.733" endtime="20161109 19:57:29.733"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:29.734">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:57:29.734" endtime="20161109 19:57:29.734"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:29.734">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:57:29.734" endtime="20161109 19:57:29.735"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:29.735">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:57:29.735" endtime="20161109 19:57:29.735"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:30.138">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:57:30.138">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:29.735" endtime="20161109 19:57:30.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:30.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:57:30.139" endtime="20161109 19:57:30.139"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:29.732" endtime="20161109 19:57:30.139"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:30.665">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:57:30.666">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:30.140" endtime="20161109 19:57:30.666"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:30.667">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:57:30.667" endtime="20161109 19:57:30.667"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:30.668">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:57:30.668" endtime="20161109 19:57:30.669"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:30.668" endtime="20161109 19:57:30.669"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:30.666" endtime="20161109 19:57:30.669"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:30.669">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:29.727" endtime="20161109 19:57:30.669"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:30.669">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:29.726" endtime="20161109 19:57:30.669"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:30.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:57:30.670" endtime="20161109 19:57:30.670"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:30.671">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:57:30.671">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:57:30.671">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:57:30.671" endtime="20161109 19:57:30.671"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:30.672">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:57:29.725" endtime="20161109 19:57:30.672"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:57:30.673">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:57:30.672" endtime="20161109 19:57:30.673"></status>
</kw>
<status status="FAIL" starttime="20161109 19:57:29.724" endtime="20161109 19:57:30.673"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:40.676">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:57:40.675" endtime="20161109 19:57:40.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:40.677">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:57:40.676" endtime="20161109 19:57:40.677"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:40.679">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:57:40.678" endtime="20161109 19:57:40.679"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:40.681">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:57:40.680" endtime="20161109 19:57:40.681"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:40.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:57:40.681" endtime="20161109 19:57:40.682"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:57:40.682" endtime="20161109 19:57:40.683"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:40.686">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:57:40.684" endtime="20161109 19:57:40.686"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:40.687">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:57:40.687" endtime="20161109 19:57:40.688"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:40.686" endtime="20161109 19:57:40.688"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:40.683" endtime="20161109 19:57:40.688"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:40.689">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:57:40.689" endtime="20161109 19:57:40.690"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:40.691">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:57:40.690" endtime="20161109 19:57:40.691"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:40.692">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:57:40.691" endtime="20161109 19:57:40.692"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:40.692">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:57:40.692" endtime="20161109 19:57:40.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:41.874">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:57:41.875">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:40.693" endtime="20161109 19:57:41.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:41.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:57:41.875" endtime="20161109 19:57:41.875"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:40.688" endtime="20161109 19:57:41.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:42.600">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:57:42.600">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:41.876" endtime="20161109 19:57:42.600"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:42.602">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:57:42.601" endtime="20161109 19:57:42.602"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:42.604">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:57:42.603" endtime="20161109 19:57:42.604"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:42.603" endtime="20161109 19:57:42.604"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:42.601" endtime="20161109 19:57:42.604"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:42.605">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:40.679" endtime="20161109 19:57:42.605"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:42.605">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:40.677" endtime="20161109 19:57:42.605"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:42.607">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:57:42.606" endtime="20161109 19:57:42.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:42.608">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:57:42.608">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:57:42.609">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:57:42.607" endtime="20161109 19:57:42.609"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:42.609">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:57:40.675" endtime="20161109 19:57:42.609"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:57:42.610">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:57:42.610" endtime="20161109 19:57:42.611"></status>
</kw>
<status status="FAIL" starttime="20161109 19:57:40.674" endtime="20161109 19:57:42.611"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:52.614">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:57:52.613" endtime="20161109 19:57:52.614"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:52.615">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:57:52.615" endtime="20161109 19:57:52.615"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:52.617">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:57:52.616" endtime="20161109 19:57:52.617"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:52.619">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:57:52.618" endtime="20161109 19:57:52.619"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:52.619">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:57:52.619" endtime="20161109 19:57:52.620"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:57:52.620" endtime="20161109 19:57:52.620"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:52.622">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:57:52.621" endtime="20161109 19:57:52.623"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:52.623">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:57:52.623" endtime="20161109 19:57:52.623"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:52.623" endtime="20161109 19:57:52.623"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:52.621" endtime="20161109 19:57:52.624"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:52.624">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:57:52.624" endtime="20161109 19:57:52.625"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:52.625">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:57:52.625" endtime="20161109 19:57:52.625"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:52.626">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:57:52.625" endtime="20161109 19:57:52.626"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:52.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:57:52.626" endtime="20161109 19:57:52.626"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:52.958">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:57:52.958">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:52.627" endtime="20161109 19:57:52.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:52.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:57:52.958" endtime="20161109 19:57:52.959"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:52.624" endtime="20161109 19:57:52.959"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:53.242">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:57:53.242">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:52.959" endtime="20161109 19:57:53.242"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:53.244">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:57:53.243" endtime="20161109 19:57:53.244"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:53.245">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:57:53.245" endtime="20161109 19:57:53.245"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:53.244" endtime="20161109 19:57:53.246"></status>
</kw>
<status status="PASS" starttime="20161109 19:57:53.242" endtime="20161109 19:57:53.246"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:53.246">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:52.617" endtime="20161109 19:57:53.246"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:53.246">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:57:52.615" endtime="20161109 19:57:53.246"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:57:53.247">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:57:53.247" endtime="20161109 19:57:53.247"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:57:53.248">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:57:53.248">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:57:53.249">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:57:53.248" endtime="20161109 19:57:53.249"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:57:53.249">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:57:52.613" endtime="20161109 19:57:53.249"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:57:53.250">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:57:53.249" endtime="20161109 19:57:53.250"></status>
</kw>
<status status="FAIL" starttime="20161109 19:57:52.612" endtime="20161109 19:57:53.250"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.255">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:58:03.254" endtime="20161109 19:58:03.255"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.256">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:58:03.255" endtime="20161109 19:58:03.256"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.258">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:58:03.257" endtime="20161109 19:58:03.258"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.260">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:58:03.260" endtime="20161109 19:58:03.260"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.261">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:58:03.260" endtime="20161109 19:58:03.261"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:58:03.261" endtime="20161109 19:58:03.262"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.264">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:58:03.263" endtime="20161109 19:58:03.264"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:03.264">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:58:03.264" endtime="20161109 19:58:03.265"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:03.264" endtime="20161109 19:58:03.265"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:03.262" endtime="20161109 19:58:03.265"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:03.266">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:58:03.265" endtime="20161109 19:58:03.266"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.267">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:58:03.267" endtime="20161109 19:58:03.267"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.267">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:58:03.267" endtime="20161109 19:58:03.267"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.268">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:58:03.268" endtime="20161109 19:58:03.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.693">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:58:03.694">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:03.269" endtime="20161109 19:58:03.694"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:03.694">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:58:03.694" endtime="20161109 19:58:03.694"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:03.265" endtime="20161109 19:58:03.695"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.980">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:58:03.980">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:03.695" endtime="20161109 19:58:03.980"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.981">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:58:03.981" endtime="20161109 19:58:03.981"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:03.982">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:58:03.982" endtime="20161109 19:58:03.982"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:03.982" endtime="20161109 19:58:03.982"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:03.980" endtime="20161109 19:58:03.983"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:03.983">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:03.258" endtime="20161109 19:58:03.983"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:03.983">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:03.257" endtime="20161109 19:58:03.983"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:03.984">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:58:03.983" endtime="20161109 19:58:03.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:03.984">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:58:03.984">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:58:03.984">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:58:03.984" endtime="20161109 19:58:03.984"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:03.984">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:58:03.252" endtime="20161109 19:58:03.985"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:58:03.985">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:58:03.985" endtime="20161109 19:58:03.985"></status>
</kw>
<status status="FAIL" starttime="20161109 19:58:03.251" endtime="20161109 19:58:03.985"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:13.988">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:58:13.987" endtime="20161109 19:58:13.988"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:13.989">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:58:13.988" endtime="20161109 19:58:13.989"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:13.991">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:58:13.990" endtime="20161109 19:58:13.991"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:13.994">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:58:13.993" endtime="20161109 19:58:13.994"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:13.994">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:58:13.994" endtime="20161109 19:58:13.994"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:58:13.995" endtime="20161109 19:58:13.995"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:13.997">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:58:13.996" endtime="20161109 19:58:13.998"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:13.999">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:58:13.999" endtime="20161109 19:58:13.999"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:13.998" endtime="20161109 19:58:13.999"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:13.995" endtime="20161109 19:58:13.999"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:14.001">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:58:14.000" endtime="20161109 19:58:14.002"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:14.002">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:58:14.002" endtime="20161109 19:58:14.002"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:14.003">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:58:14.003" endtime="20161109 19:58:14.003"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:14.004">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:58:14.004" endtime="20161109 19:58:14.004"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:20.474">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:58:20.474">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:14.005" endtime="20161109 19:58:20.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:20.475">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:58:20.474" endtime="20161109 19:58:20.475"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:14.000" endtime="20161109 19:58:20.476"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:22.365">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:58:22.365">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:20.476" endtime="20161109 19:58:22.365"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:22.368">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:58:22.366" endtime="20161109 19:58:22.368"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:22.369">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:58:22.369" endtime="20161109 19:58:22.369"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:22.368" endtime="20161109 19:58:22.370"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:22.365" endtime="20161109 19:58:22.370"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:22.370">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:13.991" endtime="20161109 19:58:22.370"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:22.370">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:13.989" endtime="20161109 19:58:22.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:22.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:58:22.371" endtime="20161109 19:58:22.372"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:22.373">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:58:22.373">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:58:22.373">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:58:22.372" endtime="20161109 19:58:22.373"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:22.374">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:58:13.987" endtime="20161109 19:58:22.374"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:58:22.375">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:58:22.374" endtime="20161109 19:58:22.375"></status>
</kw>
<status status="FAIL" starttime="20161109 19:58:13.986" endtime="20161109 19:58:22.375"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:32.378">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:58:32.377" endtime="20161109 19:58:32.378"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:32.379">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:58:32.378" endtime="20161109 19:58:32.379"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:32.380">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:58:32.380" endtime="20161109 19:58:32.380"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:32.382">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:58:32.382" endtime="20161109 19:58:32.382"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:32.383">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:58:32.383" endtime="20161109 19:58:32.383"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:58:32.384" endtime="20161109 19:58:32.384"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:32.387">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:58:32.385" endtime="20161109 19:58:32.387"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:32.388">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:58:32.388" endtime="20161109 19:58:32.388"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:32.387" endtime="20161109 19:58:32.388"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:32.385" endtime="20161109 19:58:32.389"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:32.390">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:58:32.390" endtime="20161109 19:58:32.391"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:32.391">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:58:32.391" endtime="20161109 19:58:32.392"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:32.392">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:58:32.392" endtime="20161109 19:58:32.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:32.393">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:58:32.393" endtime="20161109 19:58:32.393"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:32.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:58:32.727">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:32.394" endtime="20161109 19:58:32.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:32.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:58:32.728" endtime="20161109 19:58:32.728"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:32.389" endtime="20161109 19:58:32.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:33.010">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:58:33.010">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:32.729" endtime="20161109 19:58:33.010"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:33.011">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:58:33.011" endtime="20161109 19:58:33.011"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:33.012">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:58:33.012" endtime="20161109 19:58:33.012"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:33.012" endtime="20161109 19:58:33.012"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:33.010" endtime="20161109 19:58:33.012"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:33.013">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:32.381" endtime="20161109 19:58:33.013"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:33.013">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:32.379" endtime="20161109 19:58:33.013"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:33.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:58:33.013" endtime="20161109 19:58:33.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:33.014">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:58:33.014">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:58:33.014">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:58:33.014" endtime="20161109 19:58:33.014"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:33.014">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:58:32.376" endtime="20161109 19:58:33.014"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:58:33.015">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:58:33.015" endtime="20161109 19:58:33.015"></status>
</kw>
<status status="FAIL" starttime="20161109 19:58:32.376" endtime="20161109 19:58:33.015"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.019">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:58:43.018" endtime="20161109 19:58:43.019"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.020">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:58:43.019" endtime="20161109 19:58:43.020"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.022">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:58:43.021" endtime="20161109 19:58:43.022"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.024">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:58:43.023" endtime="20161109 19:58:43.024"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.024">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:58:43.024" endtime="20161109 19:58:43.024"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:58:43.025" endtime="20161109 19:58:43.025"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.027">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:58:43.026" endtime="20161109 19:58:43.027"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:43.028">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:58:43.028" endtime="20161109 19:58:43.028"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:43.027" endtime="20161109 19:58:43.028"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:43.025" endtime="20161109 19:58:43.028"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:43.029">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:58:43.029" endtime="20161109 19:58:43.029"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:58:43.030" endtime="20161109 19:58:43.030"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.031">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:58:43.030" endtime="20161109 19:58:43.031"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.031">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:58:43.031" endtime="20161109 19:58:43.031"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.368">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:58:43.368">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:43.032" endtime="20161109 19:58:43.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:43.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:58:43.368" endtime="20161109 19:58:43.369"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:43.028" endtime="20161109 19:58:43.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.661">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:58:43.661">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:43.370" endtime="20161109 19:58:43.661"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.663">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:58:43.662" endtime="20161109 19:58:43.663"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:43.664">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:58:43.664" endtime="20161109 19:58:43.664"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:43.663" endtime="20161109 19:58:43.665"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:43.661" endtime="20161109 19:58:43.665"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:43.665">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:43.022" endtime="20161109 19:58:43.665"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:43.666">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:43.020" endtime="20161109 19:58:43.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:43.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:58:43.666" endtime="20161109 19:58:43.667"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:43.667">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:58:43.667">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:58:43.668">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:58:43.667" endtime="20161109 19:58:43.668"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:43.668">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:58:43.017" endtime="20161109 19:58:43.668"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:58:43.669">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:58:43.669" endtime="20161109 19:58:43.669"></status>
</kw>
<status status="FAIL" starttime="20161109 19:58:43.016" endtime="20161109 19:58:43.670"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:53.673">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:58:53.672" endtime="20161109 19:58:53.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:53.674">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:58:53.673" endtime="20161109 19:58:53.674"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:53.675">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:58:53.675" endtime="20161109 19:58:53.675"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:53.677">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:58:53.676" endtime="20161109 19:58:53.677"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:53.678">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:58:53.677" endtime="20161109 19:58:53.678"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:58:53.678" endtime="20161109 19:58:53.678"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:53.680">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:58:53.679" endtime="20161109 19:58:53.680"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:53.681">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:58:53.681" endtime="20161109 19:58:53.681"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:53.680" endtime="20161109 19:58:53.682"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:53.678" endtime="20161109 19:58:53.682"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:53.683">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:58:53.682" endtime="20161109 19:58:53.684"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:53.684">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:58:53.684" endtime="20161109 19:58:53.684"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:53.685">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:58:53.685" endtime="20161109 19:58:53.685"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:53.685">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:58:53.685" endtime="20161109 19:58:53.686"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:54.095">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:58:54.096">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:53.686" endtime="20161109 19:58:54.096"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:54.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:58:54.096" endtime="20161109 19:58:54.097"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:53.682" endtime="20161109 19:58:54.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:54.525">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:58:54.525">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:54.097" endtime="20161109 19:58:54.525"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:54.527">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:58:54.526" endtime="20161109 19:58:54.528"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:54.530">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:58:54.529" endtime="20161109 19:58:54.530"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:54.528" endtime="20161109 19:58:54.530"></status>
</kw>
<status status="PASS" starttime="20161109 19:58:54.525" endtime="20161109 19:58:54.530"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:54.531">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:53.676" endtime="20161109 19:58:54.531"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:54.531">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:58:53.674" endtime="20161109 19:58:54.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:58:54.533">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:58:54.532" endtime="20161109 19:58:54.533"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:58:54.534">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:58:54.534">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:58:54.534">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:58:54.533" endtime="20161109 19:58:54.534"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:58:54.535">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:58:53.671" endtime="20161109 19:58:54.535"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:58:54.535">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:58:54.535" endtime="20161109 19:58:54.535"></status>
</kw>
<status status="FAIL" starttime="20161109 19:58:53.670" endtime="20161109 19:58:54.536"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:04.538">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:59:04.538" endtime="20161109 19:59:04.539"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:04.539">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:59:04.539" endtime="20161109 19:59:04.540"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:04.541">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:59:04.541" endtime="20161109 19:59:04.541"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:04.543">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:59:04.543" endtime="20161109 19:59:04.543"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:04.544">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:59:04.543" endtime="20161109 19:59:04.544"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:59:04.545" endtime="20161109 19:59:04.545"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:04.548">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:59:04.547" endtime="20161109 19:59:04.549"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:04.550">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:59:04.550" endtime="20161109 19:59:04.551"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:04.549" endtime="20161109 19:59:04.551"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:04.545" endtime="20161109 19:59:04.551"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:04.553">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:59:04.552" endtime="20161109 19:59:04.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:04.554">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:59:04.554" endtime="20161109 19:59:04.554"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:04.555">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:59:04.554" endtime="20161109 19:59:04.555"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:04.555">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:59:04.555" endtime="20161109 19:59:04.555"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:04.888">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:59:04.889">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:04.556" endtime="20161109 19:59:04.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:04.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:59:04.889" endtime="20161109 19:59:04.890"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:04.552" endtime="20161109 19:59:04.890"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:05.181">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:59:05.181">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:04.890" endtime="20161109 19:59:05.181"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:05.182">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:59:05.182" endtime="20161109 19:59:05.182"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:05.183">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:59:05.183" endtime="20161109 19:59:05.183"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:05.182" endtime="20161109 19:59:05.183"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:05.181" endtime="20161109 19:59:05.183"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:05.184">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:04.541" endtime="20161109 19:59:05.184"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:05.184">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:04.540" endtime="20161109 19:59:05.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:05.185">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:59:05.184" endtime="20161109 19:59:05.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:05.186">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:59:05.186">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:59:05.186">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:59:05.185" endtime="20161109 19:59:05.186"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:05.186">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:59:04.537" endtime="20161109 19:59:05.186"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:59:05.187">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:59:05.187" endtime="20161109 19:59:05.187"></status>
</kw>
<status status="FAIL" starttime="20161109 19:59:04.536" endtime="20161109 19:59:05.188"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.190">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:59:15.190" endtime="20161109 19:59:15.190"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.191">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:59:15.191" endtime="20161109 19:59:15.191"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.194">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:59:15.193" endtime="20161109 19:59:15.194"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.196">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:59:15.195" endtime="20161109 19:59:15.196"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.197">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:59:15.196" endtime="20161109 19:59:15.197"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:59:15.197" endtime="20161109 19:59:15.198"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.200">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:59:15.199" endtime="20161109 19:59:15.200"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:15.202">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:59:15.201" endtime="20161109 19:59:15.202"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:15.201" endtime="20161109 19:59:15.202"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:15.198" endtime="20161109 19:59:15.202"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:15.204">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:59:15.203" endtime="20161109 19:59:15.204"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.205">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:59:15.205" endtime="20161109 19:59:15.205"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.205">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:59:15.205" endtime="20161109 19:59:15.205"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.206">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:59:15.206" endtime="20161109 19:59:15.206"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.538">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:59:15.539">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:15.206" endtime="20161109 19:59:15.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:15.539">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:59:15.539" endtime="20161109 19:59:15.539"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:15.203" endtime="20161109 19:59:15.540"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.822">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:59:15.822">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:15.540" endtime="20161109 19:59:15.822"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.823">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:59:15.823" endtime="20161109 19:59:15.823"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:15.824">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:59:15.824" endtime="20161109 19:59:15.824"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:15.824" endtime="20161109 19:59:15.824"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:15.822" endtime="20161109 19:59:15.825"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:15.825">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:15.194" endtime="20161109 19:59:15.825"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:15.825">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:15.192" endtime="20161109 19:59:15.825"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:15.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:59:15.825" endtime="20161109 19:59:15.826"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:15.826">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:59:15.826">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:59:15.826">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:59:15.826" endtime="20161109 19:59:15.826"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:15.826">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:59:15.189" endtime="20161109 19:59:15.826"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:59:15.827">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:59:15.827" endtime="20161109 19:59:15.827"></status>
</kw>
<status status="FAIL" starttime="20161109 19:59:15.188" endtime="20161109 19:59:15.827"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:25.830">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:59:25.829" endtime="20161109 19:59:25.830"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:25.831">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:59:25.830" endtime="20161109 19:59:25.831"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:25.833">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:59:25.832" endtime="20161109 19:59:25.833"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:25.835">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:59:25.834" endtime="20161109 19:59:25.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:25.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:59:25.835" endtime="20161109 19:59:25.836"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:59:25.836" endtime="20161109 19:59:25.836"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:25.839">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:59:25.838" endtime="20161109 19:59:25.840"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:25.841">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:59:25.841" endtime="20161109 19:59:25.841"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:25.840" endtime="20161109 19:59:25.841"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:25.837" endtime="20161109 19:59:25.842"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:25.844">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:59:25.843" endtime="20161109 19:59:25.845"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:25.846">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:59:25.845" endtime="20161109 19:59:25.846"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:25.847">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:59:25.846" endtime="20161109 19:59:25.847"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:25.847">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:59:25.847" endtime="20161109 19:59:25.847"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:33.835">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:59:33.835">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:25.848" endtime="20161109 19:59:33.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:33.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:59:33.835" endtime="20161109 19:59:33.836"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:25.842" endtime="20161109 19:59:33.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:34.484">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:59:34.485">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:33.837" endtime="20161109 19:59:34.485"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:34.486">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:59:34.486" endtime="20161109 19:59:34.487"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:34.488">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:59:34.487" endtime="20161109 19:59:34.488"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:34.487" endtime="20161109 19:59:34.488"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:34.485" endtime="20161109 19:59:34.488"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:34.489">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:25.833" endtime="20161109 19:59:34.489"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:34.489">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:25.831" endtime="20161109 19:59:34.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:34.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:59:34.489" endtime="20161109 19:59:34.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:34.490">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:59:34.491">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:59:34.491">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:59:34.490" endtime="20161109 19:59:34.491"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:34.491">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:59:25.829" endtime="20161109 19:59:34.491"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:59:34.492">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:59:34.492" endtime="20161109 19:59:34.492"></status>
</kw>
<status status="FAIL" starttime="20161109 19:59:25.828" endtime="20161109 19:59:34.493"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:44.496">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:59:44.495" endtime="20161109 19:59:44.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:44.497">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:59:44.496" endtime="20161109 19:59:44.497"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:44.498">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:59:44.498" endtime="20161109 19:59:44.498"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:44.500">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:59:44.500" endtime="20161109 19:59:44.500"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:44.503">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:59:44.500" endtime="20161109 19:59:44.503"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:59:44.503" endtime="20161109 19:59:44.504"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:44.506">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:59:44.505" endtime="20161109 19:59:44.506"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:44.506">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:59:44.506" endtime="20161109 19:59:44.507"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:44.506" endtime="20161109 19:59:44.507"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:44.504" endtime="20161109 19:59:44.507"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:44.508">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:59:44.508" endtime="20161109 19:59:44.508"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:44.509">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:59:44.509" endtime="20161109 19:59:44.509"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:44.510">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:59:44.509" endtime="20161109 19:59:44.510"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:44.511">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:59:44.510" endtime="20161109 19:59:44.511"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:44.845">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:59:44.845">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:44.511" endtime="20161109 19:59:44.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:44.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:59:44.845" endtime="20161109 19:59:44.846"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:44.507" endtime="20161109 19:59:44.846"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:45.130">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:59:45.130">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:44.847" endtime="20161109 19:59:45.130"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:45.132">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:59:45.131" endtime="20161109 19:59:45.132"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:45.133">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:59:45.132" endtime="20161109 19:59:45.133"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:45.132" endtime="20161109 19:59:45.133"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:45.131" endtime="20161109 19:59:45.133"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:45.133">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:44.498" endtime="20161109 19:59:45.133"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:45.133">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:44.497" endtime="20161109 19:59:45.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:45.134">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:59:45.134" endtime="20161109 19:59:45.134"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:45.134">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:59:45.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:59:45.135">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:59:45.134" endtime="20161109 19:59:45.135"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:45.135">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:59:44.494" endtime="20161109 19:59:45.135"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:59:45.136">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:59:45.135" endtime="20161109 19:59:45.136"></status>
</kw>
<status status="FAIL" starttime="20161109 19:59:44.493" endtime="20161109 19:59:45.136"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.138">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 19:59:55.138" endtime="20161109 19:59:55.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.139">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 19:59:55.139" endtime="20161109 19:59:55.139"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.141">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 19:59:55.141" endtime="20161109 19:59:55.141"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.143">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 19:59:55.143" endtime="20161109 19:59:55.143"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.144">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:59:55.144" endtime="20161109 19:59:55.144"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 19:59:55.144" endtime="20161109 19:59:55.145"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.147">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:59:55.146" endtime="20161109 19:59:55.147"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:55.148">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 19:59:55.148" endtime="20161109 19:59:55.149"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:55.147" endtime="20161109 19:59:55.149"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:55.145" endtime="20161109 19:59:55.149"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:55.150">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 19:59:55.150" endtime="20161109 19:59:55.151"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.152">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 19:59:55.151" endtime="20161109 19:59:55.152"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.152">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 19:59:55.152" endtime="20161109 19:59:55.152"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.153">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 19:59:55.153" endtime="20161109 19:59:55.153"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.488">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:59:55.489">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:55.154" endtime="20161109 19:59:55.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:55.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:59:55.489" endtime="20161109 19:59:55.490"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:55.149" endtime="20161109 19:59:55.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.777">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 19:59:55.777">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:55.490" endtime="20161109 19:59:55.777"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.779">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:59:55.778" endtime="20161109 19:59:55.779"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:55.780">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 19:59:55.780" endtime="20161109 19:59:55.780"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:55.779" endtime="20161109 19:59:55.781"></status>
</kw>
<status status="PASS" starttime="20161109 19:59:55.777" endtime="20161109 19:59:55.781"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:55.781">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:55.141" endtime="20161109 19:59:55.781"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:55.781">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 19:59:55.140" endtime="20161109 19:59:55.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 19:59:55.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 19:59:55.782" endtime="20161109 19:59:55.782"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 19:59:55.783">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 19:59:55.783">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 19:59:55.783">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 19:59:55.783" endtime="20161109 19:59:55.784"></status>
</kw>
<msg level="INFO" timestamp="20161109 19:59:55.784">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 19:59:55.137" endtime="20161109 19:59:55.784"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 19:59:55.785">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:59:55.784" endtime="20161109 19:59:55.785"></status>
</kw>
<status status="FAIL" starttime="20161109 19:59:55.136" endtime="20161109 19:59:55.785"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:05.788">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 20:00:05.788" endtime="20161109 20:00:05.788"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:05.789">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 20:00:05.789" endtime="20161109 20:00:05.790"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:05.791">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 20:00:05.791" endtime="20161109 20:00:05.791"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:05.793">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 20:00:05.793" endtime="20161109 20:00:05.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:05.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:00:05.794" endtime="20161109 20:00:05.795"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:00:05.795" endtime="20161109 20:00:05.795"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:05.797">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:00:05.796" endtime="20161109 20:00:05.797"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:05.798">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:00:05.798" endtime="20161109 20:00:05.798"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:05.798" endtime="20161109 20:00:05.799"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:05.796" endtime="20161109 20:00:05.799"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:05.799">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:00:05.799" endtime="20161109 20:00:05.800"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:05.800">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:00:05.800" endtime="20161109 20:00:05.800"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:05.801">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:00:05.801" endtime="20161109 20:00:05.801"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:05.802">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:00:05.801" endtime="20161109 20:00:05.802"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:06.140">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:00:06.140">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:05.802" endtime="20161109 20:00:06.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:06.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:00:06.140" endtime="20161109 20:00:06.141"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:05.799" endtime="20161109 20:00:06.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:06.420">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:00:06.420">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:06.141" endtime="20161109 20:00:06.420"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:06.422">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:00:06.421" endtime="20161109 20:00:06.422"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:06.423">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:00:06.423" endtime="20161109 20:00:06.424"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:06.422" endtime="20161109 20:00:06.424"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:06.420" endtime="20161109 20:00:06.424"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:06.424">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:05.792" endtime="20161109 20:00:06.424"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:06.425">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:05.790" endtime="20161109 20:00:06.425"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:06.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:00:06.425" endtime="20161109 20:00:06.426"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:06.427">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:00:06.427">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:00:06.427">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:00:06.426" endtime="20161109 20:00:06.427"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:06.428">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 20:00:05.787" endtime="20161109 20:00:06.428"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:00:06.429">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 20:00:06.428" endtime="20161109 20:00:06.429"></status>
</kw>
<status status="FAIL" starttime="20161109 20:00:05.786" endtime="20161109 20:00:06.429"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:16.432">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 20:00:16.431" endtime="20161109 20:00:16.432"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:16.433">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 20:00:16.432" endtime="20161109 20:00:16.433"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:16.435">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 20:00:16.434" endtime="20161109 20:00:16.435"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:16.437">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 20:00:16.436" endtime="20161109 20:00:16.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:16.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:00:16.437" endtime="20161109 20:00:16.438"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:00:16.438" endtime="20161109 20:00:16.438"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:16.440">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:00:16.439" endtime="20161109 20:00:16.441"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:16.442">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:00:16.441" endtime="20161109 20:00:16.442"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:16.441" endtime="20161109 20:00:16.442"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:16.438" endtime="20161109 20:00:16.442"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:16.444">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:00:16.443" endtime="20161109 20:00:16.444"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:16.445">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:00:16.445" endtime="20161109 20:00:16.445"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:16.446">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:00:16.445" endtime="20161109 20:00:16.446"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:16.446">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:00:16.446" endtime="20161109 20:00:16.446"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:16.777">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:00:16.777">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:16.447" endtime="20161109 20:00:16.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:16.778">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:00:16.778" endtime="20161109 20:00:16.778"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:16.443" endtime="20161109 20:00:16.778"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:17.204">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:00:17.205">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:16.778" endtime="20161109 20:00:17.205"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:17.207">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:00:17.206" endtime="20161109 20:00:17.207"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:17.208">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:00:17.208" endtime="20161109 20:00:17.208"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:17.207" endtime="20161109 20:00:17.209"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:17.205" endtime="20161109 20:00:17.209"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:17.209">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:16.435" endtime="20161109 20:00:17.209"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:17.209">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:16.434" endtime="20161109 20:00:17.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:17.210">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:00:17.210" endtime="20161109 20:00:17.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:17.211">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:00:17.211">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:00:17.212">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:00:17.211" endtime="20161109 20:00:17.212"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:17.212">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 20:00:16.430" endtime="20161109 20:00:17.212"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:00:17.213">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 20:00:17.213" endtime="20161109 20:00:17.213"></status>
</kw>
<status status="FAIL" starttime="20161109 20:00:16.430" endtime="20161109 20:00:17.214"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.216">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 20:00:27.216" endtime="20161109 20:00:27.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.217">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 20:00:27.217" endtime="20161109 20:00:27.217"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.219">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 20:00:27.219" endtime="20161109 20:00:27.219"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.221">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 20:00:27.221" endtime="20161109 20:00:27.221"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.222">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:00:27.222" endtime="20161109 20:00:27.222"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:00:27.222" endtime="20161109 20:00:27.223"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.225">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:00:27.224" endtime="20161109 20:00:27.225"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:27.226">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:00:27.226" endtime="20161109 20:00:27.227"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:27.226" endtime="20161109 20:00:27.227"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:27.223" endtime="20161109 20:00:27.227"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:27.228">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:00:27.227" endtime="20161109 20:00:27.228"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.229">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:00:27.229" endtime="20161109 20:00:27.229"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.229">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:00:27.229" endtime="20161109 20:00:27.229"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.230">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:00:27.230" endtime="20161109 20:00:27.230"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:00:27.570">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:27.230" endtime="20161109 20:00:27.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:27.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:00:27.570" endtime="20161109 20:00:27.570"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:27.227" endtime="20161109 20:00:27.571"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.850">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:00:27.850">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:27.571" endtime="20161109 20:00:27.850"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.852">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:00:27.851" endtime="20161109 20:00:27.852"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:27.853">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:00:27.853" endtime="20161109 20:00:27.853"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:27.852" endtime="20161109 20:00:27.853"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:27.851" endtime="20161109 20:00:27.853"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:27.853">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:27.219" endtime="20161109 20:00:27.853"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:27.854">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:27.218" endtime="20161109 20:00:27.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:27.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:00:27.854" endtime="20161109 20:00:27.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:27.855">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:00:27.855">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:00:27.855">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:00:27.854" endtime="20161109 20:00:27.855"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:27.855">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 20:00:27.215" endtime="20161109 20:00:27.855"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:00:27.856">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 20:00:27.855" endtime="20161109 20:00:27.856"></status>
</kw>
<status status="FAIL" starttime="20161109 20:00:27.214" endtime="20161109 20:00:27.856"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:37.858">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 20:00:37.858" endtime="20161109 20:00:37.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:37.860">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 20:00:37.859" endtime="20161109 20:00:37.860"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:37.861">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 20:00:37.861" endtime="20161109 20:00:37.861"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:37.864">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 20:00:37.863" endtime="20161109 20:00:37.864"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:37.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:00:37.864" endtime="20161109 20:00:37.866"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:00:37.866" endtime="20161109 20:00:37.866"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:37.869">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:00:37.868" endtime="20161109 20:00:37.869"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:37.870">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:00:37.870" endtime="20161109 20:00:37.871"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:37.869" endtime="20161109 20:00:37.871"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:37.867" endtime="20161109 20:00:37.871"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:37.872">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:00:37.872" endtime="20161109 20:00:37.873"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:37.874">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:00:37.873" endtime="20161109 20:00:37.874"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:37.875">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:00:37.874" endtime="20161109 20:00:37.875"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:37.875">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:00:37.875" endtime="20161109 20:00:37.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:45.761">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:00:45.761">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:37.876" endtime="20161109 20:00:45.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:45.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:00:45.761" endtime="20161109 20:00:45.762"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:37.871" endtime="20161109 20:00:45.762"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:46.038">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:00:46.038">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:45.762" endtime="20161109 20:00:46.038"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:46.039">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:00:46.039" endtime="20161109 20:00:46.039"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:46.040">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:00:46.040" endtime="20161109 20:00:46.040"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:46.039" endtime="20161109 20:00:46.041"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:46.038" endtime="20161109 20:00:46.041"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:46.041">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:37.862" endtime="20161109 20:00:46.041"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:46.041">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:37.860" endtime="20161109 20:00:46.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:46.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:00:46.041" endtime="20161109 20:00:46.042"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:46.042">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:00:46.042">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:00:46.042">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:00:46.042" endtime="20161109 20:00:46.042"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:46.043">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 20:00:37.857" endtime="20161109 20:00:46.043"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:00:46.044">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 20:00:46.043" endtime="20161109 20:00:46.044"></status>
</kw>
<status status="FAIL" starttime="20161109 20:00:37.857" endtime="20161109 20:00:46.044"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.047">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 20:00:56.046" endtime="20161109 20:00:56.047"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.048">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 20:00:56.047" endtime="20161109 20:00:56.048"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.049">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 20:00:56.049" endtime="20161109 20:00:56.049"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.051">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 20:00:56.051" endtime="20161109 20:00:56.051"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.052">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:00:56.051" endtime="20161109 20:00:56.052"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:00:56.052" endtime="20161109 20:00:56.052"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.055">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:00:56.053" endtime="20161109 20:00:56.055"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:56.056">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:00:56.056" endtime="20161109 20:00:56.056"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:56.055" endtime="20161109 20:00:56.057"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:56.053" endtime="20161109 20:00:56.057"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:56.057">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:00:56.057" endtime="20161109 20:00:56.058"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.059">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:00:56.059" endtime="20161109 20:00:56.059"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.059">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:00:56.059" endtime="20161109 20:00:56.060"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.060">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:00:56.060" endtime="20161109 20:00:56.060"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.394">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:00:56.395">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:56.060" endtime="20161109 20:00:56.395"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:56.396">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:00:56.395" endtime="20161109 20:00:56.396"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:56.057" endtime="20161109 20:00:56.397"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.681">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:00:56.682">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:56.397" endtime="20161109 20:00:56.682"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.684">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:00:56.683" endtime="20161109 20:00:56.684"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:56.685">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:00:56.685" endtime="20161109 20:00:56.685"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:56.684" endtime="20161109 20:00:56.685"></status>
</kw>
<status status="PASS" starttime="20161109 20:00:56.682" endtime="20161109 20:00:56.686"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:56.686">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:56.050" endtime="20161109 20:00:56.686"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:56.686">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:00:56.048" endtime="20161109 20:00:56.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:00:56.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:00:56.687" endtime="20161109 20:00:56.688"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:00:56.688">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:00:56.688">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:00:56.689">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:00:56.688" endtime="20161109 20:00:56.689"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:00:56.689">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 20:00:56.045" endtime="20161109 20:00:56.689"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:00:56.690">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 20:00:56.690" endtime="20161109 20:00:56.690"></status>
</kw>
<status status="FAIL" starttime="20161109 20:00:56.044" endtime="20161109 20:00:56.692"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:06.695">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 20:01:06.695" endtime="20161109 20:01:06.695"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:06.696">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 20:01:06.696" endtime="20161109 20:01:06.696"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:06.698">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 20:01:06.698" endtime="20161109 20:01:06.698"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:06.701">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 20:01:06.700" endtime="20161109 20:01:06.701"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:06.702">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:01:06.701" endtime="20161109 20:01:06.702"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:06.702" endtime="20161109 20:01:06.703"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:06.706">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:01:06.704" endtime="20161109 20:01:06.706"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:06.707">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:01:06.707" endtime="20161109 20:01:06.707"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:06.706" endtime="20161109 20:01:06.707"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:06.703" endtime="20161109 20:01:06.708"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:06.708">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:01:06.708" endtime="20161109 20:01:06.709"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:06.709">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:01:06.709" endtime="20161109 20:01:06.709"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:06.710">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:01:06.709" endtime="20161109 20:01:06.710"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:06.710">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:01:06.710" endtime="20161109 20:01:06.710"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:07.054">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:01:07.055">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:06.711" endtime="20161109 20:01:07.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:07.056">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:07.055" endtime="20161109 20:01:07.056"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:06.708" endtime="20161109 20:01:07.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:07.425">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:01:07.425">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:07.057" endtime="20161109 20:01:07.425"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:07.427">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:01:07.426" endtime="20161109 20:01:07.428"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:07.430">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:01:07.429" endtime="20161109 20:01:07.430"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:07.428" endtime="20161109 20:01:07.430"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:07.425" endtime="20161109 20:01:07.430"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:07.430">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:06.699" endtime="20161109 20:01:07.431"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:07.431">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:06.697" endtime="20161109 20:01:07.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:07.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:07.431" endtime="20161109 20:01:07.432"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:07.433">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:01:07.433">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:01:07.433">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:01:07.432" endtime="20161109 20:01:07.433"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:07.433">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 20:01:06.694" endtime="20161109 20:01:07.434"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:01:07.435">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 20:01:07.434" endtime="20161109 20:01:07.435"></status>
</kw>
<status status="FAIL" starttime="20161109 20:01:06.693" endtime="20161109 20:01:07.435"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:17.438">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 20:01:17.437" endtime="20161109 20:01:17.438"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:17.439">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 20:01:17.438" endtime="20161109 20:01:17.439"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:17.441">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 20:01:17.440" endtime="20161109 20:01:17.441"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:17.443">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 20:01:17.442" endtime="20161109 20:01:17.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:17.443">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:01:17.443" endtime="20161109 20:01:17.444"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:17.444" endtime="20161109 20:01:17.444"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:17.447">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:01:17.445" endtime="20161109 20:01:17.447"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:17.448">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:01:17.448" endtime="20161109 20:01:17.448"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:17.447" endtime="20161109 20:01:17.448"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:17.444" endtime="20161109 20:01:17.448"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:17.449">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:01:17.449" endtime="20161109 20:01:17.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:17.450">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:01:17.449" endtime="20161109 20:01:17.450"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:17.450">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:01:17.450" endtime="20161109 20:01:17.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:17.451">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:01:17.451" endtime="20161109 20:01:17.451"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:17.789">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:01:17.789">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:17.451" endtime="20161109 20:01:17.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:17.790">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:17.789" endtime="20161109 20:01:17.790"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:17.448" endtime="20161109 20:01:17.790"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:18.102">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:01:18.103">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:17.790" endtime="20161109 20:01:18.103"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:18.104">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:01:18.103" endtime="20161109 20:01:18.104"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:18.105">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:01:18.105" endtime="20161109 20:01:18.105"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:18.104" endtime="20161109 20:01:18.105"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:18.103" endtime="20161109 20:01:18.105"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:18.105">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:17.441" endtime="20161109 20:01:18.105"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:18.106">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:17.439" endtime="20161109 20:01:18.106"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:18.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:18.106" endtime="20161109 20:01:18.106"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:18.107">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:01:18.107">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:01:18.107">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:01:18.106" endtime="20161109 20:01:18.107"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:18.107">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 20:01:17.436" endtime="20161109 20:01:18.107"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:01:18.108">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 20:01:18.107" endtime="20161109 20:01:18.108"></status>
</kw>
<status status="FAIL" starttime="20161109 20:01:17.436" endtime="20161109 20:01:18.108"></status>
</kw>
<kw library="powerons" name="Is Host Booted">
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.110">@{arglist} = [ ]</msg>
<status status="PASS" starttime="20161109 20:01:28.110" endtime="20161109 20:01:28.111"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.112">${args} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 20:01:28.111" endtime="20161109 20:01:28.112"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.119">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" starttime="20161109 20:01:28.118" endtime="20161109 20:01:28.119"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.121">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" starttime="20161109 20:01:28.120" endtime="20161109 20:01:28.121"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.122">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:01:28.121" endtime="20161109 20:01:28.122"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:28.122" endtime="20161109 20:01:28.122"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.125">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:01:28.124" endtime="20161109 20:01:28.125"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.127">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:01:28.126" endtime="20161109 20:01:28.127"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.126" endtime="20161109 20:01:28.127"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.123" endtime="20161109 20:01:28.127"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.129">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:01:28.128" endtime="20161109 20:01:28.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.131">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:01:28.130" endtime="20161109 20:01:28.131"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.132">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:01:28.131" endtime="20161109 20:01:28.132"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.133">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:01:28.132" endtime="20161109 20:01:28.133"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.481">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:01:28.481">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:28.133" endtime="20161109 20:01:28.481"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.482">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:28.482" endtime="20161109 20:01:28.483"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.128" endtime="20161109 20:01:28.483"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.871">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:01:28.871">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:28.483" endtime="20161109 20:01:28.871"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.873">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:01:28.872" endtime="20161109 20:01:28.873"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.875">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:01:28.875" endtime="20161109 20:01:28.875"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.874" endtime="20161109 20:01:28.875"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.871" endtime="20161109 20:01:28.875"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:28.876">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:28.119" endtime="20161109 20:01:28.876"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:28.876">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:28.112" endtime="20161109 20:01:28.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:28.877" endtime="20161109 20:01:28.877"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.878">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:01:28.878">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:01:28.878">${content} = {u'data': u'HOST_POWERED_ON', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:01:28.878" endtime="20161109 20:01:28.878"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:28.879">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" starttime="20161109 20:01:28.109" endtime="20161109 20:01:28.879"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:01:28.880">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 20:01:28.879" endtime="20161109 20:01:28.880"></status>
</kw>
<status status="FAIL" starttime="20161109 20:01:28.108" endtime="20161109 20:01:28.880"></status>
</kw>
<msg level="FAIL" timestamp="20161109 20:01:28.880">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" starttime="20161109 19:46:25.698" endtime="20161109 20:01:28.880"></status>
</kw>
<status status="FAIL" starttime="20161109 19:46:25.698" endtime="20161109 20:01:28.881"></status>
</kw>
<status status="FAIL" starttime="20161109 19:46:16.418" endtime="20161109 20:01:28.881"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Log FFDC if failed and collect SOL</doc>
<kw library="openbmc_ffdc" name="Log FFDC">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<kw library="openbmc_ffdc" name="Log FFDC If Test Case Failed">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.889">${cur_time} = 2016-11-09 20:01:28:888907</msg>
<status status="PASS" starttime="20161109 20:01:28.889" endtime="20161109 20:01:28.889"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.890">${cur_time} = 20161109200128888907</msg>
<status status="PASS" starttime="20161109 20:01:28.890" endtime="20161109 20:01:28.890"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:28.891">${cur_time} = 20161109200128888907</msg>
<status status="PASS" starttime="20161109 20:01:28.888" endtime="20161109 20:01:28.891"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.893">${FFDC_TIME} = 20161109200128888907</msg>
<status status="PASS" starttime="20161109 20:01:28.891" endtime="20161109 20:01:28.894"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:28.894" endtime="20161109 20:01:28.894"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.895">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20161109 20:01:28.895" endtime="20161109 20:01:28.895"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.895">${suite_name} = 20161109200128888907_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20161109 20:01:28.895" endtime="20161109 20:01:28.895"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.896">${test_name} = powerontest</msg>
<status status="PASS" starttime="20161109 20:01:28.896" endtime="20161109 20:01:28.896"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.896">${test_name} = 20161109200128888907_powerontest</msg>
<status status="PASS" starttime="20161109 20:01:28.896" endtime="20161109 20:01:28.896"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:28.897">${suitename} = 20161109200128888907_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161109 20:01:28.897">${testname} = 20161109200128888907_powerontest</msg>
<status status="PASS" starttime="20161109 20:01:28.894" endtime="20161109 20:01:28.897"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.900">${FFDC_DIR_PATH} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest</msg>
<status status="PASS" starttime="20161109 20:01:28.897" endtime="20161109 20:01:28.900"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.901">${prefix} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_</msg>
<status status="PASS" starttime="20161109 20:01:28.901" endtime="20161109 20:01:28.901"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.904">${LOG_PREFIX} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_</msg>
<status status="PASS" starttime="20161109 20:01:28.901" endtime="20161109 20:01:28.904"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Directory">
<doc>Creates directory and report file</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.906" html="yes">Created directory '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.904" endtime="20161109 20:01:28.906"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Report File">
<doc>Create a generic file name for ffdc</doc>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.910">${FFDC_FILE_PATH} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt</msg>
<status status="PASS" starttime="20161109 20:01:28.907" endtime="20161109 20:01:28.910"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.911" html="yes">Created file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.910" endtime="20161109 20:01:28.911"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.906" endtime="20161109 20:01:28.911"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.904" endtime="20161109 20:01:28.911"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.914" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.912" endtime="20161109 20:01:28.914"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.912" endtime="20161109 20:01:28.914"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.915" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.914" endtime="20161109 20:01:28.915"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.914" endtime="20161109 20:01:28.915"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.916" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.916" endtime="20161109 20:01:28.916"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.915" endtime="20161109 20:01:28.917"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.918" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.917" endtime="20161109 20:01:28.918"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.917" endtime="20161109 20:01:28.918"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.919" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.919" endtime="20161109 20:01:28.919"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.918" endtime="20161109 20:01:28.919"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.921" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.920" endtime="20161109 20:01:28.921"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.920" endtime="20161109 20:01:28.921"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.923" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.922" endtime="20161109 20:01:28.923"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.921" endtime="20161109 20:01:28.923"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.925" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.924" endtime="20161109 20:01:28.925"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.923" endtime="20161109 20:01:28.925"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.926" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.926" endtime="20161109 20:01:28.926"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.925" endtime="20161109 20:01:28.926"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.927" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.927" endtime="20161109 20:01:28.928"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.927" endtime="20161109 20:01:28.928"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.929" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.928" endtime="20161109 20:01:28.930"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.928" endtime="20161109 20:01:28.930"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.931" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.930" endtime="20161109 20:01:28.931"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.930" endtime="20161109 20:01:28.931"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.933" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.932" endtime="20161109 20:01:28.933"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.932" endtime="20161109 20:01:28.933"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.935" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.934" endtime="20161109 20:01:28.936"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.933" endtime="20161109 20:01:28.936"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.926" endtime="20161109 20:01:28.936"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.937" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.936" endtime="20161109 20:01:28.937"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.936" endtime="20161109 20:01:28.938"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.938">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20161109 20:01:28.938" endtime="20161109 20:01:28.938"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.939" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.939" endtime="20161109 20:01:28.939"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.938" endtime="20161109 20:01:28.940"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.940" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.940" endtime="20161109 20:01:28.941"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.940" endtime="20161109 20:01:28.941"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.938" endtime="20161109 20:01:28.941"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.942" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.941" endtime="20161109 20:01:28.942"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.941" endtime="20161109 20:01:28.942"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.943" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.943" endtime="20161109 20:01:28.943"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.942" endtime="20161109 20:01:28.943"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.941" endtime="20161109 20:01:28.943"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.944" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.944" endtime="20161109 20:01:28.944"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.943" endtime="20161109 20:01:28.944"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.946" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.945" endtime="20161109 20:01:28.946"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.945" endtime="20161109 20:01:28.946"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.943" endtime="20161109 20:01:28.946"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.938" endtime="20161109 20:01:28.946"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.948" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:28.947" endtime="20161109 20:01:28.948"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.946" endtime="20161109 20:01:28.948"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.911" endtime="20161109 20:01:28.948"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.949">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20161109 20:01:28.948" endtime="20161109 20:01:28.949"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.950">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') ]</msg>
<status status="PASS" starttime="20161109 20:01:28.949" endtime="20161109 20:01:28.950"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:01:28.954">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161109 20:01:28.954" endtime="20161109 20:01:28.954"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:28.954">${has_host} = False</msg>
<status status="PASS" starttime="20161109 20:01:28.953" endtime="20161109 20:01:28.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:28.958" endtime="20161109 20:01:28.958"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.955" endtime="20161109 20:01:28.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.962">${port_num} = 22</msg>
<status status="PASS" starttime="20161109 20:01:28.962" endtime="20161109 20:01:28.962"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.963">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161109 20:01:28.963" endtime="20161109 20:01:28.963"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:28.963">${https_num} = 443</msg>
<status status="PASS" starttime="20161109 20:01:28.963" endtime="20161109 20:01:28.963"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.965">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161109 20:01:28.964" endtime="20161109 20:01:28.965"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.962" endtime="20161109 20:01:28.965"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.959" endtime="20161109 20:01:28.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:01:28.966">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161109 20:01:28.966" endtime="20161109 20:01:28.966"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:28.966">${has_port} = False</msg>
<status status="PASS" starttime="20161109 20:01:28.965" endtime="20161109 20:01:28.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:28.970" endtime="20161109 20:01:28.970"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:28.970" endtime="20161109 20:01:28.971"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.969" endtime="20161109 20:01:28.971"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.966" endtime="20161109 20:01:28.972"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:28.972">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 20:01:31.266">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161109 20:01:28.972" endtime="20161109 20:01:31.267"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.952" endtime="20161109 20:01:31.268"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:31.268">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20161109 20:01:31.268" endtime="20161109 20:01:31.268"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:31.271">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status status="PASS" starttime="20161109 20:01:31.270" endtime="20161109 20:01:31.271"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:31.272">${logpath} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_meminfo</msg>
<status status="PASS" starttime="20161109 20:01:31.271" endtime="20161109 20:01:31.272"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:31.273" endtime="20161109 20:01:31.278"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:31.278">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161109 20:01:31.398">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:01:31.398">${stdout} = MemTotal:         499020 kB
MemFree:          335248 kB
MemAvailable:     374140 kB
Buffers:           10484 kB
Cached:            70400 kB
SwapCached:            0 kB
Active:           109108 kB
Inac...</msg>
<msg level="INFO" timestamp="20161109 20:01:31.398">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:01:31.278" endtime="20161109 20:01:31.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:31.404" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_meminfo"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_meminfo&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:31.404" endtime="20161109 20:01:31.405"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:31.403" endtime="20161109 20:01:31.405"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:31.398" endtime="20161109 20:01:31.405"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:31.272" endtime="20161109 20:01:31.405"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:31.271" endtime="20161109 20:01:31.405"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:31.406">${logpath} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_journalctl</msg>
<status status="PASS" starttime="20161109 20:01:31.405" endtime="20161109 20:01:31.406"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:31.406" endtime="20161109 20:01:31.409"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:31.409">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161109 20:01:39.860">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:01:39.867">${stdout} = -- Logs begin at Thu 2016-10-20 19:57:24 UTC, end at Thu 2016-10-20 20:58:45 UTC. --
Oct 20 19:57:24 barreleye systemd-journald[506]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161109 20:01:39.867">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:01:31.409" endtime="20161109 20:01:39.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:39.879" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_journalctl"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_journalctl&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:39.876" endtime="20161109 20:01:39.879"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:39.872" endtime="20161109 20:01:39.879"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:39.867" endtime="20161109 20:01:39.879"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:31.406" endtime="20161109 20:01:39.879"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:31.405" endtime="20161109 20:01:39.879"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:39.880">${logpath} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_dmesg</msg>
<status status="PASS" starttime="20161109 20:01:39.880" endtime="20161109 20:01:39.880"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:39.881" endtime="20161109 20:01:39.883"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:39.884">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161109 20:01:39.990">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:01:39.990">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-c5682cbc3542add705e35152329436067bb1f94a (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Tue Nov 1 05:44:54 UTC 2016
CPU: ARM926EJ-S [41069265] re...</msg>
<msg level="INFO" timestamp="20161109 20:01:39.991">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:01:39.884" endtime="20161109 20:01:39.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:39.995" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_dmesg"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_dmesg&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:39.994" endtime="20161109 20:01:39.995"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:39.994" endtime="20161109 20:01:39.995"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:39.991" endtime="20161109 20:01:39.995"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:39.880" endtime="20161109 20:01:39.995"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:39.879" endtime="20161109 20:01:39.995"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:39.996">${logpath} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_procinfo</msg>
<status status="PASS" starttime="20161109 20:01:39.996" endtime="20161109 20:01:39.996"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:39.997" endtime="20161109 20:01:39.999"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:40.000">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161109 20:01:40.096">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:01:40.096">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161109 20:01:40.096">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:01:40.000" endtime="20161109 20:01:40.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:40.101" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_procinfo"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_procinfo&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:40.100" endtime="20161109 20:01:40.101"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.100" endtime="20161109 20:01:40.101"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.097" endtime="20161109 20:01:40.101"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:39.996" endtime="20161109 20:01:40.101"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:39.995" endtime="20161109 20:01:40.101"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:40.102">${logpath} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_proc_list</msg>
<status status="PASS" starttime="20161109 20:01:40.102" endtime="20161109 20:01:40.102"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:40.103" endtime="20161109 20:01:40.106"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:40.106">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161109 20:01:40.525">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:01:40.525">${stdout} = Mem: 163996K used, 335024K free, 36744K shrd, 10484K buff, 70408K cached
CPU:   0% usr   0% sys   0% nic  94% idle   0% io   0% irq   5% sirq
Load average: 0.82 0.98 0.93 2/114 1599
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20161109 20:01:40.525">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:01:40.106" endtime="20161109 20:01:40.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:40.533" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_proc_list"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_proc_list&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:40.532" endtime="20161109 20:01:40.533"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.531" endtime="20161109 20:01:40.534"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.526" endtime="20161109 20:01:40.534"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.102" endtime="20161109 20:01:40.534"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.101" endtime="20161109 20:01:40.534"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:31.271" endtime="20161109 20:01:40.534"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:31.269" endtime="20161109 20:01:40.534"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:31.269" endtime="20161109 20:01:40.534"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:31.269" endtime="20161109 20:01:40.534"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.952" endtime="20161109 20:01:40.534"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.951" endtime="20161109 20:01:40.535"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.950" endtime="20161109 20:01:40.535"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.950" endtime="20161109 20:01:40.535"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:01:40.539">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161109 20:01:40.538" endtime="20161109 20:01:40.539"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:40.539">${has_host} = False</msg>
<status status="PASS" starttime="20161109 20:01:40.538" endtime="20161109 20:01:40.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:40.542" endtime="20161109 20:01:40.543"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.540" endtime="20161109 20:01:40.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:40.546">${port_num} = 22</msg>
<status status="PASS" starttime="20161109 20:01:40.546" endtime="20161109 20:01:40.546"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:40.547">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161109 20:01:40.546" endtime="20161109 20:01:40.547"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:40.547">${https_num} = 443</msg>
<status status="PASS" starttime="20161109 20:01:40.547" endtime="20161109 20:01:40.547"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:40.548">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161109 20:01:40.547" endtime="20161109 20:01:40.548"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.546" endtime="20161109 20:01:40.548"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.543" endtime="20161109 20:01:40.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:01:40.549">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161109 20:01:40.549" endtime="20161109 20:01:40.549"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:40.549">${has_port} = False</msg>
<status status="PASS" starttime="20161109 20:01:40.548" endtime="20161109 20:01:40.549"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:40.553" endtime="20161109 20:01:40.553"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:40.553" endtime="20161109 20:01:40.554"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.552" endtime="20161109 20:01:40.554"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.549" endtime="20161109 20:01:40.554"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:40.554">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 20:01:43.342">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161109 20:01:40.554" endtime="20161109 20:01:43.343"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.537" endtime="20161109 20:01:43.343"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:43.344">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20161109 20:01:43.344" endtime="20161109 20:01:43.344"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:43.346">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_led', '/org...</msg>
<status status="PASS" starttime="20161109 20:01:43.346" endtime="20161109 20:01:43.346"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:43.348">${logpath} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_record_log</msg>
<status status="PASS" starttime="20161109 20:01:43.347" endtime="20161109 20:01:43.348"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:43.349">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" starttime="20161109 20:01:43.349" endtime="20161109 20:01:43.350"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:43.351">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:01:43.350" endtime="20161109 20:01:43.351"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:43.352">URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:01:43.352" endtime="20161109 20:01:43.353"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:43.351" endtime="20161109 20:01:43.353"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:43.350" endtime="20161109 20:01:43.353"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:43.354">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:01:43.354" endtime="20161109 20:01:43.354"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:43.355">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:01:43.355" endtime="20161109 20:01:43.355"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:43.356">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:01:43.355" endtime="20161109 20:01:43.356"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:43.357">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:01:43.356" endtime="20161109 20:01:43.357"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:43.690">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:01:43.690">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:43.357" endtime="20161109 20:01:43.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:43.691">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:43.690" endtime="20161109 20:01:43.691"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:43.353" endtime="20161109 20:01:43.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:44.013">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161109 20:01:44.013">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:43.691" endtime="20161109 20:01:44.013"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:44.015">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/215": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chass...</msg>
<status status="PASS" starttime="20161109 20:01:44.014" endtime="20161109 20:01:44.015"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:44.015">Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/215": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 20:43:11"
    }, 
    "/org/openbmc/records/events/215/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/217": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 20:43:14"
    }, 
    "/org/openbmc/records/events/217/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:01:44.015" endtime="20161109 20:01:44.016"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:44.015" endtime="20161109 20:01:44.016"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:44.013" endtime="20161109 20:01:44.016"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:44.016">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:43.348" endtime="20161109 20:01:44.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:44.017">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:44.017" endtime="20161109 20:01:44.017"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:44.017">${status} = True</msg>
<status status="PASS" starttime="20161109 20:01:44.016" endtime="20161109 20:01:44.017"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:44.017" endtime="20161109 20:01:44.020"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:44.021">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/215": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 20:43:11"
    }, 
    "/org/openbmc/records/events/215/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/217": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 20:43:14"
    }, 
    "/org/openbmc/records/events/217/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:01:44.021">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161109 20:01:44.021">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/215": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status status="PASS" starttime="20161109 20:01:44.020" endtime="20161109 20:01:44.021"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:44.022" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_record_log"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_record_log&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:44.022" endtime="20161109 20:01:44.022"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:44.021" endtime="20161109 20:01:44.023"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:43.347" endtime="20161109 20:01:44.023"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:44.023">${logpath} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_sensor_list</msg>
<status status="PASS" starttime="20161109 20:01:44.023" endtime="20161109 20:01:44.023"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:44.024">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" starttime="20161109 20:01:44.024" endtime="20161109 20:01:44.025"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:44.026">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:01:44.025" endtime="20161109 20:01:44.026"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:44.027">URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:01:44.026" endtime="20161109 20:01:44.027"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:44.026" endtime="20161109 20:01:44.027"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:44.025" endtime="20161109 20:01:44.027"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:44.028">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:01:44.027" endtime="20161109 20:01:44.028"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:44.029">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:01:44.029" endtime="20161109 20:01:44.029"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:44.030">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:01:44.029" endtime="20161109 20:01:44.030"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:44.030">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:01:44.030" endtime="20161109 20:01:44.030"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:44.406">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:01:44.406">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:44.031" endtime="20161109 20:01:44.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:44.408">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:44.407" endtime="20161109 20:01:44.408"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:44.027" endtime="20161109 20:01:44.408"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:52.199">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161109 20:01:52.199">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:44.408" endtime="20161109 20:01:52.199"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:52.202">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "er...</msg>
<status status="PASS" starttime="20161109 20:01:52.200" endtime="20161109 20:01:52.202"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:52.203">Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 13924, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12010, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 11872, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12036, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 23275, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 23275, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 28750, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 950, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 958, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1030, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1154, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1302, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:01:52.203" endtime="20161109 20:01:52.204"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:52.202" endtime="20161109 20:01:52.204"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:52.200" endtime="20161109 20:01:52.204"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:52.205">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:44.024" endtime="20161109 20:01:52.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:52.206">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:52.206" endtime="20161109 20:01:52.206"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:01:52.206">${status} = True</msg>
<status status="PASS" starttime="20161109 20:01:52.205" endtime="20161109 20:01:52.206"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20161109 20:01:52.207" endtime="20161109 20:01:52.210"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:52.214">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 13924, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12010, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 11872, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12036, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 23275, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 23275, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 28750, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 950, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 958, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1030, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1154, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1302, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1156, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:01:52.214">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161109 20:01:52.215">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status status="PASS" starttime="20161109 20:01:52.210" endtime="20161109 20:01:52.215"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:52.216" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_sensor_list"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_sensor_list&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:01:52.216" endtime="20161109 20:01:52.216"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:52.215" endtime="20161109 20:01:52.217"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:44.023" endtime="20161109 20:01:52.217"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:52.217">${logpath} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_inventory</msg>
<status status="PASS" starttime="20161109 20:01:52.217" endtime="20161109 20:01:52.217"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:52.218">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status status="PASS" starttime="20161109 20:01:52.218" endtime="20161109 20:01:52.218"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:52.220">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:01:52.219" endtime="20161109 20:01:52.220"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:52.220">URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:01:52.220" endtime="20161109 20:01:52.221"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:52.220" endtime="20161109 20:01:52.221"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:52.218" endtime="20161109 20:01:52.221"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:52.222">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:01:52.221" endtime="20161109 20:01:52.224"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:52.224">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:01:52.224" endtime="20161109 20:01:52.224"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:52.225">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:01:52.224" endtime="20161109 20:01:52.225"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:52.225">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:01:52.225" endtime="20161109 20:01:52.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:01:53.130">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:01:53.130">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:52.225" endtime="20161109 20:01:53.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:01:53.131">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:01:53.131" endtime="20161109 20:01:53.131"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:52.221" endtime="20161109 20:01:53.131"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:00.980">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161109 20:02:00.981">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:53.131" endtime="20161109 20:02:00.981"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:00.985">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-op...</msg>
<status status="PASS" starttime="20161109 20:02:00.983" endtime="20161109 20:02:00.985"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:00.986">Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g00f5d1f-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/215"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/217"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/217"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:00.986" endtime="20161109 20:02:00.989"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:00.985" endtime="20161109 20:02:00.989"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:00.982" endtime="20161109 20:02:00.989"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:00.990">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:01:52.217" endtime="20161109 20:02:00.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:00.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:00.991" endtime="20161109 20:02:00.991"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:00.991">${status} = True</msg>
<status status="PASS" starttime="20161109 20:02:00.990" endtime="20161109 20:02:00.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:00.992" endtime="20161109 20:02:00.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:01.002">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g00f5d1f-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/215"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/217"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/217"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:02:01.003">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161109 20:02:01.004">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-81b8d98",
            "Custom Field 2": "\tskiboot-5.3.2-opdirty...</msg>
<status status="PASS" starttime="20161109 20:02:00.998" endtime="20161109 20:02:01.004"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:01.006" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_inventory"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_inventory&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:01.005" endtime="20161109 20:02:01.006"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:01.004" endtime="20161109 20:02:01.006"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:52.217" endtime="20161109 20:02:01.006"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:01.006">${logpath} = /tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_led</msg>
<status status="PASS" starttime="20161109 20:02:01.006" endtime="20161109 20:02:01.007"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:01.008">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" starttime="20161109 20:02:01.007" endtime="20161109 20:02:01.008"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:01.010">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:02:01.009" endtime="20161109 20:02:01.010"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:01.011">URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:02:01.011" endtime="20161109 20:02:01.011"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:01.010" endtime="20161109 20:02:01.012"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:01.008" endtime="20161109 20:02:01.012"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:01.013">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:02:01.012" endtime="20161109 20:02:01.013"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:01.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:02:01.013" endtime="20161109 20:02:01.013"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:01.014">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:02:01.014" endtime="20161109 20:02:01.014"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:01.015">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:02:01.014" endtime="20161109 20:02:01.015"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:02.173">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:02:02.174">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:01.015" endtime="20161109 20:02:02.174"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:02.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:02.174" endtime="20161109 20:02:02.174"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:01.012" endtime="20161109 20:02:02.175"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:02.364">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161109 20:02:02.364">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:02.175" endtime="20161109 20:02:02.365"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:02.366">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK...</msg>
<status status="PASS" starttime="20161109 20:02:02.365" endtime="20161109 20:02:02.366"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:02.367">Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:02.367" endtime="20161109 20:02:02.367"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.366" endtime="20161109 20:02:02.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.365" endtime="20161109 20:02:02.368"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:02.368">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:01.007" endtime="20161109 20:02:02.368"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:02.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:02.369" endtime="20161109 20:02:02.369"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:02.370">${status} = True</msg>
<status status="PASS" starttime="20161109 20:02:02.368" endtime="20161109 20:02:02.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:02.370" endtime="20161109 20:02:02.373"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:02.374">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:02:02.374">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161109 20:02:02.374">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status status="PASS" starttime="20161109 20:02:02.374" endtime="20161109 20:02:02.374"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:02.377" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_led"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_led&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:02.375" endtime="20161109 20:02:02.377"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.375" endtime="20161109 20:02:02.377"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:01.006" endtime="20161109 20:02:02.377"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:43.346" endtime="20161109 20:02:02.377"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:43.345" endtime="20161109 20:02:02.377"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:43.345" endtime="20161109 20:02:02.377"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:43.344" endtime="20161109 20:02:02.377"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.537" endtime="20161109 20:02:02.378"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.536" endtime="20161109 20:02:02.378"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.535" endtime="20161109 20:02:02.378"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:40.535" endtime="20161109 20:02:02.378"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:02:02.381">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161109 20:02:02.380" endtime="20161109 20:02:02.381"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:02.381">${has_host} = False</msg>
<status status="PASS" starttime="20161109 20:02:02.380" endtime="20161109 20:02:02.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:02.384" endtime="20161109 20:02:02.384"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.381" endtime="20161109 20:02:02.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:02.389">${port_num} = 22</msg>
<status status="PASS" starttime="20161109 20:02:02.389" endtime="20161109 20:02:02.389"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:02.389">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161109 20:02:02.389" endtime="20161109 20:02:02.389"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:02.390">${https_num} = 443</msg>
<status status="PASS" starttime="20161109 20:02:02.390" endtime="20161109 20:02:02.390"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:02.391">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161109 20:02:02.390" endtime="20161109 20:02:02.391"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.387" endtime="20161109 20:02:02.391"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.384" endtime="20161109 20:02:02.391"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:02:02.392">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161109 20:02:02.391" endtime="20161109 20:02:02.392"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:02.392">${has_port} = False</msg>
<status status="PASS" starttime="20161109 20:02:02.391" endtime="20161109 20:02:02.392"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:02.395" endtime="20161109 20:02:02.396"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:02.396" endtime="20161109 20:02:02.396"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.395" endtime="20161109 20:02:02.396"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.392" endtime="20161109 20:02:02.396"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:02.397">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 20:02:07.711">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161109 20:02:02.396" endtime="20161109 20:02:07.711"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.379" endtime="20161109 20:02:07.711"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:07.713">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20161109 20:02:07.712" endtime="20161109 20:02:07.713"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:07.715">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" starttime="20161109 20:02:07.714" endtime="20161109 20:02:07.715"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:07.720">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20161109 20:02:07.715" endtime="20161109 20:02:07.720"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:07.731" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:07.730" endtime="20161109 20:02:07.731"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.730" endtime="20161109 20:02:07.731"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:07.733" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:07.732" endtime="20161109 20:02:07.733"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.731" endtime="20161109 20:02:07.733"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:07.734" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:07.733" endtime="20161109 20:02:07.734"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.733" endtime="20161109 20:02:07.734"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:07.735" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:07.735" endtime="20161109 20:02:07.735"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.734" endtime="20161109 20:02:07.735"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.729" endtime="20161109 20:02:07.736"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.722" endtime="20161109 20:02:07.736"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:07.736">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161109 20:02:07.815">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:02:07.815">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M     35.6...</msg>
<msg level="INFO" timestamp="20161109 20:02:07.815">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:02:07.736" endtime="20161109 20:02:07.815"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:07.820" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:07.819" endtime="20161109 20:02:07.820"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.819" endtime="20161109 20:02:07.820"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.816" endtime="20161109 20:02:07.820"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.721" endtime="20161109 20:02:07.820"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.721" endtime="20161109 20:02:07.820"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:07.825" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:07.825" endtime="20161109 20:02:07.825"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.824" endtime="20161109 20:02:07.825"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:07.826" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:07.826" endtime="20161109 20:02:07.826"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.825" endtime="20161109 20:02:07.826"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:07.827" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:07.827" endtime="20161109 20:02:07.828"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.827" endtime="20161109 20:02:07.828"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:07.829" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:07.828" endtime="20161109 20:02:07.829"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.828" endtime="20161109 20:02:07.829"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.824" endtime="20161109 20:02:07.829"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.821" endtime="20161109 20:02:07.829"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:07.829">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161109 20:02:08.292">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:02:08.293">${stdout} = Linux barreleye 4.7.10-c5682cbc3542add705e35152329436067bb1f94a #1 Tue Nov 1 05:44:54 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161109 20:02:08.293">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:02:07.829" endtime="20161109 20:02:08.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.300" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:08.299" endtime="20161109 20:02:08.300"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.298" endtime="20161109 20:02:08.300"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.293" endtime="20161109 20:02:08.300"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.820" endtime="20161109 20:02:08.300"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.820" endtime="20161109 20:02:08.301"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.309" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:08.308" endtime="20161109 20:02:08.309"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.307" endtime="20161109 20:02:08.309"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.310" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:08.310" endtime="20161109 20:02:08.310"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.309" endtime="20161109 20:02:08.310"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.311" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:08.311" endtime="20161109 20:02:08.311"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.310" endtime="20161109 20:02:08.312"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.313" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:08.312" endtime="20161109 20:02:08.313"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.312" endtime="20161109 20:02:08.313"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.306" endtime="20161109 20:02:08.313"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.302" endtime="20161109 20:02:08.313"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:08.313">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161109 20:02:08.394">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:02:08.394">${stdout} =  20:59:23 up  1:02,  load average: 2.04, 1.25, 1.02</msg>
<msg level="INFO" timestamp="20161109 20:02:08.394">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:02:08.313" endtime="20161109 20:02:08.394"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.398" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:08.398" endtime="20161109 20:02:08.398"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.397" endtime="20161109 20:02:08.399"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.394" endtime="20161109 20:02:08.399"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.301" endtime="20161109 20:02:08.399"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.301" endtime="20161109 20:02:08.399"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.720" endtime="20161109 20:02:08.399"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.713" endtime="20161109 20:02:08.399"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.713" endtime="20161109 20:02:08.399"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:08.400">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" starttime="20161109 20:02:08.400" endtime="20161109 20:02:08.400"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.401">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20161109 20:02:08.400" endtime="20161109 20:02:08.401"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.406" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:08.405" endtime="20161109 20:02:08.406"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.405" endtime="20161109 20:02:08.406"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.407" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:08.407" endtime="20161109 20:02:08.407"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.406" endtime="20161109 20:02:08.407"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.408" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:08.408" endtime="20161109 20:02:08.408"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.407" endtime="20161109 20:02:08.408"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:08.409" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:08.409" endtime="20161109 20:02:08.409"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.409" endtime="20161109 20:02:08.410"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.404" endtime="20161109 20:02:08.410"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.402" endtime="20161109 20:02:08.410"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:08.410">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161109 20:02:10.039">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:02:10.039">${stdout} =  = HOST_BOOTING</msg>
<msg level="INFO" timestamp="20161109 20:02:10.039">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:02:08.410" endtime="20161109 20:02:10.040"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.049" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.048" endtime="20161109 20:02:10.049"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.046" endtime="20161109 20:02:10.050"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.040" endtime="20161109 20:02:10.050"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.401" endtime="20161109 20:02:10.050"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.401" endtime="20161109 20:02:10.050"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.401" endtime="20161109 20:02:10.050"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.399" endtime="20161109 20:02:10.050"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:08.399" endtime="20161109 20:02:10.050"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:10.052">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" starttime="20161109 20:02:10.051" endtime="20161109 20:02:10.052"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.053">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20161109 20:02:10.052" endtime="20161109 20:02:10.053"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.060" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.059" endtime="20161109 20:02:10.060"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.059" endtime="20161109 20:02:10.060"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.061" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.061" endtime="20161109 20:02:10.061"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.060" endtime="20161109 20:02:10.061"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.062" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.062" endtime="20161109 20:02:10.062"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.061" endtime="20161109 20:02:10.062"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.063" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.063" endtime="20161109 20:02:10.064"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.063" endtime="20161109 20:02:10.064"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.058" endtime="20161109 20:02:10.064"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.054" endtime="20161109 20:02:10.064"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:10.064">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161109 20:02:10.247">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:02:10.247">${stdout} = 20161109184107</msg>
<msg level="INFO" timestamp="20161109 20:02:10.247">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:02:10.064" endtime="20161109 20:02:10.248"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.256" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.256" endtime="20161109 20:02:10.257"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.254" endtime="20161109 20:02:10.257"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.248" endtime="20161109 20:02:10.257"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.053" endtime="20161109 20:02:10.257"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.053" endtime="20161109 20:02:10.257"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.263" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.262" endtime="20161109 20:02:10.263"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.262" endtime="20161109 20:02:10.263"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.264" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.264" endtime="20161109 20:02:10.264"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.263" endtime="20161109 20:02:10.264"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.265" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.265" endtime="20161109 20:02:10.265"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.264" endtime="20161109 20:02:10.266"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.266" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.266" endtime="20161109 20:02:10.267"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.266" endtime="20161109 20:02:10.267"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.261" endtime="20161109 20:02:10.267"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.259" endtime="20161109 20:02:10.267"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:10.267">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161109 20:02:10.363">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:02:10.363">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-213"
VERSION_ID="v1.99.0-213-g00f5d1f-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161109 20:02:10.363">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:02:10.267" endtime="20161109 20:02:10.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.368" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt"&gt;/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest/20161109200128888907_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.367" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.367" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.364" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.258" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.257" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.053" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.051" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.050" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:07.713" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.379" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.379" endtime="20161109 20:02:10.368"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.378" endtime="20161109 20:02:10.369"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:02.378" endtime="20161109 20:02:10.369"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.373">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20161109 20:02:10.370" endtime="20161109 20:02:10.373"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.370" endtime="20161109 20:02:10.373"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.369" endtime="20161109 20:02:10.373"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.369" endtime="20161109 20:02:10.373"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.369" endtime="20161109 20:02:10.373"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.950" endtime="20161109 20:02:10.373"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.949" endtime="20161109 20:02:10.373"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.949" endtime="20161109 20:02:10.373"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.949" endtime="20161109 20:02:10.373"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.948" endtime="20161109 20:02:10.373"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:10.374">${cur_time} = 2016-11-09 20:02:10:374045</msg>
<status status="PASS" starttime="20161109 20:02:10.374" endtime="20161109 20:02:10.374"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:10.375">${cur_time} = 20161109200210374045</msg>
<status status="PASS" starttime="20161109 20:02:10.374" endtime="20161109 20:02:10.375"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:10.375">${cur_time} = 20161109200210374045</msg>
<status status="PASS" starttime="20161109 20:02:10.374" endtime="20161109 20:02:10.375"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:10.375" endtime="20161109 20:02:10.375"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.376">
/tmp/root/31414/obmc-robot/logs/20161109200128888907_TestsTestBasicPoweron/20161109200128888907_powerontest</msg>
<status status="PASS" starttime="20161109 20:02:10.376" endtime="20161109 20:02:10.376"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.888" endtime="20161109 20:02:10.376"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.884" endtime="20161109 20:02:10.376"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.377" html="yes">Directory '&lt;a href="file:///tmp/root/31414/obmc-robot/logs"&gt;/tmp/root/31414/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161109 20:02:10.377" endtime="20161109 20:02:10.377"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.378" html="yes">File '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161109 20:02:10.378" endtime="20161109 20:02:10.378"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:10.378">${exist} = True</msg>
<status status="PASS" starttime="20161109 20:02:10.377" endtime="20161109 20:02:10.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:10.378" endtime="20161109 20:02:10.382"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:10.383">${cur_time} = 2016-11-09 20:02:10:382839</msg>
<status status="PASS" starttime="20161109 20:02:10.383" endtime="20161109 20:02:10.383"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:10.383">${cur_time} = 20161109200210382839</msg>
<status status="PASS" starttime="20161109 20:02:10.383" endtime="20161109 20:02:10.383"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:10.384">${cur_time} = 20161109200210382839</msg>
<status status="PASS" starttime="20161109 20:02:10.382" endtime="20161109 20:02:10.384"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.385" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:10.384" endtime="20161109 20:02:10.385"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.376" endtime="20161109 20:02:10.385"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.883" endtime="20161109 20:02:10.385"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:02:10.387">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161109 20:02:10.386" endtime="20161109 20:02:10.387"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:10.387">${has_host} = False</msg>
<status status="PASS" starttime="20161109 20:02:10.386" endtime="20161109 20:02:10.387"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:10.390" endtime="20161109 20:02:10.390"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.387" endtime="20161109 20:02:10.391"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:10.395">${port_num} = 22</msg>
<status status="PASS" starttime="20161109 20:02:10.394" endtime="20161109 20:02:10.395"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:10.395">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161109 20:02:10.395" endtime="20161109 20:02:10.395"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:10.396">${https_num} = 443</msg>
<status status="PASS" starttime="20161109 20:02:10.395" endtime="20161109 20:02:10.396"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.396">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161109 20:02:10.396" endtime="20161109 20:02:10.396"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.393" endtime="20161109 20:02:10.396"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.391" endtime="20161109 20:02:10.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:02:10.397">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161109 20:02:10.397" endtime="20161109 20:02:10.398"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:10.398">${has_port} = False</msg>
<status status="PASS" starttime="20161109 20:02:10.397" endtime="20161109 20:02:10.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:10.401" endtime="20161109 20:02:10.402"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:10.402" endtime="20161109 20:02:10.402"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.401" endtime="20161109 20:02:10.402"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.398" endtime="20161109 20:02:10.402"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:10.403">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 20:02:12.731">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161109 20:02:10.403" endtime="20161109 20:02:12.732"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:10.385" endtime="20161109 20:02:12.732"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:12.732">Executing command 'ls /tmp/obmc-console.log-20161109194606533286_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161109 20:02:12.841">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:02:12.841">${pid} = 1087</msg>
<msg level="INFO" timestamp="20161109 20:02:12.841">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:02:12.732" endtime="20161109 20:02:12.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:12.841">Length is 0</msg>
<status status="PASS" starttime="20161109 20:02:12.841" endtime="20161109 20:02:12.841"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:12.842">Executing command 'ps ax | grep 1087 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161109 20:02:13.190">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:02:13.191">${rc} = 0</msg>
<status status="PASS" starttime="20161109 20:02:12.842" endtime="20161109 20:02:13.191"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:13.191" endtime="20161109 20:02:13.200"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:13.201">Executing command 'kill -s KILL 1087'.</msg>
<msg level="INFO" timestamp="20161109 20:02:13.273">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:02:13.273">${console} = </msg>
<msg level="INFO" timestamp="20161109 20:02:13.273">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:02:13.201" endtime="20161109 20:02:13.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:13.274">Length is 0</msg>
<status status="PASS" starttime="20161109 20:02:13.274" endtime="20161109 20:02:13.274"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:13.274">Current Client PID:1087</msg>
<status status="PASS" starttime="20161109 20:02:13.274" endtime="20161109 20:02:13.274"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:13.275">Executing command 'cat /tmp/obmc-console.log-20161109194606533286_1087'.</msg>
<msg level="INFO" timestamp="20161109 20:02:13.433">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161109 20:02:13.433">${console} =   3.57325|ISTEP  6. 3
  4.02315|ISTEP  6. 4
  4.02376|ISTEP  6. 5</msg>
<msg level="INFO" timestamp="20161109 20:02:13.433">${stderr} = </msg>
<status status="PASS" starttime="20161109 20:02:13.274" endtime="20161109 20:02:13.433"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:13.434">Length is 0</msg>
<status status="PASS" starttime="20161109 20:02:13.433" endtime="20161109 20:02:13.434"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:13.434">${sol_log} =   3.57325|ISTEP  6. 3
  4.02315|ISTEP  6. 4
  4.02376|ISTEP  6. 5</msg>
<status status="PASS" starttime="20161109 20:02:10.385" endtime="20161109 20:02:13.434"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:13.435">  3.57325|ISTEP  6. 3
  4.02315|ISTEP  6. 4
  4.02376|ISTEP  6. 5</msg>
<status status="PASS" starttime="20161109 20:02:13.435" endtime="20161109 20:02:13.435"></status>
</kw>
<status status="PASS" starttime="20161109 20:01:28.882" endtime="20161109 20:02:13.435"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status status="FAIL" starttime="20161109 19:46:03.066" critical="yes" endtime="20161109 20:02:13.435">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status status="FAIL" starttime="20161109 19:46:03.040" endtime="20161109 20:02:13.436"></status>
</suite>
<suite id="s1-s4" name="Test Eventlog" source="/tmp/root/31414/obmc-robot/tests/test_eventlog.robot">
<kw type="setup" library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:02:13.462">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20161109 20:02:13.461" endtime="20161109 20:02:13.462"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:13.462">${has_host} = False</msg>
<status status="PASS" starttime="20161109 20:02:13.461" endtime="20161109 20:02:13.462"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:13.465" endtime="20161109 20:02:13.465"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:13.462" endtime="20161109 20:02:13.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:13.469">${port_num} = 22</msg>
<status status="PASS" starttime="20161109 20:02:13.468" endtime="20161109 20:02:13.469"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:13.469">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20161109 20:02:13.469" endtime="20161109 20:02:13.469"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:13.470">${https_num} = 443</msg>
<status status="PASS" starttime="20161109 20:02:13.470" endtime="20161109 20:02:13.470"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:13.471">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" starttime="20161109 20:02:13.470" endtime="20161109 20:02:13.471"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:13.468" endtime="20161109 20:02:13.471"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:13.465" endtime="20161109 20:02:13.471"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161109 20:02:13.472">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20161109 20:02:13.472" endtime="20161109 20:02:13.473"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:13.473">${has_port} = False</msg>
<status status="PASS" starttime="20161109 20:02:13.472" endtime="20161109 20:02:13.473"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:13.479" endtime="20161109 20:02:13.480"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:13.480" endtime="20161109 20:02:13.480"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:13.479" endtime="20161109 20:02:13.480"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:13.473" endtime="20161109 20:02:13.480"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:13.481">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161109 20:02:15.666">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" starttime="20161109 20:02:13.481" endtime="20161109 20:02:15.667"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:13.460" endtime="20161109 20:02:15.667"></status>
</kw>
<test id="s1-s4-t1" name="clear any logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:15.670">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status status="PASS" starttime="20161109 20:02:15.669" endtime="20161109 20:02:15.670"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:15.671">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:02:15.670" endtime="20161109 20:02:15.671"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:15.671" endtime="20161109 20:02:15.672"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:15.674">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:02:15.673" endtime="20161109 20:02:15.674"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:15.675">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:02:15.675" endtime="20161109 20:02:15.676"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:15.674" endtime="20161109 20:02:15.676"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:15.672" endtime="20161109 20:02:15.676"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:15.677">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:02:15.677" endtime="20161109 20:02:15.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:15.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:02:15.678" endtime="20161109 20:02:15.679"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:15.679">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:02:15.679" endtime="20161109 20:02:15.679"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:15.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:02:15.680" endtime="20161109 20:02:15.680"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.014">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:02:16.014">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:15.680" endtime="20161109 20:02:16.014"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:16.015" endtime="20161109 20:02:16.015"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:15.676" endtime="20161109 20:02:16.015"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.300">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:02:16.301">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:16.016" endtime="20161109 20:02:16.301"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.302">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:16.302" endtime="20161109 20:02:16.302"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.304">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:16.303" endtime="20161109 20:02:16.304"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.303" endtime="20161109 20:02:16.304"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.301" endtime="20161109 20:02:16.304"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:16.305">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:15.668" endtime="20161109 20:02:16.305"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.306">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:16.305" endtime="20161109 20:02:16.306"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.307">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" starttime="20161109 20:02:16.307" endtime="20161109 20:02:16.307"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.310">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:02:16.309" endtime="20161109 20:02:16.310"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.311">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:02:16.311" endtime="20161109 20:02:16.311"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.310" endtime="20161109 20:02:16.311"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.308" endtime="20161109 20:02:16.312"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.313">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:02:16.312" endtime="20161109 20:02:16.314"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.314">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:02:16.314" endtime="20161109 20:02:16.314"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.315">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:02:16.315" endtime="20161109 20:02:16.315"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.316">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:02:16.316" endtime="20161109 20:02:16.316"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.847">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:02:16.847">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:16.317" endtime="20161109 20:02:16.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:16.847" endtime="20161109 20:02:16.848"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.312" endtime="20161109 20:02:16.848"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.905">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161109 20:02:16.906">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:16.848" endtime="20161109 20:02:16.906"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.907">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:16.906" endtime="20161109 20:02:16.907"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.907">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:16.907" endtime="20161109 20:02:16.907"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.907" endtime="20161109 20:02:16.908"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.906" endtime="20161109 20:02:16.908"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:16.908">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:16.306" endtime="20161109 20:02:16.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.909">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:02:16.909">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:02:16.909">${json} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:02:16.908" endtime="20161109 20:02:16.909"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.909">Length is 0</msg>
<status status="PASS" starttime="20161109 20:02:16.909" endtime="20161109 20:02:16.909"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="Log FFDC">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:16.910" endtime="20161109 20:02:16.912"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.913" html="yes">Directory '&lt;a href="file:///tmp/root/31414/obmc-robot/logs"&gt;/tmp/root/31414/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161109 20:02:16.913" endtime="20161109 20:02:16.913"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.914" html="yes">File '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161109 20:02:16.914" endtime="20161109 20:02:16.914"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:16.914">${exist} = True</msg>
<status status="PASS" starttime="20161109 20:02:16.913" endtime="20161109 20:02:16.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:16.914" endtime="20161109 20:02:16.917"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.918">${cur_time} = 2016-11-09 20:02:16:917469</msg>
<status status="PASS" starttime="20161109 20:02:16.917" endtime="20161109 20:02:16.918"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.918">${cur_time} = 20161109200216917469</msg>
<status status="PASS" starttime="20161109 20:02:16.918" endtime="20161109 20:02:16.918"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:16.918">${cur_time} = 20161109200216917469</msg>
<status status="PASS" starttime="20161109 20:02:16.917" endtime="20161109 20:02:16.918"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.919" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:16.919" endtime="20161109 20:02:16.919"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.913" endtime="20161109 20:02:16.919"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.910" endtime="20161109 20:02:16.920"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status status="PASS" starttime="20161109 20:02:15.667" critical="yes" endtime="20161109 20:02:16.920"></status>
</test>
<test id="s1-s4-t2" name="write a log">
<kw name="create a test log">
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.921">${data} = {u'data': []}</msg>
<status status="PASS" starttime="20161109 20:02:16.921" endtime="20161109 20:02:16.921"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.922">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status status="PASS" starttime="20161109 20:02:16.922" endtime="20161109 20:02:16.922"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.922">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:02:16.922" endtime="20161109 20:02:16.922"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:16.923" endtime="20161109 20:02:16.923"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.924">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:02:16.923" endtime="20161109 20:02:16.924"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.925">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20161109 20:02:16.925" endtime="20161109 20:02:16.925"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.924" endtime="20161109 20:02:16.925"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.923" endtime="20161109 20:02:16.926"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:16.926">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:02:16.926" endtime="20161109 20:02:16.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:02:16.927" endtime="20161109 20:02:16.927"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.928">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:02:16.927" endtime="20161109 20:02:16.928"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:16.928">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:02:16.928" endtime="20161109 20:02:16.928"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.263">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:02:17.263">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:16.929" endtime="20161109 20:02:17.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:17.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:17.264" endtime="20161109 20:02:17.265"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.926" endtime="20161109 20:02:17.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.556">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:02:17.556">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:17.265" endtime="20161109 20:02:17.556"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.558">${msg} = Response code:200, Content:{
  "data": 218, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:17.557" endtime="20161109 20:02:17.558"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:17.560">Response code:200, Content:{
  "data": 218, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:17.560" endtime="20161109 20:02:17.560"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:17.559" endtime="20161109 20:02:17.561"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:17.557" endtime="20161109 20:02:17.561"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:17.561">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:16.921" endtime="20161109 20:02:17.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:17.562">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:17.561" endtime="20161109 20:02:17.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.563">To JSON using : content={
  "data": 218, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:02:17.563">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:02:17.563">${json} = {u'data': 218, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:02:17.562" endtime="20161109 20:02:17.563"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.564">${LOGID} = 218</msg>
<status status="PASS" starttime="20161109 20:02:17.564" endtime="20161109 20:02:17.564"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.565">${uri} = /org/openbmc/records/events/218</msg>
<status status="PASS" starttime="20161109 20:02:17.564" endtime="20161109 20:02:17.565"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:16.920" endtime="20161109 20:02:17.565"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="Log FFDC">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:17.566" endtime="20161109 20:02:17.571"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:17.572" html="yes">Directory '&lt;a href="file:///tmp/root/31414/obmc-robot/logs"&gt;/tmp/root/31414/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161109 20:02:17.572" endtime="20161109 20:02:17.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:17.573" html="yes">File '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161109 20:02:17.573" endtime="20161109 20:02:17.573"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:17.574">${exist} = True</msg>
<status status="PASS" starttime="20161109 20:02:17.573" endtime="20161109 20:02:17.574"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:17.574" endtime="20161109 20:02:17.576"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.577">${cur_time} = 2016-11-09 20:02:17:576893</msg>
<status status="PASS" starttime="20161109 20:02:17.577" endtime="20161109 20:02:17.577"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.578">${cur_time} = 20161109200217576893</msg>
<status status="PASS" starttime="20161109 20:02:17.577" endtime="20161109 20:02:17.578"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:17.578">${cur_time} = 20161109200217576893</msg>
<status status="PASS" starttime="20161109 20:02:17.576" endtime="20161109 20:02:17.578"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:17.579" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:17.578" endtime="20161109 20:02:17.579"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:17.571" endtime="20161109 20:02:17.579"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:17.566" endtime="20161109 20:02:17.579"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status status="PASS" starttime="20161109 20:02:16.920" critical="yes" endtime="20161109 20:02:17.579"></status>
</test>
<kw type="teardown" library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20161109 20:02:17.582" endtime="20161109 20:02:17.931"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status status="PASS" starttime="20161109 20:02:13.438" endtime="20161109 20:02:17.931"></status>
</suite>
<suite id="s1-s5" name="Test Obmcrest" source="/tmp/root/31414/obmc-robot/tests/test_obmcrest.robot">
<test id="s1-s5-t1" name="Good connection for testing">
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.964">${base_uri} = /</msg>
<status status="PASS" starttime="20161109 20:02:17.964" endtime="20161109 20:02:17.964"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.966">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:02:17.965" endtime="20161109 20:02:17.966"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:17.966">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:02:17.966" endtime="20161109 20:02:17.967"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:17.966" endtime="20161109 20:02:17.967"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:17.965" endtime="20161109 20:02:17.967"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:17.968">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:02:17.968" endtime="20161109 20:02:17.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.970">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:02:17.969" endtime="20161109 20:02:17.970"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.971">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:02:17.970" endtime="20161109 20:02:17.971"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:17.972">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:02:17.971" endtime="20161109 20:02:17.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:18.903">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:02:18.903">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:17.972" endtime="20161109 20:02:18.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:18.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:18.904" endtime="20161109 20:02:18.905"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:17.967" endtime="20161109 20:02:18.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.012">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161109 20:02:19.013">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:18.905" endtime="20161109 20:02:19.013"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.015">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:19.014" endtime="20161109 20:02:19.015"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.018">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:19.017" endtime="20161109 20:02:19.018"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.015" endtime="20161109 20:02:19.018"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.013" endtime="20161109 20:02:19.018"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:19.019">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:17.964" endtime="20161109 20:02:19.019"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.020">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:19.019" endtime="20161109 20:02:19.020"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.021">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:02:19.021">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:02:19.021">${content} = {u'data': [u'/org'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:02:19.020" endtime="20161109 20:02:19.021"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:19.021">${content} = [u'/org']</msg>
<status status="PASS" starttime="20161109 20:02:17.963" endtime="20161109 20:02:19.022"></status>
</kw>
<kw library="Collections" name="Get From List">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${content}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${c}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.022">${c} = /org</msg>
<status status="PASS" starttime="20161109 20:02:19.022" endtime="20161109 20:02:19.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${c}</arg>
<arg>/org</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:19.023" endtime="20161109 20:02:19.023"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="Log FFDC">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:19.024" endtime="20161109 20:02:19.029"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.030" html="yes">Directory '&lt;a href="file:///tmp/root/31414/obmc-robot/logs"&gt;/tmp/root/31414/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161109 20:02:19.029" endtime="20161109 20:02:19.030"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.030" html="yes">File '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161109 20:02:19.030" endtime="20161109 20:02:19.031"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:19.031">${exist} = True</msg>
<status status="PASS" starttime="20161109 20:02:19.030" endtime="20161109 20:02:19.031"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:19.031" endtime="20161109 20:02:19.033"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.034">${cur_time} = 2016-11-09 20:02:19:034003</msg>
<status status="PASS" starttime="20161109 20:02:19.034" endtime="20161109 20:02:19.034"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.035">${cur_time} = 20161109200219034003</msg>
<status status="PASS" starttime="20161109 20:02:19.034" endtime="20161109 20:02:19.035"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:19.035">${cur_time} = 20161109200219034003</msg>
<status status="PASS" starttime="20161109 20:02:19.033" endtime="20161109 20:02:19.035"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.036" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:19.035" endtime="20161109 20:02:19.036"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.029" endtime="20161109 20:02:19.036"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.023" endtime="20161109 20:02:19.036"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>Good_connection_for_testing</tag>
</tags>
<status status="PASS" starttime="20161109 20:02:17.963" critical="yes" endtime="20161109 20:02:19.036"></status>
</test>
<test id="s1-s5-t2" name="get directory listing /">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.038">${base_uri} = /</msg>
<status status="PASS" starttime="20161109 20:02:19.037" endtime="20161109 20:02:19.038"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.039">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:02:19.038" endtime="20161109 20:02:19.039"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.040">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status status="PASS" starttime="20161109 20:02:19.040" endtime="20161109 20:02:19.040"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.039" endtime="20161109 20:02:19.040"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.038" endtime="20161109 20:02:19.040"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.041">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20161109 20:02:19.041" endtime="20161109 20:02:19.042"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.042">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20161109 20:02:19.042" endtime="20161109 20:02:19.042"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.043">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20161109 20:02:19.042" endtime="20161109 20:02:19.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.043">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20161109 20:02:19.043" endtime="20161109 20:02:19.043"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.666">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161109 20:02:19.666">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:19.043" endtime="20161109 20:02:19.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.667">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:19.667" endtime="20161109 20:02:19.668"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.041" endtime="20161109 20:02:19.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.728">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161109 20:02:19.728">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:19.668" endtime="20161109 20:02:19.729"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.730">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:19.730" endtime="20161109 20:02:19.730"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.732">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20161109 20:02:19.731" endtime="20161109 20:02:19.732"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.731" endtime="20161109 20:02:19.732"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.729" endtime="20161109 20:02:19.732"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:19.733">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20161109 20:02:19.037" endtime="20161109 20:02:19.733"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20161109 20:02:19.733" endtime="20161109 20:02:19.734"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.734">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161109 20:02:19.734">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161109 20:02:19.734">${json} = {u'data': [u'/org'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20161109 20:02:19.734" endtime="20161109 20:02:19.735"></status>
</kw>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${json['data']}</arg>
<arg>/org</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:19.735" endtime="20161109 20:02:19.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json['status']}</arg>
<arg>ok</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:19.736" endtime="20161109 20:02:19.736"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="Log FFDC">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:19.737" endtime="20161109 20:02:19.741"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.742" html="yes">Directory '&lt;a href="file:///tmp/root/31414/obmc-robot/logs"&gt;/tmp/root/31414/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20161109 20:02:19.741" endtime="20161109 20:02:19.742"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.743" html="yes">File '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20161109 20:02:19.743" endtime="20161109 20:02:19.743"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:19.743">${exist} = True</msg>
<status status="PASS" starttime="20161109 20:02:19.742" endtime="20161109 20:02:19.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20161109 20:02:19.743" endtime="20161109 20:02:19.746"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.747">${cur_time} = 2016-11-09 20:02:19:746720</msg>
<status status="PASS" starttime="20161109 20:02:19.747" endtime="20161109 20:02:19.747"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161109 20:02:19.747">${cur_time} = 20161109200219746720</msg>
<status status="PASS" starttime="20161109 20:02:19.747" endtime="20161109 20:02:19.747"></status>
</kw>
<msg level="INFO" timestamp="20161109 20:02:19.748">${cur_time} = 20161109200219746720</msg>
<status status="PASS" starttime="20161109 20:02:19.746" endtime="20161109 20:02:19.748"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161109 20:02:19.748" html="yes">Appended to file '&lt;a href="file:///tmp/root/31414/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31414/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20161109 20:02:19.748" endtime="20161109 20:02:19.749"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.741" endtime="20161109 20:02:19.749"></status>
</kw>
<status status="PASS" starttime="20161109 20:02:19.737" endtime="20161109 20:02:19.749"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>get_directory_listing</tag>
</tags>
<status status="PASS" starttime="20161109 20:02:19.036" critical="yes" endtime="20161109 20:02:19.749"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status status="PASS" starttime="20161109 20:02:17.937" endtime="20161109 20:02:19.750"></status>
</suite>
<status status="FAIL" starttime="20161109 19:45:48.281" endtime="20161109 20:02:19.755"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="7">Critical Tests</stat>
<stat fail="1" pass="7">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="0" pass="4">CI</stat>
<stat fail="0" pass="1">clear_any_logs</stat>
<stat fail="0" pass="1">Create_error_log_on_single_FRU</stat>
<stat fail="0" pass="1">Delete_error_log</stat>
<stat fail="0" pass="1">get_directory_listing</stat>
<stat fail="0" pass="1">Good_connection_for_testing</stat>
<stat fail="1" pass="0">power_on_test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
<stat fail="0" pass="1">write_a_log</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="7">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="0" id="s1-s2" name="Test Association" pass="2">Tests.Test Association</stat>
<stat fail="1" id="s1-s3" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
<stat fail="0" id="s1-s4" name="Test Eventlog" pass="2">Tests.Test Eventlog</stat>
<stat fail="0" id="s1-s5" name="Test Obmcrest" pass="2">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
